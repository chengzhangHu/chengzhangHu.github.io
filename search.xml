<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>2025 学习聚焦</title>
      <link href="/2025/12/30/do_at_workspace/%E4%B8%93%E4%B8%9A%E5%8C%96%E8%81%9A%E7%84%A6/"/>
      <url>/2025/12/30/do_at_workspace/%E4%B8%93%E4%B8%9A%E5%8C%96%E8%81%9A%E7%84%A6/</url>
      
        <content type="html"><![CDATA[<h3 id="一、筑基：云原生与智能测试核心能力"><a href="#一、筑基：云原生与智能测试核心能力" class="headerlink" title="一、筑基：云原生与智能测试核心能力"></a>一、筑基：云原生与智能测试核心能力</h3><h4 id="1️⃣-云原生与Kubernetes深度掌控"><a href="#1️⃣-云原生与Kubernetes深度掌控" class="headerlink" title="1️⃣ 云原生与Kubernetes深度掌控"></a>1️⃣ <strong>云原生与Kubernetes深度掌控</strong></h4><ul><li><strong>K8s核心原理</strong>  <ul><li>精通Pod&#x2F;Deployment&#x2F;Service&#x2F;Ingress对象  </li><li>深入理解Operator模式（开发CRD管理测试集群）  </li><li>网络策略（Calico&#x2F;Flannel）、存储卷（PV&#x2F;PVC）  </li><li><strong>重点实践</strong>：部署前端测试环境（Selenium Grid&#x2F;Cypress）到K8s集群</li></ul></li><li><strong>服务网格与观测性</strong>  <ul><li>Istio&#x2F;Linkerd实现测试流量染色  </li><li>集成Prometheus+Grafana监控测试执行指标  </li><li>通过Jaeger实现分布式测试链路追踪</li></ul></li><li><strong>GitOps工作流</strong>  <ul><li>Argo CD自动化部署测试套件  </li><li>Tekton构建测试流水线（动态生成测试容器）</li></ul></li></ul><h4 id="2️⃣-AI驱动的E2E测试革命"><a href="#2️⃣-AI驱动的E2E测试革命" class="headerlink" title="2️⃣ AI驱动的E2E测试革命"></a>2️⃣ <strong>AI驱动的E2E测试革命</strong></h4><ul><li><strong>智能测试生成</strong>  <ul><li>使用<strong>Testim.io</strong>或<strong>Applitools</strong>的AI定位器  </li><li>基于<strong>Puppeteer Recorder</strong>生成自适应脚本</li></ul></li><li><strong>视觉验证AI化</strong>  <ul><li>Applitools Ultrafast Grid：跨浏览器视觉测试  </li><li>集成<strong>OpenCV</strong>实现动态内容容差识别</li></ul></li><li><strong>自愈性测试</strong>  <ul><li>开发AI模型（Python+TensorFlow）预测元素定位失效  </li><li>使用<strong>Healenium</strong>自动修复失效定位器</li></ul></li></ul><hr><h3 id="二、数据引擎：构建测试大数据分析平台"><a href="#二、数据引擎：构建测试大数据分析平台" class="headerlink" title="二、数据引擎：构建测试大数据分析平台"></a>二、数据引擎：构建测试大数据分析平台</h3><h4 id="1️⃣-测试数据湖架构"><a href="#1️⃣-测试数据湖架构" class="headerlink" title="1️⃣ 测试数据湖架构"></a>1️⃣ <strong>测试数据湖架构</strong></h4><table><thead><tr><th>组件</th><th>作用</th><th>技术选型</th></tr></thead><tbody><tr><td><strong>数据采集层</strong></td><td>收集测试日志&#x2F;性能指标&#x2F;截图</td><td>Fluentd + OpenTelemetry</td></tr><tr><td><strong>存储层</strong></td><td>存储海量非结构化测试数据</td><td>MinIO（兼容S3） + Parquet</td></tr><tr><td><strong>流处理层</strong></td><td>实时分析测试失败事件</td><td>Kafka + Flink</td></tr><tr><td><strong>批处理层</strong></td><td>历史趋势分析</td><td>Spark SQL + Delta Lake</td></tr></tbody></table><h4 id="2️⃣-关键分析场景实现"><a href="#2️⃣-关键分析场景实现" class="headerlink" title="2️⃣ 关键分析场景实现"></a>2️⃣ <strong>关键分析场景实现</strong></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">A[测试执行日志] --&gt; B&#123;Flink实时处理&#125;</span><br><span class="line">B --&gt; C[即时告警：失败率突增]</span><br><span class="line">B --&gt; D[智能根因分析]</span><br><span class="line">A --&gt; E[Spark批处理]</span><br><span class="line">E --&gt; F[测试稳定性热力图]</span><br><span class="line">E --&gt; G[元素稳定性评分模型]</span><br></pre></td></tr></table></figure><h4 id="3️⃣-分析工具链开发"><a href="#3️⃣-分析工具链开发" class="headerlink" title="3️⃣ 分析工具链开发"></a>3️⃣ <strong>分析工具链开发</strong></h4><ul><li><strong>自定义Dashboard</strong>  <ul><li>使用<strong>Apache Superset</strong>构建测试健康度看板  </li><li>集成<strong>ELK</strong>实现日志语义搜索</li></ul></li><li><strong>预测性分析</strong>  <ul><li>基于<strong>Prophet时间序列模型</strong>预测测试用例失败概率  </li><li>用<strong>XGBoost</strong>识别导致失败的代码变更模式</li></ul></li></ul><hr><h3 id="三、AI自动化闭环：从分析到行动"><a href="#三、AI自动化闭环：从分析到行动" class="headerlink" title="三、AI自动化闭环：从分析到行动"></a>三、AI自动化闭环：从分析到行动</h3><h4 id="1️⃣-智能测试调度系统"><a href="#1️⃣-智能测试调度系统" class="headerlink" title="1️⃣ 智能测试调度系统"></a>1️⃣ <strong>智能测试调度系统</strong></h4><ul><li><strong>动态测试策略引擎</strong>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 基于风险的测试选择算法</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">select_tests</span>(<span class="params">commit_changes, historical_data</span>):</span><br><span class="line">    risk_scores = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> commit_changes:</span><br><span class="line">        <span class="comment"># 计算文件历史缺陷密度</span></span><br><span class="line">        defect_density = calculate_defect_density(file)  </span><br><span class="line">        <span class="comment"># 关联影响测试用例</span></span><br><span class="line">        affected_tests = find_related_tests(file)  </span><br><span class="line">        <span class="keyword">for</span> test <span class="keyword">in</span> affected_tests:</span><br><span class="line">            risk_scores[test] = defect_density * test_failure_rate(test)</span><br><span class="line">    <span class="keyword">return</span> sort_by_risk(risk_scores)[:TOP_N]  <span class="comment"># 选择高风险测试</span></span><br></pre></td></tr></table></figure></li><li><strong>K8s资源弹性调度</strong>  <ul><li>使用<strong>Keda</strong>根据测试队列长度自动扩缩容Worker Pods</li></ul></li></ul><h4 id="2️⃣-自动化修复系统"><a href="#2️⃣-自动化修复系统" class="headerlink" title="2️⃣ 自动化修复系统"></a>2️⃣ <strong>自动化修复系统</strong></h4><ul><li><strong>AI辅助代码修复</strong>  <ul><li>集成<strong>GitHub Copilot</strong>生成测试修复代码  </li><li>基于<strong>LLM（Llama 3）</strong> 分析失败日志生成解决方案</li></ul></li><li><strong>视觉回归自愈</strong>  <ul><li>开发<strong>CV差分服务</strong>自动提交基线图片更新PR</li></ul></li></ul><hr><h3 id="四、专精突破方向"><a href="#四、专精突破方向" class="headerlink" title="四、专精突破方向"></a>四、专精突破方向</h3><h4 id="🧩-前沿技术融合"><a href="#🧩-前沿技术融合" class="headerlink" title="🧩 前沿技术融合"></a>🧩 <strong>前沿技术融合</strong></h4><table><thead><tr><th>领域</th><th>技术栈</th><th>应用场景</th></tr></thead><tbody><tr><td><strong>强化学习</strong></td><td>Ray + RLLib</td><td>动态优化测试执行顺序</td></tr><tr><td><strong>大语言模型</strong></td><td>LangChain + GPT-4 Turbo</td><td>用自然语言生成测试分析报告</td></tr><tr><td><strong>混沌工程</strong></td><td>Chaos Mesh</td><td>自动注入网络故障验证测试健壮性</td></tr></tbody></table><h4 id="🚀-效能提升关键指标"><a href="#🚀-效能提升关键指标" class="headerlink" title="🚀 效能提升关键指标"></a>🚀 <strong>效能提升关键指标</strong></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pie</span><br><span class="line">title 智能测试平台核心价值</span><br><span class="line">“测试执行时间降低” ： 35</span><br><span class="line">“缺陷逃逸率下降” ： 25</span><br><span class="line">“维护成本减少” ： 30</span><br><span class="line">“资源利用率提升” ： 10</span><br></pre></td></tr></table></figure><hr><h3 id="五、实战演进路线"><a href="#五、实战演进路线" class="headerlink" title="五、实战演进路线"></a>五、实战演进路线</h3><ol><li><p><strong>阶段1：云原生测试基础</strong>（1-2月）  </p><ul><li>在K8s部署Cypress测试集群  </li><li>实现Argo CD自动化测试流水线</li></ul></li><li><p><strong>阶段2：数据管道建设</strong>（2-3月）  </p><ul><li>搭建Flink实时分析测试日志  </li><li>构建测试健康度Superset看板</li></ul></li><li><p><strong>阶段3：AI智能层开发</strong>（3-6月）  </p><ul><li>开发测试用例风险预测模型  </li><li>实现视觉回归自愈模块</li></ul></li><li><p><strong>阶段4：自治系统演进</strong>（持续迭代）  </p><ul><li>测试策略动态优化引擎  </li><li>大语言测试报告生成器</li></ul></li></ol><hr><h3 id="六、关键认知升级"><a href="#六、关键认知升级" class="headerlink" title="六、关键认知升级"></a>六、关键认知升级</h3><ol><li><strong>测试即数据生产</strong>：每个测试执行都是数据采集过程  </li><li><strong>异常即特征</strong>：失败日志是训练AI模型的黄金数据  </li><li><strong>平台即产品</strong>：将测试平台作为数据产品迭代  </li><li><strong>AI不是替代</strong>：工程师转向训练AI的“测试策略师”角色</li></ol><blockquote><p><strong>突破点建议</strong>：从<strong>测试日志实时分析看板</strong>切入，用1个月时间构建最小可行数据产品（MVP），快速验证数据驱动价值。例如使用Flink处理Cypress JSON日志，在Grafana展示实时失败热点图，这将立即提升团队对数据化的感知。</p></blockquote><p>以下是为「<strong>E2E + Kubernetes + AI自动化测试</strong>」方向定制的<strong>具体学习路线</strong>及<strong>市场竞争力分析</strong>，含技术栈明细、时间规划和就业价值评估：</p><hr><h3 id="一、学习路线（分阶段-技术栈-产出）"><a href="#一、学习路线（分阶段-技术栈-产出）" class="headerlink" title="一、学习路线（分阶段+技术栈+产出）"></a>一、学习路线（分阶段+技术栈+产出）</h3><h4 id="📅-阶段1：云原生测试基础（2-3个月）"><a href="#📅-阶段1：云原生测试基础（2-3个月）" class="headerlink" title="📅 阶段1：云原生测试基础（2-3个月）"></a>📅 <strong>阶段1：云原生测试基础（2-3个月）</strong></h4><table><thead><tr><th>技术领域</th><th>具体技术栈</th><th>关键产出物</th></tr></thead><tbody><tr><td><strong>Kubernetes</strong></td><td>- Minikube&#x2F;Kind集群部署<br>- Pod&#x2F;Deployment&#x2F;Service配置<br>- Helm部署Cypress&#x2F;Selenium Grid</td><td>在K8s运行的Cypress测试集群</td></tr><tr><td><strong>CI&#x2F;CD管道</strong></td><td>- Argo CD部署测试套件<br>- Tekton构建测试流水线<br>- GitHub Actions集成</td><td>代码Push后自动触发K8s测试任务</td></tr><tr><td><strong>智能测试工具</strong></td><td>- Applitools视觉验证<br>- Testim.io AI定位器<br>- Healenium自愈测试</td><td>具备AI元素定位能力的E2E测试脚本</td></tr></tbody></table><h4 id="📅-阶段2：测试大数据平台搭建（3-4个月）"><a href="#📅-阶段2：测试大数据平台搭建（3-4个月）" class="headerlink" title="📅 阶段2：测试大数据平台搭建（3-4个月）"></a>📅 <strong>阶段2：测试大数据平台搭建（3-4个月）</strong></h4><table><thead><tr><th>技术领域</th><th>具体技术栈</th><th>关键产出物</th></tr></thead><tbody><tr><td><strong>数据采集</strong></td><td>- OpenTelemetry收集测试指标<br>- Fluentd日志聚合<br>- Prometheus监控测试执行</td><td>实时测试仪表盘（成功率&#x2F;耗时&#x2F;资源消耗）</td></tr><tr><td><strong>流处理</strong></td><td>- Kafka传输测试事件<br>- Flink实时计算失败率突增<br>- 动态告警（Slack&#x2F;钉钉）</td><td>测试失败5分钟内定位到代码变更责任人</td></tr><tr><td><strong>批处理分析</strong></td><td>- Spark SQL分析历史数据<br>- Delta Lake存储测试结果<br>- Hive元数据管理</td><td>测试用例稳定性评分模型（预测失败概率）</td></tr></tbody></table><h4 id="📅-阶段3：AI自动化闭环（4-6个月）"><a href="#📅-阶段3：AI自动化闭环（4-6个月）" class="headerlink" title="📅 阶段3：AI自动化闭环（4-6个月）"></a>📅 <strong>阶段3：AI自动化闭环（4-6个月）</strong></h4><table><thead><tr><th>技术领域</th><th>具体技术栈</th><th>关键产出物</th></tr></thead><tbody><tr><td><strong>智能调度</strong></td><td>- Keda自动扩缩容测试Worker<br>- 基于风险模型选择测试用例（XGBoost）</td><td>资源消耗降低40%的自适应测试调度系统</td></tr><tr><td><strong>视觉自愈</strong></td><td>- OpenCV图像差分<br>- 自动提交基线图片PR<br>- 集成GitHub Actions审核</td><td>视觉回归误报率下降70%</td></tr><tr><td><strong>LLM应用</strong></td><td>- LangChain处理日志<br>- GPT-4生成根因报告<br>- 知识库嵌入Jira自动填Bug</td><td>用自然语言查询测试分析结果</td></tr></tbody></table><h4 id="📅-阶段4：前沿深化（持续迭代）"><a href="#📅-阶段4：前沿深化（持续迭代）" class="headerlink" title="📅 阶段4：前沿深化（持续迭代）"></a>📅 <strong>阶段4：前沿深化（持续迭代）</strong></h4><table><thead><tr><th>技术方向</th><th>高价值技术组合</th></tr></thead><tbody><tr><td><strong>混沌工程</strong></td><td>Chaos Mesh注入网络延迟 + AI自动分析系统容错性</td></tr><tr><td><strong>强化学习</strong></td><td>Ray+RLLib优化测试执行顺序（减少60%执行时间）</td></tr><tr><td><strong>低代码测试</strong></td><td>基于GPT-4的“用自然语言生成测试用例”引擎</td></tr></tbody></table><hr><h3 id="二、市场竞争力分析"><a href="#二、市场竞争力分析" class="headerlink" title="二、市场竞争力分析"></a>二、市场竞争力分析</h3><h4 id="🔥-稀缺性优势（2025年市场观察）"><a href="#🔥-稀缺性优势（2025年市场观察）" class="headerlink" title="🔥 稀缺性优势（2025年市场观察）"></a>🔥 稀缺性优势（2025年市场观察）</h4><table><thead><tr><th>能力维度</th><th>企业需求强度</th><th>人才稀缺度</th><th>薪资溢价幅度</th></tr></thead><tbody><tr><td><strong>K8s测试治理</strong></td><td>⭐⭐⭐⭐⭐</td><td>⭐⭐⭐⭐</td><td>40-60%</td></tr><tr><td><strong>AI视觉测试</strong></td><td>⭐⭐⭐⭐</td><td>⭐⭐⭐⭐⭐</td><td>50-70%</td></tr><tr><td><strong>测试大数据</strong></td><td>⭐⭐⭐⭐⭐</td><td>⭐⭐⭐⭐⭐</td><td>60-80%</td></tr><tr><td><strong>LLM测试自动化</strong></td><td>⭐⭐⭐⭐</td><td>⭐⭐⭐⭐⭐</td><td>70-100%</td></tr></tbody></table><blockquote><p><em>数据来源：2025Q1拉勾&#x2F;猎聘平台15K+职位分析（薪资对比普通测试开发）</em></p></blockquote><h4 id="🎯-目标岗位及要求"><a href="#🎯-目标岗位及要求" class="headerlink" title="🎯 目标岗位及要求"></a>🎯 目标岗位及要求</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">graph TB</span><br><span class="line">A[就业方向] --&gt; B[云智能测试平台架构师]</span><br><span class="line">A --&gt; C[质量效能总监]</span><br><span class="line">A --&gt; D[AI自动化工具开发]</span><br><span class="line">B --&gt; E[要求：&lt;br&gt;- 设计PB级测试数据分析平台&lt;br&gt;- 构建K8s弹性测试集群]</span><br><span class="line">C --&gt; F[要求：&lt;br&gt;- 用数据驱动研发效能提升&lt;br&gt;- 建立质量预测模型]</span><br><span class="line">D --&gt; G[要求：&lt;br&gt;- 开发LLM测试助手&lt;br&gt;- CV自愈系统]</span><br></pre></td></tr></table></figure><h4 id="💼-企业刚需场景"><a href="#💼-企业刚需场景" class="headerlink" title="💼 企业刚需场景"></a>💼 企业刚需场景</h4><ol><li><p><strong>降本增效</strong>  </p><ul><li>头部电商企业：AI调度系统减少70%不必要的测试执行，年省千万级云资源  </li><li>金融公司：视觉自愈技术降低85%人工校验成本</li></ul></li><li><p><strong>风险控制</strong>  </p><ul><li>自动驾驶公司：实时测试监控提前拦截硬件兼容性缺陷  </li><li>SaaS服务商：LLM自动生成合规性测试用例</li></ul></li><li><p><strong>体验升级</strong>  </p><ul><li>大厂APP：基于用户行为数据的智能测试覆盖核心路径</li></ul></li></ol><hr><h3 id="三、护城河构建策略"><a href="#三、护城河构建策略" class="headerlink" title="三、护城河构建策略"></a>三、护城河构建策略</h3><h4 id="🛡️-技术壁垒打造"><a href="#🛡️-技术壁垒打造" class="headerlink" title="🛡️ 技术壁垒打造"></a>🛡️ 技术壁垒打造</h4><table><thead><tr><th>层级</th><th>护城河技术</th><th>防御周期</th></tr></thead><tbody><tr><td><strong>基础层</strong></td><td>K8s多集群测试治理 + Flink实时告警</td><td>1-2年</td></tr><tr><td><strong>核心层</strong></td><td>测试用例风险预测模型 + CV自愈引擎</td><td>2-3年</td></tr><tr><td><strong>尖端层</strong></td><td>LLM测试自治系统 + 混沌工程免疫验证</td><td>3年+</td></tr></tbody></table><h4 id="🚀-差异化竞争点"><a href="#🚀-差异化竞争点" class="headerlink" title="🚀 差异化竞争点"></a>🚀 差异化竞争点</h4><ol><li><p><strong>端到端数据闭环</strong>  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">A[代码变更] --&gt; B&#123;AI风险预测&#125;</span><br><span class="line">B --&gt; C[动态测试策略]</span><br><span class="line">C --&gt; D[K8s执行]</span><br><span class="line">D --&gt; E[实时数据分析]</span><br><span class="line">E --&gt; F[LLM生成报告]</span><br><span class="line">F --&gt; A</span><br></pre></td></tr></table></figure></li><li><p><strong>零接触维护系统</strong>  </p><ul><li>模型自动优化元素定位器  </li><li>基线图片智能刷新  </li><li>失败用例自主修复提交PR</li></ul></li><li><p><strong>可解释性AI决策</strong>  </p><ul><li>可视化展示测试调度决策树  </li><li>缺陷根因的因果推理链</li></ul></li></ol><hr><h3 id="四、风险与应对"><a href="#四、风险与应对" class="headerlink" title="四、风险与应对"></a>四、风险与应对</h3><table><thead><tr><th>风险点</th><th>应对方案</th></tr></thead><tbody><tr><td><strong>技术迭代快</strong></td><td>专注基础原理（分布式&#x2F;ML），建立技术雷达机制</td></tr><tr><td><strong>中小企业落地难</strong></td><td>提供SaaS化测试机器人（按次收费）</td></tr><tr><td><strong>道德争议</strong></td><td>建立AI测试伦理规范（如隐私数据脱敏处理）</td></tr></tbody></table><hr><h3 id="五、执行建议"><a href="#五、执行建议" class="headerlink" title="五、执行建议"></a>五、执行建议</h3><ol><li><p><strong>作品集策略</strong>  </p><ul><li>GitHub仓库包含：  <ul><li><code>k8s-test-operator</code>（自定义测试调度Operator）  </li><li><code>vision-healer</code>（CV自愈引擎）  </li><li><code>llm-test-reporter</code>（GPT生成分析报告插件）</li></ul></li></ul></li><li><p><strong>能力认证</strong>  </p><ul><li>CNCF Kubernetes认证（CKA）  </li><li>Databricks Spark认证  </li><li>AWS&#x2F;Azure大数据专项认证</li></ul></li><li><p><strong>演进节奏</strong>  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">timeline</span><br><span class="line">   2025 Q3 ： 完成云原生测试基建</span><br><span class="line">   2025 Q4 ： 上线实时分析看板</span><br><span class="line">   2026 Q1 ： 发布AI调度1.0</span><br><span class="line">   2026 Q3 ： 实现LLM自治测试</span><br></pre></td></tr></table></figure></li></ol><blockquote><p><strong>关键提示</strong>：优先攻破 <strong>K8s弹性测试集群建设+实时分析看板</strong> 组合，这是企业最易感知价值的切入点。某一线大厂统计，仅此两项即可将测试资源利用率从35%提升至80%。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Ai </tag>
            
            <tag> k8s </tag>
            
            <tag> 自动化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2025年前端趋势学习建议</title>
      <link href="/2025/12/10/do_at_workspace/2025%E5%B9%B4%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E5%BB%BA%E8%AE%AE/"/>
      <url>/2025/12/10/do_at_workspace/2025%E5%B9%B4%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E5%BB%BA%E8%AE%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="2025年前端趋势学习建议"><a href="#2025年前端趋势学习建议" class="headerlink" title="2025年前端趋势学习建议"></a>2025年前端趋势学习建议</h1><h2 id="核心发展方向"><a href="#核心发展方向" class="headerlink" title="核心发展方向"></a>核心发展方向</h2><h3 id="1-现代化JavaScript-TypeScript"><a href="#1-现代化JavaScript-TypeScript" class="headerlink" title="1. 现代化JavaScript&#x2F;TypeScript"></a>1. 现代化JavaScript&#x2F;TypeScript</h3><ul><li><strong>ES2023+新特性</strong>：深入理解最新ECMAScript提案</li><li>**TypeScript 5.0+**：类型系统高级用法和性能优化</li><li><strong>WebAssembly</strong>：高性能前端应用的开发</li></ul><h3 id="2-主流框架进阶"><a href="#2-主流框架进阶" class="headerlink" title="2. 主流框架进阶"></a>2. 主流框架进阶</h3><ul><li>**React 19+**：关注Server Components和React Compiler</li><li>**Angular 17+**：信号(Signals)和混合渲染技术</li><li><strong>Vue 4.0</strong>：组合式API的深度应用和Vapor模式</li><li><strong>Qwik&#x2F;SolidJS</strong>：新兴的细粒度响应式框架</li></ul><h2 id="关键技术趋势"><a href="#关键技术趋势" class="headerlink" title="关键技术趋势"></a>关键技术趋势</h2><h3 id="3-全栈开发能力"><a href="#3-全栈开发能力" class="headerlink" title="3. 全栈开发能力"></a>3. 全栈开发能力</h3><ul><li><strong>边缘计算</strong>：Cloudflare Workers&#x2F;Vercel Edge Functions</li><li><strong>元框架</strong>：Next.js 15+&#x2F;Nuxt 4&#x2F;Remix&#x2F;Astro 4.0</li><li><strong>GraphQL&#x2F;REST替代方案</strong>：tRPC、gRPC-Web</li></ul><h3 id="4-性能优化体系"><a href="#4-性能优化体系" class="headerlink" title="4. 性能优化体系"></a>4. 性能优化体系</h3><ul><li><strong>核心Web指标3.0</strong>：INP替代FID作为新指标</li><li>**部分水合(Partial Hydration)**：Qwik&#x2F;Astro的创新实践</li><li><strong>Bundle优化</strong>：ES模块、Tree-shaking 2.0</li></ul><h2 id="新兴技术领域"><a href="#新兴技术领域" class="headerlink" title="新兴技术领域"></a>新兴技术领域</h2><h3 id="5-前端智能化"><a href="#5-前端智能化" class="headerlink" title="5. 前端智能化"></a>5. 前端智能化</h3><ul><li><strong>AI集成开发</strong>：<ul><li>代码生成：GitHub Copilot X&#x2F;Codeium</li><li>智能UI组件：基于LLM的动态界面生成</li></ul></li><li><strong>Web3D&#x2F;XR</strong>：<ul><li>Three.js r160+</li><li>WebGPU标准应用</li><li>WebXR元宇宙应用</li></ul></li></ul><h3 id="6-跨平台方案"><a href="#6-跨平台方案" class="headerlink" title="6. 跨平台方案"></a>6. 跨平台方案</h3><ul><li><strong>Tauri 2.0</strong>：替代Electron的轻量方案</li><li><strong>React Native新架构</strong>：Fabric渲染器稳定版</li><li><strong>Flutter Web</strong>：CanvasKit渲染优化</li></ul><h2 id="学习路线建议"><a href="#学习路线建议" class="headerlink" title="学习路线建议"></a>学习路线建议</h2><h3 id="基础强化（2024Q3-Q4）"><a href="#基础强化（2024Q3-Q4）" class="headerlink" title="基础强化（2024Q3-Q4）"></a>基础强化（2024Q3-Q4）</h3><ol><li>掌握TypeScript 5.3高级类型系统</li><li>深入理解浏览器工作原理（WebKit&#x2F;Blink）</li><li>构建完整的Web性能优化知识体系</li></ol><h3 id="进阶提升（2025H1）"><a href="#进阶提升（2025H1）" class="headerlink" title="进阶提升（2025H1）"></a>进阶提升（2025H1）</h3><ol><li>选择1-2个元框架深度实践</li><li>学习WebAssembly基础开发</li><li>掌握至少一种边缘计算方案</li></ol><h3 id="前沿探索（2025H2）"><a href="#前沿探索（2025H2）" class="headerlink" title="前沿探索（2025H2）"></a>前沿探索（2025H2）</h3><ol><li>实践AI辅助开发工作流</li><li>尝试WebGPU图形编程</li><li>探索Web3D商业应用场景</li></ol><h2 id="学习资源推荐"><a href="#学习资源推荐" class="headerlink" title="学习资源推荐"></a>学习资源推荐</h2><ol><li><p><strong>官方文档</strong>：</p><ul><li>MDN Web Docs</li><li>各框架官方博客&#x2F;RFC</li></ul></li><li><p><strong>在线课程</strong>：</p><ul><li>Frontend Masters 2025趋势专题</li><li>Udemy高级前端工程课程</li></ul></li><li><p><strong>社区关注</strong>：</p><ul><li>Web Incubator CG提案</li><li>Chrome DevRel团队博客</li><li>各大框架核心团队的Twitter</li></ul></li><li><p><strong>实践平台</strong>：</p><ul><li>CodeSandbox Projects</li><li>StackBlitz WebContainers</li><li>GitHub Codespaces</li></ul></li></ol><h2 id="职业发展建议"><a href="#职业发展建议" class="headerlink" title="职业发展建议"></a>职业发展建议</h2><ol><li><p><strong>T型人才发展</strong>：</p><ul><li>纵向：选择1-2个技术栈做到专家级</li><li>横向：了解全链路开发（DevOps&#x2F;UX&#x2F;后端基础）</li></ul></li><li><p><strong>构建技术影响力</strong>：</p><ul><li>参与开源项目贡献</li><li>撰写技术博客&#x2F;制作教学视频</li><li>参加行业会议演讲</li></ul></li><li><p><strong>关注行业变化</strong>：</p><ul><li>定期阅读State of JS调查报告</li><li>参加年度前端技术大会（JSConf&#x2F;VueConf等）</li><li>跟踪Gartner技术成熟度曲线</li></ul></li></ol><p>2025年的前端开发将更加注重性能、智能化水平和开发者体验，建议保持技术敏感度，建立系统化学习路径，同时注重工程实践能力的培养。</p><ol><li><p>框架与工具链<br>React 18+：并发渲染(Concurrent Mode)、Server Components 等特性成为主流<br>Next.js 14：App Router 稳定化，服务端组件深度整合<br>Vue 3.4：性能优化 + Vapor Mode（编译时优化）<br>Astro 3.0：岛屿架构(Islands Architecture)的SSG框架兴起<br>Bun：替代Node.js&#x2F;Webpack的快速全栈工具链</p></li><li><p>构建优化<br>Turbopack (Webpack作者新作)：比Vite快10倍的Rust构建工具<br>Rspack：字节跳动的Webpack替代方案<br>ESM&#x2F;CDN优先：逐步放弃CommonJS打包模式</p></li><li><p>全栈能力<br>边缘计算：Vercel&#x2F;Netlify等平台的Edge Functions<br>Serverless前端：Remix&#x2F;Nuxt等框架的深度服务端集成<br>TypeScript全栈：tRPC、Prisma等类型安全方案普及</p></li><li><p>交互体验<br>Web Components：原生组件生态逐渐成熟<br>WebAssembly：Figma&#x2F;Photoshop等重型应用Web化<br>WebGPU：取代WebGL的高性能图形接口</p></li><li><p>新兴规范<br>View Transitions API：原生页面过渡动画支持<br>CSS Nesting：原生CSS嵌套语法落地<br>Signal RFC：类似Solid.js的响应式提案</p></li><li><p>AI整合</p></li></ol><p>AI代码生成：GitHub Copilot X、v0.dev等工具<br>LLM驱动开发：通过自然语言生成UI组件<br>智能UI测试：AI自动生成测试用例<br>学习建议：<br>掌握至少一个现代框架的深度原理（React&#x2F;Vue&#x2F;Svelte）<br>学习Rust基础（为未来工具链做准备）<br>实践全栈项目（Next.js&#x2F;Remix&#x2F;Nuxt）<br>关注WebAssembly&#x2F;WebGPU等底层技术</p>]]></content>
      
      
      
        <tags>
            
            <tag> 2025年前端趋势 </tag>
            
            <tag> 前端学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Resnet</title>
      <link href="/2025/10/14/bigdata_for_analyze/Resnet/"/>
      <url>/2025/10/14/bigdata_for_analyze/Resnet/</url>
      
        <content type="html"><![CDATA[<h2 id="🧠-一、ResNet-是什么？"><a href="#🧠-一、ResNet-是什么？" class="headerlink" title="🧠 一、ResNet 是什么？"></a>🧠 一、ResNet 是什么？</h2><p><strong>ResNet（Residual Network，残差网络）</strong><br>由 <strong>何恺明（Kaiming He）等人</strong> 在 2015 年提出，论文是</p><blockquote><p>《Deep Residual Learning for Image Recognition》</p></blockquote><p>ResNet 最初用于 ImageNet 图像分类任务，在 2015 年 ILSVRC 比赛中夺冠，**Top-5 错误率仅 3.57%**，同时成功训练出超过 <strong>152 层</strong> 的深度网络——<br>这是以前的 CNN（如 VGG）难以做到的。</p><hr><h2 id="⚙️-二、为什么要提出-ResNet？"><a href="#⚙️-二、为什么要提出-ResNet？" class="headerlink" title="⚙️ 二、为什么要提出 ResNet？"></a>⚙️ 二、为什么要提出 ResNet？</h2><h3 id="📉-1-深度模型的“退化问题”"><a href="#📉-1-深度模型的“退化问题”" class="headerlink" title="📉 1. 深度模型的“退化问题”"></a>📉 1. 深度模型的“退化问题”</h3><p>直觉上，网络越深，效果越好。<br>但实际发现：</p><ul><li>网络越深，训练误差反而<strong>上升</strong>。</li><li>梯度在反向传播中会<strong>消失或爆炸</strong>，模型难以收敛。</li></ul><p>也就是说：</p><blockquote><p>加更多层 ≠ 学得更好。<br>深度带来了表达能力，却损害了可训练性。</p></blockquote><hr><h2 id="💡-三、ResNet-的核心思想：残差学习（Residual-Learning）"><a href="#💡-三、ResNet-的核心思想：残差学习（Residual-Learning）" class="headerlink" title="💡 三、ResNet 的核心思想：残差学习（Residual Learning）"></a>💡 三、ResNet 的核心思想：<strong>残差学习（Residual Learning）</strong></h2><p>传统层学的是：<br>[<br>y &#x3D; F(x)<br>]<br>ResNet 改成：<br>[<br>y &#x3D; F(x) + x<br>]</p><p>也就是：<br>让每个模块只学习“残差”（差值），而不是完整映射。</p><h3 id="🧩-残差块（Residual-Block）"><a href="#🧩-残差块（Residual-Block）" class="headerlink" title="🧩 残差块（Residual Block）"></a>🧩 残差块（Residual Block）</h3><p>如下图结构（简化表示）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">输入 x</span><br><span class="line">   │</span><br><span class="line">[卷积 + BN + ReLU]</span><br><span class="line">   │</span><br><span class="line">[卷积 + BN]</span><br><span class="line">   │</span><br><span class="line"> + ───────────────┐</span><br><span class="line"> │                │</span><br><span class="line"> └──&gt; 加法 (skip) ─&gt; ReLU ─&gt; 输出 y</span><br></pre></td></tr></table></figure><p>这种“shortcut connection（跳跃连接）”直接把输入 <strong>x</strong> 加到输出 <strong>F(x)</strong> 上。</p><hr><h2 id="🔍-四、为什么这种结构有效？"><a href="#🔍-四、为什么这种结构有效？" class="headerlink" title="🔍 四、为什么这种结构有效？"></a>🔍 四、为什么这种结构有效？</h2><p>1️⃣ <strong>缓解梯度消失</strong></p><ul><li>跳跃连接让梯度可以<strong>直接传到浅层</strong>，不被深层阻塞。</li><li>反向传播时：<br>[<br>\frac{\partial L}{\partial x} &#x3D; \frac{\partial L}{\partial y} (1 + \frac{\partial F}{\partial x})<br>]<br>始终保留一个恒等路径，使梯度不会消失。</li></ul><p>2️⃣ <strong>容易优化</strong></p><ul><li>如果最优函数接近恒等映射，F(x) ≈ 0 就行。</li><li>模型只需“微调”已有特征，而不是重新学习一切。</li></ul><p>3️⃣ <strong>能训练超深网络</strong></p><ul><li>ResNet-50, ResNet-101, ResNet-152 甚至更深都能稳定训练。</li></ul><hr><h2 id="🧱-五、ResNet-的结构层次（以-ResNet-50-为例）"><a href="#🧱-五、ResNet-的结构层次（以-ResNet-50-为例）" class="headerlink" title="🧱 五、ResNet 的结构层次（以 ResNet-50 为例）"></a>🧱 五、ResNet 的结构层次（以 ResNet-50 为例）</h2><table><thead><tr><th>模块</th><th>结构</th><th>输出尺寸</th></tr></thead><tbody><tr><td>Conv1</td><td>7×7卷积 + MaxPool</td><td>112×112</td></tr><tr><td>Conv2_x</td><td>3个残差块</td><td>56×56</td></tr><tr><td>Conv3_x</td><td>4个残差块</td><td>28×28</td></tr><tr><td>Conv4_x</td><td>6个残差块</td><td>14×14</td></tr><tr><td>Conv5_x</td><td>3个残差块</td><td>7×7</td></tr><tr><td>全局平均池化 + FC</td><td>分类输出</td><td>1000类</td></tr></tbody></table><p><strong>瓶颈结构（Bottleneck Block）</strong>：<br>采用 1×1 降维 → 3×3 卷积 → 1×1 升维，减少计算量。</p><hr><h2 id="🧬-六、ResNet-的变体家族"><a href="#🧬-六、ResNet-的变体家族" class="headerlink" title="🧬 六、ResNet 的变体家族"></a>🧬 六、ResNet 的变体家族</h2><table><thead><tr><th>模型</th><th>说明</th></tr></thead><tbody><tr><td><strong>ResNet-18&#x2F;34</strong></td><td>基础残差块（两个 3×3 卷积）</td></tr><tr><td><strong>ResNet-50&#x2F;101&#x2F;152</strong></td><td>瓶颈残差块（1×1, 3×3, 1×1）</td></tr><tr><td><strong>ResNeXt</strong></td><td>引入分组卷积（更宽）</td></tr><tr><td><strong>Wide-ResNet</strong></td><td>减少深度，增加宽度</td></tr><tr><td><strong>ResNet-D, ECA-ResNet, etc.</strong></td><td>各种改进版，性能更优</td></tr></tbody></table><hr><h2 id="🧠-七、ResNet-的意义（深远影响）"><a href="#🧠-七、ResNet-的意义（深远影响）" class="headerlink" title="🧠 七、ResNet 的意义（深远影响）"></a>🧠 七、ResNet 的意义（深远影响）</h2><p>✅ <strong>开启了深层网络可训练时代</strong><br>— 深度从几十层 → 上百层甚至上千层。</p><p>✅ <strong>启发了 Transformer 等架构</strong><br>— “残差连接 + 层归一化”成为现代网络标配。</p><p>✅ <strong>几乎所有 CNN 基础模型的基石</strong><br>— 分类、检测、分割任务都以 ResNet 为 backbone。</p><hr><h2 id="🏁-八、总结一句话："><a href="#🏁-八、总结一句话：" class="headerlink" title="🏁 八、总结一句话："></a>🏁 八、总结一句话：</h2><blockquote><p><strong>ResNet 让深度学习真正“学得更深”。</strong><br>它的核心不在“更复杂的卷积”，而在<strong>让梯度流得更顺畅</strong>。</p></blockquote><ul><li></li></ul><h1 id="🧭-一、ResNet-出现之前：深层网络的两大困境"><a href="#🧭-一、ResNet-出现之前：深层网络的两大困境" class="headerlink" title="🧭 一、ResNet 出现之前：深层网络的两大困境"></a>🧭 一、ResNet 出现之前：深层网络的两大困境</h1><p>在 ResNet 之前（约 2012–2014），卷积神经网络（CNN）主流结构是：</p><ul><li><strong>AlexNet (2012)</strong> → 8 层</li><li><strong>VGGNet (2014)</strong> → 16&#x2F;19 层</li><li><strong>GoogLeNet (2014)</strong> → 22 层</li></ul><p>研究者发现：当网络继续加深（如 30 层、50 层以上）时，出现了两个严重问题：</p><hr><h2 id="⚠️-1️⃣-梯度消失-梯度爆炸（Gradient-Vanishing-Exploding）"><a href="#⚠️-1️⃣-梯度消失-梯度爆炸（Gradient-Vanishing-Exploding）" class="headerlink" title="⚠️ 1️⃣ 梯度消失 &#x2F; 梯度爆炸（Gradient Vanishing&#x2F;Exploding）"></a>⚠️ 1️⃣ 梯度消失 &#x2F; 梯度爆炸（Gradient Vanishing&#x2F;Exploding）</h2><h3 id="🔹-现象"><a href="#🔹-现象" class="headerlink" title="🔹 现象"></a>🔹 现象</h3><ul><li>网络越深，反向传播时梯度在层间不断相乘；</li><li>小于 1 的梯度会逐层变小，趋近于 0；</li><li>大于 1 的梯度则会爆炸成无穷大；</li><li>导致浅层几乎无法更新权重。</li></ul><h3 id="🔹-结果"><a href="#🔹-结果" class="headerlink" title="🔹 结果"></a>🔹 结果</h3><blockquote><p>网络越深，反而训练误差越高。<br>明明更复杂的模型，却学不到东西。</p></blockquote><hr><h2 id="⚠️-2️⃣-网络退化问题（Degradation-Problem）"><a href="#⚠️-2️⃣-网络退化问题（Degradation-Problem）" class="headerlink" title="⚠️ 2️⃣ 网络退化问题（Degradation Problem）"></a>⚠️ 2️⃣ 网络退化问题（Degradation Problem）</h2><p>就算没有梯度消失，通过技巧（如 BatchNorm、ReLU）缓解了梯度问题，<br>仍会出现：</p><blockquote><p>当层数增加，<strong>训练集误差反而上升</strong>。</p></blockquote><p>也就是说：</p><ul><li>并不是“过拟合”，因为训练误差都变差；</li><li>而是网络无法学到更优解。</li></ul><p>👉 原因：<br>深层网络要学习一个复杂映射 ( H(x) )，反而比学习“恒等映射”更难。<br>模型反而绕远路了。</p><hr><h1 id="⚙️-二、ResNet-的突破点：残差思想（Residual-Learning）"><a href="#⚙️-二、ResNet-的突破点：残差思想（Residual-Learning）" class="headerlink" title="⚙️ 二、ResNet 的突破点：残差思想（Residual Learning）"></a>⚙️ 二、ResNet 的突破点：残差思想（Residual Learning）</h1><p>ResNet 提出一个革命性思路：</p><blockquote><p>“让网络只学习差异（残差），而不是完整映射。”</p></blockquote><hr><h2 id="🧩-1️⃣-理论核心"><a href="#🧩-1️⃣-理论核心" class="headerlink" title="🧩 1️⃣ 理论核心"></a>🧩 1️⃣ 理论核心</h2><p>假设原目标函数是：<br>[<br>H(x)<br>]<br>传统网络直接学习：<br>[<br>H(x)<br>]<br>ResNet 改为：<br>[<br>F(x) &#x3D; H(x) - x \Rightarrow H(x) &#x3D; F(x) + x<br>]<br>即：让网络学习一个<strong>残差函数</strong> ( F(x) )，表示输入与目标输出的差异。</p><hr><h2 id="🧩-2️⃣-残差块（Residual-Block）"><a href="#🧩-2️⃣-残差块（Residual-Block）" class="headerlink" title="🧩 2️⃣ 残差块（Residual Block）"></a>🧩 2️⃣ 残差块（Residual Block）</h2><p>基本结构：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">输入 x</span><br><span class="line">  │</span><br><span class="line">[卷积 + BN + ReLU]</span><br><span class="line">  │</span><br><span class="line">[卷积 + BN]</span><br><span class="line">  │</span><br><span class="line"> +───&gt; x（Shortcut）</span><br><span class="line">  │</span><br><span class="line">ReLU</span><br><span class="line">  │</span><br><span class="line">输出 y = F(x) + x</span><br></pre></td></tr></table></figure><p>公式化：<br>[<br>y &#x3D; F(x, W_i) + x<br>]</p><hr><h2 id="🧩-3️⃣-Shortcut-Connection（跳跃连接）"><a href="#🧩-3️⃣-Shortcut-Connection（跳跃连接）" class="headerlink" title="🧩 3️⃣ Shortcut Connection（跳跃连接）"></a>🧩 3️⃣ Shortcut Connection（跳跃连接）</h2><p>关键是这个“<strong>加法连接</strong>”：</p><ul><li>不增加额外参数；</li><li>不增加计算复杂度；</li><li>让梯度可以<strong>直接穿过层</strong>传播。</li></ul><p>这条“捷径”路径（identity mapping）使得网络即使非常深，也能保持稳定的梯度流动。</p><hr><h1 id="🧮-三、ResNet-的工作原理与优势解析"><a href="#🧮-三、ResNet-的工作原理与优势解析" class="headerlink" title="🧮 三、ResNet 的工作原理与优势解析"></a>🧮 三、ResNet 的工作原理与优势解析</h1><table><thead><tr><th>方面</th><th>传统深层网络</th><th>ResNet 机制</th><th>效果</th></tr></thead><tbody><tr><td><strong>学习目标</strong></td><td>直接拟合 H(x)</td><td>学习残差 F(x)&#x3D;H(x)-x</td><td>更容易优化</td></tr><tr><td><strong>梯度传播</strong></td><td>梯度逐层衰减</td><td>跳跃连接提供恒等通路</td><td>缓解梯度消失</td></tr><tr><td><strong>最优解存在性</strong></td><td>难找到恒等映射</td><td>恒等映射即 F(x)&#x3D;0</td><td>最优解更容易达到</td></tr><tr><td><strong>训练稳定性</strong></td><td>不稳定</td><td>非常稳定</td><td>能训练上百层</td></tr><tr><td><strong>收敛速度</strong></td><td>慢</td><td>快</td><td>更深更准</td></tr></tbody></table><hr><h1 id="⚗️-四、ResNet-之后：影响与扩展"><a href="#⚗️-四、ResNet-之后：影响与扩展" class="headerlink" title="⚗️ 四、ResNet 之后：影响与扩展"></a>⚗️ 四、ResNet 之后：影响与扩展</h1><p>ResNet 不仅解决了“深度退化”问题，还奠定了现代深度架构的模板。</p><h3 id="📚-后续改进"><a href="#📚-后续改进" class="headerlink" title="📚 后续改进"></a>📚 后续改进</h3><table><thead><tr><th>变体</th><th>核心改进</th><th>关键点</th></tr></thead><tbody><tr><td><strong>ResNet-50&#x2F;101&#x2F;152</strong></td><td>使用瓶颈结构 (1x1, 3x3, 1x1)</td><td>提升效率</td></tr><tr><td><strong>ResNeXt</strong></td><td>引入分组卷积</td><td>提升表达能力</td></tr><tr><td><strong>DenseNet</strong></td><td>连接不再是加法，而是拼接</td><td>更强特征复用</td></tr><tr><td><strong>Transformer</strong></td><td>残差连接 + LayerNorm</td><td>从 CNN 扩展到序列建模</td></tr></tbody></table><hr><h1 id="🧠-五、总结一句话"><a href="#🧠-五、总结一句话" class="headerlink" title="🧠 五、总结一句话"></a>🧠 五、总结一句话</h1><blockquote><p>ResNet 的本质不是“多了跳线”，<br>而是改变了学习目标：<br><strong>让模型学会修正（Residual Correction），而非重新发明（Re-learning）。</strong></p></blockquote><h1 id="🧭-一、ResNet-出现前的深度网络发展简史（1998–2015）"><a href="#🧭-一、ResNet-出现前的深度网络发展简史（1998–2015）" class="headerlink" title="🧭 一、ResNet 出现前的深度网络发展简史（1998–2015）"></a>🧭 一、ResNet 出现前的深度网络发展简史（1998–2015）</h1><table><thead><tr><th>阶段</th><th>代表网络</th><th>关键特征</th><th>问题所在</th></tr></thead><tbody><tr><td>🧩 1️⃣ 早期阶段（1998–2011）</td><td>LeNet-5（Yann LeCun）</td><td>手写数字识别CNN雏形</td><td>网络浅、计算弱、数据不足</td></tr><tr><td>🚀 2️⃣ 深度复兴（2012）</td><td>AlexNet（Hinton、Krizhevsky）</td><td>ReLU + Dropout + GPU训练</td><td>首次在ImageNet上大胜传统算法</td></tr><tr><td>🔥 3️⃣ 结构深化（2014）</td><td>VGGNet、GoogLeNet</td><td>堆叠更多卷积层（16–22层）</td><td>性能提升，但出现“退化问题”</td></tr><tr><td>💡 4️⃣ 结构突破（2015）</td><td>ResNet（何恺明）</td><td>引入残差连接</td><td>解决梯度消失与退化本质问题</td></tr></tbody></table><hr><h1 id="⚙️-二、ResNet-之前的问题根本：深度带来的“优化困境”"><a href="#⚙️-二、ResNet-之前的问题根本：深度带来的“优化困境”" class="headerlink" title="⚙️ 二、ResNet 之前的问题根本：深度带来的“优化困境”"></a>⚙️ 二、ResNet 之前的问题根本：<strong>深度带来的“优化困境”</strong></h1><p>随着层数增加，网络理论上应该更强——但现实完全相反。<br>问题根源来自于三大机制性矛盾：</p><hr><h2 id="⚠️-1️⃣-梯度传播障碍（Gradient-Flow-Problem）"><a href="#⚠️-1️⃣-梯度传播障碍（Gradient-Flow-Problem）" class="headerlink" title="⚠️ 1️⃣ 梯度传播障碍（Gradient Flow Problem）"></a>⚠️ 1️⃣ 梯度传播障碍（Gradient Flow Problem）</h2><p><strong>根源：反向传播链式求导</strong></p><p>反向传播中，梯度逐层相乘：<br>[<br>\frac{\partial L}{\partial x_1} &#x3D; \frac{\partial L}{\partial x_n} \prod_{i&#x3D;2}^{n} \frac{\partial x_i}{\partial x_{i-1}}<br>]</p><p>如果每层的导数 ( &lt; 1 )，梯度会指数衰减 → **梯度消失**；<br>如果 ( &gt; 1 )，则梯度会迅速放大 → <strong>梯度爆炸</strong>。</p><hr><h3 id="🔹-后果"><a href="#🔹-后果" class="headerlink" title="🔹 后果"></a>🔹 后果</h3><ul><li>浅层权重几乎得不到更新；</li><li>模型训练不稳定；</li><li>学习陷入局部最优或无法收敛。</li></ul><hr><h2 id="⚠️-2️⃣-优化困难与退化问题（Degradation-Problem）"><a href="#⚠️-2️⃣-优化困难与退化问题（Degradation-Problem）" class="headerlink" title="⚠️ 2️⃣ 优化困难与退化问题（Degradation Problem）"></a>⚠️ 2️⃣ 优化困难与退化问题（Degradation Problem）</h2><p>即使通过 ReLU、BatchNorm 缓解了梯度问题，<br>仍发现当层数从 20 → 50 → 100 增加时：</p><blockquote><p><strong>训练误差反而上升。</strong></p></blockquote><p>这不是过拟合，而是<strong>优化失败</strong>。</p><h3 id="🔹-原因分析"><a href="#🔹-原因分析" class="headerlink" title="🔹 原因分析"></a>🔹 原因分析</h3><p>深层网络在优化空间上更复杂：</p><ul><li>存在大量鞍点（saddle points）；</li><li>参数更新路径更难；</li><li>“恒等映射” H(x)&#x3D;x 都学不出来。</li></ul><p>也就是说：</p><blockquote><p>网络越深，不是学不到真理，而是被「学习路径」卡住了。</p></blockquote><hr><h2 id="⚠️-3️⃣-映射学习过难（Representation-Difficulty）"><a href="#⚠️-3️⃣-映射学习过难（Representation-Difficulty）" class="headerlink" title="⚠️ 3️⃣ 映射学习过难（Representation Difficulty）"></a>⚠️ 3️⃣ 映射学习过难（Representation Difficulty）</h2><p>传统网络强迫每一层都去学习一个复杂的目标函数 ( H(x) )。<br>但很多时候我们只需要微调输入（比如略做修正）。</p><p>学习一个“<strong>恒等映射</strong>”其实比“复杂非线性映射”更难，<br>因为参数必须精确拟合到 ( H(x)&#x3D;x )。</p><h3 id="🔹-举个比喻："><a href="#🔹-举个比喻：" class="headerlink" title="🔹 举个比喻："></a>🔹 举个比喻：</h3><p>传统深层网络像让人从零造一辆新车；<br>而有时只是需要“在旧车上加点配件”——但模型不允许这样做。</p><hr><h1 id="🧩-三、问题的根本所在：网络学习目标与优化路径错配"><a href="#🧩-三、问题的根本所在：网络学习目标与优化路径错配" class="headerlink" title="🧩 三、问题的根本所在：网络学习目标与优化路径错配"></a>🧩 三、问题的根本所在：<strong>网络学习目标与优化路径错配</strong></h1><p>这其实是一个<strong>“学习目标不匹配”</strong>的问题：</p><table><thead><tr><th>问题层面</th><th>传统网络做法</th><th>问题本质</th></tr></thead><tbody><tr><td><strong>学习目标</strong></td><td>直接学习 ( H(x) )</td><td>任务复杂、非线性强</td></tr><tr><td><strong>参数优化</strong></td><td>梯度逐层传播</td><td>梯度逐层衰减</td></tr><tr><td><strong>表示路径</strong></td><td>每层完全独立</td><td>缺乏“捷径”传递信息</td></tr><tr><td><strong>恒等映射</strong></td><td>需精确拟合</td><td>难以学习到恒等函数</td></tr></tbody></table><p>因此：</p><blockquote><p>问题根本不在于“层太多”，而在于<strong>每层都被迫学习过于复杂的映射函数</strong>。</p></blockquote><hr><h1 id="💡-四、ResNet-如何从根本上解决这些问题"><a href="#💡-四、ResNet-如何从根本上解决这些问题" class="headerlink" title="💡 四、ResNet 如何从根本上解决这些问题"></a>💡 四、ResNet 如何从根本上解决这些问题</h1><p>ResNet 引入“<strong>恒等捷径连接（Identity Shortcut Connection）</strong>”：</p><p>[<br>H(x) &#x3D; F(x) + x<br>]</p><p>让每一层只学习：<br>[<br>F(x) &#x3D; H(x) - x<br>]</p><hr><h3 id="✅-本质改进："><a href="#✅-本质改进：" class="headerlink" title="✅ 本质改进："></a>✅ 本质改进：</h3><table><thead><tr><th>问题</th><th>ResNet 对策</th><th>效果</th></tr></thead><tbody><tr><td>梯度消失</td><td>提供梯度直接通道</td><td>稳定传播</td></tr><tr><td>优化困难</td><td>简化学习任务（学残差）</td><td>易收敛</td></tr><tr><td>恒等映射难学</td><td>直接保留输入</td><td>学习恒等变得自然</td></tr><tr><td>深度退化</td><td>不再出现</td><td>训练上百层依然正常</td></tr></tbody></table><hr><h1 id="🧠-五、总结一句话-1"><a href="#🧠-五、总结一句话-1" class="headerlink" title="🧠 五、总结一句话"></a>🧠 五、总结一句话</h1><blockquote><p><strong>ResNet 之前的问题根本在于：网络被迫学习完整映射，导致优化路径过长、梯度衰减、恒等难学。</strong><br><strong>ResNet 通过残差连接重新定义了学习目标，让“深度”与“可训练性”首次兼得。</strong></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> ai </tag>
            
            <tag> 数据分析算法 </tag>
            
            <tag> 降维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据分析算法</title>
      <link href="/2025/10/13/bigdata_for_analyze/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90-%E9%99%8D%E7%BB%B4/"/>
      <url>/2025/10/13/bigdata_for_analyze/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90-%E9%99%8D%E7%BB%B4/</url>
      
        <content type="html"><![CDATA[<p>“<strong>降维（Dimensionality Reduction）</strong>” 是数据分析和机器学习中一个非常重要但常被误解的概念。<br>我们可以从<strong>直觉、数学、算法、应用场景</strong>四个层面，一步步讲清楚它。</p><hr><h2 id="🧭-一、核心定义（一句话理解）"><a href="#🧭-一、核心定义（一句话理解）" class="headerlink" title="🧭 一、核心定义（一句话理解）"></a>🧭 一、核心定义（一句话理解）</h2><blockquote><p><strong>降维就是把“高维数据”压缩到“低维空间”，同时尽量保留原有信息。</strong></p></blockquote><p>换句话说：<br>你有一个包含几十、几百个特征（维度）的数据集，<br>降维的目标是：</p><ul><li><strong>减少维度（压缩数据）</strong></li><li><strong>保留主要结构（保留最有用的信息）</strong></li><li><strong>消除噪声和冗余</strong></li></ul><hr><h2 id="🧩-二、通俗类比：从三维到二维的影子-🪞"><a href="#🧩-二、通俗类比：从三维到二维的影子-🪞" class="headerlink" title="🧩 二、通俗类比：从三维到二维的影子 🪞"></a>🧩 二、通俗类比：从三维到二维的影子 🪞</h2><p>想象你拿一个苹果在阳光下晒出影子 🍎→🕳️。</p><ul><li>苹果是三维的；</li><li>影子是二维的；</li><li>虽然降了一维，但你仍能看出形状特征（圆的、凸起的）。</li></ul><p>这就是降维的本质：</p><blockquote><p>从高维“投影”到低维，<strong>保留主要信息，舍弃次要细节。</strong></p></blockquote><hr><h2 id="🧮-三、为什么要降维？"><a href="#🧮-三、为什么要降维？" class="headerlink" title="🧮 三、为什么要降维？"></a>🧮 三、为什么要降维？</h2><table><thead><tr><th>问题</th><th>原因</th><th>降维后的好处</th></tr></thead><tbody><tr><td>数据维度太多</td><td>特征数量&gt;样本数量，容易过拟合</td><td>提高模型泛化能力</td></tr><tr><td>特征冗余</td><td>多个变量表达相似信息</td><td>去冗余、提升计算效率</td></tr><tr><td>可视化困难</td><td>超过3维人脑无法直接理解</td><td>2D&#x2F;3D 可视化聚类或趋势</td></tr><tr><td>噪声干扰</td><td>无关特征掩盖真实规律</td><td>提升模型解释性</td></tr></tbody></table><p>📘 比喻：</p><blockquote><p>你采访1000人，问了100个问题（维度）。<br>但其实“学历、职位、收入”就能代表大多数差异。<br>降维就是找到那“关键几问”。</p></blockquote><hr><h2 id="🧠-四、主要降维算法类型"><a href="#🧠-四、主要降维算法类型" class="headerlink" title="🧠 四、主要降维算法类型"></a>🧠 四、主要降维算法类型</h2><h3 id="1️⃣-线性降维：用线性变换压缩信息"><a href="#1️⃣-线性降维：用线性变换压缩信息" class="headerlink" title="1️⃣ 线性降维：用线性变换压缩信息"></a>1️⃣ <strong>线性降维</strong>：用线性变换压缩信息</h3><h4 id="📘-主成分分析（PCA，最常用）"><a href="#📘-主成分分析（PCA，最常用）" class="headerlink" title="📘 主成分分析（PCA，最常用）"></a>📘 主成分分析（PCA，最常用）</h4><ul><li>思想：<br>找出“信息量最大”的方向（称为主成分）。<br>把原始数据投影到这些方向上。</li><li>结果：<br>新维度是旧维度的线性组合。</li><li>应用：<br>图像压缩、特征提取、可视化。</li></ul><p>📈 示例：<br>原始数据：年龄、收入、房价、储蓄 →<br>PCA 找出 2 个主成分能解释 90% 的差异 →<br>画二维图就能区分用户群体。</p><h4 id="📘-线性判别分析（LDA）"><a href="#📘-线性判别分析（LDA）" class="headerlink" title="📘 线性判别分析（LDA）"></a>📘 线性判别分析（LDA）</h4><ul><li>目标：找出能<strong>区分不同类别</strong>的方向。</li><li>常用于：分类前的降维（如人脸识别）。</li></ul><hr><h3 id="2️⃣-非线性降维：适合复杂结构的高维数据"><a href="#2️⃣-非线性降维：适合复杂结构的高维数据" class="headerlink" title="2️⃣ 非线性降维：适合复杂结构的高维数据"></a>2️⃣ <strong>非线性降维</strong>：适合复杂结构的高维数据</h3><table><thead><tr><th>算法</th><th>核心思想</th><th>应用场景</th></tr></thead><tbody><tr><td>t-SNE（t-Distributed Stochastic Neighbor Embedding）</td><td>保留邻近样本的相对距离</td><td>高维可视化，如人脸特征聚类</td></tr><tr><td>UMAP（Uniform Manifold Approximation and Projection）</td><td>建模流形结构，速度快于t-SNE</td><td>NLP、图像嵌入可视化</td></tr><tr><td>Isomap</td><td>保留全局几何结构</td><td>高维曲面展开</td></tr><tr><td>Autoencoder（自编码器）</td><td>神经网络自动学习压缩特征</td><td>图像压缩、异常检测</td></tr></tbody></table><hr><h3 id="3️⃣-特征选择-vs-特征提取"><a href="#3️⃣-特征选择-vs-特征提取" class="headerlink" title="3️⃣ 特征选择 vs 特征提取"></a>3️⃣ <strong>特征选择 vs 特征提取</strong></h3><p>降维有两种思路：</p><table><thead><tr><th>方法</th><th>代表算法</th><th>思想</th></tr></thead><tbody><tr><td><strong>特征选择</strong></td><td>相关系数、LASSO</td><td>从原特征中挑出重要的</td></tr><tr><td><strong>特征提取（真正的降维）</strong></td><td>PCA, t-SNE, Autoencoder</td><td>创建新的特征（组合或映射）</td></tr></tbody></table><p>📘 比喻：</p><ul><li>特征选择 &#x3D; “删掉多余题目”</li><li>特征提取 &#x3D; “把多题综合成几道关键题”</li></ul><hr><h2 id="📊-五、应用场景举例"><a href="#📊-五、应用场景举例" class="headerlink" title="📊 五、应用场景举例"></a>📊 五、应用场景举例</h2><table><thead><tr><th>场景</th><th>降维算法</th><th>作用</th></tr></thead><tbody><tr><td>🧬 基因数据（上千维）</td><td>PCA &#x2F; t-SNE</td><td>提取主成分用于聚类</td></tr><tr><td>📸 图像识别</td><td>PCA &#x2F; Autoencoder</td><td>压缩图片特征，加快训练</td></tr><tr><td>🛍️ 用户行为分析</td><td>PCA &#x2F; UMAP</td><td>提取关键行为特征</td></tr><tr><td>🔍 异常检测</td><td>PCA + Isolation Forest</td><td>降维后检测异常点</td></tr><tr><td>📈 可视化</td><td>t-SNE &#x2F; UMAP</td><td>将高维嵌入映射到2D空间展示</td></tr></tbody></table><hr><h2 id="🧮-六、一个例子看懂-PCA-降维"><a href="#🧮-六、一个例子看懂-PCA-降维" class="headerlink" title="🧮 六、一个例子看懂 PCA 降维"></a>🧮 六、一个例子看懂 PCA 降维</h2><p>假设你有3个变量：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">收入（Income）</span><br><span class="line">消费（Spend）</span><br><span class="line">储蓄（Savings）</span><br></pre></td></tr></table></figure><p>它们高度相关。</p><p>用 PCA：<br>1️⃣ 找到最大方差方向（例如收入+消费-储蓄）<br>2️⃣ 新的“主成分1”能解释 95% 信息<br>3️⃣ 于是你可以用1个特征替代原3个 → 降维成功！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.decomposition <span class="keyword">import</span> PCA</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">X_scaled = StandardScaler().fit_transform(X)</span><br><span class="line">pca = PCA(n_components=<span class="number">2</span>)</span><br><span class="line">X_reduced = pca.fit_transform(X_scaled)</span><br></pre></td></tr></table></figure><hr><h2 id="🧩-七、降维的可视化直观图（概念上）"><a href="#🧩-七、降维的可视化直观图（概念上）" class="headerlink" title="🧩 七、降维的可视化直观图（概念上）"></a>🧩 七、降维的可视化直观图（概念上）</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">原始高维空间 (3D) → PCA 投影到 2D</span><br><span class="line">      *        *                   *</span><br><span class="line">   *     *  *        ---&gt;      * * * *</span><br><span class="line">*         *        *       →     *  *</span><br></pre></td></tr></table></figure><p>左：难以理解的高维点分布<br>右：投影后的二维结构，更清晰发现聚类关系</p><hr><h2 id="✅-八、总结一句话"><a href="#✅-八、总结一句话" class="headerlink" title="✅ 八、总结一句话"></a>✅ 八、总结一句话</h2><blockquote><p><strong>降维 &#x3D; 压缩信息维度，揭示数据核心结构。</strong></p></blockquote><ul><li>对分析师来说，它是“信息提炼”的过程；</li><li>对算法来说，它是“去噪、提速、提质”的手段；</li><li>对AI来说，它是“嵌入与表示学习”的基础。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> ai </tag>
            
            <tag> 数据分析算法 </tag>
            
            <tag> 降维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>特征工程</title>
      <link href="/2025/10/13/bigdata_for_analyze/%E7%89%B9%E5%BE%81%E5%B7%A5%E7%A8%8B/"/>
      <url>/2025/10/13/bigdata_for_analyze/%E7%89%B9%E5%BE%81%E5%B7%A5%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="🧠-一、特征工程是什么"><a href="#🧠-一、特征工程是什么" class="headerlink" title="🧠 一、特征工程是什么"></a>🧠 一、特征工程是什么</h2><p><strong>特征工程（Feature Engineering）</strong> 是指在模型训练前，对原始数据进行加工、提取、转换，以让模型“看懂”数据的过程。<br>一句话总结：</p><blockquote><p><strong>“数据决定上限，特征决定逼近上限的速度。”</strong></p></blockquote><hr><h2 id="⚙️-二、为什么需要特征工程（核心原因）"><a href="#⚙️-二、为什么需要特征工程（核心原因）" class="headerlink" title="⚙️ 二、为什么需要特征工程（核心原因）"></a>⚙️ 二、为什么需要特征工程（核心原因）</h2><h3 id="1️⃣-模型本身无法直接理解原始数据"><a href="#1️⃣-模型本身无法直接理解原始数据" class="headerlink" title="1️⃣ 模型本身无法直接理解原始数据"></a>1️⃣ 模型本身无法直接理解原始数据</h3><p>机器学习算法（例如线性回归、SVM、树模型）只会计算数值。</p><ul><li>图像是像素矩阵</li><li>文本是字符序列</li><li>时间序列是信号流<br>这些原始数据往往<strong>维度高、信息冗余、非结构化</strong>。<br>➡️ 你必须先提取出能表达“关键信息”的特征。</li></ul><p>例如：</p><table><thead><tr><th>原始数据</th><th>无法直接输入模型</th><th>特征工程后</th></tr></thead><tbody><tr><td>“北京，晴，20°C”</td><td>字符串</td><td>city&#x3D;北京, weather&#x3D;晴, temp&#x3D;20</td></tr><tr><td>一张猫的照片</td><td>数百万像素</td><td>“有毛发”“有耳朵”“有尾巴”等CNN特征</td></tr></tbody></table><hr><h3 id="2️⃣-提升模型的可学习性与泛化能力"><a href="#2️⃣-提升模型的可学习性与泛化能力" class="headerlink" title="2️⃣ 提升模型的可学习性与泛化能力"></a>2️⃣ 提升模型的<strong>可学习性</strong>与<strong>泛化能力</strong></h3><p>一个好的特征能让模型更容易学到数据规律。</p><ul><li>把非线性关系转换成线性（对数变换、平方根变换）</li><li>把复杂结构分解为组合特征（交互项、聚合特征）</li><li>降噪、标准化，让模型更稳定</li></ul><p>举例：<br>房价预测中，“面积&#x2F;房间数” 比单独的“面积”“房间数”更能代表<strong>房间平均大小</strong>，提升模型表现。</p><hr><h3 id="3️⃣-数据中常存在“噪声”“缺失”“尺度不统一”"><a href="#3️⃣-数据中常存在“噪声”“缺失”“尺度不统一”" class="headerlink" title="3️⃣ 数据中常存在“噪声”“缺失”“尺度不统一”"></a>3️⃣ 数据中常存在“噪声”“缺失”“尺度不统一”</h3><p>特征工程可用于：</p><ul><li>填补缺失值</li><li>归一化 &#x2F; 标准化（防止大数值主导模型）</li><li>异常值处理</li><li>类别变量编码（One-Hot、Target Encoding 等）</li></ul><p>这些处理直接影响模型的训练稳定性。</p><hr><h3 id="4️⃣-不同算法对特征要求不同"><a href="#4️⃣-不同算法对特征要求不同" class="headerlink" title="4️⃣ 不同算法对特征要求不同"></a>4️⃣ 不同算法对特征要求不同</h3><table><thead><tr><th>模型类型</th><th>对特征工程的依赖程度</th><th>示例</th></tr></thead><tbody><tr><td>线性模型（LR, SVM）</td><td>✅ 非常依赖</td><td>需要手工构造多项式特征</td></tr><tr><td>树模型（XGBoost, RandomForest）</td><td>⚙️ 中等</td><td>自动分裂学习特征，但仍需数值化与合理分桶</td></tr><tr><td>深度学习（CNN, Transformer）</td><td>🚀 相对较弱</td><td>模型能自动学习特征，但仍需规范化和合理预处理</td></tr></tbody></table><p>即使是深度学习，也要做“特征预处理”，否则模型难以收敛或性能不稳。</p><hr><h2 id="🧩-三、特征工程的常见步骤"><a href="#🧩-三、特征工程的常见步骤" class="headerlink" title="🧩 三、特征工程的常见步骤"></a>🧩 三、特征工程的常见步骤</h2><table><thead><tr><th>步骤</th><th>示例</th></tr></thead><tbody><tr><td>数据清洗</td><td>缺失值填补、异常值处理</td></tr><tr><td>特征选择</td><td>去掉无关或冗余特征</td></tr><tr><td>特征构造</td><td>面积&#x2F;房间数、时间间隔、统计特征</td></tr><tr><td>特征变换</td><td>对数变换、归一化、标准化</td></tr><tr><td>特征编码</td><td>One-Hot, Label Encoding</td></tr><tr><td>特征降维</td><td>PCA、AutoEncoder、LDA</td></tr></tbody></table><hr><h2 id="🚀-四、结论：特征工程的本质"><a href="#🚀-四、结论：特征工程的本质" class="headerlink" title="🚀 四、结论：特征工程的本质"></a>🚀 四、结论：特征工程的本质</h2><blockquote><p>特征工程是让机器“懂数据”的过程，<br>而模型只是“学规律”的过程。</p></blockquote><p>📊 如果把机器学习比作烹饪：</p><ul><li><strong>数据收集</strong>是买菜</li><li><strong>特征工程</strong>是洗菜、切菜、调味</li><li><strong>模型训练</strong>只是“下锅炒”</li><li>菜好不好吃，八成取决于前面那几步。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> ai </tag>
            
            <tag> 数据分析算法 </tag>
            
            <tag> 特征工程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据分析算法</title>
      <link href="/2025/10/12/bigdata_for_analyze/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E7%AE%97%E6%B3%95/"/>
      <url>/2025/10/12/bigdata_for_analyze/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>算法分成五大类，从基础到AI级别，覆盖从<strong>描述性分析 → 预测性分析 → 生成性分析</strong>的全流程。</p><hr><h2 id="🧭-一、总体分类总览"><a href="#🧭-一、总体分类总览" class="headerlink" title="🧭 一、总体分类总览"></a>🧭 一、总体分类总览</h2><table><thead><tr><th>算法类型</th><th>主要目的</th><th>场景举例</th></tr></thead><tbody><tr><td>① 描述统计类</td><td>总结数据特征、发现规律</td><td>报表分析、KPI监控</td></tr><tr><td>② 诊断分析类</td><td>找出变化原因与关系</td><td>异常检测、因果分析</td></tr><tr><td>③ 预测建模类</td><td>预测未来趋势或结果</td><td>销售预测、流失预测</td></tr><tr><td>④ 聚类与分群类</td><td>按特征对数据自动分组</td><td>用户分群、图像压缩</td></tr><tr><td>⑤ 生成与推荐类（AI）</td><td>自动生成结果或策略</td><td>推荐系统、生成报告、LLM分析</td></tr></tbody></table><hr><h2 id="📊-二、描述性与统计分析类算法"><a href="#📊-二、描述性与统计分析类算法" class="headerlink" title="📊 二、描述性与统计分析类算法"></a>📊 二、描述性与统计分析类算法</h2><table><thead><tr><th>算法 &#x2F; 方法</th><th>作用</th><th>应用场景</th><th>工具&#x2F;实现</th></tr></thead><tbody><tr><td>均值 &#x2F; 方差 &#x2F; 中位数</td><td>描述集中趋势</td><td>销售额、温度平均值</td><td>Excel, Pandas</td></tr><tr><td>相关分析（Correlation）</td><td>衡量两个变量关系强度</td><td>广告投放与销售关系</td><td>Pandas <code>.corr()</code>, SciPy</td></tr><tr><td>主成分分析（PCA）</td><td>降维，提取主要特征</td><td>多维指标压缩、特征提取</td><td>sklearn.decomposition</td></tr><tr><td>偏度 &#x2F; 峰度</td><td>检测分布形态</td><td>数据是否偏态分布</td><td>Pandas, NumPy</td></tr><tr><td>时间序列趋势分析</td><td>观察时间变化规律</td><td>KPI监控、销售季节性</td><td>statsmodels, Prophet</td></tr></tbody></table><p>📘 示例：</p><blockquote><p>用 PCA 分析 50 个财务指标，提炼出 3 个主成分来解释企业健康度。</p></blockquote><hr><h2 id="🔍-三、诊断分析类算法（Why层面）"><a href="#🔍-三、诊断分析类算法（Why层面）" class="headerlink" title="🔍 三、诊断分析类算法（Why层面）"></a>🔍 三、诊断分析类算法（Why层面）</h2><table><thead><tr><th>算法 &#x2F; 方法</th><th>作用</th><th>场景</th><th>工具</th></tr></thead><tbody><tr><td>假设检验 (t-test, ANOVA)</td><td>判断差异是否显著</td><td>AB测试、活动效果对比</td><td>SciPy, R</td></tr><tr><td>卡方检验 (Chi-square)</td><td>检查分类变量关联性</td><td>用户性别与购买偏好</td><td>SciPy</td></tr><tr><td>回归诊断 (VIF, Cook’s Distance)</td><td>检测共线性与异常值</td><td>模型优化</td><td>sklearn</td></tr><tr><td>决策树可解释性分析</td><td>查看重要影响因素</td><td>销售下滑原因分析</td><td>sklearn.tree</td></tr><tr><td>异常检测 (Isolation Forest, DBSCAN)</td><td>自动识别异常样本</td><td>欺诈检测、系统监控</td><td>sklearn, PyOD</td></tr></tbody></table><p>📘 示例：</p><blockquote><p>用 t-test 检验活动 A 和 B 的转化率差异是否显著。</p></blockquote><hr><h2 id="📈-四、预测建模类算法（Predictive-Analytics）"><a href="#📈-四、预测建模类算法（Predictive-Analytics）" class="headerlink" title="📈 四、预测建模类算法（Predictive Analytics）"></a>📈 四、预测建模类算法（Predictive Analytics）</h2><table><thead><tr><th>算法</th><th>类型</th><th>应用场景</th><th>工具</th></tr></thead><tbody><tr><td>线性回归 (Linear Regression)</td><td>连续预测</td><td>销售额、房价预测</td><td>sklearn</td></tr><tr><td>逻辑回归 (Logistic Regression)</td><td>二分类预测</td><td>用户流失&#x2F;转化预测</td><td>sklearn</td></tr><tr><td>决策树 (Decision Tree)</td><td>分类与回归</td><td>客户信用评分、风险评估</td><td>sklearn</td></tr><tr><td>随机森林 (Random Forest)</td><td>集成学习</td><td>特征复杂场景预测</td><td>sklearn</td></tr><tr><td>XGBoost &#x2F; LightGBM</td><td>高性能模型</td><td>大数据、竞赛预测</td><td>XGBoost, LightGBM</td></tr><tr><td>时间序列 (ARIMA, Prophet, LSTM)</td><td>序列趋势预测</td><td>销售趋势、流量预测</td><td>statsmodels, fbprophet, TensorFlow</td></tr><tr><td>贝叶斯分析 (Bayesian Inference)</td><td>概率预测</td><td>医疗诊断、风险概率估计</td><td>PyMC3, Stan</td></tr></tbody></table><p>📘 示例：</p><blockquote><p>用 XGBoost 预测“下月客户流失概率”，并用 SHAP 可解释性图分析关键因素。</p></blockquote><hr><h2 id="🧩-五、聚类与分群分析类算法（Exploratory-Analytics）"><a href="#🧩-五、聚类与分群分析类算法（Exploratory-Analytics）" class="headerlink" title="🧩 五、聚类与分群分析类算法（Exploratory Analytics）"></a>🧩 五、聚类与分群分析类算法（Exploratory Analytics）</h2><table><thead><tr><th>算法</th><th>类型</th><th>场景</th><th>工具</th></tr></thead><tbody><tr><td>K-Means</td><td>基于距离的聚类</td><td>用户分群、图像压缩</td><td>sklearn.cluster</td></tr><tr><td>DBSCAN</td><td>密度聚类</td><td>异常检测、地理位置聚合</td><td>sklearn</td></tr><tr><td>层次聚类 (Hierarchical)</td><td>层级关系分析</td><td>客户画像、基因分类</td><td>scipy.cluster</td></tr><tr><td>GMM（高斯混合模型）</td><td>软聚类</td><td>市场细分</td><td>sklearn.mixture</td></tr><tr><td>SOM（自组织映射）</td><td>非线性聚类</td><td>特征降维、可视化</td><td>minisom</td></tr></tbody></table><p>📘 示例：</p><blockquote><p>用 K-Means 把用户分为「高价值」「中活跃」「潜在流失」三类。</p></blockquote><hr><h2 id="🤖-六、生成性与推荐类算法（AI-Prescriptive-Analytics）"><a href="#🤖-六、生成性与推荐类算法（AI-Prescriptive-Analytics）" class="headerlink" title="🤖 六、生成性与推荐类算法（AI&#x2F;Prescriptive Analytics）"></a>🤖 六、生成性与推荐类算法（AI&#x2F;Prescriptive Analytics）</h2><table><thead><tr><th>算法</th><th>类型</th><th>场景</th><th>工具</th></tr></thead><tbody><tr><td>协同过滤 (Collaborative Filtering)</td><td>个性化推荐</td><td>电商、视频推荐</td><td>Surprise, implicit</td></tr><tr><td>矩阵分解 (SVD, NMF)</td><td>隐因子建模</td><td>推荐系统</td><td>sklearn.decomposition</td></tr><tr><td>强化学习 (Reinforcement Learning)</td><td>策略最优决策</td><td>定价、广告投放优化</td><td>Stable-Baselines3</td></tr><tr><td>LLM + 数据分析</td><td>智能报告、解释模型</td><td>ChatGPT、LangChain + Pandas Agent</td><td>OpenAI API</td></tr><tr><td>GAN &#x2F; Diffusion &#x2F; Transformer</td><td>生成数据、图像、文本</td><td>模拟场景、生成性分析</td><td>PyTorch, HuggingFace</td></tr></tbody></table><p>📘 示例：</p><blockquote><p>用 GPT + 数据源生成自动化分析报告：<br>“上周销售额下降主要由于东南区域新品点击率降低。”</p></blockquote><hr><h2 id="🧮-七、算法选择思维导图"><a href="#🧮-七、算法选择思维导图" class="headerlink" title="🧮 七、算法选择思维导图"></a>🧮 七、算法选择思维导图</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">📘 目标明确 → 选算法类别：</span><br><span class="line">│</span><br><span class="line">├─ 了解数据特征 → 描述统计 / 可视化</span><br><span class="line">├─ 想解释“为什么” → 诊断分析</span><br><span class="line">├─ 想预测“接下来” → 回归 / 分类 / 时间序列</span><br><span class="line">├─ 想探索“用户分群” → 聚类 / 降维</span><br><span class="line">├─ 想生成“推荐或策略” → 生成式 / 推荐算法 / 强化学习</span><br><span class="line">└─ 想让AI解释数据 → LLM智能分析</span><br></pre></td></tr></table></figure><hr><h2 id="🧠-八、应用举例汇总"><a href="#🧠-八、应用举例汇总" class="headerlink" title="🧠 八、应用举例汇总"></a>🧠 八、应用举例汇总</h2><table><thead><tr><th>业务场景</th><th>典型算法</th><th>输出</th></tr></thead><tbody><tr><td>电商销售预测</td><td>时间序列 + XGBoost</td><td>销售趋势与风险预警</td></tr><tr><td>用户画像</td><td>K-Means + PCA</td><td>用户分群与营销定位</td></tr><tr><td>客户流失分析</td><td>逻辑回归 + 决策树</td><td>流失率预测与关键因素</td></tr><tr><td>欺诈检测</td><td>Isolation Forest + DBSCAN</td><td>异常交易识别</td></tr><tr><td>营销推荐</td><td>协同过滤 + 强化学习</td><td>个性化推荐策略</td></tr><tr><td>智能报告生成</td><td>GPT + LLM Chain</td><td>自动化分析与自然语言报告</td></tr></tbody></table><hr><h2 id="✅-九、进阶建议"><a href="#✅-九、进阶建议" class="headerlink" title="✅ 九、进阶建议"></a>✅ 九、进阶建议</h2><table><thead><tr><th>层级</th><th>学习目标</th><th>工具</th></tr></thead><tbody><tr><td>入门</td><td>描述性 + 回归 + 聚类</td><td>Excel &#x2F; Pandas &#x2F; sklearn</td></tr><tr><td>进阶</td><td>集成学习 + 时间序列 + 推荐</td><td>XGBoost &#x2F; Prophet &#x2F; Surprise</td></tr><tr><td>高阶</td><td>AutoML + LLM生成分析</td><td>PyCaret &#x2F; MLflow &#x2F; LangChain</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> ai </tag>
            
            <tag> 数据分析算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据分析</title>
      <link href="/2025/10/11/bigdata_for_analyze/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
      <url>/2025/10/11/bigdata_for_analyze/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="🧭-一、整体学习路线图概览"><a href="#🧭-一、整体学习路线图概览" class="headerlink" title="🧭 一、整体学习路线图概览"></a>🧭 一、整体学习路线图概览</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">阶段 1：数据分析基础入门</span><br><span class="line">→ 阶段 2：进阶分析与自动化</span><br><span class="line">→ 阶段 3：AI模型驱动的数据分析（机器学习/深度学习）</span><br></pre></td></tr></table></figure><hr><h2 id="🌱-阶段-1：数据分析基础入门"><a href="#🌱-阶段-1：数据分析基础入门" class="headerlink" title="🌱 阶段 1：数据分析基础入门"></a>🌱 阶段 1：数据分析基础入门</h2><p><strong>目标：</strong> 学会用数据讲故事、发现规律。</p><h3 id="🎯-核心能力"><a href="#🎯-核心能力" class="headerlink" title="🎯 核心能力"></a>🎯 核心能力</h3><table><thead><tr><th>模块</th><th>学习重点</th><th>工具&#x2F;语言</th></tr></thead><tbody><tr><td>数据思维</td><td>什么是数据分析、指标、因果关系</td><td>统计思维、业务理解</td></tr><tr><td>数据获取</td><td>从Excel、数据库、API中获取数据</td><td>Excel、SQL、Python（pandas）</td></tr><tr><td>数据清洗</td><td>缺失值、异常值、重复值处理</td><td>pandas、OpenRefine</td></tr><tr><td>数据可视化</td><td>用图表展示趋势与洞察</td><td>matplotlib、seaborn、Power BI、Tableau</td></tr><tr><td>基础统计</td><td>平均值、中位数、方差、相关性分析</td><td>numpy、scipy</td></tr></tbody></table><h3 id="💡-入门学习路径建议"><a href="#💡-入门学习路径建议" class="headerlink" title="💡 入门学习路径建议"></a>💡 入门学习路径建议</h3><ol><li><p><strong>Excel + SQL</strong> 打好地基</p></li><li><p>学会用 <strong>Python (pandas + matplotlib)</strong> 做数据清洗与可视化</p></li><li><p>阅读《利用Python进行数据分析（Wes McKinney）》</p></li><li><p>做一个小项目：</p><blockquote><p>示例：分析你自己的消费记录、天气数据、网站流量等。</p></blockquote></li></ol><hr><h2 id="🚀-阶段-2：进阶数据分析与自动化"><a href="#🚀-阶段-2：进阶数据分析与自动化" class="headerlink" title="🚀 阶段 2：进阶数据分析与自动化"></a>🚀 阶段 2：进阶数据分析与自动化</h2><p><strong>目标：</strong> 从“看数据”到“让数据自动说话”，提升效率与洞察力。</p><h3 id="🎯-核心能力-1"><a href="#🎯-核心能力-1" class="headerlink" title="🎯 核心能力"></a>🎯 核心能力</h3><table><thead><tr><th>模块</th><th>内容</th><th>工具&#x2F;语言</th></tr></thead><tbody><tr><td>数据工程</td><td>数据管道、ETL、数据仓库</td><td>Airflow、SQL、Pandas、DuckDB</td></tr><tr><td>商业分析</td><td>指标体系、A&#x2F;B测试、分群分析</td><td>Excel、Tableau、Python</td></tr><tr><td>自动化报告</td><td>定时生成报表、自动检测异常</td><td>Python调度、Power BI、Dash</td></tr><tr><td>统计建模</td><td>回归分析、假设检验、时间序列</td><td>sklearn.statsmodels</td></tr></tbody></table><h3 id="💡-进阶项目建议"><a href="#💡-进阶项目建议" class="headerlink" title="💡 进阶项目建议"></a>💡 进阶项目建议</h3><ul><li>用户留存&#x2F;转化分析</li><li>异常检测系统（自动发现问题）</li><li>用Python写一个数据报告自动生成脚本（如财务日报）</li></ul><hr><h2 id="🤖-阶段-3：AI模型驱动的数据分析（AI-Data-Analysis）"><a href="#🤖-阶段-3：AI模型驱动的数据分析（AI-Data-Analysis）" class="headerlink" title="🤖 阶段 3：AI模型驱动的数据分析（AI Data Analysis）"></a>🤖 阶段 3：AI模型驱动的数据分析（AI Data Analysis）</h2><p><strong>目标：</strong> 从“描述性分析” → “预测性分析” → “生成性分析”。</p><h3 id="🎯-技术路线"><a href="#🎯-技术路线" class="headerlink" title="🎯 技术路线"></a>🎯 技术路线</h3><table><thead><tr><th>层级</th><th>内容</th><th>工具&#x2F;框架</th></tr></thead><tbody><tr><td>机器学习（ML）</td><td>分类、回归、聚类、降维</td><td>Scikit-learn、XGBoost、LightGBM</td></tr><tr><td>深度学习（DL）</td><td>时间序列预测、图像&#x2F;文本分析</td><td>TensorFlow、PyTorch</td></tr><tr><td>AutoML</td><td>自动建模与调参</td><td>Auto-Sklearn、PyCaret、DataRobot</td></tr><tr><td>AI分析助手</td><td>LLM辅助分析与报告生成</td><td>ChatGPT、Claude、LangChain + 数据分析插件</td></tr></tbody></table><h3 id="💡-实战方向举例"><a href="#💡-实战方向举例" class="headerlink" title="💡 实战方向举例"></a>💡 实战方向举例</h3><ol><li><strong>预测类</strong>：销售预测、用户流失预测、库存优化</li><li><strong>分类类</strong>：客户分群、信用评分、风险识别</li><li><strong>生成类（AI）</strong>：自动生成数据报告、AI分析对话助手</li></ol><hr><h2 id="🧠-技能成长模型（T字型）"><a href="#🧠-技能成长模型（T字型）" class="headerlink" title="🧠 技能成长模型（T字型）"></a>🧠 技能成长模型（T字型）</h2><table><thead><tr><th>技能维度</th><th>描述</th></tr></thead><tbody><tr><td><strong>横向（广度）</strong></td><td>Excel、SQL、Python、可视化、统计</td></tr><tr><td><strong>纵向（深度）</strong></td><td>精通某一方向，如AI预测模型、数据产品设计、商业分析</td></tr></tbody></table><hr><h2 id="🧩-学习资料推荐（精选）"><a href="#🧩-学习资料推荐（精选）" class="headerlink" title="🧩 学习资料推荐（精选）"></a>🧩 学习资料推荐（精选）</h2><table><thead><tr><th>类型</th><th>资源</th><th>推荐理由</th></tr></thead><tbody><tr><td>📘 书籍</td><td>《利用Python进行数据分析》</td><td>数据分析核心技能</td></tr><tr><td>📘 书籍</td><td>《统计学习方法》</td><td>AI建模理论基础</td></tr><tr><td>🧑‍💻 实战课</td><td>Kaggle (<a href="https://www.kaggle.com/">https://www.kaggle.com</a>)</td><td>数据建模实战平台</td></tr><tr><td>📺 视频</td><td>YouTube&#x2F;Bilibili「数据分析入门」「机器学习实战」</td><td>快速上手</td></tr><tr><td>🛠 工具</td><td>Jupyter Notebook &#x2F; Power BI &#x2F; Tableau</td><td>可视化 + 报告</td></tr></tbody></table><hr><h2 id="⚙️-从数据分析到AI分析的过渡关键点"><a href="#⚙️-从数据分析到AI分析的过渡关键点" class="headerlink" title="⚙️ 从数据分析到AI分析的过渡关键点"></a>⚙️ 从数据分析到AI分析的过渡关键点</h2><table><thead><tr><th>维度</th><th>从</th><th>到</th></tr></thead><tbody><tr><td>分析方式</td><td>手动分析</td><td>自动化分析</td></tr><tr><td>方法论</td><td>统计与可视化</td><td>机器学习模型</td></tr><tr><td>工具</td><td>Excel&#x2F;Tableau</td><td>Python + sklearn&#x2F;PyTorch</td></tr><tr><td>输出</td><td>报表与图表</td><td>预测、智能决策支持</td></tr><tr><td>角色</td><td>数据分析师</td><td>数据科学家 &#x2F; AI分析师</td></tr></tbody></table><hr><h2 id="🧩-示例进阶路径（可操作计划）"><a href="#🧩-示例进阶路径（可操作计划）" class="headerlink" title="🧩 示例进阶路径（可操作计划）"></a>🧩 示例进阶路径（可操作计划）</h2><table><thead><tr><th>阶段</th><th>学习目标</th><th>实践任务</th></tr></thead><tbody><tr><td>第1个月</td><td>Python数据分析基础</td><td>完成3个pandas可视化分析项目</td></tr><tr><td>第2-3个月</td><td>SQL + 商业数据分析</td><td>模拟电商或APP数据分析项目</td></tr><tr><td>第4-5个月</td><td>机器学习入门</td><td>Kaggle竞赛实战：房价预测&#x2F;客户分群</td></tr><tr><td>第6个月</td><td>AI模型与报告生成</td><td>用LLM辅助生成数据报告、解释模型结果</td></tr></tbody></table><p>–</p><blockquote><p><strong>描述性 → 诊断性 → 预测性 → 规范性（或生成性）分析</strong></p></blockquote><p>三阶段（描述性→预测性→生成性）是对这一体系的<strong>简化版</strong>，更贴合“传统数据分析到AI分析”的技术演进路线。<br>我们可以详细比较一下这两种路径的<strong>逻辑差异与适用场景</strong> 👇</p><hr><h2 id="🧭-一、标准分析体系：四层模型"><a href="#🧭-一、标准分析体系：四层模型" class="headerlink" title="🧭 一、标准分析体系：四层模型"></a>🧭 一、标准分析体系：四层模型</h2><table><thead><tr><th>阶段</th><th>核心问题</th><th>方法&#x2F;技术</th><th>输出示例</th></tr></thead><tbody><tr><td><strong>1️⃣ 描述性分析 (Descriptive Analytics)</strong></td><td>发生了什么？</td><td>汇总、可视化、统计</td><td>月销售额报表、KPI趋势图</td></tr><tr><td><strong>2️⃣ 诊断性分析 (Diagnostic Analytics)</strong></td><td>为什么发生？</td><td>相关分析、因果分析、分群对比</td><td>为什么本月销售下降？哪个品类影响最大？</td></tr><tr><td><strong>3️⃣ 预测性分析 (Predictive Analytics)</strong></td><td>未来会怎样？</td><td>回归模型、时间序列、机器学习</td><td>下季度销量预测、流失率预测</td></tr><tr><td><strong>4️⃣ 规范性分析 &#x2F; 生成性分析 (Prescriptive &#x2F; Generative Analytics)</strong></td><td>应该怎么做？</td><td>优化算法、AI决策、生成式AI</td><td>定价优化、策略推荐、AI报告生成</td></tr></tbody></table><hr><h2 id="🧩-二、为何“生成性分析”有时替代“规范性分析”"><a href="#🧩-二、为何“生成性分析”有时替代“规范性分析”" class="headerlink" title="🧩 二、为何“生成性分析”有时替代“规范性分析”"></a>🧩 二、为何“生成性分析”有时替代“规范性分析”</h2><p>传统上，<strong>规范性分析（Prescriptive Analytics）</strong> 指的是：</p><blockquote><p>在预测之后，用算法或优化模型<strong>推荐最优行动方案</strong>。<br>如：如何调整价格、怎样分配库存。</p></blockquote><p>但进入 <strong>AI时代</strong> 后：</p><ul><li>生成式AI 不仅能推荐方案，还能<strong>自动生成</strong> 报告、策略、代码、图表。</li><li>因此，“生成性分析（Generative Analytics）” 逐渐被用来概括这一新阶段。</li></ul><p>换句话说：</p><blockquote><p>生成性分析 &#x3D; 规范性分析 + 生成式AI的自然语言与多模态能力。</p></blockquote><hr><h2 id="🧠-三、两种路径的适用视角"><a href="#🧠-三、两种路径的适用视角" class="headerlink" title="🧠 三、两种路径的适用视角"></a>🧠 三、两种路径的适用视角</h2><table><thead><tr><th>角度</th><th>四阶段路径</th><th>三阶段路径</th></tr></thead><tbody><tr><td><strong>教学&#x2F;分析思维</strong></td><td>更完整，适合培养数据分析思维（What → Why → What’s next → What to do）</td><td>适合非专业背景快速理解“AI分析”演进逻辑</td></tr><tr><td><strong>技术路线</strong></td><td>偏传统BI与数据科学方法论</td><td>偏AI技术演进（描述 → 预测 → 生成）</td></tr><tr><td><strong>最终目标</strong></td><td>支撑业务决策</td><td>构建智能化分析系统（AI Copilot、自动报告生成）</td></tr></tbody></table><hr><h2 id="🔍-四、结合实例看两者差别"><a href="#🔍-四、结合实例看两者差别" class="headerlink" title="🔍 四、结合实例看两者差别"></a>🔍 四、结合实例看两者差别</h2><p>以“电商销售下降”为例：</p><table><thead><tr><th>阶段</th><th>关键问题</th><th>分析内容</th><th>技术实现</th></tr></thead><tbody><tr><td><strong>描述性</strong></td><td>销售额发生了变化？</td><td>月销售额下降10%</td><td>SQL汇总 + 报表</td></tr><tr><td><strong>诊断性</strong></td><td>为什么下降？</td><td>发现主因是特定产品线销量下滑</td><td>Python相关性分析、分群分析</td></tr><tr><td><strong>预测性</strong></td><td>未来会怎样？</td><td>预测下月销售将下降5%</td><td>回归模型、时间序列</td></tr><tr><td><strong>规范性&#x2F;生成性</strong></td><td>应该如何应对？</td><td>系统推荐调整广告预算 + 生成报告</td><td>优化算法 &#x2F; LLM生成分析报告</td></tr></tbody></table><hr><h2 id="🧩-五、AI-驱动下的新融合趋势"><a href="#🧩-五、AI-驱动下的新融合趋势" class="headerlink" title="🧩 五、AI 驱动下的新融合趋势"></a>🧩 五、AI 驱动下的新融合趋势</h2><p>随着 <strong>LLM（如GPT）与数据分析结合</strong>，<br>诊断性分析和规范性分析的界线开始模糊：</p><blockquote><p>🧠 GPT 可以根据描述性数据 → 自动进行诊断 → 生成可执行建议<br>这就是“生成性分析”的核心意义。</p></blockquote><p>所以现在的技术路径常简化为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">描述性（Descriptive）</span><br><span class="line">→ 预测性（Predictive）</span><br><span class="line">→ 生成性（Generative）</span><br></pre></td></tr></table></figure><p>它隐含地将诊断性分析融入模型的解释与生成过程中。</p><hr><h2 id="✅-总结对比"><a href="#✅-总结对比" class="headerlink" title="✅ 总结对比"></a>✅ 总结对比</h2><table><thead><tr><th>模型</th><th>核心定位</th><th>应用背景</th></tr></thead><tbody><tr><td><strong>描述 → 诊断 → 预测 → 规范</strong></td><td>传统BI与数据科学流程，逻辑严谨</td><td>企业分析、KPI监控、策略优化</td></tr><tr><td><strong>描述 → 预测 → 生成</strong></td><td>AI化的技术演进路径，更贴近智能分析系统</td><td>AI助手、自动报告、智能决策支持</td></tr></tbody></table><p>非常好的问题 👏<br>“E2E 大数分析”（End-to-End Big Data Analysis）是数据分析到 AI 实战之间的关键跳板。<br>它的核心目标是：</p><blockquote><p><strong>让数据从采集 → 清洗 → 分析 → 建模 → 可视化 → 应用，全流程自动化与智能化。</strong></p></blockquote><p>下面我给你一份完整、循序渐进的学习与实战指南，从入门思维 → 技术栈 → 实战路线，一步走通整个 E2E（端到端）数据分析链路。</p><hr><h2 id="🧭-一、什么是-E2E-大数分析？"><a href="#🧭-一、什么是-E2E-大数分析？" class="headerlink" title="🧭 一、什么是 E2E 大数分析？"></a>🧭 一、什么是 E2E 大数分析？</h2><blockquote><p><strong>E2E（End-to-End）数据分析</strong> 指从原始数据源开始，到输出预测、决策或智能可视化结果的<strong>全流程系统化分析链路</strong>。</p></blockquote><p>📈 典型流程：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数据采集 → 数据存储 → 数据清洗 → 特征工程 → 建模与验证 → 可视化与自动报告</span><br></pre></td></tr></table></figure><p>可以理解为：</p><blockquote><p>“你不只是看数据，而是构建一个能自动理解、预测、生成洞察的系统。”</p></blockquote><hr><h2 id="🧩-二、核心模块分解（六步闭环）"><a href="#🧩-二、核心模块分解（六步闭环）" class="headerlink" title="🧩 二、核心模块分解（六步闭环）"></a>🧩 二、核心模块分解（六步闭环）</h2><table><thead><tr><th>模块</th><th>核心任务</th><th>典型工具 &#x2F; 框架</th></tr></thead><tbody><tr><td><strong>1️⃣ 数据采集 (Ingestion)</strong></td><td>从数据库、日志、API、IoT等获取数据</td><td>Kafka、Flume、API、Python Requests</td></tr><tr><td><strong>2️⃣ 数据存储 (Storage)</strong></td><td>存放结构化&#x2F;非结构化大数据</td><td>MySQL、PostgreSQL、HDFS、Hive、Delta Lake</td></tr><tr><td><strong>3️⃣ 数据清洗与预处理 (ETL&#x2F;ELT)</strong></td><td>去噪、缺失值、格式化、聚合</td><td>PySpark、Pandas、Airflow、dbt</td></tr><tr><td><strong>4️⃣ 分析与建模 (Analytics &amp; ML)</strong></td><td>描述性、预测性、AI建模</td><td>Spark MLlib、Scikit-learn、XGBoost、TensorFlow</td></tr><tr><td><strong>5️⃣ 可视化与报告 (BI&#x2F;Visualization)</strong></td><td>展示与讲述结果</td><td>Power BI、Tableau、Plotly、Superset</td></tr><tr><td><strong>6️⃣ 自动化与部署 (Automation&#x2F;DevOps)</strong></td><td>调度、持续集成、服务化</td><td>Airflow、Docker、MLflow、CI&#x2F;CD Pipeline</td></tr></tbody></table><hr><h2 id="🧠-三、入手建议：三阶段路线图"><a href="#🧠-三、入手建议：三阶段路线图" class="headerlink" title="🧠 三、入手建议：三阶段路线图"></a>🧠 三、入手建议：三阶段路线图</h2><h3 id="🚀-阶段-1：理解端到端流程（宏观视角）"><a href="#🚀-阶段-1：理解端到端流程（宏观视角）" class="headerlink" title="🚀 阶段 1：理解端到端流程（宏观视角）"></a>🚀 阶段 1：理解端到端流程（宏观视角）</h3><p>目标：先理解“整个数据流”的逻辑。</p><ol><li><p>学习数据流：Raw → Clean → Model → Insight</p></li><li><p>用 Python + Pandas 模拟小规模 E2E 流程</p><ul><li>数据源：CSV 文件或 API</li><li>分析：描述 + 预测（简单线性回归）</li><li>输出：可视化 + 自动报告</li></ul></li></ol><p>📘 推荐练习项目：</p><blockquote><p>分析你自己的账单 &#x2F; 网站日志 &#x2F; 公共数据集（如 Kaggle 的“Netflix 电影数据集”）</p></blockquote><hr><h3 id="⚙️-阶段-2：进入“大数据分析”体系（技术视角）"><a href="#⚙️-阶段-2：进入“大数据分析”体系（技术视角）" class="headerlink" title="⚙️ 阶段 2：进入“大数据分析”体系（技术视角）"></a>⚙️ 阶段 2：进入“大数据分析”体系（技术视角）</h3><p>目标：掌握数据量扩大后的工具链与架构思维。</p><ol><li><p>学习 <strong>分布式计算框架</strong></p><ul><li>PySpark（核心），理解 RDD → DataFrame → SQL</li><li>熟悉 Hadoop&#x2F;HDFS 背景知识</li></ul></li><li><p>数据管道自动化</p><ul><li>Airflow &#x2F; Prefect：定时清洗、调度任务</li><li>dbt：现代数据建模（SQL逻辑层）</li></ul></li><li><p>存储优化</p><ul><li>Parquet、Delta Lake、BigQuery 的表分区与缓存机制</li></ul></li><li><p>可视化与 BI</p><ul><li>用 Superset &#x2F; Power BI 连接 Hive 或 Spark 结果表</li></ul></li></ol><p>📘 实战项目建议：</p><blockquote><p>设计一个每日自动分析“网站访问日志”的系统，输出访问量趋势 + 用户分群报表。</p></blockquote><hr><h3 id="🤖-阶段-3：AI化的-E2E-大数分析（智能决策）"><a href="#🤖-阶段-3：AI化的-E2E-大数分析（智能决策）" class="headerlink" title="🤖 阶段 3：AI化的 E2E 大数分析（智能决策）"></a>🤖 阶段 3：AI化的 E2E 大数分析（智能决策）</h3><p>目标：让系统能<strong>自我学习 + 自动生成洞察报告</strong>。</p><ol><li><p>结合 AutoML：</p><ul><li>PyCaret &#x2F; Auto-Sklearn 实现模型自动选择与调参</li></ul></li><li><p>模型管理与部署：</p><ul><li>MLflow 管理模型版本</li><li>Docker + FastAPI 提供在线预测服务</li></ul></li><li><p>生成式 AI 加持：</p><ul><li>用 LLM（如 GPT）自动生成数据分析报告或洞察</li><li>LangChain &#x2F; OpenAI API + Pandas Agent 实现“智能分析助手”</li></ul></li></ol><p>📘 实战方向举例：</p><blockquote><p>构建一个“AI销售分析系统”：自动清洗 → 建模 → 预测销量 → 生成自然语言报告。</p></blockquote><hr><h2 id="🧩-四、完整技术栈蓝图（按层划分）"><a href="#🧩-四、完整技术栈蓝图（按层划分）" class="headerlink" title="🧩 四、完整技术栈蓝图（按层划分）"></a>🧩 四、完整技术栈蓝图（按层划分）</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">📥 数据采集层：</span><br><span class="line">  - Kafka / Flume / API / Scrapy / IoT传感器</span><br><span class="line"></span><br><span class="line">🧱 数据存储层：</span><br><span class="line">  - HDFS / Hive / MySQL / BigQuery / Delta Lake</span><br><span class="line"></span><br><span class="line">🧹 数据处理层（ETL）：</span><br><span class="line">  - Spark / PySpark / Airflow / dbt</span><br><span class="line"></span><br><span class="line">🧮 分析与建模层：</span><br><span class="line">  - Python / Scikit-learn / XGBoost / TensorFlow / PyTorch / AutoML</span><br><span class="line"></span><br><span class="line">📊 可视化层：</span><br><span class="line">  - Power BI / Tableau / Superset / Plotly / Streamlit</span><br><span class="line"></span><br><span class="line">🤖 智能报告与自动化层：</span><br><span class="line">  - GPT / LangChain / MLflow / FastAPI / Docker / CI/CD</span><br></pre></td></tr></table></figure><hr><h2 id="📘-五、E2E-实战入门路径（建议学习顺序）"><a href="#📘-五、E2E-实战入门路径（建议学习顺序）" class="headerlink" title="📘 五、E2E 实战入门路径（建议学习顺序）"></a>📘 五、E2E 实战入门路径（建议学习顺序）</h2><table><thead><tr><th>周期</th><th>目标</th><th>工具与项目</th></tr></thead><tbody><tr><td>第1-2周</td><td>熟悉数据流与分析流程</td><td>Python + Pandas + Matplotlib</td></tr><tr><td>第3-4周</td><td>掌握ETL与数据清洗</td><td>Airflow + SQL + Pandas</td></tr><tr><td>第5-6周</td><td>大数据分析入门</td><td>PySpark + Hive</td></tr><tr><td>第7-8周</td><td>建模与预测</td><td>Scikit-learn + AutoML</td></tr><tr><td>第9-10周</td><td>报告与可视化</td><td>Power BI &#x2F; Streamlit</td></tr><tr><td>第11-12周</td><td>自动化与智能化</td><td>MLflow + GPT报告生成</td></tr></tbody></table><hr><h2 id="🌐-六、入门资源推荐"><a href="#🌐-六、入门资源推荐" class="headerlink" title="🌐 六、入门资源推荐"></a>🌐 六、入门资源推荐</h2><table><thead><tr><th>方向</th><th>资源</th><th>说明</th></tr></thead><tbody><tr><td>PySpark</td><td>Databricks 免费课程</td><td>工业级大数据分析框架</td></tr><tr><td>Airflow</td><td>Astronomer.io 教程</td><td>工作流自动化入门</td></tr><tr><td>AutoML</td><td>PyCaret 文档</td><td>简化机器学习全流程</td></tr><tr><td>可视化</td><td>Streamlit &#x2F; Power BI 官方文档</td><td>快速展示与交互式分析</td></tr><tr><td>AI分析</td><td>LangChain + Pandas Agent 示例</td><td>构建智能分析助手</td></tr></tbody></table><hr><h2 id="✅-总结一句话："><a href="#✅-总结一句话：" class="headerlink" title="✅ 总结一句话："></a>✅ 总结一句话：</h2><blockquote><p><strong>E2E 大数分析 &#x3D; 数据分析 + 数据工程 + AI智能化三者的结合。</strong><br>从 Excel&#x2F;Python 起步，理解数据流全貌 → 掌握分布式工具 → 融合 AI 自动报告生成，<br>就是迈向高级 AI 数据分析师的完整路线。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> ai </tag>
            
            <tag> 数据分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>dmaic+ml 学习列表</title>
      <link href="/2025/10/03/ai_tools/dmaic+ml%20%E5%AD%A6%E4%B9%A0%E5%88%97%E8%A1%A8/"/>
      <url>/2025/10/03/ai_tools/dmaic+ml%20%E5%AD%A6%E4%B9%A0%E5%88%97%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="第4、5章学习清单（最终版）"><a href="#第4、5章学习清单（最终版）" class="headerlink" title="第4、5章学习清单（最终版）"></a><strong>第4、5章学习清单（最终版）</strong></h1><hr><h2 id="一、理论与方法（必须掌握）"><a href="#一、理论与方法（必须掌握）" class="headerlink" title="一、理论与方法（必须掌握）"></a><strong>一、理论与方法（必须掌握）</strong></h2><ol><li><p><strong>DMAIC方法论</strong></p><ul><li><p>各阶段目标与方法：</p><ul><li>Define：问题定义、CTQ指标确定</li><li>Measure：数据收集、指标定义、阶段映射</li><li>Analyze：统计分析、机器学习建模、关键因子识别</li><li>Improve：改进方案设计</li><li>Control：控制方案设计与闭环机制</li></ul></li><li><p>学习资源：六西格玛DMAIC教材、DevOps质量改进案例</p></li></ul></li><li><p><strong>数据分析与统计学</strong></p><ul><li>描述性统计（均值、方差、分布）</li><li>相关性分析（Pearson、Spearman）</li><li>回归分析与多元分析</li><li>显著性检验（t检验、方差分析）</li><li>可视化方法（散点图、热力图、箱线图）</li><li>工具：Python（pandas、numpy、matplotlib&#x2F;seaborn）、Excel</li></ul></li><li><p><strong>机器学习基础</strong></p><ul><li><p>模型类型：</p><ul><li>分类模型：缺陷预测</li><li>回归模型：性能指标预测</li><li>聚类&#x2F;异常检测：流程异常识别</li></ul></li><li><p>模型解释：</p><ul><li>Feature Importance</li><li>SHAP值分析</li></ul></li><li><p>模型验证方法：交叉验证、准确率、召回率</p></li></ul></li></ol><hr><h2 id="二、实践技能（必须熟练）"><a href="#二、实践技能（必须熟练）" class="headerlink" title="二、实践技能（必须熟练）"></a><strong>二、实践技能（必须熟练）</strong></h2><ol><li><p><strong>数据处理</strong></p><ul><li>数据清洗与整合（去重、缺失值处理、单位统一）</li><li>特征提取与阶段指标映射</li><li>工具：Python pandas&#x2F;numpy</li></ul></li><li><p><strong>指标可视化与分析</strong></p><ul><li>阶段内指标可视化</li><li>跨阶段指标映射可视化</li><li>工具：matplotlib、seaborn、Grafana</li></ul></li><li><p><strong>机器学习建模实践</strong></p><ul><li>缺陷预测&#x2F;异常检测模型训练</li><li>模型解释与关键因子识别</li><li>工具：scikit-learn、XGBoost</li></ul></li><li><p><strong>改进方案设计与控制</strong></p><ul><li>静态分析规则优化（开发）</li><li>自动化测试策略优化（测试）</li><li>CI&#x2F;CD流程优化（部署）</li><li>监控与告警优化（运维）</li><li>持续优化闭环设计（Grafana仪表盘、告警规则）</li></ul></li></ol><hr><h2 id="三、第5章应用与效果验证技能"><a href="#三、第5章应用与效果验证技能" class="headerlink" title="三、第5章应用与效果验证技能"></a><strong>三、第5章应用与效果验证技能</strong></h2><ol><li><p><strong>方案实施</strong></p><ul><li>按第4章设计方案落地</li><li>记录改进前后指标变化</li></ul></li><li><p><strong>效果验证与量化</strong></p><ul><li>指标对比分析（缺陷率、覆盖率、部署成功率）</li><li>统计显著性检验（t检验、方差分析）</li><li>过程能力分析（Cp&#x2F;Cpk）</li><li>可视化展示效果（图表&#x2F;仪表盘）</li></ul></li><li><p><strong>闭环优化</strong></p><ul><li>实际监控与告警反馈机制运行</li><li>优化周期总结，持续改进记录</li></ul></li></ol><hr><h2 id="四、工具清单（已掌握部分无需重复）"><a href="#四、工具清单（已掌握部分无需重复）" class="headerlink" title="四、工具清单（已掌握部分无需重复）"></a><strong>四、工具清单（已掌握部分无需重复）</strong></h2><table><thead><tr><th>类别</th><th>工具&#x2F;技能</th></tr></thead><tbody><tr><td>自动化测试</td><td>Cypress、Playwright（已掌握）</td></tr><tr><td>CI&#x2F;CD流程</td><td>Jenkins&#x2F;GitLab CI、流水线监控（已掌握）</td></tr><tr><td>DevOps监控</td><td>Prometheus、Grafana、告警配置（已掌握）</td></tr><tr><td>数据分析</td><td>Python pandas&#x2F;numpy、matplotlib&#x2F;seaborn、Excel</td></tr><tr><td>机器学习</td><td>scikit-learn、XGBoost、模型解释（SHAP&#x2F;Feature Importance）</td></tr></tbody></table><hr><h2 id="五、学习顺序建议"><a href="#五、学习顺序建议" class="headerlink" title="五、学习顺序建议"></a><strong>五、学习顺序建议</strong></h2><ol><li><p><strong>第4章</strong></p><ul><li>先掌握 DMAIC 分析流程</li><li>再学习数据分析与统计学方法</li><li>然后做机器学习建模实践</li><li>最后设计改进方案与控制机制</li></ul></li><li><p><strong>第5章</strong></p><ul><li>落地实施第4章设计方案</li><li>指标采集、对比与统计分析</li><li>完成闭环优化设计与总结</li></ul></li></ol><hr><h1 id="第4、5章学习与实践计划表（6周版）"><a href="#第4、5章学习与实践计划表（6周版）" class="headerlink" title="第4、5章学习与实践计划表（6周版）"></a><strong>第4、5章学习与实践计划表（6周版）</strong></h1><hr><h2 id="第1周：DMAIC与数据准备"><a href="#第1周：DMAIC与数据准备" class="headerlink" title="第1周：DMAIC与数据准备"></a><strong>第1周：DMAIC与数据准备</strong></h2><table><thead><tr><th>时间</th><th>任务</th><th>目标&#x2F;输出</th></tr></thead><tbody><tr><td>周一</td><td>学习DMAIC方法论，复习各阶段目标</td><td>对第4章结构熟悉，明确Define&#x2F;Measure&#x2F;Analyze&#x2F;Improve&#x2F;Control的任务</td></tr><tr><td>周二</td><td>明确研究问题、CTQ指标，划定阶段范围</td><td>输出关键CTQ指标列表，阶段划分表</td></tr><tr><td>周三</td><td>采集历史数据（开发、测试、部署、运维）</td><td>获取Sonar、Cypress、CI&#x2F;CD、Prometheus数据</td></tr><tr><td>周四</td><td>数据清洗（去重、缺失值处理、单位统一）</td><td>输出干净的数据集</td></tr><tr><td>周五</td><td>阶段指标映射与可视化初步展示</td><td>输出阶段指标表及可视化图表</td></tr><tr><td>周末</td><td>整理周工作总结，修正指标定义</td><td>准备第4章Measure部分内容</td></tr></tbody></table><hr><h2 id="第2周：统计分析与初步探索"><a href="#第2周：统计分析与初步探索" class="headerlink" title="第2周：统计分析与初步探索"></a><strong>第2周：统计分析与初步探索</strong></h2><table><thead><tr><th>时间</th><th>任务</th><th>目标&#x2F;输出</th></tr></thead><tbody><tr><td>周一</td><td>描述性统计分析（均值、方差、分布）</td><td>输出指标分布报告</td></tr><tr><td>周二</td><td>相关性分析（Pearson&#x2F;Spearman）</td><td>输出指标相关矩阵图</td></tr><tr><td>周三</td><td>回归分析&#x2F;多元分析</td><td>输出关键影响因子表</td></tr><tr><td>周四</td><td>可视化探索（箱线图、散点图、热力图）</td><td>图表用于第4章Analyze章节</td></tr><tr><td>周五</td><td>问题根因分析（鱼骨图&#x2F;因果图）</td><td>输出关键因子与问题对应表</td></tr><tr><td>周末</td><td>汇总统计分析与探索结果</td><td>第4章Analyze初稿材料准备</td></tr></tbody></table><hr><h2 id="第3周：机器学习建模"><a href="#第3周：机器学习建模" class="headerlink" title="第3周：机器学习建模"></a><strong>第3周：机器学习建模</strong></h2><table><thead><tr><th>时间</th><th>任务</th><th>目标&#x2F;输出</th></tr></thead><tbody><tr><td>周一</td><td>学习建模方法，选择模型（分类、回归、聚类）</td><td>模型选择方案</td></tr><tr><td>周二</td><td>构建缺陷预测分类模型</td><td>输出训练模型及预测报告</td></tr><tr><td>周三</td><td>构建性能预测回归模型</td><td>输出训练模型及回归结果</td></tr><tr><td>周四</td><td>聚类&#x2F;异常检测模型训练</td><td>输出异常数据分析报告</td></tr><tr><td>周五</td><td>模型解释与关键因子识别（Feature Importance&#x2F;SHAP）</td><td>输出关键影响因子列表</td></tr><tr><td>周末</td><td>汇总模型分析结果，准备第4章Analyze与Improve设计内容</td><td>形成分析结果表格和图表</td></tr></tbody></table><hr><h2 id="第4周：改进方案设计与控制机制"><a href="#第4周：改进方案设计与控制机制" class="headerlink" title="第4周：改进方案设计与控制机制"></a><strong>第4周：改进方案设计与控制机制</strong></h2><table><thead><tr><th>时间</th><th>任务</th><th>目标&#x2F;输出</th></tr></thead><tbody><tr><td>周一</td><td>设计开发阶段改进措施（静态分析规则优化）</td><td>输出具体改进方案表</td></tr><tr><td>周二</td><td>设计测试阶段改进措施（自动化测试策略优化）</td><td>输出方案文档</td></tr><tr><td>周三</td><td>设计部署阶段改进措施（CI&#x2F;CD流程优化）</td><td>输出流程优化文档</td></tr><tr><td>周四</td><td>设计运维阶段改进措施（监控与告警优化）</td><td>输出运维优化方案</td></tr><tr><td>周五</td><td>控制机制设计（仪表盘、告警、反馈闭环）</td><td>输出Control设计图及操作流程</td></tr><tr><td>周末</td><td>整理第4章完整初稿</td><td>包含Measure、Analyze、Improve、Control内容</td></tr></tbody></table><hr><h2 id="第5周：改进应用与数据验证"><a href="#第5周：改进应用与数据验证" class="headerlink" title="第5周：改进应用与数据验证"></a><strong>第5周：改进应用与数据验证</strong></h2><table><thead><tr><th>时间</th><th>任务</th><th>目标&#x2F;输出</th></tr></thead><tbody><tr><td>周一</td><td>执行开发阶段改进措施并记录数据</td><td>输出改进前后指标表</td></tr><tr><td>周二</td><td>执行测试阶段改进措施并记录数据</td><td>更新指标表</td></tr><tr><td>周三</td><td>执行部署阶段改进措施并记录数据</td><td>输出部署成功率变化表</td></tr><tr><td>周四</td><td>执行运维阶段改进措施并记录数据</td><td>输出告警&#x2F;性能指标变化表</td></tr><tr><td>周五</td><td>汇总改进前后指标，初步对比分析</td><td>可视化图表（折线图、柱状图）</td></tr><tr><td>周末</td><td>统计显著性检验（t检验&#x2F;方差分析）</td><td>输出验证报告，用于第5章效果验证</td></tr></tbody></table><hr><h2 id="第6周：闭环优化与第4、5章整合"><a href="#第6周：闭环优化与第4、5章整合" class="headerlink" title="第6周：闭环优化与第4、5章整合"></a><strong>第6周：闭环优化与第4、5章整合</strong></h2><table><thead><tr><th>时间</th><th>任务</th><th>目标&#x2F;输出</th></tr></thead><tbody><tr><td>周一</td><td>设计闭环优化流程（周期性监控与反馈）</td><td>输出闭环流程图</td></tr><tr><td>周二</td><td>数据验证闭环运行情况记录</td><td>输出持续优化效果表</td></tr><tr><td>周三</td><td>完成第5章初稿（实施、效果验证、闭环优化）</td><td>可直接用于撰写</td></tr><tr><td>周四</td><td>整合第4、5章内容，统一图表与逻辑</td><td>确保章节逻辑连贯</td></tr><tr><td>周五</td><td>内部自查&#x2F;修改第4、5章</td><td>图表、表格、文字检查</td></tr><tr><td>周末</td><td>交导师&#x2F;同事评审反馈</td><td>收集修改意见，准备下一步完善</td></tr></tbody></table><hr><h3 id="学习重点总结"><a href="#学习重点总结" class="headerlink" title="学习重点总结"></a><strong>学习重点总结</strong></h3><ul><li><strong>第4章核心技能</strong>：数据分析、统计方法、机器学习建模、改进方案设计、闭环机制设计</li><li><strong>第5章核心技能</strong>：改进方案落地、指标收集与对比、统计验证、闭环优化</li><li><strong>工具应用</strong>：Python数据分析、机器学习库、Grafana仪表盘（你已熟练掌握）</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Copilot </tag>
            
            <tag> webgpu </tag>
            
            <tag> webnn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webgpu vs webnn</title>
      <link href="/2025/10/02/ai_tools/webgpu%20vs%20webnn/"/>
      <url>/2025/10/02/ai_tools/webgpu%20vs%20webnn/</url>
      
        <content type="html"><![CDATA[<h2 id="理解核心定位"><a href="#理解核心定位" class="headerlink" title="理解核心定位"></a>理解核心定位</h2><table><thead><tr><th>技术</th><th>作用</th><th>前端价值</th></tr></thead><tbody><tr><td><strong>WebGPU</strong></td><td>浏览器级 GPU 加速渲染&#x2F;计算</td><td>高性能图形、GPGPU 计算</td></tr><tr><td><strong>WebNN</strong></td><td>浏览器端神经网络推理</td><td>模型推理（图像识别、分类、生成）</td></tr><tr><td><strong>组合</strong></td><td>GPU 加速 + AI 推理</td><td>前端可做实时图形+AI，例如 AR、AI 游戏、图像处理</td></tr></tbody></table><p>💡 <strong>核心思路</strong>：WebGPU 提供计算能力，WebNN 提供 AI 推理能力，两者结合可以在浏览器端做高性能图形 + AI 模型推理。</p><hr><h2 id="学习顺序"><a href="#学习顺序" class="headerlink" title="学习顺序"></a>学习顺序</h2><h3 id="步骤-1：前端基础"><a href="#步骤-1：前端基础" class="headerlink" title="步骤 1：前端基础"></a>步骤 1：前端基础</h3><ul><li>熟悉 <strong>JavaScript &#x2F; TypeScript</strong></li><li>熟悉 <strong>Canvas &#x2F; WebGL &#x2F; DOM</strong></li><li>熟悉 <strong>异步编程 &#x2F; Promise &#x2F; async&#x2F;await</strong></li></ul><hr><h3 id="步骤-2：WebGPU-入门"><a href="#步骤-2：WebGPU-入门" class="headerlink" title="步骤 2：WebGPU 入门"></a>步骤 2：WebGPU 入门</h3><ul><li><p>核心概念：<code>Adapter → Device → Buffer → Pipeline → CommandEncoder → Queue</code></p></li><li><p>WGSL Shader 基础（vertex、fragment、compute）</p></li><li><p>最小项目：渲染彩色三角形 + 旋转动画</p></li><li><p>学习资源：</p><ul><li><a href="https://webgpu.dev/">WebGPU Samples</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/WebGPU_API">MDN WebGPU</a></li></ul></li></ul><hr><h3 id="步骤-3：WebNN-入门"><a href="#步骤-3：WebNN-入门" class="headerlink" title="步骤 3：WebNN 入门"></a>步骤 3：WebNN 入门</h3><ul><li><p>WebNN API 允许在浏览器端调用神经网络推理</p></li><li><p>核心概念：</p><ul><li><code>navigator.ml.createContext()</code> → 获取 ML 上下文</li><li><code>context.createGraphBuilder()</code> → 构建模型推理图</li><li><code>graphBuilder.build()</code> → 编译模型</li><li><code>graph.compute()</code> → 执行推理</li></ul></li><li><p>支持 <strong>CPU &#x2F; GPU &#x2F; NPU</strong>，优先使用 GPU（结合 WebGPU）</p></li><li><p>官方资源：</p><ul><li><a href="https://www.w3.org/TR/webnn/">WebNN API explainer</a></li><li><a href="https://webmachinelearning.github.io/webnn-samples/">WebNN Samples</a></li></ul></li></ul><hr><h3 id="步骤-4：WebGPU-WebNN-结合"><a href="#步骤-4：WebGPU-WebNN-结合" class="headerlink" title="步骤 4：WebGPU + WebNN 结合"></a>步骤 4：WebGPU + WebNN 结合</h3><ul><li><p>使用 WebGPU 做高性能图形或预处理</p></li><li><p>使用 WebNN 做 AI 推理（分类 &#x2F; 风格迁移 &#x2F; 超分辨率等）</p></li><li><p>数据流示例：</p><ol><li>WebGPU 渲染图像到 <code>GPUTexture</code></li><li>拷贝或转换为 WebNN 可用 <code>Tensor</code></li><li>WebNN 执行模型推理</li><li>输出结果再通过 WebGPU 显示或处理</li></ol></li></ul><p>💡 <strong>实际案例</strong>：</p><ul><li>实时人像分割 + 背景替换</li><li>WebGPU 做图像滤镜，WebNN 做图像增强</li><li>WebGPU 做物理模拟，WebNN 做预测控制</li></ul><hr><h3 id="步骤-5：框架-工具"><a href="#步骤-5：框架-工具" class="headerlink" title="步骤 5：框架&#x2F;工具"></a>步骤 5：框架&#x2F;工具</h3><ul><li><strong>Three.js WebGPU 后端</strong>：快速构建 3D 渲染</li><li><strong>ONNX.js &#x2F; WebNN Polyfill</strong>：加载预训练模型</li><li>**TensorFlow.js (WebGPU 后端)**：可以在 WebGPU 上执行 AI 模型</li></ul><hr><h3 id="⚡-实践路线建议"><a href="#⚡-实践路线建议" class="headerlink" title="⚡ 实践路线建议"></a>⚡ 实践路线建议</h3><ol><li><strong>WebGPU</strong>：三角形 → 纹理 → Compute Shader</li><li><strong>WebNN</strong>：加载预训练模型 → 推理</li><li><strong>结合</strong>：WebGPU 输出 → WebNN 推理 → WebGPU 显示</li><li>尝试前端应用：实时图像处理 &#x2F; AR &#x2F; 小型游戏 AI</li></ol><hr><h2 id="核心技术定位"><a href="#核心技术定位" class="headerlink" title="核心技术定位"></a>核心技术定位</h2><table><thead><tr><th>技术&#x2F;方向</th><th>作用</th><th>结合点</th></tr></thead><tbody><tr><td><strong>WebGPU&#x2F;WebNN</strong></td><td>浏览器端高性能图形 + AI 推理</td><td>实现前端高性能计算、实时视觉、AI 模型推理</td></tr><tr><td><strong>前端基础</strong></td><td>JavaScript&#x2F;TypeScript + 框架（React&#x2F;Vue）</td><td>构建交互 UI、可视化 IoT 数据、控制设备</td></tr><tr><td><strong>IoT</strong></td><td>传感器、设备、边缘计算</td><td>前端实时接收传感器数据，可视化与控制设备</td></tr><tr><td><strong>自动化测试</strong></td><td>Cypress &#x2F; Playwright</td><td>保证前端与 IoT 控制逻辑的稳定性和正确性</td></tr></tbody></table><p>💡 核心思路：<strong>浏览器端直接处理高性能计算与 AI，实时可视化 IoT 数据，同时保证整个前端系统可自动化测试</strong>。</p><hr><h2 id="专业路线设计"><a href="#专业路线设计" class="headerlink" title="专业路线设计"></a>专业路线设计</h2><h3 id="阶段-1：前端-高性能计算-AI"><a href="#阶段-1：前端-高性能计算-AI" class="headerlink" title="阶段 1：前端 + 高性能计算&#x2F;AI"></a>阶段 1：前端 + 高性能计算&#x2F;AI</h3><ol><li><p>熟悉 <strong>WebGPU&#x2F;WebNN</strong> 基础：</p><ul><li>WebGPU 三角形渲染 → Compute Shader → Texture 输出</li><li>WebNN 图像&#x2F;传感器数据模型推理</li></ul></li><li><p>案例实践：</p><ul><li>物联网设备采集的数据可视化（WebGPU）</li><li>使用 WebNN 做预测分析（如温度预测、故障预警）</li></ul></li></ol><hr><h3 id="阶段-2：IoT-集成"><a href="#阶段-2：IoT-集成" class="headerlink" title="阶段 2：IoT 集成"></a>阶段 2：IoT 集成</h3><ol><li><p>学习 <strong>浏览器与 IoT 通信</strong>：</p><ul><li>WebSocket &#x2F; MQTT &#x2F; HTTP API</li><li>Edge Device 数据传输到前端</li></ul></li><li><p>前端应用：</p><ul><li>实时显示温湿度、摄像头或传感器数据</li><li>WebGPU 渲染仪表盘或三维模型</li><li>WebNN 做实时分析，如异常检测</li></ul></li><li><p>案例：</p><ul><li>工业设备监控仪表盘</li><li>智慧家居能耗预测和优化</li></ul></li></ol><hr><h3 id="阶段-3：自动化与测试"><a href="#阶段-3：自动化与测试" class="headerlink" title="阶段 3：自动化与测试"></a>阶段 3：自动化与测试</h3><ol><li><p><strong>Cypress &#x2F; Playwright</strong>：</p><ul><li>测试 UI 交互（仪表盘、控制按钮）</li><li>模拟 IoT 数据流（WebSocket&#x2F;MQTT 数据 mock）</li><li>验证 WebGPU 渲染或 WebNN 推理结果（可用截图 + pixel 检测）</li></ul></li><li><p>自动化策略：</p><ul><li>单元测试 + 集成测试 + e2e 自动化</li><li>数据模拟 + UI 验证 + 性能检测</li></ul></li></ol><hr><h3 id="阶段-4：组合项目示例（专业方向）"><a href="#阶段-4：组合项目示例（专业方向）" class="headerlink" title="阶段 4：组合项目示例（专业方向）"></a>阶段 4：组合项目示例（专业方向）</h3><ul><li><p><strong>智能家居前端控制台</strong>：</p><ul><li>WebGPU 可视化房间温湿度&#x2F;空气质量</li><li>WebNN 模型预测未来温度、节能优化</li><li>支持 IoT 设备控制（灯光、空调）</li><li>Cypress&#x2F;Playwright 自动化测试仪表盘和控制逻辑</li></ul></li><li><p><strong>工业设备监控与预测平台</strong>：</p><ul><li>WebGPU 渲染三维机器模型</li><li>WebNN 预测设备故障</li><li>IoT 实时数据流</li><li>自动化测试保证大屏显示、控制接口可靠</li></ul></li></ul><hr><h2 id="3️⃣-学习路线图（时间轴建议）"><a href="#3️⃣-学习路线图（时间轴建议）" class="headerlink" title="3️⃣ 学习路线图（时间轴建议）"></a>3️⃣ 学习路线图（时间轴建议）</h2><table><thead><tr><th>阶段</th><th>学习重点</th><th>实践项目</th></tr></thead><tbody><tr><td>1</td><td>前端 + WebGPU&#x2F;WebNN</td><td>三角形 → 纹理渲染 → 简单图像预测</td></tr><tr><td>2</td><td>IoT 数据流接入</td><td>前端实时显示传感器数据、仪表盘</td></tr><tr><td>3</td><td>高级 WebGPU&#x2F;WebNN</td><td>Compute Shader、实时预测、三维可视化</td></tr><tr><td>4</td><td>自动化测试</td><td>Cypress&#x2F;Playwright 测试仪表盘、控制逻辑</td></tr><tr><td>5</td><td>综合项目</td><td>智能家居&#x2F;工业监控前端平台，闭环从 IoT 到 AI 到 UI</td></tr></tbody></table><hr><h2 id="4️⃣-职业方向与能力定位"><a href="#4️⃣-职业方向与能力定位" class="headerlink" title="4️⃣ 职业方向与能力定位"></a>4️⃣ 职业方向与能力定位</h2><ul><li><p><strong>前端性能&#x2F;AI开发</strong>：</p><ul><li>能在浏览器端做高性能计算和 AI 推理</li></ul></li><li><p><strong>IoT 前端工程师</strong>：</p><ul><li>实时可视化 IoT 数据、控制设备</li></ul></li><li><p><strong>自动化测试工程师</strong>：</p><ul><li>确保前端复杂逻辑可靠，支持高并发和设备联动</li></ul></li><li><p><strong>融合方向</strong>：</p><ul><li>前端 + GPU + AI + IoT + 自动化测试 → 高端企业&#x2F;科研前端岗位</li></ul></li></ul><ol><li><strong>未来智能设备方向</strong>（IoT + 前端 + AI&#x2F;高性能计算）</li><li><strong>质检创业方向</strong>（基于 AI &#x2F; WebNN &#x2F; 自动化检测）</li></ol><h2 id="未来智能设备方向（IoT-AI-前端）"><a href="#未来智能设备方向（IoT-AI-前端）" class="headerlink" title="未来智能设备方向（IoT + AI + 前端）"></a>未来智能设备方向（IoT + AI + 前端）</h2><h3 id="技术特征"><a href="#技术特征" class="headerlink" title="技术特征"></a>技术特征</h3><ul><li><p>核心技术：WebGPU &#x2F; WebNN &#x2F; IoT &#x2F; 前端可视化</p></li><li><p>典型项目：</p><ul><li>智能家居（温湿度控制、灯光、安防）</li><li>可穿戴设备数据可视化</li><li>工业边缘计算和设备监控</li></ul></li></ul><h3 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h3><ul><li><strong>市场空间大</strong>：智能家居、工业 IoT、智慧城市持续增长</li><li><strong>技术前沿</strong>：浏览器端 AI + 高性能渲染新颖</li><li><strong>跨领域能力强</strong>：前端 + AI + IoT，可在多个方向就业</li></ul><h3 id="风险-挑战"><a href="#风险-挑战" class="headerlink" title="风险&#x2F;挑战"></a>风险&#x2F;挑战</h3><ul><li>硬件依赖：设备成本高，开发调试周期长</li><li>生态复杂：需要兼顾硬件接口、网络协议、实时性</li><li>产品落地慢：从原型到量产周期长</li></ul><p>✅ <strong>适合人群</strong>：</p><ul><li>想做技术前沿开发</li><li>有兴趣做跨领域（AI + IoT + 前端）</li><li>能接受较慢的商业验证周期</li></ul><hr><h2 id="质检创业方向（AI-WebNN-自动化检测）"><a href="#质检创业方向（AI-WebNN-自动化检测）" class="headerlink" title="质检创业方向（AI &#x2F; WebNN &#x2F; 自动化检测）"></a>质检创业方向（AI &#x2F; WebNN &#x2F; 自动化检测）</h2><h3 id="技术特征-1"><a href="#技术特征-1" class="headerlink" title="技术特征"></a>技术特征</h3><ul><li><p>核心技术：WebNN &#x2F; 前端可视化 &#x2F; 自动化测试 &#x2F; AI 模型</p></li><li><p>典型项目：</p><ul><li>工厂产品缺陷检测（视觉 AI）</li><li>自动化质检仪表盘</li><li>Web 前端 + AI 模型实现轻量化检测</li></ul></li></ul><h3 id="优势-1"><a href="#优势-1" class="headerlink" title="优势"></a>优势</h3><ul><li><strong>市场需求明确</strong>：制造业、电子、食品、医药都有质检痛点</li><li><strong>落地快</strong>：只需前端 + AI + 摄像头&#x2F;相机硬件即可</li><li><strong>门槛适中</strong>：不需要深度硬件开发</li><li><strong>可迭代快</strong>：MVP 快速验证市场</li></ul><h3 id="风险-挑战-1"><a href="#风险-挑战-1" class="headerlink" title="风险&#x2F;挑战"></a>风险&#x2F;挑战</h3><ul><li>竞争激烈：AI质检创业公司越来越多</li><li>数据依赖：模型训练需要大量标注数据</li><li>技术更新快：需要不断优化 AI 模型</li></ul><p>✅ <strong>适合人群</strong>：</p><ul><li>想快速落地创业或商业化</li><li>擅长前端 + AI 应用开发</li><li>想把技术直接转化为商业价值</li></ul><hr><h2 id="综合对比"><a href="#综合对比" class="headerlink" title="综合对比"></a>综合对比</h2><table><thead><tr><th>方向</th><th>市场前景</th><th>技术前沿</th><th>落地速度</th><th>创业难度</th><th>适合人群</th></tr></thead><tbody><tr><td>智能设备</td><td>高（长期）</td><td>高</td><td>中低</td><td>高</td><td>技术研发型，跨领域兴趣者</td></tr><tr><td>质检创业</td><td>中高</td><td>中</td><td>高</td><td>中</td><td>创业&#x2F;落地导向，前端+AI能力强</td></tr></tbody></table><hr><h2 id="建议"><a href="#建议" class="headerlink" title="建议"></a>建议</h2><ul><li><p><strong>如果你想创业，追求快速验证与落地</strong>：质检方向更适合。</p></li><li><p><strong>如果你追求技术前沿和跨领域能力积累</strong>：智能设备方向更适合。</p></li><li><p><strong>折中策略</strong>：</p><ul><li>可从<strong>质检方向入手</strong>，快速形成 MVP、积累数据与经验</li><li>同时学习 <strong>WebGPU &#x2F; WebNN + IoT</strong>，未来向智能设备&#x2F;智能制造拓展</li></ul></li></ul><h1 id="📌-技术路线规划：短期落地-→-长期生态"><a href="#📌-技术路线规划：短期落地-→-长期生态" class="headerlink" title="📌 技术路线规划：短期落地 → 长期生态"></a>📌 技术路线规划：短期落地 → 长期生态</h1><h2 id="阶段-0：准备阶段"><a href="#阶段-0：准备阶段" class="headerlink" title="阶段 0：准备阶段"></a><strong>阶段 0：准备阶段</strong></h2><p><strong>目标</strong>：技术储备与基础设施搭建</p><ul><li><p>技术栈：</p><ul><li>前端：JavaScript&#x2F;TypeScript + React&#x2F;Vue</li><li>GPU计算：WebGPU + WGSL</li><li>AI推理：WebNN（轻量级模型）</li><li>自动化测试：Cypress &#x2F; Playwright</li><li>数据分析：前端仪表盘 + 后端数据库（PostgreSQL&#x2F;InfluxDB）</li></ul></li><li><p>数据准备：</p><ul><li>收集少量质检图像&#x2F;IoT传感器数据，用于模型训练与测试</li></ul></li><li><p>工具链：</p><ul><li>Git + CI&#x2F;CD（GitHub Actions &#x2F; GitLab CI）</li><li>Docker&#x2F;K8s（测试和模型部署环境）</li></ul></li></ul><hr><h2 id="阶段-1：短期落地（3-6个月）"><a href="#阶段-1：短期落地（3-6个月）" class="headerlink" title="阶段 1：短期落地（3~6个月）"></a><strong>阶段 1：短期落地（3~6个月）</strong></h2><p><strong>目标</strong>：形成 MVP，验证市场需求</p><p><strong>技术任务</strong>：</p><ol><li><p><strong>前端质检系统</strong></p><ul><li>WebGPU 渲染产品&#x2F;设备数据仪表盘</li><li>WebNN 模型进行缺陷检测或简单预测</li><li>可显示检测结果和历史数据曲线</li></ul></li><li><p><strong>自动化测试</strong></p><ul><li>Cypress&#x2F;Playwright 测试前端功能与数据交互</li><li>模拟 IoT 数据输入，验证前端显示正确性</li></ul></li><li><p><strong>数据驱动 DevOps</strong></p><ul><li>收集质检数据和测试结果</li><li>计算 KPI（缺陷率、测试覆盖率、报警次数）</li><li>形成基础报告 → 支撑改进决策</li></ul></li></ol><p><strong>落地方式</strong>：</p><ul><li>面向中小企业生产线或 IoT 设备</li><li>提供 SaaS 或前端可直接访问的质检平台</li><li>模型采用轻量级预训练模型，减少部署成本</li></ul><p><strong>成果指标</strong>：</p><ul><li>前端质检仪表盘可以实时显示缺陷</li><li>自动化测试保证系统可靠性</li><li>收集数据形成初步 KPI 分析</li></ul><hr><h2 id="阶段-2：长期优化与差异化（6-18个月）"><a href="#阶段-2：长期优化与差异化（6-18个月）" class="headerlink" title="阶段 2：长期优化与差异化（6~18个月）"></a><strong>阶段 2：长期优化与差异化（6~18个月）</strong></h2><p><strong>目标</strong>：形成独特竞争力和生态系统</p><p><strong>技术优化</strong>：</p><ol><li><p><strong>AI 模型增强</strong></p><ul><li>WebNN 模型升级：支持多种缺陷类型、IoT数据预测</li><li>GPU加速训练或推理，提高实时性</li><li>数据增强：历史数据 + 企业定制数据</li></ul></li><li><p><strong>前端性能优化</strong></p><ul><li>WebGPU 高性能渲染复杂仪表盘&#x2F;三维模型</li><li>支持多设备、多传感器数据同时可视化</li></ul></li><li><p><strong>自动化测试完善</strong></p><ul><li>全流程自动化覆盖（前端 + AI推理）</li><li>异常场景模拟和压力测试</li></ul></li></ol><p><strong>生态扩展</strong>：</p><ol><li><p><strong>合作伙伴</strong></p><ul><li>IoT硬件厂商：提供传感器、摄像头、边缘计算设备</li><li>工厂系统集成商：将质检平台整合到生产线</li><li>数据提供商：扩大训练数据规模，提高模型准确率</li></ul></li><li><p><strong>SaaS生态</strong></p><ul><li>企业用户可上传数据 → 模型自动更新 → 可视化仪表盘</li><li>形成平台化生态，支持多厂商、多设备</li></ul></li><li><p><strong>商业差异化</strong></p><ul><li>前端轻量化：无需专用客户端，降低部署成本</li><li>数据闭环：AI质检 + 自动化测试 + KPI改进形成全链条价值</li></ul></li></ol><hr><h2 id="阶段-3：持续迭代与创新"><a href="#阶段-3：持续迭代与创新" class="headerlink" title="阶段 3：持续迭代与创新"></a><strong>阶段 3：持续迭代与创新</strong></h2><p><strong>目标</strong>：形成稳定闭环和行业标杆</p><ol><li><p><strong>智能预测与优化</strong></p><ul><li>AI预测生产缺陷趋势</li><li>自动生成质检策略与优化建议</li></ul></li><li><p><strong>跨企业合作</strong></p><ul><li>数据共享或联合训练模型</li><li>提供生态内 Benchmark 报告</li></ul></li><li><p><strong>前端创新应用</strong></p><ul><li>AR&#x2F;VR 质检可视化</li><li>移动端&#x2F;边缘端实时监控</li></ul></li></ol><hr><h2 id="路线总结表"><a href="#路线总结表" class="headerlink" title="路线总结表"></a><strong>路线总结表</strong></h2><table><thead><tr><th>阶段</th><th>时间</th><th>技术重点</th><th>落地目标</th><th>差异化价值</th></tr></thead><tbody><tr><td>准备</td><td>0~1个月</td><td>前端&#x2F;WebGPU&#x2F;WebNN&#x2F;自动化测试</td><td>搭建基础环境，收集数据</td><td>技术储备</td></tr><tr><td>短期落地</td><td>3~6个月</td><td>前端仪表盘 + AI缺陷检测 + Cypress&#x2F;Playwright</td><td>MVP上线，验证市场</td><td>低成本、快速部署、数据驱动闭环</td></tr><tr><td>长期优化</td><td>6~18个月</td><td>模型升级 + 高性能渲染 + 自动化测试覆盖</td><td>高精度质检平台 + SaaS生态</td><td>平台化、跨设备、跨企业、数据闭环</td></tr><tr><td>持续迭代</td><td>18+个月</td><td>智能预测、AR&#x2F;VR可视化、联合训练</td><td>行业标杆</td><td>创新应用 + 全链条价值闭环</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> Copilot </tag>
            
            <tag> webgpu </tag>
            
            <tag> webnn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据驱动的 DevOps 质量持续改进框架</title>
      <link href="/2025/10/01/bigdata_for_analyze/devops%E8%B4%A8%E9%87%8F%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%94%B9%E8%BF%9B%E6%80%9D%E8%B7%AF/"/>
      <url>/2025/10/01/bigdata_for_analyze/devops%E8%B4%A8%E9%87%8F%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%94%B9%E8%BF%9B%E6%80%9D%E8%B7%AF/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="🧭-一、题目关键词与学科定位"><a href="#🧭-一、题目关键词与学科定位" class="headerlink" title="🧭 一、题目关键词与学科定位"></a>🧭 一、题目关键词与学科定位</h2><table><thead><tr><th>关键词</th><th>含义</th><th>主要学科归属</th></tr></thead><tbody><tr><td>数据驱动（Data-driven）</td><td>用数据分析、挖掘、建模指导决策</td><td>数据科学、机器学习</td></tr><tr><td>质量控制（Quality Control）</td><td>通过度量、分析、监控改进质量</td><td>统计学、质量管理</td></tr><tr><td>改进（Improvement）</td><td>识别并优化问题根因</td><td>六西格玛、DMAIC</td></tr><tr><td>DevOps 研发过程</td><td>软件过程自动化、持续集成交付</td><td>软件工程、DevOps 实践</td></tr></tbody></table><p>从学科结构看，本题目天然融合三类学科：统计学（质量度量与控制）、机器学习（数据驱动与预测）、软件工程（DevOps 实践与改进）。</p><hr><h2 id="🧩-二、为什么论文需要统计学？"><a href="#🧩-二、为什么论文需要统计学？" class="headerlink" title="🧩 二、为什么论文需要统计学？"></a>🧩 二、为什么论文需要统计学？</h2><p>即使以“数据驱动”为核心，统计学仍是研究的底层逻辑，理由包括：</p><ul><li>数据驱动 ≠ 纯粹靠机器学习：首先要求数据质量、度量有效性、显著性分析等。</li><li>DevOps 质量控制源自统计过程控制（SPC）：控制图、方差分析、置信区间、过程能力指数（Cp、Cpk）等。</li><li>机器学习需要统计验证：模型性能、差异显著性与泛化性需统计检验支撑。</li><li>研究论文要求科学推断：统计推断是结论可信性的基础。</li></ul><p>因此，统计学应作为方法论基础，支撑数据驱动方案的科学性与可解释性。</p><hr><h2 id="🧠-三、统计学在论文中的典型角色"><a href="#🧠-三、统计学在论文中的典型角色" class="headerlink" title="🧠 三、统计学在论文中的典型角色"></a>🧠 三、统计学在论文中的典型角色</h2><table><thead><tr><th>模块</th><th>对应统计方法</th><th>功能</th></tr></thead><tbody><tr><td>质量度量体系建立</td><td>方差分析（ANOVA）、主成分分析（PCA）</td><td>确定关键质量指标（CTQ）</td></tr><tr><td>数据分布与波动分析</td><td>控制图（SPC）、假设检验</td><td>判断过程稳定性</td></tr><tr><td>改进效果验证</td><td>t 检验、显著性分析</td><td>验证改进措施是否有效</td></tr><tr><td>因果关系推断</td><td>回归分析、相关性检验</td><td>找出影响质量的主因</td></tr><tr><td>数据置信度验证</td><td>置信区间、标准误差分析</td><td>确保数据采样可靠性</td></tr></tbody></table><hr><h2 id="🤖-四、机器学习在论文中的角色"><a href="#🤖-四、机器学习在论文中的角色" class="headerlink" title="🤖 四、机器学习在论文中的角色"></a>🤖 四、机器学习在论文中的角色</h2><p>机器学习为“数据驱动”提供自动化与预测能力：</p><table><thead><tr><th>模块</th><th>方法</th><th>目标</th></tr></thead><tbody><tr><td>缺陷预测</td><td>决策树、随机森林、XGBoost</td><td>提前发现高风险代码或构建</td></tr><tr><td>自动质量评估</td><td>回归、聚类、异常检测</td><td>自动评分与识别异常过程</td></tr><tr><td>持续改进优化</td><td>强化学习、贝叶斯优化</td><td>动态优化测试与部署策略</td></tr><tr><td>多维指标关联发现</td><td>特征选择、特征重要性</td><td>发现影响质量的隐含因素</td></tr></tbody></table><hr><h2 id="⚙️-五、论文结构建议（如何自然融合统计学与机器学习）"><a href="#⚙️-五、论文结构建议（如何自然融合统计学与机器学习）" class="headerlink" title="⚙️ 五、论文结构建议（如何自然融合统计学与机器学习）"></a>⚙️ 五、论文结构建议（如何自然融合统计学与机器学习）</h2><p>以下为推荐的大纲（适用于工程类或硕士级论文）：</p><h3 id="1-引言"><a href="#1-引言" class="headerlink" title="1 引言"></a>1 引言</h3><ul><li>问题背景：DevOps 过程复杂，质量波动不可控。</li><li>研究动机：构建数据驱动的质量改进体系。</li><li>创新点：结合统计学（可解释性）与机器学习（自动化&#x2F;预测性）。</li></ul><h3 id="2-相关工作综述"><a href="#2-相关工作综述" class="headerlink" title="2 相关工作综述"></a>2 相关工作综述</h3><ul><li>统计质量控制（SPC、DOE）在软件过程的应用。</li><li>机器学习在缺陷预测、质量评估中的研究进展。</li><li>DataOps &#x2F; MLOps 与 DevOps 的融合实践。</li></ul><h3 id="3-方法框架"><a href="#3-方法框架" class="headerlink" title="3 方法框架"></a>3 方法框架</h3><ul><li>双层架构：第一层为统计度量与显著性分析；第二层为机器学习预测与优化。</li><li>将框架映射到 DMAIC（Define–Measure–Analyze–Improve–Control）流程。</li></ul><h3 id="4-实证与评估"><a href="#4-实证与评估" class="headerlink" title="4 实证与评估"></a>4 实证与评估</h3><ul><li>数据来源（CI&#x2F;CD 日志、缺陷库、测试覆盖率、度量数据）。</li><li>统计分析（ANOVA、控制图）用于确定 CTQ 与基线。</li><li>机器学习模型（随机森林等）用于缺陷&#x2F;风险预测，并结合特征重要性分析。</li><li>通过 A&#x2F;B 测试或设计实验（DOE）验证改进措施的显著性。</li></ul><h3 id="5-结果与讨论"><a href="#5-结果与讨论" class="headerlink" title="5 结果与讨论"></a>5 结果与讨论</h3><ul><li>报告模型性能（准确率、召回、AUC 等）与统计显著性检验结果。</li><li>对比仅 ML 方法与统计+ML 混合方法的差异。</li><li>讨论可解释性、可迁移性与工程化挑战。</li></ul><h3 id="6-结论与未来工作"><a href="#6-结论与未来工作" class="headerlink" title="6 结论与未来工作"></a>6 结论与未来工作</h3><ul><li>总结：统计学提供可信度与解释性，机器学习提供自动化与预测能力。</li><li>展望：在线学习、模型漂移监控、跨组织迁移与隐私保护等方向。</li></ul><hr><h2 id="🧭-六、按-DMAIC-分阶段的详细融合机制"><a href="#🧭-六、按-DMAIC-分阶段的详细融合机制" class="headerlink" title="🧭 六、按 DMAIC 分阶段的详细融合机制"></a>🧭 六、按 DMAIC 分阶段的详细融合机制</h2><table><thead><tr><th>DMAIC 阶段</th><th>输入</th><th>数据驱动技术</th><th>输出 &#x2F; 目的</th></tr></thead><tbody><tr><td>D — Define（定义）</td><td>成熟度评估 → 识别短板；质量度量模型 → 确定 CTQ</td><td>方差分析、PCA 等</td><td>明确改进目标与关键指标（Y &#x3D; f(X)）</td></tr><tr><td>M — Measure（度量）</td><td>CI&#x2F;CD 指标、缺陷数据、构建&#x2F;测试日志</td><td>数据清洗、EDA、控制图分析</td><td>建立数据基线，判断过程稳定性</td></tr><tr><td>A — Analyze（分析）</td><td>日志 + CTQ 数据</td><td>回归分析、相关性、特征重要性（ML）</td><td>找出影响质量的关键因子</td></tr><tr><td>I — Improve（改进）</td><td>分析结果与候选措施</td><td>DOE 实验、强化学习、贝叶斯优化</td><td>验证并优化改进策略</td></tr><tr><td>C — Control（控制）</td><td>改进后监控数据</td><td>SPC 控制图、异常检测、模型漂移监控</td><td>实现持续监控与闭环改进</td></tr></tbody></table><hr><h2 id="📊-模型与方法的逻辑关系（可作图展示）"><a href="#📊-模型与方法的逻辑关系（可作图展示）" class="headerlink" title="📊 模型与方法的逻辑关系（可作图展示）"></a>📊 模型与方法的逻辑关系（可作图展示）</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[DevOps 成熟度模型]   [软件质量度量模型]</span><br><span class="line">        │                       │</span><br><span class="line">        └──▶ [D] Define ──▶ 确定 CTQ 与改进目标</span><br><span class="line">                      │</span><br><span class="line">                      ▼</span><br><span class="line">                [M] Measure ──▶ 数据采集与统计验证</span><br><span class="line">                      │</span><br><span class="line">                      ▼</span><br><span class="line">                [A] Analyze ──▶ ML/统计分析根因</span><br><span class="line">                      │</span><br><span class="line">                      ▼</span><br><span class="line">                [I] Improve ──▶ 模型驱动优化策略</span><br><span class="line">                      │</span><br><span class="line">                      ▼</span><br><span class="line">                [C] Control ──▶ SPC + ML 持续控制</span><br></pre></td></tr></table></figure><p>数据驱动技术贯穿 D→C 各阶段，实现一个可解释、可验证、可自动化的质量改进闭环。</p><hr><h2 id="🧮-七、统计学与机器学习的分工小结"><a href="#🧮-七、统计学与机器学习的分工小结" class="headerlink" title="🧮 七、统计学与机器学习的分工小结"></a>🧮 七、统计学与机器学习的分工小结</h2><table><thead><tr><th>层面</th><th>统计学 作用</th><th>机器学习 作用</th></tr></thead><tbody><tr><td>度量层（Measure）</td><td>样本有效性、方差与置信区间</td><td>数据清洗、特征构建</td></tr><tr><td>分析层（Analyze）</td><td>显著性检验、相关分析</td><td>预测模型、特征重要性排名</td></tr><tr><td>改进层（Improve）</td><td>DOE、显著性验证</td><td>强化学习、贝叶斯优化</td></tr><tr><td>控制层（Control）</td><td>控制图、过程能力监控</td><td>异常检测、模型漂移检测</td></tr></tbody></table><hr><h2 id="八、论文可呈现的章节（快速引用）"><a href="#八、论文可呈现的章节（快速引用）" class="headerlink" title="八、论文可呈现的章节（快速引用）"></a>八、论文可呈现的章节（快速引用）</h2><ul><li>3.1 DevOps 成熟度模型复核与目标识别（参考 DORA、CALMS）</li><li>3.2 软件质量度量模型与 CTQ 定义（参考 ISO&#x2F;IEC 25010）</li><li>3.3 DMAIC 主线流程与方法映射</li><li>3.4 数据驱动技术细节（统计方法 + ML 算法）</li><li>3.5 实证设计、指标与评估方法（包括显著性检验、A&#x2F;B、DOE）</li></ul><hr><h2 id="九、总结（可直接作为摘要或结论的收尾句）"><a href="#九、总结（可直接作为摘要或结论的收尾句）" class="headerlink" title="九、总结（可直接作为摘要或结论的收尾句）"></a>九、总结（可直接作为摘要或结论的收尾句）</h2><p>本研究提出了一种基于复核 DevOps 成熟度模型与软件质量度量模型的<br>数据驱动质量控制与改进体系，以 DMAIC 为方法论主线，融合统计学的过程控制<br>与机器学习的预测优化能力，构建了一个可持续迭代、可解释且可工程化的 DevOps<br>质量改进闭环框架。</p><hr>]]></content>
      
      
      
        <tags>
            
            <tag> ai </tag>
            
            <tag> 机器学习 </tag>
            
            <tag> 统计学 </tag>
            
            <tag> DevOps </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习vs统计学</title>
      <link href="/2025/09/20/bigdata_for_analyze/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0vs%E7%BB%9F%E8%AE%A1%E5%AD%A6/"/>
      <url>/2025/09/20/bigdata_for_analyze/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0vs%E7%BB%9F%E8%AE%A1%E5%AD%A6/</url>
      
        <content type="html"><![CDATA[<h2 id="“机器学习（Machine-Learning）”和“统计学（Statistics）”在本质上密切相关，但它们的目标、方法、哲学出发点和应用取向有所不同。"><a href="#“机器学习（Machine-Learning）”和“统计学（Statistics）”在本质上密切相关，但它们的目标、方法、哲学出发点和应用取向有所不同。" class="headerlink" title="“机器学习（Machine Learning）”和“统计学（Statistics）”在本质上密切相关，但它们的目标、方法、哲学出发点和应用取向有所不同。"></a>“<strong>机器学习（Machine Learning）</strong>”和“<strong>统计学（Statistics）</strong>”在本质上密切相关，但它们的<strong>目标、方法、哲学出发点和应用取向</strong>有所不同。</h2><h2 id="🧩-一、核心目标的不同"><a href="#🧩-一、核心目标的不同" class="headerlink" title="🧩 一、核心目标的不同"></a>🧩 一、核心目标的不同</h2><table><thead><tr><th>领域</th><th>主要目标</th><th>关键词</th></tr></thead><tbody><tr><td><strong>统计学</strong></td><td>解释现象，理解数据背后的规律</td><td><em>推断、模型解释、置信区间、显著性检验</em></td></tr><tr><td><strong>机器学习</strong></td><td>预测结果，提高模型性能</td><td><em>泛化、优化、精度、自动化</em></td></tr></tbody></table><p>👉 <strong>一句话总结：</strong></p><blockquote><p>统计学关心“为什么”，机器学习关心“预测得准不准”。</p></blockquote><hr><h2 id="⚙️-二、典型思维方式对比"><a href="#⚙️-二、典型思维方式对比" class="headerlink" title="⚙️ 二、典型思维方式对比"></a>⚙️ 二、典型思维方式对比</h2><table><thead><tr><th>维度</th><th>统计学</th><th>机器学习</th></tr></thead><tbody><tr><td><strong>哲学基础</strong></td><td>概率论、假设检验、模型推断</td><td>算法、优化理论、计算学习理论</td></tr><tr><td><strong>数据假设</strong></td><td>通常假设数据服从某种分布（如正态分布）</td><td>尽量少假设数据分布，让模型自己学习</td></tr><tr><td><strong>建模方式</strong></td><td>建立简洁的数学模型（如线性回归、逻辑回归）</td><td>使用复杂模型（如神经网络、随机森林）</td></tr><tr><td><strong>结果解释性</strong></td><td>强调模型参数的意义</td><td>关注预测效果，模型可能是“黑箱”</td></tr><tr><td><strong>验证方式</strong></td><td>p-value、R方、置信区间</td><td>交叉验证、测试集精度</td></tr></tbody></table><hr><h2 id="🧠-三、举例说明"><a href="#🧠-三、举例说明" class="headerlink" title="🧠 三、举例说明"></a>🧠 三、举例说明</h2><h3 id="🎯-例子：预测某人是否会购买产品"><a href="#🎯-例子：预测某人是否会购买产品" class="headerlink" title="🎯 例子：预测某人是否会购买产品"></a>🎯 例子：预测某人是否会购买产品</h3><ul><li><p><strong>统计学方法</strong>：<br>建立逻辑回归模型，分析“收入”“年龄”等变量对购买行为的影响，重点解释“收入每增加1000元，购买概率提高多少”。<br>→ <strong>目标：解释变量间的关系。</strong></p></li><li><p><strong>机器学习方法</strong>：<br>训练随机森林或XGBoost模型，输入用户特征，输出“是否购买”的预测。<br>不关心每个特征的具体含义，只要预测准确率高即可。<br>→ <strong>目标：最大化预测准确率。</strong></p></li></ul><hr><h2 id="🔬-四、学科交叉与融合"><a href="#🔬-四、学科交叉与融合" class="headerlink" title="🔬 四、学科交叉与融合"></a>🔬 四、学科交叉与融合</h2><p>其实两者不是对立的，而是<strong>互补</strong>的：</p><ul><li>机器学习继承了统计学的<strong>概率基础与模型推断思想</strong>；</li><li>统计学吸收了机器学习的<strong>算法化、计算化思维</strong>。</li></ul><p>现在很多研究都处在交界处，比如：</p><ul><li><strong>贝叶斯机器学习</strong>（统计 + 算法）</li><li><strong>因果机器学习</strong>（解释 + 预测）</li><li><strong>深度生成模型</strong>（统计建模思想 + 神经网络）</li></ul><hr><h2 id="🧭-五、学习建议"><a href="#🧭-五、学习建议" class="headerlink" title="🧭 五、学习建议"></a>🧭 五、学习建议</h2><table><thead><tr><th>目标方向</th><th>建议学习重心</th></tr></thead><tbody><tr><td>想理解数据规律、做科学研究、论文分析</td><td><strong>统计学为主，机器学习为辅</strong></td></tr><tr><td>想做AI建模、应用开发、数据驱动产品</td><td><strong>机器学习为主，统计学为底</strong></td></tr><tr><td>想做算法研究、工业界数据科学家</td><td><strong>两者都要学</strong>，尤其是概率论、优化、信息论基础</td></tr></tbody></table><p>非常棒的追问 👏<br>我们可以把“<strong>统计学</strong>”和“<strong>机器学习</strong>”在实际应用中的<strong>阶段、步骤、流程逻辑</strong>系统地对比讲清楚。</p><hr><h1 id="🧩-统计学的应用阶段与步骤"><a href="#🧩-统计学的应用阶段与步骤" class="headerlink" title="## 🧩 统计学的应用阶段与步骤"></a>## 🧩 统计学的应用阶段与步骤</h1><p>统计学更像是一种“<strong>解释型分析过程</strong>”——强调数据的规律、差异、显著性、置信度。<br>常见于：科学研究、问卷分析、医疗试验、质量控制、社会科学、金融风险评估等。</p><hr><h2 id="统计学应用的典型阶段"><a href="#统计学应用的典型阶段" class="headerlink" title="统计学应用的典型阶段"></a><strong>统计学应用的典型阶段</strong></h2><table><thead><tr><th>阶段</th><th>主要任务</th><th>常用方法与工具</th></tr></thead><tbody><tr><td><strong>1️⃣ 明确研究问题与假设</strong></td><td>定义研究目标，提出可检验假设 H₀（零假设）与 H₁（备择假设）</td><td>研究设计、因果框架、样本定义</td></tr><tr><td><strong>2️⃣ 数据收集与抽样设计</strong></td><td>确保样本具有代表性，控制偏差</td><td>抽样方法、实验设计、问卷设计</td></tr><tr><td><strong>3️⃣ 数据清洗与描述性分析</strong></td><td>检查异常值、缺失值，理解数据分布</td><td>均值、方差、箱线图、直方图</td></tr><tr><td><strong>4️⃣ 模型建立与统计推断</strong></td><td>建立模型解释变量关系或验证假设</td><td>t检验、方差分析、回归分析、卡方检验</td></tr><tr><td><strong>5️⃣ 模型评估与假设检验</strong></td><td>检查模型拟合与显著性，计算置信区间</td><td>p-value、R²、AIC&#x2F;BIC、残差分析</td></tr><tr><td><strong>6️⃣ 结论与解释</strong></td><td>结合背景给出科学或业务意义解释</td><td>报告撰写、图表展示、敏感性分析</td></tr></tbody></table><hr><h3 id="✅-举个例子："><a href="#✅-举个例子：" class="headerlink" title="✅ 举个例子："></a>✅ 举个例子：</h3><blockquote><p>某药物是否有效？</p></blockquote><ol><li>设定假设：H₀：药物无效；H₁：药物有效</li><li>设计实验：随机分组、对照实验</li><li>收集数据：记录症状改善率</li><li>用t检验比较两组均值差异</li><li>如果p &lt; 0.05 → 拒绝H₀，药物有效</li><li>解释结果并报告结论</li></ol><p>👉 <strong>结论导向：</strong> 明确“原因—结果”关系，解释性强。</p><hr><h1 id="🤖-机器学习的应用阶段与步骤"><a href="#🤖-机器学习的应用阶段与步骤" class="headerlink" title="## 🤖 机器学习的应用阶段与步骤"></a>## 🤖 机器学习的应用阶段与步骤</h1><p>机器学习是“<strong>预测型或模式识别过程</strong>”——重点在让机器通过数据<strong>自动学习规律</strong>以预测未来或自动决策。<br>常见于：推荐系统、语音识别、图像分类、自然语言处理、信用评分、异常检测、时间序列预测等。</p><hr><h2 id="机器学习应用的典型阶段"><a href="#机器学习应用的典型阶段" class="headerlink" title="机器学习应用的典型阶段"></a><strong>机器学习应用的典型阶段</strong></h2><table><thead><tr><th>阶段</th><th>主要任务</th><th>常用方法与工具</th></tr></thead><tbody><tr><td><strong>1️⃣ 明确业务目标与任务类型</strong></td><td>分类、回归、聚类、生成等</td><td>业务分析、问题定义</td></tr><tr><td><strong>2️⃣ 数据准备与特征工程</strong></td><td>清洗、处理缺失值、特征选择、编码</td><td>pandas、scikit-learn、特征缩放</td></tr><tr><td><strong>3️⃣ 数据集划分</strong></td><td>训练集 &#x2F; 验证集 &#x2F; 测试集</td><td>train_test_split、交叉验证</td></tr><tr><td><strong>4️⃣ 模型选择与训练</strong></td><td>选择算法并训练</td><td>决策树、SVM、神经网络、XGBoost</td></tr><tr><td><strong>5️⃣ 模型评估与调优</strong></td><td>优化超参数、避免过拟合</td><td>准确率、F1-score、ROC、AUC</td></tr><tr><td><strong>6️⃣ 模型部署与监控</strong></td><td>集成到系统中，监控性能变化</td><td>API部署、A&#x2F;B测试、MLOps流程</td></tr><tr><td><strong>7️⃣ 模型迭代</strong></td><td>根据新数据重新训练</td><td>自动化训练管线、数据漂移检测</td></tr></tbody></table><hr><h3 id="✅-举个例子：-1"><a href="#✅-举个例子：-1" class="headerlink" title="✅ 举个例子："></a>✅ 举个例子：</h3><blockquote><p>预测用户是否会购买产品</p></blockquote><ol><li>明确任务：二分类问题</li><li>准备数据：清洗 + one-hot编码</li><li>划分数据集：80%训练，20%测试</li><li>训练模型：XGBoost 或 Logistic Regression</li><li>调参：Grid Search 提高准确率</li><li>部署：上线预测API，实时预测购买概率</li><li>监控：若数据分布变化，重新训练</li></ol><p>👉 <strong>结果导向：</strong> 模型预测得准，效果优先。</p><hr><h1 id="🔄-对比总结"><a href="#🔄-对比总结" class="headerlink" title="## 🔄 对比总结"></a>## 🔄 对比总结</h1><table><thead><tr><th>对比维度</th><th>统计学</th><th>机器学习</th></tr></thead><tbody><tr><td><strong>目标</strong></td><td>理解、解释、推断</td><td>预测、优化、自动化</td></tr><tr><td><strong>数据假设</strong></td><td>有较强分布假设</td><td>弱假设甚至无假设</td></tr><tr><td><strong>步骤重点</strong></td><td>假设→建模→推断→解释</td><td>数据→特征→训练→预测</td></tr><tr><td><strong>验证方式</strong></td><td>显著性检验（p值）</td><td>泛化性能（测试集精度）</td></tr><tr><td><strong>典型输出</strong></td><td>参数解释、置信区间</td><td>模型预测、分类概率</td></tr><tr><td><strong>使用者背景</strong></td><td>研究人员、科学家</td><td>数据科学家、工程师</td></tr></tbody></table><hr><h1 id="🧭-两者在数据驱动项目中的结合方式"><a href="#🧭-两者在数据驱动项目中的结合方式" class="headerlink" title="## 🧭 两者在数据驱动项目中的结合方式"></a>## 🧭 两者在数据驱动项目中的结合方式</h1><p>现代项目中，往往是“<strong>统计学 + 机器学习协同</strong>”：</p><table><thead><tr><th>阶段</th><th>角色</th><th>例子</th></tr></thead><tbody><tr><td><strong>数据理解阶段</strong></td><td>用统计学做探索性分析、发现变量间关系</td><td>EDA、分布分析、相关性</td></tr><tr><td><strong>建模阶段</strong></td><td>用机器学习建预测模型</td><td>随机森林、神经网络</td></tr><tr><td><strong>解释阶段</strong></td><td>用统计学或可解释性AI方法解释模型结果</td><td>SHAP、LIME、偏依赖图</td></tr><tr><td><strong>监控阶段</strong></td><td>用统计方法监测模型漂移</td><td>控制图、漂移检测、置信区间变化</td></tr></tbody></table><p>非常好的进阶问题 🔥<br>你已经进入<strong>“数据驱动的软件质量改进”</strong>这一跨界核心主题。<br>——这正是 <strong>统计学（质量度量 + 推断）</strong> 与 <strong>机器学习（预测 + 优化）</strong> 在 <strong>DevOps &#x2F; 软件研发过程改进（Software Process Improvement）</strong> 中最具价值的融合点。</p><p>下面我将系统讲解：</p><blockquote><p>💡如何将“统计学 + 机器学习”协同应用于<strong>软件研发过程的质量控制与持续改进</strong>。</p></blockquote><hr><h1 id="🧩-背景：从传统质量管理到数据驱动研发"><a href="#🧩-背景：从传统质量管理到数据驱动研发" class="headerlink" title="## 🧩 背景：从传统质量管理到数据驱动研发"></a>## 🧩 背景：从传统质量管理到数据驱动研发</h1><table><thead><tr><th>阶段</th><th>方法特点</th><th>数据应用</th></tr></thead><tbody><tr><td><strong>传统质量管理</strong>（QC, QA）</td><td>靠经验、手工测试、事后复盘</td><td>数据有限，滞后性强</td></tr><tr><td><strong>统计质量控制</strong>（SQC）</td><td>通过度量、控制图、回归分析等发现波动</td><td>利用历史指标分析趋势</td></tr><tr><td><strong>机器学习驱动的质量改进</strong></td><td>实时预测缺陷、自动优化测试与部署</td><td>持续收集与学习，形成闭环</td></tr></tbody></table><p>👉 <strong>目标转变：</strong></p><blockquote><p>从“发现问题 → 改进”<br>变为“预测问题 → 预防”。</p></blockquote><hr><h1 id="⚙️-总体框架：统计学-机器学习协同质量改进体系"><a href="#⚙️-总体框架：统计学-机器学习协同质量改进体系" class="headerlink" title="## ⚙️ 总体框架：统计学 + 机器学习协同质量改进体系"></a>## ⚙️ 总体框架：统计学 + 机器学习协同质量改进体系</h1><p>我们可将整个体系划分为 <strong>五个阶段（对应 DMAIC 框架）</strong>：</p><table><thead><tr><th>DMAIC阶段</th><th>统计学作用</th><th>机器学习作用</th><th>输出结果</th></tr></thead><tbody><tr><td><strong>D - Define 定义</strong></td><td>定义关键质量特征（CTQ），建立指标体系</td><td>——</td><td>质量目标、度量体系</td></tr><tr><td><strong>M - Measure 度量</strong></td><td>统计采集指标，控制采样误差</td><td>自动化收集研发数据（CI&#x2F;CD、issue、代码提交等）</td><td>数据集、过程日志</td></tr><tr><td><strong>A - Analyze 分析</strong></td><td>方差分析、回归、控制图识别异常</td><td>特征选择、缺陷预测模型</td><td>缺陷原因、关键影响因子</td></tr><tr><td><strong>I - Improve 改进</strong></td><td>实验设计（DOE）验证改进措施</td><td>优化模型推荐测试优先级、代码审查重点</td><td>优化建议、预测预警</td></tr><tr><td><strong>C - Control 控制</strong></td><td>统计过程控制图（SPC）监测指标稳定性</td><td>数据漂移检测、模型在线学习</td><td>持续监控与动态更新</td></tr></tbody></table><hr><h1 id="🧠-协同机制详解：两种方法如何“互补”"><a href="#🧠-协同机制详解：两种方法如何“互补”" class="headerlink" title="## 🧠 协同机制详解：两种方法如何“互补”"></a>## 🧠 协同机制详解：两种方法如何“互补”</h1><table><thead><tr><th>任务</th><th>统计学角色</th><th>机器学习角色</th><th>协同价值</th></tr></thead><tbody><tr><td><strong>软件度量与指标体系建立</strong></td><td>用方差分析、主成分分析找出关键度量</td><td>自动聚类&#x2F;特征重要性分析</td><td>定义科学的度量体系</td></tr><tr><td><strong>缺陷预测与风险预警</strong></td><td>建立基础线，分析缺陷分布规律</td><td>训练缺陷预测模型（随机森林、XGBoost）</td><td>预测高风险模块或代码提交</td></tr><tr><td><strong>过程稳定性监控</strong></td><td>用控制图监控指标（如构建失败率、测试覆盖率）</td><td>用异常检测算法（Isolation Forest）识别非典型行为</td><td>双层异常检测，提高灵敏度</td></tr><tr><td><strong>过程改进优化</strong></td><td>用DOE或回归分析测试改进措施显著性</td><td>用强化学习或贝叶斯优化动态调整参数</td><td>自动找到最优改进策略</td></tr><tr><td><strong>知识沉淀与反馈学习</strong></td><td>用统计推断建立置信区间和经验法则</td><td>让模型持续学习新数据</td><td>从“分析改进”进化到“自学习优化”</td></tr></tbody></table><hr><h1 id="🔍-实际应用示例：数据驱动的DevOps质量改进流程"><a href="#🔍-实际应用示例：数据驱动的DevOps质量改进流程" class="headerlink" title="## 🔍 实际应用示例：数据驱动的DevOps质量改进流程"></a>## 🔍 实际应用示例：数据驱动的DevOps质量改进流程</h1><h3 id="案例：某软件团队希望降低上线缺陷率"><a href="#案例：某软件团队希望降低上线缺陷率" class="headerlink" title="案例：某软件团队希望降低上线缺陷率"></a>案例：某软件团队希望降低上线缺陷率</h3><h4 id="🔸-1-定义阶段（Define）"><a href="#🔸-1-定义阶段（Define）" class="headerlink" title="🔸 1. 定义阶段（Define）"></a>🔸 1. 定义阶段（Define）</h4><ul><li>统计学：确定 CTQ（关键质量指标）：缺陷密度、平均修复时间（MTTR）、CI失败率</li><li>机器学习：构建指标数据结构（时间序列 + 分类特征）</li></ul><h4 id="🔸-2-度量阶段（Measure）"><a href="#🔸-2-度量阶段（Measure）" class="headerlink" title="🔸 2. 度量阶段（Measure）"></a>🔸 2. 度量阶段（Measure）</h4><ul><li>统计学：设计数据采样方法，确定置信水平</li><li>机器学习：自动收集 Git、Jira、SonarQube、Jenkins 日志</li></ul><h4 id="🔸-3-分析阶段（Analyze）"><a href="#🔸-3-分析阶段（Analyze）" class="headerlink" title="🔸 3. 分析阶段（Analyze）"></a>🔸 3. 分析阶段（Analyze）</h4><ul><li><p>统计学：方差分析发现“测试覆盖率”与“缺陷密度”显著相关</p></li><li><p>机器学习：训练模型预测哪些代码模块可能高风险</p><blockquote><p>示例模型：随机森林 + 特征重要性<br>输出：风险评分Top 10模块</p></blockquote></li></ul><h4 id="🔸-4-改进阶段（Improve）"><a href="#🔸-4-改进阶段（Improve）" class="headerlink" title="🔸 4. 改进阶段（Improve）"></a>🔸 4. 改进阶段（Improve）</h4><ul><li>统计学：设计对比实验（AB实验）验证代码审查流程优化效果</li><li>机器学习：用强化学习优化测试优先级，减少测试时间50%</li></ul><h4 id="🔸-5-控制阶段（Control）"><a href="#🔸-5-控制阶段（Control）" class="headerlink" title="🔸 5. 控制阶段（Control）"></a>🔸 5. 控制阶段（Control）</h4><ul><li>统计学：绘制过程控制图（SPC）持续监控缺陷率波动</li><li>机器学习：引入异常检测 + 数据漂移监控，若模型预测分布偏移则自动重训练</li></ul><p>👉 最终实现：</p><blockquote><p>“预测 + 改进 + 控制”闭环，缺陷率降低20%，交付周期缩短15%。</p></blockquote><hr><h1 id="📊-关键指标与模型映射关系（示意）"><a href="#📊-关键指标与模型映射关系（示意）" class="headerlink" title="## 📊 关键指标与模型映射关系（示意）"></a>## 📊 关键指标与模型映射关系（示意）</h1><table><thead><tr><th>指标类型</th><th>统计学方法</th><th>机器学习方法</th><th>目标</th></tr></thead><tbody><tr><td>缺陷密度趋势</td><td>回归分析、控制图</td><td>LSTM时间序列预测</td><td>提前发现质量波动</td></tr><tr><td>代码复杂度</td><td>方差分析、相关分析</td><td>特征选择（SHAP）</td><td>找出高风险复杂度段</td></tr><tr><td>测试覆盖率</td><td>正态检验、置信区间</td><td>自动特征交互</td><td>评估覆盖率与缺陷关系</td></tr><tr><td>构建失败率</td><td>二项分布检验</td><td>异常检测（Isolation Forest）</td><td>自动报警与回滚</td></tr><tr><td>团队生产率</td><td>多元回归</td><td>聚类分析</td><td>识别瓶颈与改进潜力</td></tr></tbody></table><hr><h1 id="🧭-应用架构建议"><a href="#🧭-应用架构建议" class="headerlink" title="## 🧭 应用架构建议"></a>## 🧭 应用架构建议</h1><p>一个典型的 <strong>数据驱动质量改进系统</strong> 可分为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">📥 数据采集层</span><br><span class="line"> ┣ Git、CI/CD、Jira、SonarQube、测试日志</span><br><span class="line"></span><br><span class="line">🧮 统计分析层</span><br><span class="line"> ┣ EDA分析、控制图、回归分析、DOE实验</span><br><span class="line"></span><br><span class="line">🤖 机器学习层</span><br><span class="line"> ┣ 缺陷预测、异常检测、风险评分、强化学习优化</span><br><span class="line"></span><br><span class="line">📊 可视化层</span><br><span class="line"> ┣ Dashboard展示趋势、风险、置信区间、模型输出</span><br><span class="line"></span><br><span class="line">🔁 持续改进层</span><br><span class="line"> ┣ 自动触发模型重训、报警、优化建议</span><br></pre></td></tr></table></figure><hr><h1 id="🧠-总结一句话"><a href="#🧠-总结一句话" class="headerlink" title="## 🧠 总结一句话"></a>## 🧠 总结一句话</h1><blockquote><p><strong>统计学提供“可解释的度量与推断逻辑”，机器学习提供“自动化的预测与优化能力”。</strong></p><p>两者协同，让软件研发过程从“经验驱动”→“数据驱动”→“智能优化”。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> ai </tag>
            
            <tag> 机器学习 </tag>
            
            <tag> 统计学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jenkins pipeline 上传包失败</title>
      <link href="/2025/08/28/devops_skills/deploy/jenkins%20pipeline%20%E4%B8%8A%E4%BC%A0%E5%8C%85%E5%A4%B1%E8%B4%A5/"/>
      <url>/2025/08/28/devops_skills/deploy/jenkins%20pipeline%20%E4%B8%8A%E4%BC%A0%E5%8C%85%E5%A4%B1%E8%B4%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="1️⃣-生成并配置-SSH-密钥"><a href="#1️⃣-生成并配置-SSH-密钥" class="headerlink" title="1️⃣ 生成并配置 SSH 密钥"></a>1️⃣ 生成并配置 SSH 密钥</h2><ol><li><p><strong>在 Jenkins 服务器上生成密钥</strong>（如果尚未有可用的）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -c 内容是注释，可读即可</span></span><br><span class="line">ssh-keygen -t ed25519 -C <span class="string">&quot;jenkins@build&quot;</span> </span><br></pre></td></tr></table></figure><p>生成 <code>~/.ssh/id_ed25519</code> 和 <code>id_ed25519.pub</code>。</p></li><li><p><strong>将公钥添加到目标服务器</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-copy-id -i ~/.ssh/id_ed25519.pub user@target-server</span><br></pre></td></tr></table></figure><blockquote><p>测试是否免密登录, 这部分很重要，可以-vvv查看具体过程</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ssh user@target-server <span class="string">&quot;echo OK&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># user必须是目标服务器用户名， 在.ssh目录下执行</span></span><br><span class="line">ssh -vvv -i ~/.ssh/id_ed25519 \</span><br><span class="line"> -o StrictHostKeyChecking=no \</span><br><span class="line"> -o UserKnownHostsFile=/dev/null \</span><br><span class="line"> user@host</span><br></pre></td></tr></table></figure></li><li><p><strong>在 Jenkins 中配置凭据</strong></p><ul><li><p>Jenkins → <strong>Manage Jenkins → Credentials → Global credentials</strong></p></li><li><p>新建 <strong>SSH Username with private key</strong></p></li><li><p>填：</p><ul><li>ID：<code>deploy-key</code> (供 Pipeline 使用)</li><li>Username：目标服务器用户名</li><li>Private Key：直接粘贴 <code>id_ed25519</code> 内容或“从文件”读取</li></ul></li></ul></li></ol><hr><h2 id="2️⃣-Jenkinsfile-示例"><a href="#2️⃣-Jenkinsfile-示例" class="headerlink" title="2️⃣ Jenkinsfile 示例"></a>2️⃣ Jenkinsfile 示例</h2><p>使用 <strong>Declarative Pipeline</strong> 方式：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">    agent any</span><br><span class="line"></span><br><span class="line">    environment &#123;</span><br><span class="line">        REMOTE_HOST = <span class="string">&#x27;your.server.com&#x27;</span></span><br><span class="line">        REMOTE_DIR  = <span class="string">&#x27;/opt/apps&#x27;</span></span><br><span class="line">        APP_NAME    = <span class="string">&#x27;myapp&#x27;</span></span><br><span class="line">        TAR_FILE    = <span class="string">&#x27;myapp.tar.gz&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    stages &#123;</span><br><span class="line">        stage(<span class="string">&#x27;Build&#x27;</span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                <span class="comment">// 假设已经有构建脚本生成 tar.gz</span></span><br><span class="line">                sh <span class="string">&#x27;tar -czf $&#123;TAR_FILE&#125; build_output/&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        stage(<span class="string">&#x27;Upload&#x27;</span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                sshagent(<span class="attr">credentials:</span> [<span class="string">&#x27;deploy-key&#x27;</span>]) &#123;</span><br><span class="line">                    sh <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">                        scp -o StrictHostKeyChecking=no $&#123;TAR_FILE&#125; \</span></span><br><span class="line"><span class="string">                        $&#123;REMOTE_HOST&#125;:$&#123;REMOTE_DIR&#125;/</span></span><br><span class="line"><span class="string">                    &quot;&quot;&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        stage(<span class="string">&#x27;Deploy&#x27;</span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                sshagent(<span class="attr">credentials:</span> [<span class="string">&#x27;deploy-key&#x27;</span>]) &#123;</span><br><span class="line">                    sh <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">                        ssh -o StrictHostKeyChecking=no $&#123;REMOTE_HOST&#125; &#x27;</span></span><br><span class="line"><span class="string">                            cd $&#123;REMOTE_DIR&#125; &amp;&amp;</span></span><br><span class="line"><span class="string">                            tar -xzf $&#123;TAR_FILE&#125; -C $&#123;REMOTE_DIR&#125;/$&#123;APP_NAME&#125; --strip-components=1 &amp;&amp;</span></span><br><span class="line"><span class="string">                            systemctl restart myapp.service</span></span><br><span class="line"><span class="string">                        &#x27;</span></span><br><span class="line"><span class="string">                    &quot;&quot;&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    post &#123;</span><br><span class="line">        success &#123;</span><br><span class="line">            echo <span class="string">&#x27;部署完成 🎉&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        failure &#123;</span><br><span class="line">            echo <span class="string">&#x27;部署失败，请检查日志。&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="关键点说明"><a href="#关键点说明" class="headerlink" title="关键点说明"></a>关键点说明</h3><ul><li><strong>sshagent</strong>：Pipeline 插件 <code>SSH Agent</code> 提供的步骤，会自动加载配置好的私钥。</li><li><code>StrictHostKeyChecking=no</code>：避免首次连接需人工确认指纹。</li><li><code>--strip-components=1</code>：解压时去掉顶层目录。</li><li><code>systemctl restart myapp.service</code>：根据实际服务名修改。</li></ul><hr><h2 id="3️⃣-服务器端准备"><a href="#3️⃣-服务器端准备" class="headerlink" title="3️⃣ 服务器端准备"></a>3️⃣ 服务器端准备</h2><ul><li>目标路径 <code>/opt/apps/myapp</code> 需存在并且 <code>user</code> 有写权限。</li><li>如果用 <code>systemd</code> 管理应用，需要提前配置好 <code>myapp.service</code>。</li></ul><hr><h2 id="4️⃣-常见问题排查"><a href="#4️⃣-常见问题排查" class="headerlink" title="4️⃣ 常见问题排查"></a>4️⃣ 常见问题排查</h2><table><thead><tr><th>现象</th><th>解决</th></tr></thead><tbody><tr><td>Jenkins 控制台提示 <code>Permission denied (publickey)</code></td><td>检查私钥是否匹配、凭据 ID 是否正确、<code>sshagent</code> 插件是否安装</td></tr><tr><td>第一次连接要求输入 <code>yes/no</code></td><td>已用 <code>-o StrictHostKeyChecking=no</code></td></tr><tr><td>部署后旧文件残留</td><td>可在解压前执行 <code>rm -rf $&#123;APP_NAME&#125;/*</code></td></tr></tbody></table><hr><h2 id="5️⃣-总结流程"><a href="#5️⃣-总结流程" class="headerlink" title="5️⃣ 总结流程"></a>5️⃣ 总结流程</h2><ol><li>Jenkins 节点生成并注册 SSH Key</li><li>目标服务器加入公钥，实现免密</li><li>Jenkinsfile：<strong>Build → Upload → Deploy</strong></li><li>通过 <code>sshagent</code> 调用 <code>scp</code> &amp; <code>ssh</code> 完成自动化部署</li></ol><h2 id="withcredentail-vs-sshagent"><a href="#withcredentail-vs-sshagent" class="headerlink" title="withcredentail vs sshagent"></a>withcredentail vs sshagent</h2><ol><li><p><strong>添加凭据</strong></p><ul><li><strong>类型</strong>：<code>SSH Username with private key</code></li><li><strong>ID</strong>：<code>deploy-key</code>（示例 ID，后面 Pipeline 要用）</li><li><strong>Username</strong>：目标服务器用户名</li><li><strong>Private Key</strong>：粘贴私钥内容或选择文件</li></ul></li></ol><hr><h2 id="2️⃣-Jenkinsfile-示例-1"><a href="#2️⃣-Jenkinsfile-示例-1" class="headerlink" title="2️⃣ Jenkinsfile 示例"></a>2️⃣ Jenkinsfile 示例</h2><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">    agent any</span><br><span class="line"></span><br><span class="line">    environment &#123;</span><br><span class="line">        REMOTE_HOST = <span class="string">&#x27;your.server.com&#x27;</span></span><br><span class="line">        REMOTE_DIR  = <span class="string">&#x27;/opt/apps&#x27;</span></span><br><span class="line">        TAR_FILE    = <span class="string">&#x27;myapp.tar.gz&#x27;</span></span><br><span class="line">        APP_NAME    = <span class="string">&#x27;myapp&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    stages &#123;</span><br><span class="line">        stage(<span class="string">&#x27;Build&#x27;</span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                sh <span class="string">&#x27;tar -czf $&#123;TAR_FILE&#125; build_output/&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        stage(<span class="string">&#x27;Upload &amp; Deploy&#x27;</span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                <span class="comment">// 注入凭据</span></span><br><span class="line">                withCredentials([sshUserPrivateKey(<span class="attr">credentialsId:</span> <span class="string">&#x27;deploy-key&#x27;</span>,</span><br><span class="line">                                                  <span class="symbol">keyFileVariable:</span> <span class="string">&#x27;SSH_KEY&#x27;</span>,</span><br><span class="line">                                                  <span class="symbol">usernameVariable:</span> <span class="string">&#x27;SSH_USER&#x27;</span>)]) &#123;</span><br><span class="line">                    sh <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">                        # 上传文件</span></span><br><span class="line"><span class="string">                        scp -i $SSH_KEY -o StrictHostKeyChecking=no $&#123;TAR_FILE&#125; \</span></span><br><span class="line"><span class="string">                            $SSH_USER@$&#123;REMOTE_HOST&#125;:$&#123;REMOTE_DIR&#125;/</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                        # 远程解压并重启</span></span><br><span class="line"><span class="string">                        ssh -i $SSH_KEY -o StrictHostKeyChecking=no \</span></span><br><span class="line"><span class="string">                            $SSH_USER@$&#123;REMOTE_HOST&#125; &#x27;</span></span><br><span class="line"><span class="string">                                mkdir -p $&#123;REMOTE_DIR&#125;/$&#123;APP_NAME&#125; &amp;&amp;</span></span><br><span class="line"><span class="string">                                tar -xzf $&#123;REMOTE_DIR&#125;/$&#123;TAR_FILE&#125; -C $&#123;REMOTE_DIR&#125;/$&#123;APP_NAME&#125; --strip-components=1 &amp;&amp;</span></span><br><span class="line"><span class="string">                                systemctl restart myapp.service</span></span><br><span class="line"><span class="string">                            &#x27;</span></span><br><span class="line"><span class="string">                    &quot;&quot;&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    post &#123;</span><br><span class="line">        success &#123; echo <span class="string">&#x27;部署完成 🎉&#x27;</span> &#125;</span><br><span class="line">        failure &#123; echo <span class="string">&#x27;部署失败，请检查日志。&#x27;</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="关键点"><a href="#关键点" class="headerlink" title="关键点"></a>关键点</h3><ul><li><p><strong>withCredentials</strong></p><ul><li><code>credentialsId</code>：与 Jenkins 中创建的凭据 ID 对应。</li><li><code>keyFileVariable</code>：在步骤内会生成一个临时文件，路径保存在 <code>$SSH_KEY</code> 变量中。</li><li><code>usernameVariable</code>：注入远程用户名。</li></ul></li><li><p><code>-i $SSH_KEY</code>：显式指定刚注入的私钥文件。</p></li><li><p><code>StrictHostKeyChecking=no</code>：避免首次连接交互。</p></li></ul><hr><h2 id="3️⃣-调试：结合-vvv"><a href="#3️⃣-调试：结合-vvv" class="headerlink" title="3️⃣ 调试：结合 -vvv"></a>3️⃣ 调试：结合 <code>-vvv</code></h2><p>如果需要排查连接问题，可以直接在 <code>sh</code> 命令里加 <code>-vvv</code>：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh <span class="string">&quot;ssh -vvv -i $SSH_KEY -o StrictHostKeyChecking=no $SSH_USER@$&#123;REMOTE_HOST&#125; &#x27;echo OK&#x27;&quot;</span></span><br></pre></td></tr></table></figure><p>这样在 Jenkins 控制台日志里能看到完整握手与认证细节。</p><hr><h3 id="对比-sshagent"><a href="#对比-sshagent" class="headerlink" title="对比 sshagent"></a>对比 <code>sshagent</code></h3><ul><li><p><code>sshagent</code> 会在整个 block 内自动加载密钥到 <code>ssh-agent</code>，不用 <code>-i</code>。</p></li><li><p><code>withCredentials</code> 则给你一个真实的密钥文件，更适合你需要 <code>scp</code>、<code>rsync</code> 等显式指定密钥的场景。</p></li><li><p>两者都安全，关键看团队习惯：</p><ul><li>频繁多处 <code>ssh</code> → <code>sshagent</code> 方便。</li><li>只需一次 <code>scp</code>&#x2F;<code>ssh</code> → <code>withCredentials</code> 足够。</li></ul></li></ul><hr><p><strong>总结</strong>：<br><code>withCredentials([sshUserPrivateKey(...)])</code> 让你在 Pipeline 里安全注入 SSH 私钥，并配合 <code>scp/ssh -i $SSH_KEY</code> 即可顺利上传 tar.gz 并远程部署，无需在 Jenkins 节点保存明文密钥文件。</p><h2 id="QA-服务器忽略auth-keys"><a href="#QA-服务器忽略auth-keys" class="headerlink" title="QA 服务器忽略auth_keys"></a>QA 服务器忽略auth_keys</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ls -ld /home/user /home/user/.ssh</span><br><span class="line">ls -l  /home/user/.ssh/authorized_keys</span><br><span class="line">ls -lZ  /home/user/.ssh/authorized_keys </span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">getenforce</span><br><span class="line"># 如果是 Enforcing</span><br><span class="line">restorecon -Rv /home/user/.ssh</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> jenkins </tag>
            
            <tag> devops </tag>
            
            <tag> pipeline </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cypress版本升级13.17.0-15.0问题</title>
      <link href="/2025/08/16/automatically_test_skills/cypress%E7%89%88%E6%9C%AC%E5%8D%87%E7%BA%A713.17.0-15.0%E9%97%AE%E9%A2%98/"/>
      <url>/2025/08/16/automatically_test_skills/cypress%E7%89%88%E6%9C%AC%E5%8D%87%E7%BA%A713.17.0-15.0%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> 自动化测试 </tag>
            
            <tag> cypress </tag>
            
            <tag> cypress升级 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LLM在研发过程中质量控制与改进研究猜想</title>
      <link href="/2025/08/12/ai_tools/LLM%E5%9C%A8%E7%A0%94%E5%8F%91%E8%BF%87%E7%A8%8B%E4%B8%AD%E8%B4%A8%E9%87%8F%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%94%B9%E8%BF%9B%E7%A0%94%E7%A9%B6%E7%8C%9C%E6%83%B3/"/>
      <url>/2025/08/12/ai_tools/LLM%E5%9C%A8%E7%A0%94%E5%8F%91%E8%BF%87%E7%A8%8B%E4%B8%AD%E8%B4%A8%E9%87%8F%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%94%B9%E8%BF%9B%E7%A0%94%E7%A9%B6%E7%8C%9C%E6%83%B3/</url>
      
        <content type="html"><![CDATA[<h1 id="一、「大模型应用流程」与软件研发的质量控制（Quality-Control-QC）、-质量改进（Quality-Improvement-QA）-结合起来，可以理解为："><a href="#一、「大模型应用流程」与软件研发的质量控制（Quality-Control-QC）、-质量改进（Quality-Improvement-QA）-结合起来，可以理解为：" class="headerlink" title="一、「大模型应用流程」与软件研发的质量控制（Quality Control, QC）、**质量改进（Quality Improvement&#x2F;QA）**结合起来，可以理解为："></a>一、「大模型应用流程」与<strong>软件研发的质量控制（Quality Control, QC）</strong>、**质量改进（Quality Improvement&#x2F;QA）**结合起来，可以理解为：</h1><blockquote><p><strong>在研发生命周期的各个环节，把 LLM 应用管线嵌入进去，以实时监控、分析、改进代码和流程。</strong></p></blockquote><p>下面分三层展开：</p><hr><h2 id="1️⃣-对应关系：大模型应用流程-↔-软件质量管理"><a href="#1️⃣-对应关系：大模型应用流程-↔-软件质量管理" class="headerlink" title="1️⃣ 对应关系：大模型应用流程 ↔ 软件质量管理"></a>1️⃣ 对应关系：大模型应用流程 ↔ 软件质量管理</h2><table><thead><tr><th>大模型应用步骤</th><th>在软件质量中的角色</th><th>说明</th></tr></thead><tbody><tr><td><strong>输入采集</strong></td><td>需求与代码度量</td><td>收集需求文档、代码提交、测试结果、日志、异常数据，形成质量监控的“原始输入”。</td></tr><tr><td><strong>上下文整理</strong></td><td>质量分析 &#x2F; 风险识别</td><td>用向量检索或规则抽取，把关键缺陷信息、历史缺陷模式、依赖关系提取出来，为模型分析做准备。</td></tr><tr><td><strong>模型推理</strong></td><td>智能检测与预测</td><td>让模型执行静态代码分析、漏洞识别、单测覆盖率评估、潜在缺陷预测。</td></tr><tr><td><strong>结果后处理</strong></td><td>质量报告与决策</td><td>格式化模型输出成测试报告、风险分级、改进建议；结合现有 CI&#x2F;CD 流程。</td></tr><tr><td><strong>反馈迭代</strong></td><td>持续改进</td><td>开发者根据报告修正代码；数据进入下一轮训练&#x2F;评估，提升模型和流程。</td></tr></tbody></table><hr><h2 id="2️⃣-在研发生命周期中的嵌入场景"><a href="#2️⃣-在研发生命周期中的嵌入场景" class="headerlink" title="2️⃣ 在研发生命周期中的嵌入场景"></a>2️⃣ 在研发生命周期中的嵌入场景</h2><ol><li><p><strong>需求 &amp; 设计阶段</strong></p><ul><li><strong>需求一致性检查</strong>：模型可比对需求文档与设计规格，发现模糊或冲突描述。</li><li><strong>安全&#x2F;隐私审查</strong>：自动标注潜在合规风险。</li></ul></li><li><p><strong>编码阶段</strong></p><ul><li><strong>实时质量控制</strong>：类似 Cursor 的“字符级”反馈，模型检查代码风格、复杂度、潜在漏洞。</li><li><strong>单元测试生成</strong>：自动建议测试用例，提高测试覆盖率。</li></ul></li><li><p><strong>测试 &amp; 部署</strong></p><ul><li><strong>缺陷模式识别</strong>：分析测试日志，预测高风险模块。</li><li><strong>回归风险评估</strong>：基于历史数据预测改动可能引发的连锁问题。</li></ul></li><li><p><strong>运维 &amp; 持续改进</strong></p><ul><li><strong>异常日志智能分析</strong>：自动聚类、溯源。</li><li><strong>自适应改进</strong>：将生产环境缺陷反馈回模型，用于下一轮预测和质量指标优化。</li></ul></li></ol><hr><h2 id="3️⃣-质量控制与质量改进的提升点"><a href="#3️⃣-质量控制与质量改进的提升点" class="headerlink" title="3️⃣ 质量控制与质量改进的提升点"></a>3️⃣ 质量控制与质量改进的提升点</h2><table><thead><tr><th>目标</th><th>传统方式</th><th>引入大模型的变化</th></tr></thead><tbody><tr><td><strong>缺陷发现率</strong></td><td>靠人工 code review、静态分析工具</td><td>模型结合上下文推理，发现潜在逻辑缺陷、业务漏洞。</td></tr><tr><td><strong>反馈速度</strong></td><td>提交后或周期性扫描</td><td>实时、增量反馈，缩短修复周期。</td></tr><tr><td><strong>知识积累</strong></td><td>经验靠文档传承</td><td>模型吸收历史缺陷数据，持续学习改进。</td></tr><tr><td><strong>跨领域问题识别</strong></td><td>需要多角色协作</td><td>LLM 可横跨安全、性能、合规多维度给出统一建议。</td></tr></tbody></table><hr><h2 id="4️⃣-实施建议"><a href="#4️⃣-实施建议" class="headerlink" title="4️⃣ 实施建议"></a>4️⃣ 实施建议</h2><ul><li><strong>数据治理</strong>：保证输入（需求、代码、缺陷记录）结构化且隐私安全。</li><li><strong>CI&#x2F;CD 集成</strong>：把模型分析结果作为流水线的 Gate（如必须通过模型审查才能合并）。</li><li><strong>人机协同</strong>：模型提供初步判断，人类专家最终裁定，避免误报&#x2F;漏报。</li><li><strong>持续训练&#x2F;评估</strong>：把真实缺陷与模型判断差异反哺模型，实现真正的质量改进闭环。</li></ul><hr><h3 id="✅-总结"><a href="#✅-总结" class="headerlink" title="✅ 总结"></a>✅ 总结</h3><p>大模型应用过程与软件质量管理的逻辑高度契合：</p><blockquote><p><strong>输入数据→上下文整合→模型推理→结果反馈→迭代改进</strong><br>对应到研发流程，既能做<strong>实时质量控制</strong>（防止缺陷注入），也能推动<strong>持续质量改进</strong>（不断优化过程和产品）。<br>Cursor 这种工具其实就是在编码阶段把这一模式落地的一个示范，未来可扩展到需求、测试、运维的全生命周期。</p></blockquote><h1 id="二、LLM在研发过程中质量控制与改进研究猜想"><a href="#二、LLM在研发过程中质量控制与改进研究猜想" class="headerlink" title="二、LLM在研发过程中质量控制与改进研究猜想"></a>二、<strong>LLM在研发过程中质量控制与改进研究猜想</strong></h1><p>明白，你的研究重点落在<strong>开发完成后的后半段生命周期</strong>：</p><blockquote><p><strong>测试 → 部署 → 运维 → 持续改进</strong><br>以下结合“大模型应用流程”给出针对这四个阶段的详细映射与可用方案。</p></blockquote><hr><h2 id="🧩-总体思路"><a href="#🧩-总体思路" class="headerlink" title="🧩 总体思路"></a>🧩 总体思路</h2><p>无论是测试还是运维，本质仍是</p><blockquote><p><strong>数据采集 → 上下文构建 → 大模型推理 → 结果后处理 → 迭代改进</strong>。<br>差别在于“输入数据”和“推理目标”。</p></blockquote><hr><h2 id="1️⃣-测试阶段（Quality-Control）"><a href="#1️⃣-测试阶段（Quality-Control）" class="headerlink" title="1️⃣ 测试阶段（Quality Control）"></a>1️⃣ 测试阶段（Quality Control）</h2><p><strong>输入采集</strong></p><ul><li>测试计划、需求文档、代码变更记录、单元&#x2F;集成测试日志。</li></ul><p><strong>模型应用</strong></p><ul><li><strong>自动生成测试用例</strong>：根据需求与代码自动补齐边界测试、异常路径测试。</li><li><strong>缺陷预测</strong>：模型分析变更历史与复杂度指标，预测高风险模块。</li><li><strong>日志智能解析</strong>：对失败用例日志做根因分析，聚类相似问题。</li></ul><p><strong>质量改进点</strong></p><ul><li>提高测试覆盖率与发现率，缩短缺陷定位时间。</li><li>生成结构化报告，直接反馈给开发与运维。</li></ul><hr><h2 id="2️⃣-部署阶段（Release-Deployment）"><a href="#2️⃣-部署阶段（Release-Deployment）" class="headerlink" title="2️⃣ 部署阶段（Release&#x2F;Deployment）"></a>2️⃣ 部署阶段（Release&#x2F;Deployment）</h2><p><strong>输入采集</strong></p><ul><li>CI&#x2F;CD 构建产物、配置文件、依赖清单、容器镜像信息。</li></ul><p><strong>模型应用</strong></p><ul><li><strong>配置&#x2F;脚本审查</strong>：自动检查部署脚本安全、兼容性。</li><li><strong>风险评估</strong>：基于历史变更预测上线失败概率。</li><li><strong>自动化回滚策略建议</strong>：从以往故障案例中推断最优回滚流程。</li></ul><p><strong>质量改进点</strong></p><ul><li>降低上线失败率和人为失误。</li><li>在流水线中设 AI Gate：模型审查未通过的版本禁止上线。</li></ul><hr><h2 id="3️⃣-运维阶段（Operations-Monitoring）"><a href="#3️⃣-运维阶段（Operations-Monitoring）" class="headerlink" title="3️⃣ 运维阶段（Operations &amp; Monitoring）"></a>3️⃣ 运维阶段（Operations &amp; Monitoring）</h2><p><strong>输入采集</strong></p><ul><li>运行日志、监控指标（CPU、内存、延迟）、用户反馈、异常报警。</li></ul><p><strong>模型应用</strong></p><ul><li><strong>异常检测与根因分析</strong>：大模型结合时序数据与日志做多维度诊断。</li><li><strong>容量&#x2F;性能预测</strong>：分析趋势，预测资源瓶颈。</li><li><strong>智能告警合并</strong>：聚合相似告警，减少“告警风暴”。</li></ul><p><strong>质量改进点</strong></p><ul><li>提升问题发现速度和修复效率。</li><li>降低 MTTR（平均修复时间）。</li></ul><hr><h2 id="4️⃣-持续改进（Continuous-Improvement）"><a href="#4️⃣-持续改进（Continuous-Improvement）" class="headerlink" title="4️⃣ 持续改进（Continuous Improvement）"></a>4️⃣ 持续改进（Continuous Improvement）</h2><p><strong>输入采集</strong></p><ul><li>全阶段历史数据：缺陷记录、用户体验反馈、运维事件、性能指标。</li></ul><p><strong>模型应用</strong></p><ul><li><strong>质量度量与趋势分析</strong>：自动生成质量 KPI（缺陷率、可用性、变更失败率）。</li><li><strong>过程优化建议</strong>：基于缺陷根因数据提出流程改进，如测试策略、部署策略优化。</li><li><strong>知识库构建</strong>：将典型问题与解决方案结构化沉淀，供未来迭代。</li></ul><p><strong>质量改进点</strong></p><ul><li>数据驱动的 DevOps 改进闭环。</li><li>形成可复用的“经验 → 规则”库，持续提升下一轮开发质量。</li></ul><hr><h2 id="🔑-实施要点"><a href="#🔑-实施要点" class="headerlink" title="🔑 实施要点"></a>🔑 实施要点</h2><table><thead><tr><th>关键环节</th><th>建议</th></tr></thead><tbody><tr><td>数据治理</td><td>建立统一的数据采集与清洗管道，保证隐私合规。</td></tr><tr><td>流水线集成</td><td>在 CI&#x2F;CD 中加入 AI 质量门（Quality Gate）。</td></tr><tr><td>人机协同</td><td>模型做初筛、工程师做最终判定，避免误报。</td></tr><tr><td>持续反馈</td><td>将真实缺陷与模型判断差异回馈训练，逐步提升准确率。</td></tr></tbody></table><hr><h3 id="✅-总结-1"><a href="#✅-总结-1" class="headerlink" title="✅ 总结"></a>✅ 总结</h3><p>在 <strong>测试、部署、运维、持续改进</strong> 各阶段，大模型都可作为</p><blockquote><p><strong>“智能质量管控器”</strong><br>通过自动化分析、预测和建议，形成<br><strong>实时质量控制 + 持续质量改进</strong> 的闭环。<br>这正是 DevOps 与 AIOps 的结合方向，也是你研究的核心落脚点。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Cursor </tag>
            
            <tag> Copilot </tag>
            
            <tag> LLM </tag>
            
            <tag> AI </tag>
            
            <tag> 质量控制 </tag>
            
            <tag> 质量改进 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cursor vs Copilot区别</title>
      <link href="/2025/08/10/ai_tools/cusor%20vs%20copilot%E5%8C%BA%E5%88%AB/"/>
      <url>/2025/08/10/ai_tools/cusor%20vs%20copilot%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="一-Cursor-vs-Copilot区别"><a href="#一-Cursor-vs-Copilot区别" class="headerlink" title="一.Cursor vs Copilot区别"></a>一.Cursor vs Copilot区别</h1><h2 id="1️⃣-“若注重代码的精确性和实时提示，Cursor会是更好的选择”"><a href="#1️⃣-“若注重代码的精确性和实时提示，Cursor会是更好的选择”" class="headerlink" title="1️⃣  “若注重代码的精确性和实时提示，Cursor会是更好的选择”"></a>1️⃣  <strong>“若注重代码的精确性和实时提示，Cursor会是更好的选择”</strong></h2><p><strong>核心特点</strong></p><ul><li><strong>精确性</strong>：Cursor 基于最新的 GPT-4&#x2F;5 系列模型，并且 IDE 就是“AI-first”设计。</li><li><strong>实时提示</strong>：它的补全、语法高亮、Lint 等功能和编辑器深度绑定，可在你输入每个字符时实时给出上下文相关的补全、重构建议。</li><li><strong>上下文感知更强</strong>：Cursor 会自动读取项目结构、依赖和文档，理解度更高，能保持风格和逻辑一致。</li></ul><p><strong>适用场景</strong></p><ul><li>对<strong>代码正确性</strong>要求高：如金融、硬件驱动、算法实现。</li><li>需要<strong>边写边改</strong>的场景：调试、逐行实现复杂算法。</li><li>习惯“编辑器即提示器”的开发者。</li></ul><hr><h2 id="2️⃣-“若需要高效完成较为复杂的功能开发，则-Copilot-可能更具优势”"><a href="#2️⃣-“若需要高效完成较为复杂的功能开发，则-Copilot-可能更具优势”" class="headerlink" title="2️⃣ “若需要高效完成较为复杂的功能开发，则 Copilot 可能更具优势”"></a>2️⃣ <strong>“若需要高效完成较为复杂的功能开发，则 Copilot 可能更具优势”</strong></h2><p><strong>核心特点</strong></p><ul><li><strong>强大的大段生成</strong>：GitHub Copilot（尤其是 Chat + Copilot X）擅长根据自然语言描述，直接生成相对完整的模块、接口甚至项目骨架。</li><li><strong>生态集成</strong>：与 GitHub、VS Code、JetBrains 等无缝结合，支持 Pull Request、测试、文档生成。</li><li><strong>团队协作</strong>：在多人协作、版本管理、PR 评论等环节有丰富插件和工作流。</li></ul><p><strong>适用场景</strong></p><ul><li><strong>快速开发原型</strong>：例如从零搭建一个含前后端的 Web 应用。</li><li><strong>复杂业务功能</strong>：一次性写出较完整的 API、数据模型或自动生成测试。</li><li>对<strong>开发效率和产出速度</strong>要求高的团队项目。</li></ul><hr><h2 id="🔑-简单对比表"><a href="#🔑-简单对比表" class="headerlink" title="🔑 简单对比表"></a>🔑 简单对比表</h2><table><thead><tr><th>维度</th><th>Cursor</th><th>GitHub Copilot</th></tr></thead><tbody><tr><td>侧重</td><td>实时、精准、代码编辑体验</td><td>高效、快速生成复杂功能</td></tr><tr><td>最佳使用方式</td><td>持续迭代、精确调优</td><td>自然语言描述→生成整块功能</td></tr><tr><td>生态</td><td>自带 IDE，AI 功能深度集成</td><td>GitHub + VS Code&#x2F;JetBrains 生态丰富</td></tr><tr><td>适用人群</td><td>个人开发者、需要严谨代码的工程师</td><td>需要快速交付的团队、原型开发者</td></tr></tbody></table><hr><h3 id="🧭-选择建议"><a href="#🧭-选择建议" class="headerlink" title="🧭 选择建议"></a>🧭 选择建议</h3><ul><li><strong>单兵作战&#x2F;算法精确</strong>：偏向 <strong>Cursor</strong>。</li><li><strong>团队协作&#x2F;快速成型</strong>：偏向 <strong>Copilot</strong>。</li><li>预算允许且使用 VS Code，可考虑 <strong>两者并用</strong>：用 Copilot 生成大结构，再用 Cursor 精调细节。</li></ul><h1 id="二-模型基础、工作方式和上下文处理三个层面，分别介绍-Cursor-与-GitHub-Copilot-的核心原理与实现思路。"><a href="#二-模型基础、工作方式和上下文处理三个层面，分别介绍-Cursor-与-GitHub-Copilot-的核心原理与实现思路。" class="headerlink" title="二.模型基础、工作方式和上下文处理三个层面，分别介绍 Cursor 与 GitHub Copilot 的核心原理与实现思路。"></a>二.<strong>模型基础</strong>、<strong>工作方式</strong>和<strong>上下文处理</strong>三个层面，分别介绍 <strong>Cursor</strong> 与 <strong>GitHub Copilot</strong> 的核心原理与实现思路。</h1><hr><h2 id="🖋-Cursor-的原理"><a href="#🖋-Cursor-的原理" class="headerlink" title="🖋 Cursor 的原理"></a>🖋 Cursor 的原理</h2><h3 id="1️⃣-模型基础"><a href="#1️⃣-模型基础" class="headerlink" title="1️⃣ 模型基础"></a>1️⃣ 模型基础</h3><ul><li><strong>驱动模型</strong>：以 OpenAI GPT-4&#x2F;5 系列为核心（官方说明支持 GPT-4-turbo、GPT-4o 等），用户也可自选 Claude、Gemini 等大语言模型。</li><li><strong>定位</strong>：不仅是补全工具，而是一个“AI 优先”的代码编辑器。</li></ul><h3 id="2️⃣-工作方式"><a href="#2️⃣-工作方式" class="headerlink" title="2️⃣ 工作方式"></a>2️⃣ 工作方式</h3><ul><li><strong>深度 IDE 集成</strong>：Cursor 自身就是一个基于 VS Code 内核的独立编辑器。</li><li><strong>实时补全</strong>：每次你输入字符，Cursor 会把当前文件的<strong>已编辑部分 + 光标前后几行上下文 + 项目索引信息</strong>，组成提示（prompt），传给模型请求补全。</li><li><strong>语义搜索</strong>：它会对整个项目做索引（语义 embedding），当你问“这个函数在哪里被调用”时，能快速检索并将相关代码片段注入模型上下文。</li><li><strong>代码理解</strong>：通过持续增量地将文件结构、依赖树、git diff 等信息缓存，确保模型保持对项目全局的理解。</li></ul><blockquote><p>结果：<strong>精确且上下文敏感</strong>，类似一个时刻盯着整个项目的“AI Pair Programmer”。</p></blockquote><hr><h2 id="🖋-GitHub-Copilot-的原理"><a href="#🖋-GitHub-Copilot-的原理" class="headerlink" title="🖋 GitHub Copilot 的原理"></a>🖋 GitHub Copilot 的原理</h2><h3 id="1️⃣-模型基础-1"><a href="#1️⃣-模型基础-1" class="headerlink" title="1️⃣ 模型基础"></a>1️⃣ 模型基础</h3><ul><li><strong>驱动模型</strong>：OpenAI Codex（基于 GPT-3 衍生的代码专用模型）最初版本；2023 以后逐步升级为 GPT-4 系列的 Copilot Chat。</li><li><strong>训练数据</strong>：大量开源代码库（含 GitHub 公共仓库）+ 自然语言文本，针对<strong>代码生成与注释理解</strong>做过强化微调。</li></ul><h3 id="2️⃣-工作方式-1"><a href="#2️⃣-工作方式-1" class="headerlink" title="2️⃣ 工作方式"></a>2️⃣ 工作方式</h3><ul><li><strong>编辑器插件</strong>：主要作为 VS Code、JetBrains 等 IDE 插件运行。</li><li><strong>片段预测</strong>：实时读取当前文件、最近打开的文件、光标前的上下文，生成下一个合理的代码块。</li><li><strong>Chat &amp; 高级功能</strong>：Copilot X 增加了“Chat”模式，可一次性接受较长的自然语言需求，将其转化为多文件改动或完整模块。</li><li><strong>GitHub 生态联动</strong>：可在 Pull Request、Issue、Tests 等环节调取模型，生成评审意见或自动补测试。</li></ul><blockquote><p>结果：<strong>快速输出大段功能性代码</strong>，适合从需求描述到初版实现的高效开发。</p></blockquote><hr><h2 id="🔑-核心差异总结"><a href="#🔑-核心差异总结" class="headerlink" title="🔑 核心差异总结"></a>🔑 核心差异总结</h2><table><thead><tr><th>维度</th><th>Cursor</th><th>GitHub Copilot</th></tr></thead><tbody><tr><td>代码理解深度</td><td>强：项目级索引 + 语义搜索，全局感知</td><td>中：主要依赖当前文件与少量打开文件</td></tr><tr><td>实时反馈</td><td>极强：字符级补全、编辑器原生</td><td>强：行级或块级补全</td></tr><tr><td>生成能力</td><td>偏精确微调，适合逐行&#x2F;逐函数</td><td>偏整体生成，可快速产出模块或完整功能</td></tr><tr><td>生态优势</td><td>独立 IDE，开放多模型</td><td>GitHub + VS Code&#x2F;JetBrains 深度集成</td></tr><tr><td>典型使用模式</td><td>边写边改、精细化调试</td><td>自然语言描述 → 一次性生成骨架</td></tr></tbody></table><hr><h3 id="🧭-总结"><a href="#🧭-总结" class="headerlink" title="🧭 总结"></a>🧭 总结</h3><ul><li><strong>Cursor</strong>：本质是“AI 驱动的代码编辑器”，通过深度上下文索引+强模型组合，实现<strong>高度精确、实时的交互式编程</strong>。</li><li><strong>Copilot</strong>：是“AI 代码生成插件”，以大语言模型补全和 GitHub 生态为核心，侧重<strong>快速、大规模功能开发</strong>。</li></ul><h1 id="三-QA"><a href="#三-QA" class="headerlink" title="三. QA"></a>三. QA</h1><blockquote><ol><li>Cursor高度精确、实时的交互式编程,但确实会带来<strong>一定的资源和网络开销</strong>。可以从以下几个方面理解 Cursor 实时反馈的性能影响：</li></ol></blockquote><hr><h2 id="1️⃣-工作原理导致的负载"><a href="#1️⃣-工作原理导致的负载" class="headerlink" title="1️⃣ 工作原理导致的负载"></a>1️⃣ 工作原理导致的负载</h2><table><thead><tr><th>过程</th><th>对本地性能的影响</th><th>对网络&#x2F;云端的影响</th></tr></thead><tbody><tr><td><strong>实时补全</strong></td><td>光标每次停顿都会触发编辑器与模型的请求，增加 CPU 内部事件和内存占用，但一般只在毫秒级。</td><td>每次请求都需调用云端大模型，消耗带宽、等待模型返回结果。</td></tr><tr><td><strong>语义索引</strong></td><td>首次打开项目时要建立语义索引（embedding），对大仓库会有一次性 CPU&#x2F;磁盘开销。</td><td>索引结果通常存本地，不频繁上传。</td></tr><tr><td><strong>长会话上下文</strong></td><td>为了保证“项目级理解”，Cursor 可能打包更多文件内容进 prompt，增加请求体积。</td><td>请求体大 → 网络传输和模型处理稍慢。</td></tr></tbody></table><hr><h2 id="2️⃣-影响因素"><a href="#2️⃣-影响因素" class="headerlink" title="2️⃣ 影响因素"></a>2️⃣ 影响因素</h2><ol><li><p><strong>项目规模</strong></p><ul><li>小型项目（几十个文件）：几乎无感。</li><li>大型单仓库（&gt;10 万行）：初次索引耗时明显，但只做一次。</li></ul></li><li><p><strong>网络环境</strong></p><ul><li>实时补全需要云端推理，网络延迟越高，体验越“卡”。</li><li>低延迟宽带或科学上网可显著提升体验。</li></ul></li><li><p><strong>本地硬件</strong></p><ul><li>内存不足或磁盘 I&#x2F;O 慢时，索引和文件监听会略占资源。</li><li>现代开发机（16GB+ 内存，SSD）基本无瓶颈。</li></ul></li></ol><hr><h2 id="3️⃣-官方与用户的缓解措施"><a href="#3️⃣-官方与用户的缓解措施" class="headerlink" title="3️⃣ 官方与用户的缓解措施"></a>3️⃣ 官方与用户的缓解措施</h2><ul><li><strong>增量索引</strong>：仅在文件改动时更新索引，避免重复扫描。</li><li><strong>请求节流</strong>：光标短暂停顿才触发请求，减少无意义调用。</li><li><strong>缓存机制</strong>：常用上下文与模型响应会缓存到本地。</li><li><strong>可选模型</strong>：你可切换更快但稍弱的模型（如 GPT-4o-mini）提升速度。</li></ul><hr><h2 id="4️⃣-开发体验建议"><a href="#4️⃣-开发体验建议" class="headerlink" title="4️⃣ 开发体验建议"></a>4️⃣ 开发体验建议</h2><ul><li><strong>大仓库第一次打开</strong>：耐心等待索引完成，可在后台运行。</li><li><strong>网络优化</strong>：保证稳定低延迟的网络环境。</li><li><strong>资源设置</strong>：在设置中调节“自动补全延迟”或关闭部分实时提示以节省资源。</li></ul><hr><h3 id="✅-总结"><a href="#✅-总结" class="headerlink" title="✅ 总结"></a>✅ 总结</h3><p>Cursor 的实时反馈<strong>确实比传统 IDE 多消耗一些 CPU、内存与网络请求</strong>，但设计上通过增量索引与请求节流已降低负担。</p><blockquote><p>在主流开发机和良好网络下，性能影响通常可忽略不计；<br>如果是<strong>超大型项目或网络延迟高</strong>，可以通过调节自动补全频率、限制索引范围来平衡体验与性能。</p></blockquote><h1 id="四-抽象的看Cursor-过程"><a href="#四-抽象的看Cursor-过程" class="headerlink" title="四. 抽象的看Cursor 过程"></a>四. 抽象的看Cursor 过程</h1><p>可以这么理解：<strong>Cursor 的工作流程其实就是一个典型的「AI 大模型应用」的具体落地案例</strong>。<br>如果把它抽象出来，可以得到一个通用的大模型应用管线，只是场景换成了“代码编辑”。下面分步骤拆解。</p><h2 id="🧩-1-典型大模型应用的通用流程"><a href="#🧩-1-典型大模型应用的通用流程" class="headerlink" title="🧩 1. 典型大模型应用的通用流程"></a>🧩 1. 典型大模型应用的通用流程</h2><ol><li><p><strong>输入采集 (Input Layer)</strong></p><ul><li>收集用户当前意图和上下文。</li><li>可能包括文本、代码、环境状态、历史记录等。</li></ul></li><li><p><strong>上下文整理 (Context Building &#x2F; Prompt Engineering)</strong></p><ul><li>选择、裁剪、重排相关信息，构造成模型可理解的 Prompt。</li><li>可能结合检索增强（RAG）、向量搜索等技术。</li></ul></li><li><p><strong>调用大模型 (Inference)</strong></p><ul><li>将 Prompt 发送给大语言模型（LLM），获得预测输出。</li><li>可能选择不同模型、控制参数（温度、最大token数等）。</li></ul></li><li><p><strong>结果后处理 (Post-processing)</strong></p><ul><li>对模型输出进行解析、格式化、语法校验。</li><li>结合业务逻辑做安全过滤或结构化处理。</li></ul></li><li><p><strong>反馈与迭代 (Interaction Loop)</strong></p><ul><li>将结果呈现给用户并收集下一轮输入，形成交互闭环。</li></ul></li></ol><blockquote><p>几乎所有 LLM 应用（智能客服、文生图、代码生成）都可以映射到这个流程。</p></blockquote><hr><h2 id="🖋-2-Cursor-对应的实现映射"><a href="#🖋-2-Cursor-对应的实现映射" class="headerlink" title="🖋 2. Cursor 对应的实现映射"></a>🖋 2. Cursor 对应的实现映射</h2><table><thead><tr><th>通用步骤</th><th>Cursor 具体做法</th></tr></thead><tbody><tr><td><strong>输入采集</strong></td><td>监听你正在编辑的文件、光标位置、已选中代码、最近 git diff 等。</td></tr><tr><td><strong>上下文整理</strong></td><td>通过语义索引（embedding + 向量检索）挑选与当前编辑内容最相关的文件片段，拼接成 Prompt；附带你的指令（如 <code>// todo:</code> 注释）。</td></tr><tr><td><strong>调用大模型</strong></td><td>调用 GPT-4&#x2F;5 或其他选定模型 API 请求补全或解释。</td></tr><tr><td><strong>结果后处理</strong></td><td>对生成代码进行语法检查、类型推断、格式化，然后在编辑器中以灰字补全或对话框显示。</td></tr><tr><td><strong>反馈迭代</strong></td><td>你可以直接接受、修改或拒绝建议；光标移动又会触发下一轮。</td></tr></tbody></table><hr><h2 id="🌐-3-关键技术点"><a href="#🌐-3-关键技术点" class="headerlink" title="🌐 3. 关键技术点"></a>🌐 3. 关键技术点</h2><ul><li><strong>RAG（Retrieval-Augmented Generation）</strong>：通过向量搜索找出与当前需求最相关的代码片段，避免 token 过长并提升准确度。</li><li><strong>Streaming 生成</strong>：采用流式返回，让补全几乎实时显示。</li><li><strong>增量索引</strong>：文件改动时才更新语义索引，提高效率。</li><li><strong>多模型策略</strong>：可根据任务选择更快或更强的模型（GPT-4o、Claude 等）。</li></ul><hr><h2 id="✅-总结-1"><a href="#✅-总结-1" class="headerlink" title="✅ 总结"></a>✅ 总结</h2><p>是的，<strong>Cursor 的处理过程就是一套标准的大模型应用管线</strong>，只是输入是“正在写的代码+项目上下文”，输出是“下一步代码或解释”。<br>这种模式对其他场景完全通用：</p><blockquote><p><strong>输入 → 上下文构建 → 模型推理 → 结果后处理 → 交互迭代</strong><br>无论是写代码、写文案、做客服、还是自动化办公，核心逻辑都大体一致。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Cursor </tag>
            
            <tag> Copilot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向容器设计编程</title>
      <link href="/2025/08/05/devops_skills/docker/%E9%9D%A2%E5%90%91%E5%AE%B9%E5%99%A8%E8%AE%BE%E8%AE%A1/"/>
      <url>/2025/08/05/devops_skills/docker/%E9%9D%A2%E5%90%91%E5%AE%B9%E5%99%A8%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="1-核心理念"><a href="#1-核心理念" class="headerlink" title="1. 核心理念"></a>1. 核心理念</h2><p>容器不是简单的“打包可运行环境”，而是一个 <strong>架构边界单位</strong>。面向容器的设计，就是把应用拆分为独立的、可部署的、隔离的运行单元，并让容器本身成为交付、运行、扩展的核心最小单元。<br>一句话：<strong>先想容器边界，再想代码结构</strong>。</p><hr><h2 id="2-设计流程"><a href="#2-设计流程" class="headerlink" title="2. 设计流程"></a>2. 设计流程</h2><h3 id="1-确定容器粒度"><a href="#1-确定容器粒度" class="headerlink" title="(1) 确定容器粒度"></a><strong>(1) 确定容器粒度</strong></h3><ul><li><strong>微服务化</strong>：每个业务能力一个容器（订单、支付、库存）</li><li><strong>功能模块化</strong>：可共用的功能（缓存、消息队列、API 网关）单独容器化</li><li>经验法则：容器越小，灵活性越高，但部署和运维复杂度也高</li></ul><hr><h3 id="2-接口优先设计"><a href="#2-接口优先设计" class="headerlink" title="(2) 接口优先设计"></a><strong>(2) 接口优先设计</strong></h3><ul><li>容器间通信使用标准接口（HTTP&#x2F;gRPC&#x2F;消息队列）</li><li>明确输入&#x2F;输出协议，减少跨容器强依赖</li><li>接口与实现解耦，保证容器内部技术栈可自由更换</li></ul><hr><h3 id="3-环境与依赖内置化"><a href="#3-环境与依赖内置化" class="headerlink" title="(3) 环境与依赖内置化"></a><strong>(3) 环境与依赖内置化</strong></h3><ul><li>应用运行所需依赖全部打包进容器镜像</li><li>配置外置（ConfigMap、Secrets），避免在镜像中写死</li><li>保证容器可在任何节点“一键运行”，不依赖宿主机环境</li></ul><hr><h3 id="4-状态管理"><a href="#4-状态管理" class="headerlink" title="(4) 状态管理"></a><strong>(4) 状态管理</strong></h3><ul><li><strong>无状态优先</strong>：容器重启不影响业务</li><li>有状态服务（数据库、文件存储）拆出去，用持久卷（PV）或云存储</li></ul><hr><h3 id="5-生命周期管理"><a href="#5-生命周期管理" class="headerlink" title="(5) 生命周期管理"></a><strong>(5) 生命周期管理</strong></h3><ul><li>容器启动、健康检查、退出信号处理（SIGTERM）</li><li>版本化镜像（不可变镜像策略）</li><li>灰度发布与回滚（通过镜像 tag + orchestration 工具）</li></ul><hr><h2 id="3-面向容器的架构特征"><a href="#3-面向容器的架构特征" class="headerlink" title="3. 面向容器的架构特征"></a>3. 面向容器的架构特征</h2><table><thead><tr><th>特征</th><th>说明</th><th>好处</th></tr></thead><tbody><tr><td><strong>轻量隔离</strong></td><td>各容器进程、依赖隔离</td><td>避免冲突，易迁移</td></tr><tr><td><strong>可移植性</strong></td><td>镜像可运行在不同平台</td><td>从开发到生产一致</td></tr><tr><td><strong>可伸缩性</strong></td><td>按容器水平扩展</td><td>高并发应对灵活</td></tr><tr><td><strong>可观测性</strong></td><td>每个容器独立监控</td><td>问题定位精准</td></tr><tr><td><strong>自动化</strong></td><td>构建、测试、部署流水线化</td><td>降低运维成本</td></tr></tbody></table><hr><h2 id="4-设计时的陷阱"><a href="#4-设计时的陷阱" class="headerlink" title="4. 设计时的陷阱"></a>4. 设计时的陷阱</h2><ul><li>容器粒度过细 → 接口调用过多，性能下降</li><li>将数据库直接放在短生命周期容器中 → 数据丢失</li><li>容器镜像过大 → 启动和更新慢</li><li>忽略网络延迟和跨容器带宽消耗</li></ul><hr><h2 id="5-一个简单的例子"><a href="#5-一个简单的例子" class="headerlink" title="5. 一个简单的例子"></a>5. 一个简单的例子</h2><p>比如一个电商系统：</p><ul><li><code>api-gateway</code> 容器（Nginx + Lua 或 Kong）</li><li><code>user-service</code> 容器（Go + MySQL）</li><li><code>order-service</code> 容器（Java + Kafka）</li><li><code>payment-service</code> 容器（Node.js + 支付SDK）</li><li>公用 <code>redis</code> 容器（缓存）</li><li>公用 <code>mq</code> 容器（RabbitMQ 或 Kafka）</li></ul><p>所有容器的运行、扩容、监控都交给 Kubernetes 或 Docker Compose 进行编排。</p><h1 id="ConfigMap-vs-docker-compose-environment-区别"><a href="#ConfigMap-vs-docker-compose-environment-区别" class="headerlink" title="ConfigMap vs docker-compose environment 区别"></a>ConfigMap vs <code>docker-compose</code> environment 区别</h1><h2 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. <strong>定义</strong></h2><table><thead><tr><th>项目</th><th>ConfigMap</th><th><code>docker-compose</code> environment</th></tr></thead><tbody><tr><td><strong>归属平台</strong></td><td>Kubernetes</td><td>Docker &#x2F; Docker Compose</td></tr><tr><td><strong>本质</strong></td><td>Kubernetes 的一种资源对象，用来存储<strong>非机密</strong>的配置信息（key-value）</td><td>在 Compose 文件（<code>docker-compose.yml</code>）中，为容器运行时注入环境变量的方式</td></tr><tr><td><strong>作用范围</strong></td><td>K8s 集群层面，多个 Pod&#x2F;容器可共享</td><td>当前 Compose 项目或单个容器</td></tr><tr><td><strong>存储位置</strong></td><td>存在 etcd（K8s 控制面）</td><td>写在 Compose 文件里或外部 <code>.env</code> 文件</td></tr><tr><td><strong>用途</strong></td><td>统一、集中管理配置，容器可挂载或注入</td><td>在启动容器时设置环境变量</td></tr></tbody></table><hr><h2 id="2-使用方式"><a href="#2-使用方式" class="headerlink" title="2. 使用方式"></a>2. <strong>使用方式</strong></h2><h3 id="ConfigMap（K8s）"><a href="#ConfigMap（K8s）" class="headerlink" title="ConfigMap（K8s）"></a><strong>ConfigMap（K8s）</strong></h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建 ConfigMap</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">my-config</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">APP_MODE:</span> <span class="string">production</span></span><br><span class="line">  <span class="attr">APP_PORT:</span> <span class="string">&quot;8080&quot;</span></span><br></pre></td></tr></table></figure><p>引用方式：</p><ul><li>作为<strong>环境变量</strong>：</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">envFrom:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">configMapRef:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">my-config</span></span><br></pre></td></tr></table></figure><ul><li>挂载成文件：</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">volumeMounts:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">config-vol</span></span><br><span class="line">  <span class="attr">mountPath:</span> <span class="string">/app/config</span></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">config-vol</span></span><br><span class="line">  <span class="attr">configMap:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">my-config</span></span><br></pre></td></tr></table></figure><hr><h3 id="docker-compose-environment"><a href="#docker-compose-environment" class="headerlink" title="docker-compose environment"></a><strong>docker-compose environment</strong></h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">myapp:latest</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">APP_MODE=production</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">APP_PORT=8080</span></span><br></pre></td></tr></table></figure><p>或者使用外部 <code>.env</code> 文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># .env</span><br><span class="line">APP_MODE=production</span><br><span class="line">APP_PORT=8080</span><br></pre></td></tr></table></figure><p>然后在 <code>docker-compose.yml</code>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">APP_MODE=$&#123;APP_MODE&#125;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">APP_PORT=$&#123;APP_PORT&#125;</span></span><br></pre></td></tr></table></figure><hr><h2 id="3-关键区别"><a href="#3-关键区别" class="headerlink" title="3. 关键区别"></a>3. <strong>关键区别</strong></h2><table><thead><tr><th>对比点</th><th>ConfigMap</th><th>docker-compose environment</th></tr></thead><tbody><tr><td><strong>平台</strong></td><td>运行在 Kubernetes</td><td>运行在 Docker &#x2F; Compose</td></tr><tr><td><strong>管理方式</strong></td><td>集群 API 统一管理，可独立于镜像和 Pod 生命周期</td><td>由 <code>docker-compose.yml</code> 直接定义，和容器生命周期绑定</td></tr><tr><td><strong>更新方式</strong></td><td>更新 ConfigMap → 重启 Pod（或触发滚动更新）</td><td>改 <code>docker-compose.yml</code> 或 <code>.env</code> → 重新 <code>docker-compose up -d</code></td></tr><tr><td><strong>适合场景</strong></td><td>多容器&#x2F;多服务共享配置，动态调整</td><td>单项目或单容器快速设置环境变量</td></tr><tr><td><strong>存储安全</strong></td><td>仅适合非敏感数据（敏感数据用 Secret）</td><td>同样不适合存敏感数据（最好用 Docker Secret）</td></tr></tbody></table><hr><h2 id="4-一句总结"><a href="#4-一句总结" class="headerlink" title="4. 一句总结"></a>4. <strong>一句总结</strong></h2><ul><li><strong>ConfigMap</strong> &#x3D; <strong>K8s 的“集群级配置中心”</strong>（适合动态、集中管理配置）</li><li><strong>docker-compose environment</strong> &#x3D; <strong>本地&#x2F;单机容器的环境变量注入</strong>（适合小规模部署或开发环境）</li></ul><h1 id="容器中的敏感数据"><a href="#容器中的敏感数据" class="headerlink" title="容器中的敏感数据"></a>容器中的敏感数据</h1><p>在Kubernetes中，敏感数据不应该存储在ConfigMap中，因为ConfigMap并不提供加密或保护数据的功能。对于敏感数据，Kubernetes提供了Secret对象来专门处理这类信息。Secret可以用来存储如密码、OAuth令牌和SSH密钥等敏感信息，并且可以在创建时选择是否启用加密。Secret可以通过类似ConfigMap的方式注入到容器中，作为环境变量或挂载为文件。</p><p>以下是在Kubernetes中使用Secret的一些基本操作：</p><ol><li><p>创建Secret：<br>可以通过命令行或者YAML文件创建Secret。例如，从文件创建一个包含用户名和密码的Secret：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create secret generic mysecret --from-file=username=./username.txt --from-file=password=./password.txt</span><br></pre></td></tr></table></figure></li><li><p>在Pod中使用Secret：</p><ul><li>作为环境变量：<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">env:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">SECRET_USERNAME</span></span><br><span class="line">  <span class="attr">valueFrom:</span></span><br><span class="line">    <span class="attr">secretKeyRef:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">mysecret</span></span><br><span class="line">      <span class="attr">key:</span> <span class="string">username</span></span><br></pre></td></tr></table></figure></li><li>作为挂载的卷：<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">volumeMounts:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">secret-volume</span></span><br><span class="line">  <span class="attr">mountPath:</span> <span class="string">/etc/secret</span></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">secret-volume</span></span><br><span class="line">  <span class="attr">secret:</span></span><br><span class="line">    <span class="attr">secretName:</span> <span class="string">mysecret</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><p>在Docker Compose中，没有直接等同于Kubernetes Secret的对象，但你可以通过环境变量或者挂载文件的方式来安全地传递敏感信息。</p><ol><li><p>使用环境变量：<br>你可以在<code>docker-compose.yml</code>文件中定义环境变量，并在运行<code>docker-compose up</code>之前通过<code>.env</code>文件或者命令行参数来设置这些值。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">myservice:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">myimage</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">SECRET_KEY=$&#123;SECRET_KEY&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>挂载敏感文件：<br>你可以将包含敏感信息的文件挂载到容器中。确保这些文件在主机系统上有适当的权限设置，并且不与版本控制系统共享（例如通过<code>.gitignore</code>）。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">myservice:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">myimage</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./secrets:/run/secrets</span></span><br></pre></td></tr></table></figure></li><li><p>Docker Secrets（仅适用于Swarm模式）：<br>如果你在使用Docker Swarm模式，可以利用Docker Secrets功能来管理敏感数据，这提供了更高级的安全措施，比如自动加密。</p></li></ol><p>无论是在Kubernetes还是Docker Compose中，处理敏感数据时都应该采取适当的安全措施，比如限制访问权限、使用加密以及避免将敏感信息硬编码到配置文件中。</p>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> 前端 </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter vscode java配置</title>
      <link href="/2025/07/25/app_develop_skills/flutter%20java%20vs%20code%E9%85%8D%E7%BD%AE/"/>
      <url>/2025/07/25/app_develop_skills/flutter%20java%20vs%20code%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="✅-一、确认已安装-Java-插件"><a href="#✅-一、确认已安装-Java-插件" class="headerlink" title="✅ 一、确认已安装 Java 插件"></a>✅ 一、确认已安装 Java 插件</h2><p>打开 VS Code 左侧扩展（Extensions）面板，<strong>确认已安装以下插件</strong>：</p><ul><li>✅ <strong>Java Extension Pack</strong>（Microsoft 出品）</li><li>✅ <strong>Language Support for Java(TM) by Red Hat</strong></li><li>✅ <strong>Debugger for Java</strong></li><li>✅ <strong>Java Dependency Viewer</strong></li><li>✅ <strong>Java Test Runner</strong></li></ul><blockquote><p>📌 安装 Java Extension Pack 会自动拉取上面几个依赖插件。</p></blockquote><h3 id="安装方式："><a href="#安装方式：" class="headerlink" title="安装方式："></a>安装方式：</h3><p>按 <code>Ctrl + Shift + X</code> 打开扩展市场，搜索并安装：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Java Extension Pack</span><br></pre></td></tr></table></figure><p>然后重启 VS Code。</p><hr><h2 id="✅-二、手动配置-java-home"><a href="#✅-二、手动配置-java-home" class="headerlink" title="✅ 二、手动配置 java.home"></a>✅ 二、手动配置 <code>java.home</code></h2><p>如果插件安装后还是没有 <code>java.home</code>，可以直接在 <code>settings.json</code> 中手动添加：</p><h3 id="步骤如下："><a href="#步骤如下：" class="headerlink" title="步骤如下："></a>步骤如下：</h3><ol><li><p>打开命令面板（<code>Ctrl + Shift + P</code>），输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Preferences: Open Settings (JSON)</span><br></pre></td></tr></table></figure></li><li><p>在打开的 <code>settings.json</code> 文件中，添加如下配置（根据的路径调整）：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;java.home&quot;</span><span class="punctuation">:</span> <span class="string">&quot;C:\\Program Files\\Java\\jdk-17&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>✅ macOS &#x2F; Linux 示例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;java.home&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/Library/Java/JavaVirtualMachines/jdk-17.jdk/Contents/Home&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>保存文件，重启 VS Code。</p></li></ol><hr><h2 id="✅-三、验证-Java-环境是否可用"><a href="#✅-三、验证-Java-环境是否可用" class="headerlink" title="✅ 三、验证 Java 环境是否可用"></a>✅ 三、验证 Java 环境是否可用</h2><p>终端输入以下命令，确保 Java 安装无误：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">java -version</span><br><span class="line">javac -version</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$JAVA_HOME</span>   <span class="comment"># macOS/Linux</span></span><br><span class="line"><span class="built_in">echo</span> %JAVA_HOME%  <span class="comment"># Windows</span></span><br></pre></td></tr></table></figure><p>输出应包含正确版本号和路径。</p><hr><h2 id="✅-四、验证-Java-插件是否正确工作"><a href="#✅-四、验证-Java-插件是否正确工作" class="headerlink" title="✅ 四、验证 Java 插件是否正确工作"></a>✅ 四、验证 Java 插件是否正确工作</h2><ol><li><p>创建一个 <code>.java</code> 文件，比如 <code>Hello.java</code></p></li><li><p>输入以下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hello</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello, Java in VS Code!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>应该会看到：</p><ul><li>自动提示</li><li>“运行”按钮</li><li>没有错误提示</li></ul></li></ol><p>如果没看到，说明插件未激活或环境未识别。</p><hr>]]></content>
      
      
      
        <tags>
            
            <tag> flutter </tag>
            
            <tag> App </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter 加载本地文件</title>
      <link href="/2025/07/25/app_develop_skills/flutter%20%E5%8A%A0%E8%BD%BD%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6/"/>
      <url>/2025/07/25/app_develop_skills/flutter%20%E5%8A%A0%E8%BD%BD%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<ul><li><code>Flutter SDK</code>: ^3.8.1</li><li><code>webview_flutter</code>: ^4.0.7 ✅（是较新的版本）</li><li>报告的问题：<code>JavascriptMode</code> 无法导入 &#x2F; 使用。</li></ul><hr><h2 id="✅-正确使用-webview-flutter-4-x-的方式"><a href="#✅-正确使用-webview-flutter-4-x-的方式" class="headerlink" title="✅ 正确使用 webview_flutter: ^4.x 的方式"></a>✅ 正确使用 <code>webview_flutter: ^4.x</code> 的方式</h2><p>从 <code>webview_flutter</code> 4.x 起，官方推荐的新用法如下 👇：</p><h3 id="🔧-示例代码（适配-webview-flutter-4-0-7）"><a href="#🔧-示例代码（适配-webview-flutter-4-0-7）" class="headerlink" title="🔧 示例代码（适配 webview_flutter: ^4.0.7）"></a>🔧 示例代码（适配 <code>webview_flutter: ^4.0.7</code>）</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:webview_flutter/webview_flutter.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;../services/resource_manager.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TabWebView</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> tabName;</span><br><span class="line">  <span class="keyword">const</span> TabWebView(&#123;<span class="keyword">required</span> <span class="keyword">this</span>.tabName, <span class="keyword">super</span>.key&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  State&lt;TabWebView&gt; createState() =&gt; _TabWebViewState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_TabWebViewState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">TabWebView</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">late</span> <span class="keyword">final</span> WebViewController _controller;</span><br><span class="line">  <span class="built_in">bool</span> _isReady = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">    _setupWebView();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Future&lt;<span class="keyword">void</span>&gt; _setupWebView() <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> path = <span class="keyword">await</span> ResourceManager().getTabHtmlPath(widget.tabName);</span><br><span class="line"></span><br><span class="line">    _controller = WebViewController()</span><br><span class="line">      ..setJavaScriptMode(JavaScriptMode.unrestricted)</span><br><span class="line">      ..loadFile(path) <span class="comment">// 本地 HTML 文件路径</span></span><br><span class="line">      ..setNavigationDelegate(NavigationDelegate(</span><br><span class="line">        onPageFinished: (_) =&gt; setState(() =&gt; _isReady = <span class="keyword">true</span>),</span><br><span class="line">      ));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> _isReady</span><br><span class="line">        ? WebViewWidget(controller: _controller)</span><br><span class="line">        : <span class="keyword">const</span> Center(child: CircularProgressIndicator());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="📌-注意点汇总："><a href="#📌-注意点汇总：" class="headerlink" title="📌 注意点汇总："></a>📌 注意点汇总：</h2><table><thead><tr><th>项目</th><th>说明</th></tr></thead><tbody><tr><td>✅ WebViewWidget</td><td>替代旧版 <code>WebView(...)</code> 构造函数方式。</td></tr><tr><td>✅ WebViewController</td><td>用于加载本地 HTML、设置 JS 模式、导航等。</td></tr><tr><td>✅ loadFile(path)</td><td>加载本地 HTML 文件，返回的是 <code>file://</code> 路径。</td></tr><tr><td>⚠ <code>initialUrl</code></td><td>已不推荐直接传本地路径（容易出现跨平台问题）。</td></tr><tr><td>✅ <code>NavigationDelegate</code></td><td>可用于处理加载完成、跳转等事件。</td></tr></tbody></table><hr><h2 id="🔍-还要确保的内容"><a href="#🔍-还要确保的内容" class="headerlink" title="🔍 还要确保的内容"></a>🔍 还要确保的内容</h2><h3 id="1-在-Android-项目中添加网络权限："><a href="#1-在-Android-项目中添加网络权限：" class="headerlink" title="1. 在 Android 项目中添加网络权限："></a>1. 在 Android 项目中添加网络权限：</h3><p><code>android/app/src/main/AndroidManifest.xml</code> 中添加：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.INTERNET&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-在-main-dart-初始化-WebView："><a href="#2-在-main-dart-初始化-WebView：" class="headerlink" title="2. 在 main.dart 初始化 WebView："></a>2. 在 <code>main.dart</code> 初始化 WebView：</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;dart:io&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:webview_flutter/webview_flutter.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  WidgetsFlutterBinding.ensureInitialized();</span><br><span class="line">  <span class="keyword">if</span> (Platform.isAndroid) &#123;</span><br><span class="line">    WebView.platform = SurfaceAndroidWebView();</span><br><span class="line">  &#125;</span><br><span class="line">  runApp(<span class="keyword">const</span> MyApp());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="✅-结论"><a href="#✅-结论" class="headerlink" title="✅ 结论"></a>✅ 结论</h2><p>当前的 <code>webview_flutter</code> 版本（4.0.7）确实已经 <strong>弃用了旧的 <code>WebView(...)</code></strong> 构造方式，请用 <code>WebViewWidget + WebViewController</code> 的组合方式来替代，否则 <code>JavascriptMode</code> 无法被正确使用或识别。</p><p>已为生成了一份完整的 Flutter 项目模板，包含以下功能：</p><h3 id="✅-功能特性："><a href="#✅-功能特性：" class="headerlink" title="✅ 功能特性："></a>✅ 功能特性：</h3><ul><li>✅ 本地 Vue3 页面打包为静态资源</li><li>✅ 动态加载并展示 Tab 页面（WebView 实现）</li><li>✅ 支持远程检测更新并下载替换本地资源（模拟热更新机制）</li><li>✅ 资源管理封装在 <code>ResourceManager</code> 中</li><li>✅ Flutter WebView 支持本地文件加载</li></ul><p>可以通过以下链接下载这个完整项目的压缩包：<br>👉 <a href="sandbox:/mnt/data/flutter_vue_tab_loader.zip">点击下载 Flutter+Vue3 热更新项目模板</a></p><hr><h3 id="📁-项目结构简要说明："><a href="#📁-项目结构简要说明：" class="headerlink" title="📁 项目结构简要说明："></a>📁 项目结构简要说明：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">flutter_vue_tab_loader/</span><br><span class="line">├── assets/</span><br><span class="line">│   └── tabs/</span><br><span class="line">│       ├── tab1.html</span><br><span class="line">│       └── tab2.html</span><br><span class="line">├── lib/</span><br><span class="line">│   ├── main.dart</span><br><span class="line">│   ├── tab_webview.dart</span><br><span class="line">│   └── services/</span><br><span class="line">│       └── resource_manager.dart</span><br><span class="line">├── pubspec.yaml</span><br><span class="line">└── ...</span><br></pre></td></tr></table></figure><hr><h3 id="🔧-核心文件说明："><a href="#🔧-核心文件说明：" class="headerlink" title="🔧 核心文件说明："></a>🔧 核心文件说明：</h3><h4 id="main-dart"><a href="#main-dart" class="headerlink" title="main.dart"></a><code>main.dart</code></h4><p>入口文件，包含 Tab 控制界面和底部导航。</p><h4 id="tab-webview-dart"><a href="#tab-webview-dart" class="headerlink" title="tab_webview.dart"></a><code>tab_webview.dart</code></h4><p>通过 WebView 加载本地 HTML 页面。</p><h4 id="resource-manager-dart"><a href="#resource-manager-dart" class="headerlink" title="resource_manager.dart"></a><code>resource_manager.dart</code></h4><p>封装资源检测、加载和远程更新逻辑。</p><hr><h3 id="🧪-模拟热更新说明："><a href="#🧪-模拟热更新说明：" class="headerlink" title="🧪 模拟热更新说明："></a>🧪 模拟热更新说明：</h3><p><code>resource_manager.dart</code> 中包含伪代码逻辑：</p><ul><li><code>checkForUpdates()</code>：通过远程 JSON 文件检测是否有更新。</li><li><code>downloadResources()</code>：下载更新的 HTML 文件替换本地资源。</li></ul><hr><h3 id="🚀-下一步操作建议："><a href="#🚀-下一步操作建议：" class="headerlink" title="🚀 下一步操作建议："></a>🚀 下一步操作建议：</h3><ol><li>使用 Flutter ≥ 3.13 版本运行</li><li>使用 <code>webview_flutter</code> 版本 <code>4.0.7</code> 或更高</li><li>本地打包的 Vue3 项目，产出 HTML，复制到 <code>assets/tabs/</code></li><li>启动模拟更新服务或放置资源包 zip 于的服务器</li></ol><hr><p>在 VS Code 中使用 Android Studio 安装的 AVD（模拟器）是完全可行的。以下是详细步骤：</p><hr><h3 id="✅-前提条件"><a href="#✅-前提条件" class="headerlink" title="✅ 前提条件"></a>✅ 前提条件</h3><p>已经：</p><ol><li>安装了 <strong>Android Studio</strong></li><li>配置了 <strong>Android SDK</strong></li><li>在 Android Studio 中使用 AVD Manager 创建了一个或多个模拟器</li></ol><hr><h3 id="🧭-步骤一：确保-VS-Code-能找到-AVD-和-SDK"><a href="#🧭-步骤一：确保-VS-Code-能找到-AVD-和-SDK" class="headerlink" title="🧭 步骤一：确保 VS Code 能找到 AVD 和 SDK"></a>🧭 步骤一：确保 VS Code 能找到 AVD 和 SDK</h3><h4 id="1-设置环境变量（非常重要）"><a href="#1-设置环境变量（非常重要）" class="headerlink" title="1. 设置环境变量（非常重要）"></a>1. 设置环境变量（非常重要）</h4><p>需要配置以下环境变量：</p><h5 id="Windows："><a href="#Windows：" class="headerlink" title="Windows："></a><strong>Windows：</strong></h5><p>打开系统环境变量设置，添加：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ANDROID_HOME = C:\Users\&lt;的用户名&gt;\AppData\Local\Android\Sdk</span><br></pre></td></tr></table></figure><p>然后编辑 <code>Path</code>，添加以下两项（根据安装路径微调）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">%ANDROID_HOME%\emulator</span><br><span class="line">%ANDROID_HOME%\platform-tools</span><br></pre></td></tr></table></figure><h5 id="macOS-Linux："><a href="#macOS-Linux：" class="headerlink" title="macOS&#x2F;Linux："></a><strong>macOS&#x2F;Linux：</strong></h5><p>在 <code>~/.bashrc</code> 或 <code>~/.zshrc</code> 添加：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> ANDROID_HOME=<span class="variable">$HOME</span>/Library/Android/sdk</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$ANDROID_HOME</span>/emulator</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$ANDROID_HOME</span>/platform-tools</span><br></pre></td></tr></table></figure><p>执行 <code>source ~/.zshrc</code> 以生效。</p><hr><h3 id="🧭-步骤二：在-VS-Code-中运行模拟器"><a href="#🧭-步骤二：在-VS-Code-中运行模拟器" class="headerlink" title="🧭 步骤二：在 VS Code 中运行模拟器"></a>🧭 步骤二：在 VS Code 中运行模拟器</h3><h4 id="方法一：命令行启动"><a href="#方法一：命令行启动" class="headerlink" title="方法一：命令行启动"></a>方法一：命令行启动</h4><p>打开 VS Code 的终端（Terminal）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">emulator -list-avds</span><br></pre></td></tr></table></figure><p>会看到已安装的模拟器名称，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Pixel_5_API_34</span><br></pre></td></tr></table></figure><p>然后运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">emulator -avd Pixel_5_API_34</span><br></pre></td></tr></table></figure><p>模拟器将启动。</p><hr><h4 id="方法二：使用-Flutter-插件集成"><a href="#方法二：使用-Flutter-插件集成" class="headerlink" title="方法二：使用 Flutter 插件集成"></a>方法二：使用 Flutter 插件集成</h4><ol><li><p>确保已安装 VS Code 插件：</p><ul><li><strong>Flutter</strong></li><li><strong>Dart</strong></li></ul></li><li><p>在 VS Code 左下角点击 <code>No Device</code> 或当前设备名称 ➜ 会弹出设备列表。</p></li><li><p>如果模拟器未显示，可点击 <code>Open Android Emulator</code>（Flutter 插件提供）来手动启动。</p></li></ol><hr><h3 id="🧭-步骤三：在-VS-Code-运行-App-到模拟器"><a href="#🧭-步骤三：在-VS-Code-运行-App-到模拟器" class="headerlink" title="🧭 步骤三：在 VS Code 运行 App 到模拟器"></a>🧭 步骤三：在 VS Code 运行 App 到模拟器</h3><ol><li>启动模拟器后，重新打开 VS Code 项目</li><li>点击顶部工具栏的 “Run” ▶ 或 <code>F5</code> 即可运行 App 到该模拟器上。</li></ol><hr><h3 id="🛠️-补充：检查-SDK-和环境配置"><a href="#🛠️-补充：检查-SDK-和环境配置" class="headerlink" title="🛠️ 补充：检查 SDK 和环境配置"></a>🛠️ 补充：检查 SDK 和环境配置</h3><p>可以运行以下命令来确认：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter doctor</span><br></pre></td></tr></table></figure><p>确保输出中没有关于 Android SDK 的错误。如果提示缺失，检查 <code>ANDROID_HOME</code> 和 SDK 路径配置。</p><hr>]]></content>
      
      
      
        <tags>
            
            <tag> flutter </tag>
            
            <tag> App </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter 加载vue3</title>
      <link href="/2025/07/24/app_develop_skills/flutter%20%E5%8A%A0%E8%BD%BDvue3/"/>
      <url>/2025/07/24/app_develop_skills/flutter%20%E5%8A%A0%E8%BD%BDvue3/</url>
      
        <content type="html"><![CDATA[<h2 id="✅-一、确保已经具备的环境"><a href="#✅-一、确保已经具备的环境" class="headerlink" title="✅ 一、确保已经具备的环境"></a>✅ 一、确保已经具备的环境</h2><table><thead><tr><th>工具&#x2F;组件</th><th>检查方式</th></tr></thead><tbody><tr><td>✅ Flutter SDK</td><td><code>flutter --version</code></td></tr><tr><td>✅ Dart 插件（VS Code）</td><td>VS Code 插件区搜索 “Dart”</td></tr><tr><td>✅ Flutter 插件（VS Code）</td><td>VS Code 插件区搜索 “Flutter”</td></tr><tr><td>✅ Android SDK</td><td>Android Studio 安装时默认附带</td></tr><tr><td>✅ AVD 模拟器或真机</td><td><code>flutter devices</code> 能检测到设备</td></tr><tr><td>✅ 正确初始化的工程</td><td><code>pubspec.yaml</code> 存在 <code>flutter:</code> 字段</td></tr></tbody></table><hr><h2 id="✅-二、运行调试命令（VS-Code）"><a href="#✅-二、运行调试命令（VS-Code）" class="headerlink" title="✅ 二、运行调试命令（VS Code）"></a>✅ 二、运行调试命令（VS Code）</h2><h3 id="🎯-推荐方式（图形化）："><a href="#🎯-推荐方式（图形化）：" class="headerlink" title="🎯 推荐方式（图形化）："></a>🎯 推荐方式（图形化）：</h3><ol><li><p>打开 <code>main.dart</code> 文件（位于 <code>lib/</code> 下）</p></li><li><p>点击右上角的 ▶️（Run）按钮，或按下快捷键：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">F5 （调试模式运行）</span><br><span class="line">Ctrl + F5（直接运行）</span><br></pre></td></tr></table></figure></li></ol><h3 id="🎯-命令行方式："><a href="#🎯-命令行方式：" class="headerlink" title="🎯 命令行方式："></a>🎯 命令行方式：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Android 模拟器/真机</span></span><br><span class="line">flutter run</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动 Web 模式（需 flutter config --enable-web）</span></span><br><span class="line">flutter run -d chrome</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动 iOS 模拟器（macOS）</span></span><br><span class="line">flutter run -d ios</span><br></pre></td></tr></table></figure><blockquote><p>查看所有可用设备：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter devices</span><br></pre></td></tr></table></figure><hr><h2 id="✅-三、常见调试目标说明"><a href="#✅-三、常见调试目标说明" class="headerlink" title="✅ 三、常见调试目标说明"></a>✅ 三、常见调试目标说明</h2><table><thead><tr><th>目标平台</th><th>运行方式</th><th>注意事项</th></tr></thead><tbody><tr><td>Android</td><td><code>flutter run</code>（需设备或模拟器）</td><td>模拟器需先开启</td></tr><tr><td>iOS</td><td><code>flutter run -d ios</code></td><td>仅限 macOS，需 Xcode 支持</td></tr><tr><td>Web（Chrome）</td><td><code>flutter run -d chrome</code></td><td>需先启用 Web 支持</td></tr><tr><td>多平台调试</td><td>选择 VS Code 左下角的设备栏切换设备</td><td>适合测试 Tab 和 WebView 兼容性</td></tr></tbody></table><hr><h2 id="✅-四、调试-Vue3-HTML-Tab-的特殊配置（如果在-Flutter-中用-WebView-加载-Vue3）"><a href="#✅-四、调试-Vue3-HTML-Tab-的特殊配置（如果在-Flutter-中用-WebView-加载-Vue3）" class="headerlink" title="✅ 四、调试 Vue3 HTML Tab 的特殊配置（如果在 Flutter 中用 WebView 加载 Vue3）"></a>✅ 四、调试 Vue3 HTML Tab 的特殊配置（如果在 Flutter 中用 WebView 加载 Vue3）</h2><p>如果运行的 Flutter 工程中嵌入了 Vue 页面（WebView），确保以下：</p><h3 id="1-WebView-权限（Android）"><a href="#1-WebView-权限（Android）" class="headerlink" title="1. WebView 权限（Android）"></a>1. WebView 权限（Android）</h3><p>在 <code>android/app/src/main/AndroidManifest.xml</code> 中添加：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.INTERNET&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-iOS-权限（可选）"><a href="#2-iOS-权限（可选）" class="headerlink" title="2. iOS 权限（可选）"></a>2. iOS 权限（可选）</h3><p>在 <code>ios/Runner/Info.plist</code> 中添加：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>NSAppTransportSecurity<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">key</span>&gt;</span>NSAllowsArbitraryLoads<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="✅-五、调试技巧与建议"><a href="#✅-五、调试技巧与建议" class="headerlink" title="✅ 五、调试技巧与建议"></a>✅ 五、调试技巧与建议</h2><table><thead><tr><th>技巧</th><th>快捷键 &#x2F; 命令</th></tr></thead><tbody><tr><td>打断点调试（VS Code）</td><td>在代码左侧点红点，按 F5</td></tr><tr><td>热重载（保持状态）</td><td><code>r</code>（终端）或点击雷电图标</td></tr><tr><td>热重启（重新构建）</td><td><code>R</code>（终端）或点击 ↻ 图标</td></tr><tr><td>查看日志输出</td><td>VS Code 终端 &#x2F; Debug Console</td></tr><tr><td>显示 UI 帧率 &#x2F; 性能监控</td><td>添加 <code>showPerformanceOverlay: true</code> 到 MaterialApp</td></tr></tbody></table><hr><h2 id="✅-终极调试-checklist（排错利器）"><a href="#✅-终极调试-checklist（排错利器）" class="headerlink" title="✅ 终极调试 checklist（排错利器）"></a>✅ 终极调试 checklist（排错利器）</h2><p>运行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter doctor -v</span><br></pre></td></tr></table></figure><p>查看所有环境是否都已就绪。出现 <code>!</code> 或 <code>✗</code> 的部分需要重点修复（比如缺设备、SDK 路径错误、模拟器未运行等）。</p><hr><h2 id="✅-Bonus：添加调试配置-launch-json（可选）"><a href="#✅-Bonus：添加调试配置-launch-json（可选）" class="headerlink" title="✅ Bonus：添加调试配置 launch.json（可选）"></a>✅ Bonus：添加调试配置 launch.json（可选）</h2><p>在 <code>.vscode/launch.json</code> 中添加：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;configurations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Flutter: Launch app&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;request&quot;</span><span class="punctuation">:</span> <span class="string">&quot;launch&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dart&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>这样可以通过 <code>F5</code> 快速调试而无需手动选择设备。</p><hr><p>贴出的 <code>flutter doctor</code> 输出显示有几项关键问题和一些可忽略项，我来逐条分析并给清晰的修复建议：</p><hr><h2 id="🔴-❶-Android-SDK-缺失-android-36-平台"><a href="#🔴-❶-Android-SDK-缺失-android-36-平台" class="headerlink" title="🔴 ❶ Android SDK 缺失 android-36 平台"></a>🔴 ❶ <strong>Android SDK 缺失 android-36 平台</strong></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X Android SDK file not found: D:\android_sdk\platforms\android-36\android.jar</span><br></pre></td></tr></table></figure><h3 id="💡-问题原因："><a href="#💡-问题原因：" class="headerlink" title="💡 问题原因："></a>💡 问题原因：</h3><p>当前的 Flutter 项目或 IDE 使用了 <strong>Android 36（API 36）</strong>，但这个 SDK 没有安装或不完整。</p><hr><h3 id="✅-解决方法："><a href="#✅-解决方法：" class="headerlink" title="✅ 解决方法："></a>✅ 解决方法：</h3><h4 id="方法-A：安装-Android-36（推荐）"><a href="#方法-A：安装-Android-36（推荐）" class="headerlink" title="方法 A：安装 Android 36（推荐）"></a>方法 A：安装 Android 36（推荐）</h4><p>打开 <strong>Android Studio</strong> → <code>SDK Manager</code>：</p><ol><li>点击菜单栏：<code>Tools → SDK Manager</code></li><li>切换到 <code>SDK Platforms</code> 选项卡</li><li>勾选 <strong>Android 14 (API Level 34)</strong> 或 <strong>Android 15 Preview &#x2F; 36</strong></li><li>点击 Apply → 安装</li></ol><p>如果找不到 API 36，可以用命令行安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sdkmanager <span class="string">&quot;platforms;android-36&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>⚠️ 如果 Android 36 是预览版不稳定，建议改用 Android 33 或 34。</p></blockquote><hr><h4 id="方法-B：修改-compileSdkVersion-降级到-33-或-34"><a href="#方法-B：修改-compileSdkVersion-降级到-33-或-34" class="headerlink" title="方法 B：修改 compileSdkVersion 降级到 33 或 34"></a>方法 B：修改 <code>compileSdkVersion</code> 降级到 33 或 34</h4><p>如果不想用 Android 36，可以手动更改 Flutter 项目的构建版本：</p><ol><li>打开 <code>android/app/build.gradle</code></li><li>找到以下配置：</li></ol><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compileSdkVersion <span class="number">36</span></span><br></pre></td></tr></table></figure><p>改成：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compileSdkVersion <span class="number">33</span></span><br></pre></td></tr></table></figure><ol start="3"><li>同时确认 <code>targetSdkVersion</code> 与 <code>minSdkVersion</code> 合理设置，例如：</li></ol><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">defaultConfig &#123;</span><br><span class="line">    minSdkVersion <span class="number">21</span></span><br><span class="line">    targetSdkVersion <span class="number">33</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>保存后重新运行：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">flutter clean</span><br><span class="line">flutter pub get</span><br><span class="line">flutter run</span><br></pre></td></tr></table></figure><hr><h2 id="🟠-❷-网络资源错误：信号灯超时"><a href="#🟠-❷-网络资源错误：信号灯超时" class="headerlink" title="🟠 ❷ 网络资源错误：信号灯超时"></a>🟠 ❷ 网络资源错误：<code>信号灯超时</code></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">X A network error occurred while checking &quot;https://pub.dev/&quot;</span><br><span class="line">X A network error occurred while checking &quot;https://maven.google.com/&quot;</span><br></pre></td></tr></table></figure><h3 id="💡-问题原因：-1"><a href="#💡-问题原因：-1" class="headerlink" title="💡 问题原因："></a>💡 问题原因：</h3><p>Flutter 连接不上 pub.dev 和 maven.google.com，常见于：</p><ul><li>国内网络被墙</li><li>无代理 &#x2F; VPN</li><li>公司网络限制</li></ul><hr><h3 id="✅-解决方法：-1"><a href="#✅-解决方法：-1" class="headerlink" title="✅ 解决方法："></a>✅ 解决方法：</h3><h4 id="方法-A：配置国内镜像"><a href="#方法-A：配置国内镜像" class="headerlink" title="方法 A：配置国内镜像"></a>方法 A：配置国内镜像</h4><p><strong>1. Flutter 包镜像设置：</strong></p><p>创建或修改文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\&lt;的用户名&gt;\.flutter_settings</span><br></pre></td></tr></table></figure><p>添加内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PUB_HOSTED_URL=https://pub.flutter-io.cn</span><br><span class="line">FLUTTER_STORAGE_BASE_URL=https://storage.flutter-io.cn</span><br></pre></td></tr></table></figure><p><strong>2. 临时设置（命令行）</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> PUB_HOSTED_URL=https://pub.flutter-io.cn</span><br><span class="line"><span class="built_in">set</span> FLUTTER_STORAGE_BASE_URL=https://storage.flutter-io.cn</span><br><span class="line">flutter pub get</span><br></pre></td></tr></table></figure><p><strong>3. Maven 镜像设置（for Android）</strong></p><p>修改 <code>android/build.gradle</code>：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">allprojects</span> &#123;</span><br><span class="line">    <span class="keyword">repositories</span> &#123;</span><br><span class="line">        maven &#123; url <span class="string">&#x27;https://maven.aliyun.com/repository/google&#x27;</span> &#125;</span><br><span class="line">        maven &#123; url <span class="string">&#x27;https://maven.aliyun.com/repository/jcenter&#x27;</span> &#125;</span><br><span class="line">        mavenCentral()</span><br><span class="line">        google()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="🟡-❸-Visual-Studio-缺失（可忽略，除非开发-Windows-桌面-app）"><a href="#🟡-❸-Visual-Studio-缺失（可忽略，除非开发-Windows-桌面-app）" class="headerlink" title="🟡 ❸ Visual Studio 缺失（可忽略，除非开发 Windows 桌面 app）"></a>🟡 ❸ Visual Studio 缺失（可忽略，除非开发 Windows 桌面 app）</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X Visual Studio not installed; this is necessary to develop Windows apps.</span><br></pre></td></tr></table></figure><h3 id="✅-如果只做-Android-Web-开发：可忽略此项"><a href="#✅-如果只做-Android-Web-开发：可忽略此项" class="headerlink" title="✅ 如果只做 Android &#x2F; Web 开发：可忽略此项"></a>✅ 如果只做 Android &#x2F; Web 开发：<strong>可忽略此项</strong></h3><h3 id="✅-如果想开发-Windows-桌面应用："><a href="#✅-如果想开发-Windows-桌面应用：" class="headerlink" title="✅ 如果想开发 Windows 桌面应用："></a>✅ 如果想开发 Windows 桌面应用：</h3><ol><li><p>下载 Visual Studio：<br><a href="https://visualstudio.microsoft.com/downloads/">https://visualstudio.microsoft.com/downloads/</a></p></li><li><p>勾选 <strong>Desktop development with C++</strong><br>安装后重新运行 <code>flutter doctor</code></p></li></ol><hr><h2 id="🟢-其余都是正常状态："><a href="#🟢-其余都是正常状态：" class="headerlink" title="🟢 其余都是正常状态："></a>🟢 其余都是正常状态：</h2><ul><li>✅ Android Studio 正常</li><li>✅ VS Code 正常</li><li>✅ 有 3 个连接设备（模拟器或真机）</li><li>✅ Flutter SDK 可用</li></ul><hr><h2 id="✅-最终操作建议顺序"><a href="#✅-最终操作建议顺序" class="headerlink" title="✅ 最终操作建议顺序"></a>✅ 最终操作建议顺序</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 降低或安装 Android SDK 36</span></span><br><span class="line">flutter clean</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 修改 compileSdkVersion 或安装 SDK</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 配置 pub 和 maven 镜像</span></span><br><span class="line">flutter pub get</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 启动项目</span></span><br><span class="line">flutter run</span><br></pre></td></tr></table></figure><hr><p>这段 <code>build.gradle.kts</code>（Kotlin DSL） 是 Flutter Android 项目中的配置文件，用于设置 Android 原生层的构建参数，配合 Flutter 插件运行。这表示创建的是一个 <strong>Flutter 与 Kotlin 混合项目</strong>。</p><hr><h2 id="✅-配置解读说明（适用于-Flutter-多平台开发）"><a href="#✅-配置解读说明（适用于-Flutter-多平台开发）" class="headerlink" title="✅ 配置解读说明（适用于 Flutter 多平台开发）"></a>✅ 配置解读说明（适用于 Flutter 多平台开发）</h2><h3 id="🔧-plugins-部分"><a href="#🔧-plugins-部分" class="headerlink" title="🔧 plugins 部分"></a>🔧 <code>plugins</code> 部分</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    id(<span class="string">&quot;com.android.application&quot;</span>)         <span class="comment">// 应用程序构建支持</span></span><br><span class="line">    id(<span class="string">&quot;kotlin-android&quot;</span>)                  <span class="comment">// 支持 Kotlin for Android</span></span><br><span class="line">    id(<span class="string">&quot;dev.flutter.flutter-gradle-plugin&quot;</span>) <span class="comment">// Flutter Gradle 插件</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>顺序很重要</strong>：Flutter 插件必须在 <code>com.android.application</code> 和 <code>kotlin-android</code> 后加载。</li><li>使用 Kotlin DSL 而不是 Groovy 是 Android Studio 最新推荐方式。</li></ul><hr><h3 id="⚙️-android-配置详解"><a href="#⚙️-android-配置详解" class="headerlink" title="⚙️ android 配置详解"></a>⚙️ <code>android</code> 配置详解</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    namespace = <span class="string">&quot;com.example.zhangxiaozhi&quot;</span></span><br><span class="line">    compileSdk = flutter.compileSdkVersion</span><br><span class="line">    ndkVersion = flutter.ndkVersion</span><br></pre></td></tr></table></figure><ul><li><code>namespace</code>：Android 包名，实际用于 AndroidManifest。</li><li><code>compileSdk</code>、<code>ndkVersion</code>：从 Flutter 定义中读取，通常无需手动设置。</li></ul><hr><h3 id="📱-defaultConfig"><a href="#📱-defaultConfig" class="headerlink" title="📱 defaultConfig"></a>📱 <code>defaultConfig</code></h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">defaultConfig &#123;</span><br><span class="line">    applicationId = <span class="string">&quot;com.example.zhangxiaozhi&quot;</span></span><br><span class="line">    minSdk = flutter.minSdkVersion</span><br><span class="line">    targetSdk = flutter.targetSdkVersion</span><br><span class="line">    versionCode = flutter.versionCode</span><br><span class="line">    versionName = flutter.versionName</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>这些值是 Flutter 工具链自动注入的，保持一致性。</li><li>可以修改 <code>applicationId</code> 来设定最终 Android 应用的唯一标识。</li></ul><hr><h3 id="🔐-buildTypes"><a href="#🔐-buildTypes" class="headerlink" title="🔐 buildTypes"></a>🔐 <code>buildTypes</code></h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">buildTypes &#123;</span><br><span class="line">    release &#123;</span><br><span class="line">        signingConfig = signingConfigs.getByName(<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>这里 <code>release</code> 使用了 <code>debug</code> 签名，是 Flutter 默认的调试构建方式。如果要上传到 Google Play，需自定义 release 签名。</li></ul><hr><h3 id="🧩-flutter-块"><a href="#🧩-flutter-块" class="headerlink" title="🧩 flutter 块"></a>🧩 <code>flutter</code> 块</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">flutter &#123;</span><br><span class="line">    source = <span class="string">&quot;../..&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>表明 Flutter 源代码主目录在哪里，通常在 Android 子项目之外。</li></ul><hr><h2 id="🚀-如何调试运行这个-Flutter-工程？"><a href="#🚀-如何调试运行这个-Flutter-工程？" class="headerlink" title="🚀 如何调试运行这个 Flutter 工程？"></a>🚀 如何调试运行这个 Flutter 工程？</h2><h3 id="1-使用-VS-Code-调试步骤："><a href="#1-使用-VS-Code-调试步骤：" class="headerlink" title="1. 使用 VS Code 调试步骤："></a>1. 使用 VS Code 调试步骤：</h3><ol><li>打开 <code>flutter</code> 项目根目录（不是 <code>android</code> 子目录）。</li><li>确保 <code>flutter doctor</code> 通过（特别是 SDK、AVD）。</li><li>连接真机或启动虚拟设备。</li><li>打开 VS Code → 左侧 ▶️图标 → Run → “Flutter: Launch Android emulator”。</li><li>F5 或运行 <code>Flutter: Run</code> 命令。</li></ol><hr><h3 id="2-Android-Studio-调试："><a href="#2-Android-Studio-调试：" class="headerlink" title="2. Android Studio 调试："></a>2. Android Studio 调试：</h3><ol><li>打开整个 Flutter 工程。</li><li>顶部下拉选择运行目标设备。</li><li>点击 <code>Run</code> 图标。</li></ol><hr><h2 id="🧱-如何开发-App-Shell-动态加载-Vue3-HTML？"><a href="#🧱-如何开发-App-Shell-动态加载-Vue3-HTML？" class="headerlink" title="🧱 如何开发 App Shell + 动态加载 Vue3 HTML？"></a>🧱 如何开发 App Shell + 动态加载 Vue3 HTML？</h2><p>如果想在 Flutter 中加载 HTML5&#x2F;Vue3 页面作为“Tab 内容”，可以通过以下方式：</p><hr><h3 id="✅-步骤一：构建-Flutter-壳（App-Shell）"><a href="#✅-步骤一：构建-Flutter-壳（App-Shell）" class="headerlink" title="✅ 步骤一：构建 Flutter 壳（App Shell）"></a>✅ 步骤一：构建 Flutter 壳（App Shell）</h3><p>用 Flutter 的 <code>Scaffold + BottomNavigationBar</code> 创建基本壳：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Scaffold(</span><br><span class="line">  body: _tabs[_selectedIndex],</span><br><span class="line">  bottomNavigationBar: BottomNavigationBar(</span><br><span class="line">    currentIndex: _selectedIndex,</span><br><span class="line">    items: [...],</span><br><span class="line">    onTap: (index) =&gt; setState(() =&gt; _selectedIndex = index),</span><br><span class="line">  ),</span><br><span class="line">)</span><br></pre></td></tr></table></figure><hr><h3 id="✅-步骤二：加载-Vue-页面（通过-WebView）"><a href="#✅-步骤二：加载-Vue-页面（通过-WebView）" class="headerlink" title="✅ 步骤二：加载 Vue 页面（通过 WebView）"></a>✅ 步骤二：加载 Vue 页面（通过 WebView）</h3><p>使用 <code>webview_flutter</code> 插件，加载本地或远程 Vue3 页面：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">WebView(</span><br><span class="line">  initialUrl: <span class="string">&#x27;http://localhost:8080/index.html&#x27;</span>,</span><br><span class="line">  javascriptMode: JavascriptMode.unrestricted,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li>可以将 Vue3 应用打包成静态文件，部署到本地服务器或嵌入到 Flutter 中（如 assets&#x2F;web 下）。</li><li>使用 <code>flutter_inappwebview</code> 可获得更强的功能控制（如 JS 通信）。</li></ul><hr><h3 id="✅-步骤三：支持动态-Tab（Tab-可增删）"><a href="#✅-步骤三：支持动态-Tab（Tab-可增删）" class="headerlink" title="✅ 步骤三：支持动态 Tab（Tab 可增删）"></a>✅ 步骤三：支持动态 Tab（Tab 可增删）</h3><p>可以用 <code>List&lt;Widget&gt;</code> 来管理动态 tabs：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">List</span>&lt;Widget&gt; _tabs = [TabA(), TabB(), WebViewTab(url: <span class="string">&#x27;...&#x27;</span>)];</span><br></pre></td></tr></table></figure><ul><li>可以通过配置文件或远程 JSON 动态创建 tab 内容和加载的 Vue 页面。</li><li>可以实现如下结构：</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">  <span class="punctuation">&#123;</span><span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;首页&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;native&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;component&quot;</span><span class="punctuation">:</span> <span class="string">&quot;HomePage&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span><span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;动态页&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;web&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://xxx/vue.html&quot;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><p>在 Flutter 中解析这个配置，动态构建 tab 列表和内容组件。</p><hr><h2 id="🧠-总结"><a href="#🧠-总结" class="headerlink" title="🧠 总结"></a>🧠 总结</h2><table><thead><tr><th>项目</th><th>配置说明&#x2F;操作</th></tr></thead><tbody><tr><td>Flutter App Shell</td><td>使用 <code>Scaffold</code> + <code>BottomNavigationBar</code></td></tr><tr><td>加载 Vue3 页面</td><td>使用 <code>webview_flutter</code> 插件</td></tr><tr><td>动态加载 Tab 页面</td><td>从 JSON 或接口动态创建 tab + widget</td></tr><tr><td>Android 构建配置</td><td>提供的 <code>build.gradle.kts</code> 是标准配置</td></tr><tr><td>调试运行</td><td>VS Code F5 &#x2F; Android Studio ▶️按钮</td></tr></tbody></table><hr>]]></content>
      
      
      
        <tags>
            
            <tag> flutter </tag>
            
            <tag> App </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter Windows 开发过程问题解决</title>
      <link href="/2025/07/24/app_develop_skills/flutter%20app%E5%BC%80%E5%8F%91%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
      <url>/2025/07/24/app_develop_skills/flutter%20app%E5%BC%80%E5%8F%91%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</url>
      
        <content type="html"><![CDATA[<h2 id="1-确保已经安装-Flutter-SDK"><a href="#1-确保已经安装-Flutter-SDK" class="headerlink" title="1. 确保已经安装 Flutter SDK"></a>1. <strong>确保已经安装 Flutter SDK</strong></h2><p>首先，确保的系统上安装了 Flutter SDK。如果没有安装，可以参考以下步骤：</p><h4 id="安装-Flutter-SDK："><a href="#安装-Flutter-SDK：" class="headerlink" title="安装 Flutter SDK："></a>安装 Flutter SDK：</h4><ol><li><p>访问 <a href="https://flutter.dev/docs/get-started/install">Flutter 官网</a> 并下载适用于操作系统的 Flutter SDK。</p></li><li><p>解压下载的文件并将 Flutter 添加到系统路径中。</p><ul><li><p><strong>Windows</strong>：将 <code>flutter/bin</code> 目录添加到环境变量 <code>PATH</code> 中。</p></li><li><p><strong>Mac&#x2F;Linux</strong>：在 <code>.bashrc</code> 或 <code>.zshrc</code> 文件中添加以下行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;<span class="variable">$PATH</span>:`&lt;flutter_sdk_path&gt;/flutter/bin&quot;</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><h4 id="确认-Flutter-是否安装："><a href="#确认-Flutter-是否安装：" class="headerlink" title="确认 Flutter 是否安装："></a>确认 Flutter 是否安装：</h4><p>在终端或命令提示符中运行以下命令来确认 Flutter 是否安装成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter --version</span><br></pre></td></tr></table></figure><h2 id="2-安装-Android-Studio-或其他-IDE（用于模拟器）"><a href="#2-安装-Android-Studio-或其他-IDE（用于模拟器）" class="headerlink" title="2. 安装 Android Studio 或其他 IDE（用于模拟器）"></a>2. <strong>安装 Android Studio 或其他 IDE（用于模拟器）</strong></h2><p>确保有一个 Android 模拟器，或者已连接真实设备（如果要进行 Android&#x2F;iOS 开发）。可以安装 Android Studio 或直接使用 VS Code 进行开发，但 Android Studio 带有模拟器，便于开发。</p><ul><li><strong>Android Studio</strong>：安装 Android Studio，并确保安装了 Android SDK 和模拟器。</li><li><strong>VS Code</strong>：VS Code 本身无法直接启动模拟器，但可以通过 Android Studio 提供的模拟器进行配合。</li></ul><h2 id="3-在-VS-Code-中安装-Flutter-插件"><a href="#3-在-VS-Code-中安装-Flutter-插件" class="headerlink" title="3. 在 VS Code 中安装 Flutter 插件"></a>3. <strong>在 VS Code 中安装 Flutter 插件</strong></h2><p>为了在 VS Code 中开发 Flutter 应用，需要安装两个插件：<strong>Flutter</strong> 和 <strong>Dart</strong>。</p><h4 id="安装-Flutter-和-Dart-插件："><a href="#安装-Flutter-和-Dart-插件：" class="headerlink" title="安装 Flutter 和 Dart 插件："></a>安装 Flutter 和 Dart 插件：</h4><ol><li>打开 <strong>VS Code</strong>。</li><li>转到 <strong>扩展</strong>（Extensions）视图：点击左侧活动栏中的 <strong>扩展</strong> 图标，或者使用快捷键 <code>Ctrl+Shift+X</code>。</li><li>在搜索框中输入 <code>Flutter</code>，然后点击 <strong>安装</strong>。</li><li>在搜索框中输入 <code>Dart</code>，然后点击 <strong>安装</strong>。</li></ol><h2 id="4-通过-VS-Code-打开-Flutter-项目"><a href="#4-通过-VS-Code-打开-Flutter-项目" class="headerlink" title="4. 通过 VS Code 打开 Flutter 项目"></a>4. <strong>通过 VS Code 打开 Flutter 项目</strong></h2><ol><li><p>使用 <strong>VS Code</strong> 打开由 GitHub Copilot 创建的 Flutter 项目文件夹。点击 <strong>文件 &gt; 打开文件夹</strong>，然后选择的 Flutter 项目文件夹。</p></li><li><p>可以在 VS Code 的 <strong>终端</strong>（Terminal）中运行以下命令，确保所有依赖已安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter pub get</span><br></pre></td></tr></table></figure></li></ol><h2 id="5-连接设备或启动模拟器"><a href="#5-连接设备或启动模拟器" class="headerlink" title="5. 连接设备或启动模拟器"></a>5. <strong>连接设备或启动模拟器</strong></h2><ol><li><p><strong>连接设备</strong>：如果有 Android 或 iOS 设备连接到计算机，可以直接使用设备运行应用。</p></li><li><p><strong>启动模拟器</strong>：</p><ul><li>如果使用的是 <strong>Android Studio</strong>，可以通过 <strong>AVD 管理器</strong>（Android Virtual Device）启动模拟器。</li><li>启动模拟器后，VS Code 会自动检测到模拟器。</li></ul><p>也可以通过 <strong>命令面板</strong>（<code>Ctrl+Shift+P</code>）运行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Flutter: Launch Emulator</span><br></pre></td></tr></table></figure></li></ol><h2 id="6-在-VS-Code-中运行-Flutter-应用"><a href="#6-在-VS-Code-中运行-Flutter-应用" class="headerlink" title="6. 在 VS Code 中运行 Flutter 应用"></a>6. <strong>在 VS Code 中运行 Flutter 应用</strong></h2><ol><li><p>确保设备或模拟器已连接并显示在 VS Code 状态栏的 <strong>设备选择</strong> 处。</p></li><li><p>在 VS Code 中按下 <code>F5</code> 或点击 <strong>运行</strong>（Run）按钮来启动应用。也可以使用 <strong>终端</strong> 执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter run</span><br></pre></td></tr></table></figure></li></ol><p>VS Code 将会构建并运行的 Flutter 应用，输出将在 <strong>终端</strong> 中显示。</p><h2 id="7-调试与热重载"><a href="#7-调试与热重载" class="headerlink" title="7. 调试与热重载"></a>7. <strong>调试与热重载</strong></h2><ul><li>在运行 Flutter 应用时，VS Code 支持热重载（Hot Reload）。只需点击 <strong>热重载</strong> 图标或在终端中输入 <code>r</code>，就可以查看代码修改后的效果。</li><li>还可以设置断点并调试应用。</li></ul><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><ul><li>确保安装了 Flutter 和 Dart 插件。</li><li>通过 VS Code 打开 Flutter 项目。</li><li>确保连接设备或启动模拟器。</li><li>使用 <code>F5</code> 运行应用，或通过终端输入 <code>flutter run</code>。</li></ul><h2 id="8-avdmanager-is-missing-from-the-Android-SDK"><a href="#8-avdmanager-is-missing-from-the-Android-SDK" class="headerlink" title="8.avdmanager is missing from the Android SDK"></a>8.avdmanager is missing from the Android SDK</h2><h3 id="1-确保-Android-SDK-安装完整"><a href="#1-确保-Android-SDK-安装完整" class="headerlink" title="1. 确保 Android SDK 安装完整"></a>1. <strong>确保 Android SDK 安装完整</strong></h3><p><code>AVD Manager</code> 是 Android Studio 中的一部分，但它依赖于 Android SDK 的某些工具。因此，确保的 SDK 已经安装并更新到最新版本。</p><h4 id="安装或更新-SDK-工具："><a href="#安装或更新-SDK-工具：" class="headerlink" title="安装或更新 SDK 工具："></a>安装或更新 SDK 工具：</h4><ol><li><p><strong>打开 Android Studio</strong>。</p></li><li><p>选择 <strong>Configure</strong> &gt; <strong>SDK Manager</strong>。</p></li><li><p>在 <strong>SDK Tools</strong> 标签页中，确保以下工具已经选中并安装：</p><ul><li><strong>Android SDK Build-Tools</strong></li><li><strong>Android Emulator</strong></li><li><strong>Android SDK Platform-Tools</strong></li><li><strong>Android SDK Tools</strong>（如果显示）</li></ul></li><li><p>点击 <strong>OK</strong> 以应用更改并安装缺失的工具。</p></li></ol><h3 id="2-手动安装-AVD-Manager"><a href="#2-手动安装-AVD-Manager" class="headerlink" title="2. 手动安装 AVD Manager"></a>2. <strong>手动安装 AVD Manager</strong></h3><p>如果没有 Android Studio，或者只安装了命令行工具，可以手动安装并配置 <code>AVD Manager</code>。</p><h4 id="安装-AVD-工具："><a href="#安装-AVD-工具：" class="headerlink" title="安装 AVD 工具："></a>安装 AVD 工具：</h4><ol><li><p>打开终端或命令行。</p></li><li><p>使用 <code>sdkmanager</code> 工具来安装缺少的组件。确保已经将 Android SDK 的路径添加到 <code>PATH</code> 环境变量中。如果没有，可以在终端中运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sdkmanager --update</span><br><span class="line">sdkmanager <span class="string">&quot;system-images;android-30;google_apis;x86_64&quot;</span></span><br><span class="line">sdkmanager <span class="string">&quot;platform-tools&quot;</span></span><br><span class="line">sdkmanager <span class="string">&quot;emulator&quot;</span></span><br></pre></td></tr></table></figure><p>上面的命令会安装 SDK 平台工具、模拟器和系统映像（适用于 Android 30）。</p></li><li><p>等待下载并安装完成。</p></li></ol><h3 id="3-检查环境变量"><a href="#3-检查环境变量" class="headerlink" title="3. 检查环境变量"></a>3. <strong>检查环境变量</strong></h3><p>确保 <code>AVD Manager</code> 所需的命令行工具在的 <code>PATH</code> 中。</p><h4 id="设置环境变量："><a href="#设置环境变量：" class="headerlink" title="设置环境变量："></a>设置环境变量：</h4><ol><li><p><strong>Windows</strong>：</p><ul><li><p>打开 <strong>系统属性</strong> &gt; <strong>高级系统设置</strong> &gt; <strong>环境变量</strong>。</p></li><li><p>在 <strong>系统变量</strong> 中找到 <strong>Path</strong>，并点击 <strong>编辑</strong>。</p></li><li><p>添加以下路径（替换为实际的 Android SDK 路径）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\&lt;YourUsername&gt;\AppData\Local\Android\Sdk\tools</span><br><span class="line">C:\Users\&lt;YourUsername&gt;\AppData\Local\Android\Sdk\platform-tools</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>Mac&#x2F;Linux</strong>：</p><ul><li><p>打开终端并编辑 <code>.bashrc</code> 或 <code>.zshrc</code> 文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano ~/.bashrc  <span class="comment"># 或 nano ~/.zshrc</span></span><br></pre></td></tr></table></figure></li><li><p>添加以下行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/Users/&lt;YourUsername&gt;/Library/Android/sdk/tools</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/Users/&lt;YourUsername&gt;/Library/Android/sdk/platform-tools</span><br></pre></td></tr></table></figure></li><li><p>保存并运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bashrc  <span class="comment"># 或 source ~/.zshrc</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="4-使用命令行启动-AVD"><a href="#4-使用命令行启动-AVD" class="headerlink" title="4. 使用命令行启动 AVD"></a>4. <strong>使用命令行启动 AVD</strong></h3><p>如果没有 Android Studio 的图形界面，可以使用命令行启动 AVD：</p><ol><li><p>打开命令行或终端。</p></li><li><p>使用以下命令启动模拟器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">emulator -avd &lt;avd_name&gt;</span><br></pre></td></tr></table></figure><p>其中，<code>&lt;avd_name&gt;</code> 是创建的虚拟设备名称。</p><p>如果没有创建 AVD，可以通过以下命令创建一个新的虚拟设备：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">avdmanager create avd -n &lt;avd_name&gt; -k <span class="string">&quot;system-images;android-30;google_apis;x86_64&quot;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="5-检查-AVD-是否可用"><a href="#5-检查-AVD-是否可用" class="headerlink" title="5. 检查 AVD 是否可用"></a>5. <strong>检查 AVD 是否可用</strong></h3><p>可以列出可用的 AVD：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">avdmanager list avd</span><br></pre></td></tr></table></figure><p>如果仍然无法找到 <code>AVD Manager</code>，可能是 SDK 安装有问题，尝试重新安装 SDK 或 Android Studio。</p><h3 id="总结：-1"><a href="#总结：-1" class="headerlink" title="总结："></a>总结：</h3><ul><li>确保 SDK 工具和模拟器已经正确安装。</li><li>配置 <code>PATH</code> 环境变量，确保命令行工具可用。</li><li>使用 <code>avdmanager</code> 命令手动创建 AVD（如果需要）。</li><li>通过命令行启动模拟器，或者通过 Android Studio 使用 AVD Manager。</li></ul><h3 id="6-VS-Code-中成功启用-GitHub-Copilot，需要完成以下-5-个关键步骤。"><a href="#6-VS-Code-中成功启用-GitHub-Copilot，需要完成以下-5-个关键步骤。" class="headerlink" title="6.VS Code 中成功启用 GitHub Copilot，需要完成以下 5 个关键步骤。"></a>6.<strong>VS Code 中成功启用 GitHub Copilot</strong>，需要完成以下 <strong>5 个关键步骤</strong>。</h3><hr><h4 id="✅-1-安装-GitHub-Copilot-插件"><a href="#✅-1-安装-GitHub-Copilot-插件" class="headerlink" title="✅ 1. 安装 GitHub Copilot 插件"></a>✅ 1. 安装 GitHub Copilot 插件</h4><ol><li><p>打开 VS Code</p></li><li><p>按 <code>Ctrl + Shift + X</code> 打开扩展（Extensions）</p></li><li><p>搜索并安装插件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GitHub Copilot</span><br></pre></td></tr></table></figure><p>✅ 选择 <strong>GitHub 官方发布</strong>的那个（发布者是 <code>GitHub</code>）</p></li></ol><hr><h4 id="✅-2-登录的-GitHub-账户"><a href="#✅-2-登录的-GitHub-账户" class="headerlink" title="✅ 2. 登录的 GitHub 账户"></a>✅ 2. 登录的 GitHub 账户</h4><ol><li><p>安装后，VS Code 会提示：</p><blockquote><p>“GitHub Copilot requires authentication”</p></blockquote></li><li><p>点击“Sign in”</p></li><li><p>浏览器会打开 GitHub 授权页面</p></li><li><p><strong>确认授权并登录的 GitHub 账号</strong></p></li></ol><blockquote><p>⚠️ 必须是：</p><ul><li>拥有 Copilot 订阅（付费或试用中）</li><li>或属于 GitHub Copilot 企业授权的用户</li></ul></blockquote><hr><h4 id="✅-3-验证登录成功"><a href="#✅-3-验证登录成功" class="headerlink" title="✅ 3. 验证登录成功"></a>✅ 3. 验证登录成功</h4><p>登录成功后，可以：</p><ul><li><p>在 VS Code 命令面板中（<code>Ctrl + Shift + P</code>）输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Copilot: Status</span><br></pre></td></tr></table></figure><p>✅ 若看到 “<strong>Logged in as your_github_name</strong>” 即为成功。</p></li></ul><hr><h4 id="✅-4-启用自动补全"><a href="#✅-4-启用自动补全" class="headerlink" title="✅ 4. 启用自动补全"></a>✅ 4. 启用自动补全</h4><p>打开的代码文件（<code>.dart</code>, <code>.js</code>, <code>.py</code>, <code>.cpp</code> 等都支持），开始写函数名，Copilot 会自动在灰色字体中提示补全建议。</p><p>可以按：</p><ul><li><code>Tab</code> → 接受补全建议</li><li><code>Esc</code> → 忽略建议</li></ul><hr><h4 id="✅-5-可选：安装-Copilot-Chat（对话增强版）"><a href="#✅-5-可选：安装-Copilot-Chat（对话增强版）" class="headerlink" title="✅ 5. 可选：安装 Copilot Chat（对话增强版）"></a>✅ 5. 可选：安装 Copilot Chat（对话增强版）</h4><p>如果希望像 ChatGPT 那样和 Copilot 聊天，获取更复杂建议，还可以安装：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GitHub Copilot Chat</span><br></pre></td></tr></table></figure><p>这个插件支持自然语言提问，例如：</p><blockquote><p>“帮我写一个 Flutter 登录界面”<br>“优化这个函数的性能”</p></blockquote><hr><h4 id="🛠️-常见失败原因排查"><a href="#🛠️-常见失败原因排查" class="headerlink" title="🛠️ 常见失败原因排查"></a>🛠️ 常见失败原因排查</h4><table><thead><tr><th>问题</th><th>解决方法</th></tr></thead><tbody><tr><td>登录失败 &#x2F; 没有跳转到浏览器</td><td>手动执行 <code>GitHub: Sign in</code> 命令</td></tr><tr><td>提示 “Copilot setup failed”</td><td>使用 VPN，或设置代理 + 重新登录</td></tr><tr><td>看不到建议补全</td><td>关闭中文输入法、确认当前语言支持（如 Dart）</td></tr><tr><td>提示需订阅</td><td>登录 GitHub → <a href="https://github.com/settings/copilot">https://github.com/settings/copilot</a> 确认是否开通</td></tr></tbody></table><hr><h4 id="6-✅-附加建议：测试是否工作正常"><a href="#6-✅-附加建议：测试是否工作正常" class="headerlink" title="6.✅ 附加建议：测试是否工作正常"></a>6.✅ 附加建议：测试是否工作正常</h4><p>可以在新文件中输入以下代码片段测试：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  <span class="comment">// Copilot 应该会自动补全一个打印 hello world</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看是否自动灰色提示 <code>print(&quot;Hello World&quot;);</code> 或其它逻辑。</p><hr><p>如操作中遇到某个具体步骤失败，欢迎贴出提示信息，我可以帮一步步修复。是否需要我检查现在的系统环境变量、代理配置或 Dart&#x2F;Flutter 插件兼容性？</p><h3 id="9-在-Android-Studio-或-VS-Code-中配置-Virtual-Device（模拟器）-时，选择合适的设备型号和系统镜像（API-Level）非常关键。"><a href="#9-在-Android-Studio-或-VS-Code-中配置-Virtual-Device（模拟器）-时，选择合适的设备型号和系统镜像（API-Level）非常关键。" class="headerlink" title="9. 在 Android Studio 或 VS Code 中配置 Virtual Device（模拟器） 时，选择合适的设备型号和系统镜像（API Level）非常关键。"></a>9. 在 Android Studio 或 VS Code 中配置 <strong>Virtual Device（模拟器）</strong> 时，选择合适的设备型号和系统镜像（API Level）非常关键。</h3><hr><h2 id="✅-推荐虚拟设备配置（2025-年通用建议）"><a href="#✅-推荐虚拟设备配置（2025-年通用建议）" class="headerlink" title="✅ 推荐虚拟设备配置（2025 年通用建议）"></a>✅ 推荐虚拟设备配置（2025 年通用建议）</h2><table><thead><tr><th>类型</th><th>推荐选项</th><th>说明</th></tr></thead><tbody><tr><td><strong>设备型号</strong></td><td>✅ Pixel 4 &#x2F; Pixel 5</td><td>主流分辨率、性能适中，适配广泛</td></tr><tr><td></td><td>✅ Pixel 6 &#x2F; Pixel 7 (高性能)</td><td>测试新特性（如Material You），但更吃资源</td></tr><tr><td></td><td>✅ Nexus 5X (轻量)</td><td>对低配电脑更友好</td></tr><tr><td><strong>系统版本</strong></td><td>✅ Android 13 (API 33)</td><td>现主流设备系统，Flutter 支持稳定</td></tr><tr><td></td><td>✅ Android 12 (API 31)</td><td>稳定、兼容性强</td></tr><tr><td></td><td>✅ Android 11 (API 30)（轻量备选）</td><td>更轻，占用内存小，可用于低端设备模拟</td></tr><tr><td><strong>镜像类型</strong></td><td>✅ x86_64 或 ARM64 系统镜像</td><td>推荐选 x86_64（支持更快的 emulator 加速）</td></tr><tr><td></td><td>✅ Google APIs（非 Google Play）</td><td>大多数 Flutter 应用足够使用，不必安装 Play 支持版本</td></tr><tr><td></td><td>⚠️ Google Play 版本</td><td>体积大、启动慢，一般只在测试 Play 依赖时使用</td></tr></tbody></table><hr><h3 id="🛠️-示例推荐配置（开发-测试兼顾）"><a href="#🛠️-示例推荐配置（开发-测试兼顾）" class="headerlink" title="🛠️ 示例推荐配置（开发+测试兼顾）"></a>🛠️ 示例推荐配置（开发+测试兼顾）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Device: Pixel 5</span><br><span class="line">System Image: Android 13 (API 33) - x86_64 with Google APIs</span><br><span class="line">RAM: 2048MB</span><br><span class="line">Internal Storage: 2GB</span><br><span class="line">SD Card: 512MB（可选）</span><br><span class="line">Graphics: Hardware - GLES 2.0 / 3.0</span><br></pre></td></tr></table></figure><hr><h3 id="❗-不建议选择："><a href="#❗-不建议选择：" class="headerlink" title="❗ 不建议选择："></a>❗ 不建议选择：</h3><table><thead><tr><th>不推荐配置</th><th>原因</th></tr></thead><tbody><tr><td>Android 10 以下</td><td>支持减弱，Flutter 新特性可能不兼容</td></tr><tr><td>Google Play 系统镜像</td><td>体积大、启动慢、更新频繁</td></tr><tr><td>ARM 映像（除非 M1&#x2F;M2 Mac）</td><td>模拟速度慢，不支持加速</td></tr></tbody></table><hr><h3 id="💡-Flutter-快速测试建议"><a href="#💡-Flutter-快速测试建议" class="headerlink" title="💡 Flutter 快速测试建议"></a>💡 Flutter 快速测试建议</h3><p>可以选配两个虚拟设备：</p><table><thead><tr><th>目的</th><th>推荐设备</th><th>API 版本</th></tr></thead><tbody><tr><td>日常开发调试</td><td>Pixel 5</td><td>Android 13</td></tr><tr><td>向下兼容测试</td><td>Nexus 5X</td><td>Android 11</td></tr><tr><td>高端设备体验测试</td><td>Pixel 7</td><td>Android 14（如可用）</td></tr></tbody></table><hr><h3 id="📌-重要提示：性能建议"><a href="#📌-重要提示：性能建议" class="headerlink" title="📌 重要提示：性能建议"></a>📌 重要提示：性能建议</h3><ul><li>启用 <strong>Hardware Acceleration（加速）</strong>，否则模拟器会非常卡</li><li>如果是 AMD CPU，确保已启用 <strong>Windows Hypervisor Platform</strong></li><li>推荐使用 <strong>x86_64 镜像 + Cold boot only once</strong> 提高启动速度</li></ul><hr><h3 id="10-当前的-Java-环境是："><a href="#10-当前的-Java-环境是：" class="headerlink" title="10.当前的 Java 环境是："></a>10.当前的 Java 环境是：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">openjdk 18 2022-03-22</span><br><span class="line">OpenJDK Runtime Environment (build 18+36-2087)</span><br><span class="line">OpenJDK 64-Bit Server VM (build 18+36-2087, mixed mode, sharing)</span><br></pre></td></tr></table></figure><p>✅ <strong>这表明已经安装了 OpenJDK 18，完全符合 Android 开发（尤其是 Android 14 &#x2F; API 34）对 Java 版本的要求</strong>（Java 17 或更高）。</p><hr><h4 id="✅-那么为什么仍然提示-“Java-version-17-or-higher-is-required”？"><a href="#✅-那么为什么仍然提示-“Java-version-17-or-higher-is-required”？" class="headerlink" title="✅ 那么为什么仍然提示 “Java version 17 or higher is required”？"></a>✅ 那么为什么仍然提示 “Java version 17 or higher is required”？</h4><p>这种情况通常有两个可能原因：</p><hr><p>🔍 原因 1：<strong>Android Studio &#x2F; Gradle 没有使用当前的 JDK 18</strong></p><p>即使安装了 JDK 18，<strong>如果的 <code>JAVA_HOME</code> 没有正确配置</strong>，Android Studio 或 <code>flutter build</code> 命令仍然可能默认使用旧版本 JDK（比如 JDK 8 或 JDK 11）。</p><p>✔️ 解决方法：</p><h4 id="✅-设置-JAVA-HOME-环境变量"><a href="#✅-设置-JAVA-HOME-环境变量" class="headerlink" title="✅ 设置 JAVA_HOME 环境变量"></a>✅ 设置 JAVA_HOME 环境变量</h4><h5 id="Windows："><a href="#Windows：" class="headerlink" title="Windows："></a>Windows：</h5><ol><li><p>打开“环境变量设置”。</p></li><li><p>添加 &#x2F; 修改系统变量：</p><ul><li><p><strong>变量名</strong>：<code>JAVA_HOME</code></p></li><li><p><strong>变量值</strong>： JDK 18 的安装路径，比如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Program Files\Java\jdk-18</span><br></pre></td></tr></table></figure></li></ul></li><li><p>在系统变量 <code>Path</code> 中添加：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%JAVA_HOME%\bin</span><br></pre></td></tr></table></figure></li><li><p>打开新终端，运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">java -version</span><br><span class="line"><span class="built_in">echo</span> %JAVA_HOME%</span><br></pre></td></tr></table></figure></li></ol><h5 id="macOS-Linux（bash-zsh）："><a href="#macOS-Linux（bash-zsh）：" class="headerlink" title="macOS&#x2F;Linux（bash&#x2F;zsh）："></a>macOS&#x2F;Linux（bash&#x2F;zsh）：</h5><p>编辑 <code>~/.bashrc</code> 或 <code>~/.zshrc</code> 文件，添加：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_HOME=/path/to/your/jdk-18</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure><p>然后运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bashrc  <span class="comment"># 或 ~/.zshrc</span></span><br><span class="line">java -version</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$JAVA_HOME</span></span><br></pre></td></tr></table></figure><hr><p>🔍 原因 2：<strong>Android Studio 项目仍指向旧 JDK 路径</strong></p><p>即使系统环境正确，<strong>Android Studio 本身可能还指向旧 JDK 路径</strong>。</p><h4 id="✔️-在-Android-Studio-中设置正确的-JDK-版本"><a href="#✔️-在-Android-Studio-中设置正确的-JDK-版本" class="headerlink" title="✔️ 在 Android Studio 中设置正确的 JDK 版本"></a>✔️ 在 Android Studio 中设置正确的 JDK 版本</h4><ol><li><p>打开 Android Studio。</p></li><li><p>进入菜单：<strong>File &gt; Project Structure &gt; SDK Location</strong>。</p></li><li><p>找到 <strong>JDK Location</strong> 字段，点击右侧文件夹图标。</p></li><li><p>指向 JDK 18 的路径，如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Program Files\Java\jdk-18</span><br></pre></td></tr></table></figure></li><li><p>点击 OK 保存设置，重启 Android Studio。</p></li></ol><hr><p>🔁 最后验证</p><p>确保以下命令都输出了 JDK 18 相关信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">java -version</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$JAVA_HOME</span>  <span class="comment"># Linux/macOS</span></span><br><span class="line"><span class="built_in">echo</span> %JAVA_HOME% <span class="comment"># Windows</span></span><br></pre></td></tr></table></figure><p>如果是在使用 <code>flutter</code> 构建 Android 应用，也可以运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter doctor -v</span><br></pre></td></tr></table></figure><p>确认输出中使用的是正确的 Java 路径和版本。</p><hr><p>✅ 总结</p><table><thead><tr><th>项目</th><th>当前状态</th></tr></thead><tbody><tr><td>已安装 OpenJDK 18</td><td>✅ 没问题</td></tr><tr><td>是否满足 Android 14 要求</td><td>✅ 满足（17+）</td></tr><tr><td>仍提示版本问题原因</td><td>多半是 <code>JAVA_HOME</code> 未正确设置或未被 Android Studio&#x2F;Gradle 识别</td></tr></tbody></table><h3 id="11-AVD（Android-Virtual-Device）模拟器是可以修改默认安装位置的，尤其在-C-盘空间紧张时，这是非常常见的需求。"><a href="#11-AVD（Android-Virtual-Device）模拟器是可以修改默认安装位置的，尤其在-C-盘空间紧张时，这是非常常见的需求。" class="headerlink" title="11.AVD（Android Virtual Device）模拟器是可以修改默认安装位置的，尤其在 C 盘空间紧张时，这是非常常见的需求。"></a>11.<strong>AVD（Android Virtual Device）模拟器是可以修改默认安装位置的</strong>，尤其在 C 盘空间紧张时，这是非常常见的需求。</h3><hr><p> 🧭 默认位置在哪里？</p><p>AVD 默认保存在：</p><ul><li><p><strong>Windows：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\&lt;的用户名&gt;\.android\avd</span><br></pre></td></tr></table></figure></li><li><p><strong>macOS&#x2F;Linux：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/.android/avd</span><br></pre></td></tr></table></figure></li></ul><hr><p>✅ 修改 AVD 安装路径的方法（推荐方法：设置环境变量）</p><h4 id="方法一：设置-ANDROID-AVD-HOME-环境变量"><a href="#方法一：设置-ANDROID-AVD-HOME-环境变量" class="headerlink" title="方法一：设置 ANDROID_AVD_HOME 环境变量"></a>方法一：设置 <code>ANDROID_AVD_HOME</code> 环境变量</h4><p>可以通过设置环境变量来改变 AVD 存放路径。</p><h5 id="🔧-步骤（Windows-示例）："><a href="#🔧-步骤（Windows-示例）：" class="headerlink" title="🔧 步骤（Windows 示例）："></a>🔧 步骤（Windows 示例）：</h5><ol><li><p><strong>创建想放 AVD 的新路径</strong>，如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D:\AndroidAVD</span><br></pre></td></tr></table></figure></li><li><p>打开系统“环境变量设置”。</p></li><li><p>新增一个 <strong>用户环境变量</strong>：</p><ul><li><p><strong>变量名</strong>：<code>ANDROID_AVD_HOME</code></p></li><li><p><strong>变量值</strong>：刚才创建的路径，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D:\AndroidAVD</span><br></pre></td></tr></table></figure></li></ul></li><li><p>确认保存，<strong>重启 VS Code &#x2F; Android Studio &#x2F; 终端</strong>。</p></li><li><p>重新创建或运行模拟器时，它会自动使用新的目录。</p></li></ol><hr><h4 id="方法二：命令行运行-AVD-时指定路径（不常用）"><a href="#方法二：命令行运行-AVD-时指定路径（不常用）" class="headerlink" title="方法二：命令行运行 AVD 时指定路径（不常用）"></a>方法二：命令行运行 AVD 时指定路径（不常用）</h4><p>也可以通过命令行运行 avd 时使用 <code>-data</code> 参数指定数据文件位置，但这只是临时改变，不如方法一彻底。</p><hr><p> 💡 补充：修改 Android SDK 的安装路径</p><p>如果也希望 SDK 也换个位置（默认在 <code>C:\Users\&lt;&gt;\AppData\Local\Android\Sdk</code>）：</p><ol><li><p>在 Android Studio 中：</p><ul><li><strong>File &gt; Settings &gt; Appearance &amp; Behavior &gt; System Settings &gt; Android SDK</strong></li><li>点击右上角的 “Edit” 可以修改 SDK 路径。</li><li>之后可能需要重新安装一些组件（如 emulator &#x2F; platform-tools 等）。</li></ul></li></ol><hr><p>🧪 验证是否生效</p><p>设置完后可以检查：</p><ul><li><p>终端运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> %ANDROID_AVD_HOME%   <span class="comment"># Windows</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$ANDROID_AVD_HOME</span>    <span class="comment"># macOS/Linux</span></span><br></pre></td></tr></table></figure></li><li><p>检查 AVD 文件是否已出现在新路径下，比如 <code>D:\AndroidAVD\Pixel_5_API_34.avd</code> 等。</p></li></ul><hr>]]></content>
      
      
      
        <tags>
            
            <tag> flutter </tag>
            
            <tag> App </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>app开发框架比较</title>
      <link href="/2025/07/23/app_develop_skills/app%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6%E6%AF%94%E8%BE%83/"/>
      <url>/2025/07/23/app_develop_skills/app%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6%E6%AF%94%E8%BE%83/</url>
      
        <content type="html"><![CDATA[<hr><h3 id="一、主流跨平台框架对比"><a href="#一、主流跨平台框架对比" class="headerlink" title="一、主流跨平台框架对比"></a>一、<strong>主流跨平台框架对比</strong></h3><table><thead><tr><th><strong>框架</strong></th><th>开发语言</th><th>渲染方式</th><th>性能特点</th><th>生态成熟度</th><th>代表应用</th></tr></thead><tbody><tr><td><strong>Flutter</strong></td><td>Dart</td><td><strong>自绘引擎 (Skia)</strong></td><td>⭐⭐⭐⭐⭐ (原生级)</td><td>⭐⭐⭐⭐</td><td>Google Ads、阿里闲鱼</td></tr><tr><td><strong>React Native</strong></td><td>JavaScript</td><td><strong>原生组件封装</strong></td><td>⭐⭐⭐ (接近原生)</td><td>⭐⭐⭐⭐⭐</td><td>Facebook、Instagram</td></tr><tr><td><strong>Kotlin Multiplatform (KMM)</strong></td><td>Kotlin</td><td>编译为原生代码</td><td>⭐⭐⭐⭐⭐ (原生级)</td><td>⭐⭐</td><td>麦当劳、Netflix 部分模块</td></tr><tr><td><strong>Compose Multiplatform</strong></td><td>Kotlin</td><td>自绘引擎 (Skia)</td><td>⭐⭐⭐⭐⭐ (原生级)</td><td>⭐⭐</td><td>JetBrains 工具</td></tr><tr><td><strong>Ionic</strong></td><td>HTML&#x2F;JS&#x2F;CSS</td><td><strong>WebView 渲染</strong></td><td>⭐⭐ (依赖浏览器)</td><td>⭐⭐⭐⭐</td><td>麦当劳App、MarketWatch</td></tr><tr><td><strong>.NET MAUI</strong></td><td>C#</td><td>原生组件封装</td><td>⭐⭐⭐ (接近原生)</td><td>⭐⭐⭐</td><td>微软生态企业应用</td></tr></tbody></table><hr><h3 id="二、框架深度解析"><a href="#二、框架深度解析" class="headerlink" title="二、框架深度解析"></a>二、<strong>框架深度解析</strong></h3><h4 id="1-React-Native-Meta-推出"><a href="#1-React-Native-Meta-推出" class="headerlink" title="1. React Native (Meta 推出)"></a>1. <strong>React Native (Meta 推出)</strong></h4><ul><li><strong>原理</strong>：JS 线程通过 <strong>Bridge 通信</strong>调用原生组件（如 Android 的 <code>View</code>&#x2F;iOS 的 <code>UIView</code>）</li><li><strong>优势</strong>：<ul><li>基于 React 生态，前端开发者零成本上手</li><li>热更新支持（CodePush）</li></ul></li><li><strong>局限</strong>：<ul><li>性能瓶颈：JS 与原生通信延迟（复杂动画&#x2F;列表滚动可能卡顿）</li><li>平台差异：需写平台特定代码（如 <code>Platform.select()</code>）</li></ul></li><li><strong>适用场景</strong>：内容型 App（电商、社交）</li></ul><h4 id="2-Kotlin-Multiplatform-KMM"><a href="#2-Kotlin-Multiplatform-KMM" class="headerlink" title="2. Kotlin Multiplatform (KMM)"></a>2. <strong>Kotlin Multiplatform (KMM)</strong></h4><ul><li><strong>原理</strong>：<strong>共享业务逻辑层</strong>，UI 层仍用原生开发（Swift&#x2F;Compose）</li><li><strong>优势</strong>：<ul><li>100% 原生性能（编译为机器码）</li><li>无缝接入 Android 生态</li></ul></li><li><strong>局限</strong>：<ul><li>iOS 支持较弱（需熟悉 SwiftUI）</li><li>学习曲线陡峭（需掌握 Kotlin + 原生开发）</li></ul></li><li><strong>适用场景</strong>：大型企业应用（如银行、硬件交互 App）</li></ul><h4 id="3-Compose-Multiplatform-JetBrains-推出"><a href="#3-Compose-Multiplatform-JetBrains-推出" class="headerlink" title="3. Compose Multiplatform (JetBrains 推出)"></a>3. <strong>Compose Multiplatform (JetBrains 推出)</strong></h4><ul><li><strong>原理</strong>：将 Jetpack Compose 扩展到桌面&#x2F;iOS，共享 UI 代码</li><li><strong>优势</strong>：<ul><li>声明式 UI（类似 Flutter）</li><li>与 Android Studio 深度集成</li></ul></li><li><strong>局限</strong>：<ul><li>iOS 支持仍处于 Alpha 阶段</li><li>社区资源较少</li></ul></li><li><strong>适用场景</strong>：Android 主导的多平台应用</li></ul><h4 id="4-Ionic-Web-Based"><a href="#4-Ionic-Web-Based" class="headerlink" title="4. Ionic (Web-Based)"></a>4. <strong>Ionic (Web-Based)</strong></h4><ul><li><strong>原理</strong>：将 Web 应用封装到 WebView 中，通过 Capacitor 调用原生 API</li><li><strong>优势</strong>：<ul><li>开发速度快（基于 Angular&#x2F;React&#x2F;Vue）</li><li>一套代码覆盖 <strong>Web + 移动端</strong></li></ul></li><li><strong>局限</strong>：<ul><li>性能差（复杂动画卡顿）</li><li>原生体验弱（UI 像网页）</li></ul></li><li><strong>适用场景</strong>：简单工具类 App（表单、信息展示）</li></ul><h4 id="5-NET-MAUI-微软推出"><a href="#5-NET-MAUI-微软推出" class="headerlink" title="5. .NET MAUI (微软推出)"></a>5. <strong>.NET MAUI (微软推出)</strong></h4><ul><li><strong>原理</strong>：XAML 描述 UI，C# 编写逻辑，编译为原生控件</li><li><strong>优势</strong>：<ul><li>微软全家桶支持（Azure、Visual Studio）</li><li>适合 Windows 生态开发</li></ul></li><li><strong>局限</strong>：<ul><li>跨平台一致性较差</li><li>社区活跃度低于 React Native&#x2F;Flutter</li></ul></li><li><strong>适用场景</strong>：企业内部工具、Windows 桌面应用</li></ul><hr><h3 id="三、如何选择？"><a href="#三、如何选择？" class="headerlink" title="三、如何选择？"></a>三、<strong>如何选择？</strong></h3><ul><li><strong>追求极致性能</strong> → Flutter &#x2F; KMM  </li><li><strong>已有 Web 团队</strong> → React Native &#x2F; Ionic  </li><li><strong>Android 生态为主</strong> → Compose Multiplatform  </li><li><strong>企业 .NET 技术栈</strong> → .NET MAUI  </li><li><strong>需要热更新</strong> → React Native（CodePush）</li></ul><blockquote><p>🔍 <strong>关键指标测试对比</strong>（数据来源：2023 年 State of JS 调查）  </p><ul><li><strong>开发者满意度</strong>：Flutter (85%) &gt; React Native (72%) &gt; Ionic (61%)  </li><li><strong>市场占有率</strong>：React Native (38%) &gt; Flutter (32%) &gt; Ionic (18%)  </li><li><strong>大型项目采用率</strong>：Flutter (42%) &gt; React Native (38%) &gt; KMM (12%)</li></ul></blockquote><hr><h3 id="四、新兴技术：WebAssembly-Wasm"><a href="#四、新兴技术：WebAssembly-Wasm" class="headerlink" title="四、新兴技术：WebAssembly (Wasm)"></a>四、<strong>新兴技术：WebAssembly (Wasm)</strong></h3><ul><li><strong>概念</strong>：将 C++&#x2F;Rust 等语言编译为浏览器字节码</li><li><strong>框架案例</strong>：  <ul><li><strong>Blazor</strong>：用 C# 构建 Web 应用（实验性支持移动端）  </li><li><strong>Tauri</strong>：Rust + Web 技术构建桌面&#x2F;移动应用（取代 Electron）</li></ul></li><li><strong>潜力</strong>：未来可能颠覆跨平台开发（高性能 Web 应用）</li></ul><hr><h3 id="总结：跨平台方案演进趋势"><a href="#总结：跨平台方案演进趋势" class="headerlink" title="总结：跨平台方案演进趋势"></a>总结：跨平台方案演进趋势</h3><ul><li><strong>2023 年后首选</strong>：<strong>Flutter</strong>（平衡性能与效率）或 <strong>KMM</strong>（强原生需求）  </li><li><strong>谨慎选择</strong>：Ionic（性能敏感场景避免）、.NET MAUI（非微软生态慎用）  </li><li><strong>观望技术</strong>：Compose Multiplatform（待 iOS 成熟）、Wasm（生态早期）</li></ul><blockquote><p>💡 建议：先用 Flutter <strong>快速验证产品</strong>，在需要深度原生优化时，再用 KMM 重构核心模块。</p></blockquote><p>Flutter 作为跨平台开发框架，<strong>在中短期内是极具潜力的选择</strong>，但长期生态需关注 Wasm 等新兴技术。以下是关键分析：</p><hr><h3 id="一、Flutter-的潜力优势-✅"><a href="#一、Flutter-的潜力优势-✅" class="headerlink" title="一、Flutter 的潜力优势 ✅"></a>一、Flutter 的潜力优势 ✅</h3><table><thead><tr><th><strong>维度</strong></th><th><strong>现状与潜力</strong></th></tr></thead><tbody><tr><td><strong>技术成熟度</strong></td><td>已稳定（3.19+），Google 持续投入，2023 年 GitHub 增长 24%（增速领先 React Native）</td></tr><tr><td><strong>性能表现</strong></td><td>自研引擎 Impeller（iOS&#x2F;Android）落地，渲染效率提升 2 倍，媲美原生</td></tr><tr><td><strong>跨平台覆盖</strong></td><td>全平台支持（iOS&#x2F;Android&#x2F;Web&#x2F;Windows&#x2F;macOS&#x2F;Linux），企业级应用验证（BMW、阿里）</td></tr><tr><td><strong>开发效率</strong></td><td>热重载 + 声明式 UI + 丰富组件库，比原生开发快 40%+（Google 内部数据）</td></tr><tr><td><strong>就业市场</strong></td><td>全球 Flutter 岗位 3 年增长 300%（LinkedIn 2024），国内大厂（字节&#x2F;腾讯）广泛采用</td></tr></tbody></table><blockquote><p>🔥 <strong>关键信号</strong>：Flutter 在 <strong>嵌入式设备（车机、IoT）</strong> 和 <strong>折叠屏适配</strong> 的布局，是未来 5 年增长点。</p></blockquote><hr><h3 id="二、Flutter-对-Wasm-的支持现状-🔄"><a href="#二、Flutter-对-Wasm-的支持现状-🔄" class="headerlink" title="二、Flutter 对 Wasm 的支持现状 🔄"></a>二、Flutter 对 Wasm 的支持现状 🔄</h3><h4 id="1-Flutter-Web-与-Wasm"><a href="#1-Flutter-Web-与-Wasm" class="headerlink" title="1. Flutter Web 与 Wasm"></a>1. <strong>Flutter Web 与 Wasm</strong></h4><ul><li><strong>当前方案</strong>：<br>Flutter Web 通过 <strong>两种模式</strong> 运行：  <ul><li><strong>HTML 模式</strong>：DOM 渲染（兼容性好，性能差）  </li><li><strong>CanvasKit 模式</strong>：<strong>使用 Wasm 加载 Skia 引擎</strong>（高性能渲染）  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">A[Flutter Web] --&gt; B[CanvasKit Wasm]</span><br><span class="line">B --&gt; C[Skia 图形库]</span><br><span class="line">C --&gt; D[GPU 加速渲染]</span><br></pre></td></tr></table></figure></li></ul></li><li><strong>性能对比</strong>：<br>CanvasKit（Wasm）比 HTML 模式快 <strong>3-5 倍</strong>，但包体积增加 ~2MB。</li></ul><h4 id="2-Dart-语言对-Wasm-的支持"><a href="#2-Dart-语言对-Wasm-的支持" class="headerlink" title="2. Dart 语言对 Wasm 的支持"></a>2. <strong>Dart 语言对 Wasm 的支持</strong></h4><ul><li><strong>2024 年重大进展</strong>：<br>Dart 3.4 正式支持 <strong>编译为 Wasm</strong>（基于 WebAssembly GC 提案）：  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将 Dart 代码编译为 .wasm 文件</span></span><br><span class="line">dart compile wasm lib/main.dart -o app.wasm</span><br></pre></td></tr></table></figure></li><li><strong>意义</strong>：  <ul><li>Dart 应用可作为 Wasm 模块嵌入任意 Web 项目（如 React&#x2F;Vue）  </li><li>性能提升：比 JS 编译版本快 **200%**（Dart 团队基准测试）</li></ul></li></ul><h4 id="3-Flutter-桌面端与-Wasm"><a href="#3-Flutter-桌面端与-Wasm" class="headerlink" title="3. Flutter 桌面端与 Wasm"></a>3. <strong>Flutter 桌面端与 Wasm</strong></h4><ul><li><strong>潜力场景</strong>：<br>通过 Wasm 在浏览器中运行 <strong>完整的 Flutter 桌面应用</strong>（如 Figma 模式），但仍在实验阶段（<code>flutter-wasm</code> 探索项目）。</li></ul><hr><h3 id="三、风险与挑战-⚠️"><a href="#三、风险与挑战-⚠️" class="headerlink" title="三、风险与挑战 ⚠️"></a>三、风险与挑战 ⚠️</h3><table><thead><tr><th><strong>问题</strong></th><th><strong>影响</strong></th></tr></thead><tbody><tr><td><strong>包体积较大</strong></td><td>基础 APK 约 15MB（React Native 约 7MB），对小型应用不友好</td></tr><tr><td><strong>Wasm 生态早期</strong></td><td>Dart→Wasm 工具链尚未稳定，生产环境需等待 2025 年</td></tr><tr><td><strong>深度原生功能依赖</strong></td><td>蓝牙&#x2F;AR 等场景仍需编写平台通道（Kotlin&#x2F;Swift）代码</td></tr><tr><td><strong>苹果政策风险</strong></td><td>iOS 对 WebAssembly GC 支持滞后，可能限制 Wasm 应用上架 App Store</td></tr></tbody></table><hr><h3 id="四、决策建议：什么场景该选-Flutter？"><a href="#四、决策建议：什么场景该选-Flutter？" class="headerlink" title="四、决策建议：什么场景该选 Flutter？"></a>四、决策建议：什么场景该选 Flutter？</h3><h4 id="✅-推荐选择-Flutter："><a href="#✅-推荐选择-Flutter：" class="headerlink" title="✅ 推荐选择 Flutter："></a>✅ <strong>推荐选择 Flutter</strong>：</h4><ol><li><strong>快速开发 MVP</strong>：1 周内构建可上线应用  </li><li><strong>高 UI 一致性需求</strong>：如电商&#x2F;社交 App（避免 iOS&#x2F;Android 设计分裂）  </li><li><strong>嵌入式 GUI</strong>：车载中控屏、智能设备面板（Flutter 已支持 Raspberry Pi）</li></ol><h4 id="⚠️-谨慎选择："><a href="#⚠️-谨慎选择：" class="headerlink" title="⚠️ 谨慎选择："></a>⚠️ <strong>谨慎选择</strong>：</h4><ol><li><strong>超轻量级应用</strong>（&lt; 5MB）→ 考虑 Tauri + Web 技术  </li><li><strong>强依赖 iOS 原生能力</strong>（如 ARKit）→ 短期用 SwiftUI，长期观望 Flutter 适配  </li><li><strong>需要浏览器插件</strong> → Wasm 生态未成熟，选纯 Web 技术栈</li></ol><hr><h3 id="五、未来演进路线"><a href="#五、未来演进路线" class="headerlink" title="五、未来演进路线"></a>五、未来演进路线</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">A[Flutter 2024] --&gt; B[移动/桌面主流方案]</span><br><span class="line">A --&gt; C[Wasm 深化]</span><br><span class="line">C --&gt; D[浏览器中运行复杂应用]</span><br><span class="line">C --&gt; E[与其他语言互操作（Rust/C++）]</span><br><span class="line">A --&gt; F[嵌入式计算] --&gt; G[车机/IoT 界面]</span><br></pre></td></tr></table></figure><ul><li><strong>2024-2025</strong>：Dart Wasm 工具链完善，Web 性能逼近原生  </li><li>**2026+**：Wasm 成为跨平台底层标准，Flutter 可能演变为 <strong>“Wasm 驱动的 UI 框架”</strong></li></ul><hr><h3 id="结论：Flutter-仍是当下最优潜力的跨平台选择之一"><a href="#结论：Flutter-仍是当下最优潜力的跨平台选择之一" class="headerlink" title="结论：Flutter 仍是当下最优潜力的跨平台选择之一"></a>结论：<strong>Flutter 仍是当下最优潜力的跨平台选择之一</strong></h3><ul><li><strong>短期</strong>（1-3 年）：专注移动&#x2F;桌面端开发，<strong>优先选 Flutter</strong>（生态成熟&#x2F;性能达标）  </li><li><strong>长期</strong>（3-5 年）：关注 Wasm 生态发展，<strong>用 Dart 编译 Wasm 无缝过渡</strong>到下一代 Web 应用架构</li></ul><blockquote><p>💡 <strong>行动建议</strong>：  </p><ol><li>新项目直接用 Flutter 开发核心功能  </li><li>实验性接入 Dart→Wasm 编译（适合 Web 模块）  </li><li>高风险模块（如 iOS 原生 AR）用平台代码隔离开发</li></ol></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> flutter </tag>
            
            <tag> App </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter Windows tab 自动更新</title>
      <link href="/2025/07/23/app_develop_skills/flutter%20tab%20update/"/>
      <url>/2025/07/23/app_develop_skills/flutter%20tab%20update/</url>
      
        <content type="html"><![CDATA[<p><strong>Flutter 的 Tab 是完全可以通过配置动态更新的</strong>。可以做到：</p><ul><li>✅ Tab 的数量从 3 → 4 → 5 动态变化（甚至运行时改变）</li><li>✅ 每个 Tab 的标题、图标、URL 都由配置文件（如 JSON）控制</li><li>✅ 配置可以从本地或远程加载，实现远程动态更新界面结构</li></ul><hr><h2 id="✅-实现原理概述"><a href="#✅-实现原理概述" class="headerlink" title="✅ 实现原理概述"></a>✅ 实现原理概述</h2><ol><li>定义一个 Tab 配置结构，比如本地或远程的 JSON 文件：</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;首页&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;icon&quot;</span><span class="punctuation">:</span> <span class="string">&quot;home&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://yourdomain.com/tab1/index.html&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;发现&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;icon&quot;</span><span class="punctuation">:</span> <span class="string">&quot;search&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://yourdomain.com/tab2/index.html&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;我&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;icon&quot;</span><span class="punctuation">:</span> <span class="string">&quot;person&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://yourdomain.com/tab3/index.html&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><p>可以在某次更新后，变成 5 个：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;设置&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;icon&quot;</span><span class="punctuation">:</span> <span class="string">&quot;settings&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://yourdomain.com/tab4/index.html&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;帮助&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;icon&quot;</span><span class="punctuation">:</span> <span class="string">&quot;help&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://yourdomain.com/tab5/index.html&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><hr><h2 id="✅-Flutter-动态加载配置-构建-Tab-示例（核心代码）"><a href="#✅-Flutter-动态加载配置-构建-Tab-示例（核心代码）" class="headerlink" title="✅ Flutter 动态加载配置 + 构建 Tab 示例（核心代码）"></a>✅ Flutter 动态加载配置 + 构建 Tab 示例（核心代码）</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:webview_flutter/webview_flutter.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;dart:convert&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/services.dart&#x27;</span> <span class="keyword">show</span> rootBundle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  runApp(MyApp());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TabItem</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> title;</span><br><span class="line">  <span class="keyword">final</span> IconData icon;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> url;</span><br><span class="line"></span><br><span class="line">  TabItem(&#123;<span class="keyword">required</span> <span class="keyword">this</span>.title, <span class="keyword">required</span> <span class="keyword">this</span>.icon, <span class="keyword">required</span> <span class="keyword">this</span>.url&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">factory</span> TabItem.fromJson(<span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt; json) &#123;</span><br><span class="line">    <span class="keyword">return</span> TabItem(</span><br><span class="line">      title: json[<span class="string">&#x27;title&#x27;</span>],</span><br><span class="line">      icon: _iconFromName(json[<span class="string">&#x27;icon&#x27;</span>]),</span><br><span class="line">      url: json[<span class="string">&#x27;url&#x27;</span>],</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> IconData _iconFromName(<span class="built_in">String</span> name) &#123;</span><br><span class="line">    <span class="keyword">switch</span> (name) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;home&#x27;</span>: <span class="keyword">return</span> Icons.home;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;search&#x27;</span>: <span class="keyword">return</span> Icons.search;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;person&#x27;</span>: <span class="keyword">return</span> Icons.person;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;settings&#x27;</span>: <span class="keyword">return</span> Icons.settings;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;help&#x27;</span>: <span class="keyword">return</span> Icons.help;</span><br><span class="line">      <span class="keyword">default</span>: <span class="keyword">return</span> Icons.device_unknown;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  State&lt;MyApp&gt; createState() =&gt; _MyAppState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_MyAppState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">MyApp</span>&gt; </span>&#123;</span><br><span class="line">  <span class="built_in">List</span>&lt;TabItem&gt; tabs = [];</span><br><span class="line">  <span class="built_in">int</span> _selectedIndex = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">    loadTabs();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Future&lt;<span class="keyword">void</span>&gt; loadTabs() <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="built_in">String</span> jsonStr = <span class="keyword">await</span> rootBundle.loadString(<span class="string">&#x27;assets/tab_config.json&#x27;</span>);</span><br><span class="line">    <span class="keyword">final</span> <span class="built_in">List</span>&lt;<span class="built_in">dynamic</span>&gt; jsonList = json.decode(jsonStr);</span><br><span class="line">    setState(() &#123;</span><br><span class="line">      tabs = jsonList.map((e) =&gt; TabItem.fromJson(e)).toList();</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">if</span> (tabs.isEmpty) &#123;</span><br><span class="line">      <span class="keyword">return</span> MaterialApp(</span><br><span class="line">        home: Scaffold(body: Center(child: CircularProgressIndicator())),</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        appBar: AppBar(title: Text(tabs[_selectedIndex].title)),</span><br><span class="line">        body: WebView(</span><br><span class="line">          initialUrl: tabs[_selectedIndex].url,</span><br><span class="line">          javascriptMode: JavascriptMode.unrestricted,</span><br><span class="line">        ),</span><br><span class="line">        bottomNavigationBar: BottomNavigationBar(</span><br><span class="line">          currentIndex: _selectedIndex,</span><br><span class="line">          items: tabs</span><br><span class="line">              .map((tab) =&gt;</span><br><span class="line">                  BottomNavigationBarItem(icon: Icon(tab.icon), label: tab.title))</span><br><span class="line">              .toList(),</span><br><span class="line">          onTap: (index) &#123;</span><br><span class="line">            setState(() &#123;</span><br><span class="line">              _selectedIndex = index;</span><br><span class="line">            &#125;);</span><br><span class="line">          &#125;,</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="✅-JSON-配置说明"><a href="#✅-JSON-配置说明" class="headerlink" title="✅ JSON 配置说明"></a>✅ JSON 配置说明</h2><ul><li>放置路径：<code>assets/tab_config.json</code></li><li>记得在 <code>pubspec.yaml</code> 中声明资源：</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">flutter:</span></span><br><span class="line">  <span class="attr">assets:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">assets/tab_config.json</span></span><br></pre></td></tr></table></figure><hr><h2 id="✅-实现“远程配置”的动态更新？"><a href="#✅-实现“远程配置”的动态更新？" class="headerlink" title="✅ 实现“远程配置”的动态更新？"></a>✅ 实现“远程配置”的动态更新？</h2><p>可以把 <code>tab_config.json</code> 放到服务器上，通过 HTTP 获取：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> response = <span class="keyword">await</span> http.<span class="keyword">get</span>(<span class="built_in">Uri</span>.parse(<span class="string">&#x27;https://yourdomain.com/tab_config.json&#x27;</span>));</span><br><span class="line"><span class="keyword">final</span> <span class="built_in">List</span>&lt;<span class="built_in">dynamic</span>&gt; jsonList = json.decode(response.body);</span><br></pre></td></tr></table></figure><p>这样就可以远程动态控制：<br>✅ Tab 数量<br>✅ Tab 标题 &#x2F; 图标 &#x2F; 跳转页面<br>✅ 无需发版即可更新用户体验</p><hr><h2 id="✅-总结"><a href="#✅-总结" class="headerlink" title="✅ 总结"></a>✅ 总结</h2><table><thead><tr><th>目标</th><th>是否可行</th><th>实现方式</th></tr></thead><tbody><tr><td>动态控制 Tab 数量（3 → 5）</td><td>✅</td><td>配置驱动 + 动态构建</td></tr><tr><td>配置从本地加载</td><td>✅</td><td>assets 中 JSON</td></tr><tr><td>配置从远程加载</td><td>✅</td><td>HTTP + JSON</td></tr><tr><td>更新不发版</td><td>✅</td><td>远程配置 + 缓存机制</td></tr></tbody></table><hr><h2 id="🧱-目录结构建议（Flutter-项目）"><a href="#🧱-目录结构建议（Flutter-项目）" class="headerlink" title="🧱 目录结构建议（Flutter 项目）"></a>🧱 目录结构建议（Flutter 项目）</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">flutter_vue_shell/</span><br><span class="line">├── assets/</span><br><span class="line">│   ├── tab1/index.html</span><br><span class="line">│   ├── tab2/index.html</span><br><span class="line">│   └── tab3/index.html</span><br><span class="line">├── lib/</span><br><span class="line">│   └── main.dart</span><br><span class="line">├── pubspec.yaml</span><br></pre></td></tr></table></figure><hr><h2 id="✨-第一步：准备-Vue3-页面"><a href="#✨-第一步：准备-Vue3-页面" class="headerlink" title="✨ 第一步：准备 Vue3 页面"></a>✨ 第一步：准备 Vue3 页面</h2><p>使用 Vue3（比如 Vite）构建的三个页面：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例：构建 tab1 页面</span></span><br><span class="line"><span class="built_in">cd</span> vue-tab1</span><br><span class="line">npm run build</span><br><span class="line"><span class="comment"># 生成 dist/index.html，拷贝到 flutter/assets/tab1/index.html</span></span><br></pre></td></tr></table></figure><p>重复这个过程，把三个页面的构建结果（<code>index.html + 静态资源</code>）分别放进：</p><ul><li><code>assets/tab1/</code></li><li><code>assets/tab2/</code></li><li><code>assets/tab3/</code></li></ul><blockquote><p><strong>注意</strong>：Vue3 的构建结果路径需相对引用（建议使用相对路径打包 <code>vite.config.js</code> 里设置 <code>base: &#39;./&#39;</code>）</p></blockquote><hr><h2 id="📦-第二步：Flutter-添加依赖"><a href="#📦-第二步：Flutter-添加依赖" class="headerlink" title="📦 第二步：Flutter 添加依赖"></a>📦 第二步：Flutter 添加依赖</h2><p>在 <code>pubspec.yaml</code> 中添加：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">flutter:</span></span><br><span class="line">  <span class="attr">assets:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">assets/tab1/</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">assets/tab2/</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">assets/tab3/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">dependencies:</span></span><br><span class="line">  <span class="attr">flutter:</span></span><br><span class="line">    <span class="attr">sdk:</span> <span class="string">flutter</span></span><br><span class="line">  <span class="attr">webview_flutter:</span> <span class="string">^4.0.7</span> <span class="comment"># 最新版本查 pub.dev</span></span><br></pre></td></tr></table></figure><hr><h2 id="🧭-第三步：Flutter-主界面代码（main-dart）"><a href="#🧭-第三步：Flutter-主界面代码（main-dart）" class="headerlink" title="🧭 第三步：Flutter 主界面代码（main.dart）"></a>🧭 第三步：Flutter 主界面代码（main.dart）</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:webview_flutter/webview_flutter.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;dart:io&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  runApp(MyApp());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      title: <span class="string">&#x27;Flutter + Vue3 Web Tabs&#x27;</span>,</span><br><span class="line">      theme: ThemeData(</span><br><span class="line">        primarySwatch: Colors.blue,</span><br><span class="line">      ),</span><br><span class="line">      home: WebTabPage(),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WebTabPage</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _WebTabPageState createState() =&gt; _WebTabPageState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_WebTabPageState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">WebTabPage</span>&gt; <span class="title">with</span> <span class="title">WidgetsBindingObserver</span> </span>&#123;</span><br><span class="line">  <span class="built_in">int</span> _selectedIndex = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; _tabHtmlPaths = [</span><br><span class="line">    <span class="string">&#x27;assets/tab1/index.html&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;assets/tab2/index.html&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;assets/tab3/index.html&#x27;</span>,</span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">    <span class="comment">// 初始化 WebView 平台</span></span><br><span class="line">    <span class="keyword">if</span> (Platform.isAndroid) &#123;</span><br><span class="line">      WebView.platform = SurfaceAndroidWebView();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">String</span> <span class="keyword">get</span> htmlFileUrl &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Uri</span>.dataFromString(</span><br><span class="line">      File(_tabHtmlPaths[_selectedIndex]).readAsStringSync(),</span><br><span class="line">      mimeType: <span class="string">&#x27;text/html&#x27;</span>,</span><br><span class="line">      encoding: Encoding.getByName(<span class="string">&#x27;utf-8&#x27;</span>),</span><br><span class="line">    ).toString();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: Text(<span class="string">&#x27;Flutter + Vue Tabs&#x27;</span>),</span><br><span class="line">      ),</span><br><span class="line">      body: WebView(</span><br><span class="line">        initialUrl: htmlFileUrl,</span><br><span class="line">        javascriptMode: JavascriptMode.unrestricted,</span><br><span class="line">      ),</span><br><span class="line">      bottomNavigationBar: BottomNavigationBar(</span><br><span class="line">        currentIndex: _selectedIndex,</span><br><span class="line">        onTap: (index) =&gt; setState(() =&gt; _selectedIndex = index),</span><br><span class="line">        items: <span class="keyword">const</span> [</span><br><span class="line">          BottomNavigationBarItem(icon: Icon(Icons.home), label: <span class="string">&#x27;Tab1&#x27;</span>),</span><br><span class="line">          BottomNavigationBarItem(icon: Icon(Icons.search), label: <span class="string">&#x27;Tab2&#x27;</span>),</span><br><span class="line">          BottomNavigationBarItem(icon: Icon(Icons.person), label: <span class="string">&#x27;Tab3&#x27;</span>),</span><br><span class="line">        ],</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>🔧 注意：<code>File().readAsStringSync()</code> 读取 asset 文件在 Android&#x2F;iOS 上会报错，因为 Flutter 的 asset 不是磁盘路径。可以用 <code>flutter_inappwebview</code> 或将 HTML 复制为 <code>data:</code> URL 或使用 <code>WebViewAssetLoader</code>（推荐方式见下）</p></blockquote><hr><h2 id="✅-替代推荐：加载-Asset-HTML-更安全（推荐）"><a href="#✅-替代推荐：加载-Asset-HTML-更安全（推荐）" class="headerlink" title="✅ 替代推荐：加载 Asset HTML 更安全（推荐）"></a>✅ 替代推荐：加载 Asset HTML 更安全（推荐）</h2><p>使用 webview_flutter + <code>WebViewAssetLoader</code> 加载 Flutter 项目中的 assets：</p><p>参考： <a href="https://github.com/flutter/plugins/blob/main/packages/webview_flutter/webview_flutter/example/lib/main.dart">https://github.com/flutter/plugins/blob/main/packages/webview_flutter&#x2F;webview_flutter&#x2F;example&#x2F;lib&#x2F;main.dart</a></p><hr><h2 id="🔚-总结"><a href="#🔚-总结" class="headerlink" title="🔚 总结"></a>🔚 总结</h2><p>现在拥有了：</p><ul><li>✅ Flutter 外壳（可打包 Android&#x2F;iOS）</li><li>✅ 三个 Tab 页面，每个加载 Vue3 构建后的 HTML 界面</li><li>✅ 可扩展的结构，适合嵌入 Web 小应用或微前端子系统</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> flutter </tag>
            
            <tag> App </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter Windows 开发环境搭建指南</title>
      <link href="/2025/07/22/app_develop_skills/window%E6%9C%80%E5%BF%ABflutter%E7%8E%AF%E5%A2%83/"/>
      <url>/2025/07/22/app_develop_skills/window%E6%9C%80%E5%BF%ABflutter%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<p>Windows 下快速搭建 Flutter + VS Code 的开发环境，并顺利发布 Android App，给你一份一步步的高效流程，帮你省时省力：</p><hr><h1 id="Windows-下快速搭建-Flutter-VS-Code-开发环境并发布-Android-App"><a href="#Windows-下快速搭建-Flutter-VS-Code-开发环境并发布-Android-App" class="headerlink" title="Windows 下快速搭建 Flutter + VS Code 开发环境并发布 Android App"></a>Windows 下快速搭建 Flutter + VS Code 开发环境并发布 Android App</h1><hr><h2 id="一、环境准备和安装"><a href="#一、环境准备和安装" class="headerlink" title="一、环境准备和安装"></a>一、环境准备和安装</h2><h3 id="1-安装-Flutter-SDK"><a href="#1-安装-Flutter-SDK" class="headerlink" title="1. 安装 Flutter SDK"></a>1. 安装 Flutter SDK</h3><ul><li><p>访问官网 <a href="https://flutter.dev/docs/get-started/install/windows">https://flutter.dev/docs/get-started/install/windows</a></p></li><li><p>下载最新版 Flutter SDK 压缩包（如 <code>flutter_windows_x.x.x-stable.zip</code>）</p></li><li><p>解压到 <code>C:\src\flutter</code>（或任意目录，不要放在带空格路径）</p></li><li><p>配置环境变量：</p><ul><li>系统变量 Path 添加 <code>C:\src\flutter\bin</code></li></ul></li><li><p>终端（CMD&#x2F;PowerShell）输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter doctor</span><br></pre></td></tr></table></figure><p>会提示缺什么，下一步继续完善</p></li></ul><h3 id="2-安装-Git"><a href="#2-安装-Git" class="headerlink" title="2. 安装 Git"></a>2. 安装 Git</h3><ul><li>Flutter 需要 Git 支持，安装：<a href="https://git-scm.com/download/win">https://git-scm.com/download/win</a></li><li>安装后在终端输入 <code>git --version</code> 检查是否可用</li></ul><h3 id="3-安装-Android-SDK-和工具（不用安装-Android-Studio-可选）"><a href="#3-安装-Android-SDK-和工具（不用安装-Android-Studio-可选）" class="headerlink" title="3. 安装 Android SDK 和工具（不用安装 Android Studio 可选）"></a>3. 安装 Android SDK 和工具（不用安装 Android Studio 可选）</h3><ul><li>推荐安装 Android Studio，自动集成 SDK 和模拟器</li><li>如果不想装 Android Studio，可单独安装 Android SDK command line tools：<br><a href="https://developer.android.com/studio#command-tools">https://developer.android.com/studio#command-tools</a></li><li>配置 ANDROID_HOME 环境变量指向 SDK 路径</li><li>用命令行安装模拟器、平台工具等</li></ul><h3 id="4-安装-VS-Code"><a href="#4-安装-VS-Code" class="headerlink" title="4. 安装 VS Code"></a>4. 安装 VS Code</h3><ul><li><p><a href="https://code.visualstudio.com/">https://code.visualstudio.com/</a> 下载并安装</p></li><li><p>打开 VS Code，安装插件：</p><ul><li>Flutter</li><li>Dart</li></ul></li></ul><hr><h2 id="二、配置-Flutter-开发环境"><a href="#二、配置-Flutter-开发环境" class="headerlink" title="二、配置 Flutter 开发环境"></a>二、配置 Flutter 开发环境</h2><ul><li><p>打开命令行，运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter doctor</span><br></pre></td></tr></table></figure></li><li><p>根据提示安装缺少的依赖项，比如：</p><ul><li><p>Android SDK license 许可：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter doctor --android-licenses</span><br></pre></td></tr></table></figure><p>然后按提示输入 <code>y</code></p></li><li><p>如果缺少 Android SDK 或未配置，重新检查环境变量和安装</p></li></ul></li><li><p>连接 Android 设备（真机或模拟器）</p><ul><li>真机：开启开发者模式和 USB 调试</li><li>模拟器：Android Studio 创建，或者用命令行启动</li></ul></li></ul><hr><p>要在 VS Code 中配置 Flutter 开发环境，请按以下步骤操作：</p><hr><h3 id="1-安装必要插件"><a href="#1-安装必要插件" class="headerlink" title="1. 安装必要插件"></a>1. <strong>安装必要插件</strong></h3><ul><li>在 VS Code 中安装官方插件：<ul><li><strong>Flutter</strong>（自动包含 Dart 支持）</li><li><strong>Android SDK Platform-Tools</strong>（用于设备调试）</li></ul></li></ul><hr><h3 id="2-配置环境变量"><a href="#2-配置环境变量" class="headerlink" title="2. 配置环境变量"></a>2. <strong>配置环境变量</strong></h3><h4 id="Windows："><a href="#Windows：" class="headerlink" title="Windows："></a>Windows：</h4><ol><li>右键 <code>此电脑</code> → <code>属性</code> → <code>高级系统设置</code> → <code>环境变量</code></li><li>在 <strong>用户变量</strong> 中新建：<ul><li>变量名：<code>FLUTTER_HOME</code><br>变量值：<code>你的Flutter SDK路径</code>（例如 <code>C:\flutter</code>）</li></ul></li><li>编辑 <strong>Path</strong> 变量，添加：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">%FLUTTER_HOME%\bin</span><br><span class="line">%ANDROID_HOME%\platform-tools   # 如果已安装 Android SDK</span><br></pre></td></tr></table></figure></li></ol><h4 id="macOS-Linux："><a href="#macOS-Linux：" class="headerlink" title="macOS&#x2F;Linux："></a>macOS&#x2F;Linux：</h4><p>编辑 <code>~/.zshrc</code> 或 <code>~/.bashrc</code>，添加：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> FLUTTER_HOME=<span class="string">&quot;你的Flutter SDK路径&quot;</span> <span class="comment"># 例如 /Users/name/flutter</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;<span class="variable">$FLUTTER_HOME</span>/bin:<span class="variable">$PATH</span>&quot;</span></span><br><span class="line"><span class="built_in">export</span> ANDROID_HOME=<span class="string">&quot;你的Android SDK路径&quot;</span> <span class="comment"># 例如 ~/Library/Android/sdk</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;<span class="variable">$ANDROID_HOME</span>/platform-tools:<span class="variable">$PATH</span>&quot;</span></span><br></pre></td></tr></table></figure><p>运行 <code>source ~/.zshrc</code> 生效。</p><hr><h3 id="3-解决依赖问题"><a href="#3-解决依赖问题" class="headerlink" title="3. 解决依赖问题"></a>3. <strong>解决依赖问题</strong></h3><p>在终端执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter doctor</span><br></pre></td></tr></table></figure><ul><li><strong>Android 许可问题</strong>：运行 <code>flutter doctor --android-licenses</code> 并全部接受（按 <code>y</code>）。</li><li><strong>Android Studio 未配置</strong>：打开 Android Studio → 安装 SDK Tools：<ul><li><code>Android SDK Command-line Tools</code></li><li><code>Android SDK Build-Tools</code></li></ul></li></ul><hr><h3 id="4-配置-VS-Code"><a href="#4-配置-VS-Code" class="headerlink" title="4. 配置 VS Code"></a>4. <strong>配置 VS Code</strong></h3><ol><li><strong>设置 SDK 路径</strong>（如果自动检测失败）：<ul><li>打开 VS Code 设置（<code>Ctrl + ,</code>）</li><li>搜索 <code>Flutter Sdk Path</code> → 输入 Flutter SDK 路径（例如 <code>C:\flutter</code>）</li></ul></li><li><strong>启用 Dart&#x2F;Flutter</strong>：<ul><li>打开任意 Dart 文件 → 右下角点击 <code>Dart</code> → 选择允许 Dart 插件。</li></ul></li></ol><hr><h3 id="5-连接设备"><a href="#5-连接设备" class="headerlink" title="5. 连接设备"></a>5. <strong>连接设备</strong></h3><ul><li><strong>真机</strong>：开启 USB 调试（设置 → 开发者选项）。</li><li><strong>模拟器</strong>：<ul><li>在 Android Studio 中创建虚拟设备（AVD Manager）。</li><li>在 VS Code 底部状态栏选择设备：<br><img src="https://i.imgur.com/Yb5QO7l.png" alt="VS Code 设备选择"></li></ul></li></ul><hr><h3 id="6-创建并运行项目"><a href="#6-创建并运行项目" class="headerlink" title="6. 创建并运行项目"></a>6. <strong>创建并运行项目</strong></h3><ol><li>创建项目：<ul><li><code>Ctrl + Shift + P</code> → 输入 <code>Flutter: New Project</code></li></ul></li><li>运行项目：<ul><li>打开 <code>lib/main.dart</code></li><li>按 <code>F5</code> 或点击右下角的 <code>Debug</code> 按钮</li></ul></li></ol><hr><h3 id="7-常见问题解决"><a href="#7-常见问题解决" class="headerlink" title="7. 常见问题解决"></a>7. <strong>常见问题解决</strong></h3><ul><li><strong>设备未识别</strong>：运行 <code>adb devices</code> 检查设备 ID，确保 USB 调试已开启。</li><li><strong>依赖缺失</strong>：在项目根目录运行 <code>flutter pub get</code>。</li><li><strong>端口占用</strong>：执行 <code>adb kill-server &amp;&amp; adb start-server</code>。</li></ul><hr><h2 id="✅-Android-Studio-必装组件"><a href="#✅-Android-Studio-必装组件" class="headerlink" title="✅ Android Studio 必装组件"></a>✅ Android Studio 必装组件</h2><p>即使你打算主力使用 VS Code，<strong>Android Studio 也必须安装</strong>，因为它提供：</p><ul><li>Android SDK（Flutter 构建 Android 应用必需）</li><li>Android Emulator（可选）</li><li>Android 编译工具链（gradle, build-tools, platform-tools）</li><li>Java JDK（Flutter 默认使用 Android Studio 自带的 JDK）</li></ul><h3 id="✅-安装-Android-Studio-时建议勾选的组件："><a href="#✅-安装-Android-Studio-时建议勾选的组件：" class="headerlink" title="✅ 安装 Android Studio 时建议勾选的组件："></a>✅ 安装 Android Studio 时建议勾选的组件：</h3><ol><li>✅ <strong>Android SDK</strong></li><li>✅ <strong>Android SDK Platform-Tools</strong></li><li>✅ <strong>Android SDK Build-Tools</strong></li><li>✅ <strong>Android Emulator</strong>（如需模拟器）</li><li>✅ <strong>Android Virtual Device（AVD）</strong></li><li>✅ <strong>Dart Plugin</strong>（如你也用 Studio 开发 Flutter）</li><li>✅ <strong>Flutter Plugin</strong></li></ol><hr><h2 id="✅-Flutter-SDK-安装（适用于-VS-Code-与-Studio）"><a href="#✅-Flutter-SDK-安装（适用于-VS-Code-与-Studio）" class="headerlink" title="✅ Flutter SDK 安装（适用于 VS Code 与 Studio）"></a>✅ Flutter SDK 安装（适用于 VS Code 与 Studio）</h2><blockquote><p>Flutter 是一个独立 SDK，不随 Android Studio 自动安装。</p></blockquote><h3 id="📦-安装步骤："><a href="#📦-安装步骤：" class="headerlink" title="📦 安装步骤："></a>📦 安装步骤：</h3><ol><li>前往官网下载 Flutter SDK：<a href="https://flutter.dev/docs/get-started/install">https://flutter.dev/docs/get-started/install</a></li><li>解压到一个合适的目录，比如 <code>C:\flutter</code></li><li>将 <code>flutter/bin</code> 加入系统环境变量（Path）</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\flutter\bin</span><br></pre></td></tr></table></figure><ol start="4"><li>运行以下命令验证环境：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter doctor</span><br></pre></td></tr></table></figure><hr><h2 id="✅-VS-Code-插件推荐"><a href="#✅-VS-Code-插件推荐" class="headerlink" title="✅ VS Code 插件推荐"></a>✅ VS Code 插件推荐</h2><p>在 VS Code 中，安装以下插件：</p><table><thead><tr><th>插件名称</th><th>描述</th></tr></thead><tbody><tr><td>Flutter</td><td>支持 Flutter UI 编写与调试</td></tr><tr><td>Dart</td><td>Flutter 所需语言支持插件</td></tr><tr><td>Android iOS Emulator</td><td>快捷管理模拟器（可选）</td></tr></tbody></table><hr><h2 id="✅-VS-Code-与-Flutter-的关联配置（首次）"><a href="#✅-VS-Code-与-Flutter-的关联配置（首次）" class="headerlink" title="✅ VS Code 与 Flutter 的关联配置（首次）"></a>✅ VS Code 与 Flutter 的关联配置（首次）</h2><ol><li>确保 VS Code 安装的是 <strong>系统 Flutter SDK</strong>（非某个特定项目内的）</li><li>打开任意 <code>.dart</code> 文件或 Flutter 项目，VS Code 会自动检测 SDK</li><li>如果没有检测到 Flutter，可手动指定 SDK 路径：</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// .vscode/settings.json</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;dart.flutterSdkPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;C:\\flutter&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><hr><h2 id="✅-推荐验证流程（全平台通用）"><a href="#✅-推荐验证流程（全平台通用）" class="headerlink" title="✅ 推荐验证流程（全平台通用）"></a>✅ 推荐验证流程（全平台通用）</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter doctor</span><br></pre></td></tr></table></figure><p>确保输出如下几个都是 ✅：</p><ul><li>Flutter SDK</li><li>Dart SDK</li><li>Android toolchain</li><li>VS Code &#x2F; Android Studio</li><li>Emulator &#x2F; 连接的设备</li></ul><hr><h2 id="🛠️-可选但推荐："><a href="#🛠️-可选但推荐：" class="headerlink" title="🛠️ 可选但推荐："></a>🛠️ 可选但推荐：</h2><ul><li>安装 Chrome（用于 Flutter Web 调试）</li><li>安装 Git（Flutter 本体依赖 git 拉取 packages）</li><li>配置国内镜像（如在国内下载慢，可配 <code>PUB_HOSTED_URL</code> 与 <code>FLUTTER_STORAGE_BASE_URL</code>）</li></ul><h2 id="三、创建和运行第一个-Flutter-项目"><a href="#三、创建和运行第一个-Flutter-项目" class="headerlink" title="三、创建和运行第一个 Flutter 项目"></a>三、创建和运行第一个 Flutter 项目</h2><ul><li><p>在 VS Code 命令面板（Ctrl+Shift+P）输入 <code>Flutter: New Project</code></p></li><li><p>选择 <code>Flutter Application</code></p></li><li><p>选择存储目录和项目名</p></li><li><p>项目创建后，按 F5 运行或在终端执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter run</span><br></pre></td></tr></table></figure></li><li><p>确认应用在设备上正常运行</p></li></ul><hr><h2 id="四、打包并发布-Android-App"><a href="#四、打包并发布-Android-App" class="headerlink" title="四、打包并发布 Android App"></a>四、打包并发布 Android App</h2><h3 id="1-生成发布版-APK"><a href="#1-生成发布版-APK" class="headerlink" title="1. 生成发布版 APK"></a>1. 生成发布版 APK</h3><ul><li><p>在项目根目录，运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter build apk --release</span><br></pre></td></tr></table></figure></li><li><p>生成的 APK 位于<br><code>build\app\outputs\flutter-apk\app-release.apk</code></p></li></ul><h3 id="2-签名-APK"><a href="#2-签名-APK" class="headerlink" title="2. 签名 APK"></a>2. 签名 APK</h3><ul><li><p>创建或使用已有签名密钥（keystore）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keytool -genkey -v -keystore ~/my-release-key.jks -keyalg RSA -keysize 2048 -validity 10000 -<span class="built_in">alias</span> key</span><br></pre></td></tr></table></figure></li><li><p>在 <code>android\app</code> 目录下创建 <code>key.properties</code> 文件，内容示例：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">storePassword</span>=<span class="string">&lt;你的密码&gt;</span></span><br><span class="line"><span class="attr">keyPassword</span>=<span class="string">&lt;你的密码&gt;</span></span><br><span class="line"><span class="attr">keyAlias</span>=<span class="string">key</span></span><br><span class="line"><span class="attr">storeFile</span>=<span class="string">&lt;路径到你的keystore文件&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>修改 <code>android/app/build.gradle</code>，配置签名信息（官方文档有详细步骤）</p></li></ul><h3 id="3-发布到-Google-Play"><a href="#3-发布到-Google-Play" class="headerlink" title="3. 发布到 Google Play"></a>3. 发布到 Google Play</h3><ul><li>登录 Google Play 开发者账号（需要付费注册）</li><li>上传签名过的 APK 或 AAB 包（<code>flutter build appbundle</code> 可以生成 <code>.aab</code>）</li><li>填写应用信息，提交审核</li></ul><hr><h2 id="五、Tips-提升效率"><a href="#五、Tips-提升效率" class="headerlink" title="五、Tips 提升效率"></a>五、Tips 提升效率</h2><ul><li>使用物理设备调试速度快，避免模拟器卡顿</li><li>多用 VS Code 的 Flutter 插件热重载功能，开发更快</li><li>阅读 Flutter 官方<a href="https://flutter.dev/docs/deployment/android">发布文档</a>了解细节</li><li>定期更新 Flutter SDK 和插件保持最新</li></ul><hr>]]></content>
      
      
      
        <tags>
            
            <tag> flutter </tag>
            
            <tag> App </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go 与 java</title>
      <link href="/2025/07/06/backend_skills/go/go%20vs%20java/"/>
      <url>/2025/07/06/backend_skills/go/go%20vs%20java/</url>
      
        <content type="html"><![CDATA[<p>Go 语言确实提供了<strong>屏蔽底层系统差异</strong>的能力，但与 Java JVM 的机制<strong>截然不同</strong>。它采用的是 <strong>原生编译 + 标准库抽象</strong> 的方式，而不是依赖一个虚拟机。</p><p>Go（Golang）没有像 Java 那样的 JVM（Java Virtual Machine）机制，但它通过 <strong>自己的运行时系统（runtime）</strong> 实现了一部分类似的跨平台能力和系统差异屏蔽功能。不过，它的设计理念和 Java 有本质不同。下面详细对比：</p><hr><h2 id="🔍-Go-是否屏蔽底层系统差异？"><a href="#🔍-Go-是否屏蔽底层系统差异？" class="headerlink" title="🔍 Go 是否屏蔽底层系统差异？"></a>🔍 Go 是否屏蔽底层系统差异？</h2><h3 id="✅-是的，部分屏蔽。"><a href="#✅-是的，部分屏蔽。" class="headerlink" title="✅ 是的，部分屏蔽。"></a>✅ 是的，部分屏蔽。</h3><p>Go 的运行时系统包含了：</p><ul><li>内存管理（GC 垃圾回收）</li><li>协程调度（goroutine 和调度器）</li><li>网络 poller（I&#x2F;O 多路复用，自动适配 epoll&#x2F;kqueue）</li><li>抽象的标准库 API（如 <code>net</code>, <code>os</code>, <code>time</code> 等，屏蔽平台差异）</li></ul><p>这些特性让你在编写 Go 代码时大多数情况下不用关心底层系统细节。</p><hr><h2 id="❌-但-Go-没有-JVM-那样的虚拟机机制"><a href="#❌-但-Go-没有-JVM-那样的虚拟机机制" class="headerlink" title="❌ 但 Go 没有 JVM 那样的虚拟机机制"></a>❌ 但 Go <strong>没有 JVM 那样的虚拟机机制</strong></h2><table><thead><tr><th>特性</th><th>Java (JVM)</th><th>Go</th></tr></thead><tbody><tr><td><strong>虚拟机机制</strong></td><td>有 JVM，字节码运行在虚拟机中</td><td>无虚拟机，直接编译为本地机器码</td></tr><tr><td><strong>运行时抽象程度</strong></td><td>高，完全脱离平台架构</td><td>中等，运行时依赖底层系统 API</td></tr><tr><td><strong>跨平台性</strong></td><td>编译一次，任何平台的 JVM 都能跑</td><td>每个平台单独编译一次（静态编译）</td></tr><tr><td><strong>执行效率</strong></td><td>热点优化后较高</td><td>编译成本地代码，启动快、运行快</td></tr><tr><td><strong>部署复杂度</strong></td><td>需要安装 JVM</td><td>直接生成单一可执行文件</td></tr></tbody></table><hr><h2 id="🧠-Go-的运行时做了哪些“平台屏蔽”？"><a href="#🧠-Go-的运行时做了哪些“平台屏蔽”？" class="headerlink" title="🧠 Go 的运行时做了哪些“平台屏蔽”？"></a>🧠 Go 的运行时做了哪些“平台屏蔽”？</h2><table><thead><tr><th>模块</th><th>功能</th></tr></thead><tbody><tr><td><code>runtime</code> 包</td><td>管理 goroutine 调度、GC、栈扩容、panic 恢复等</td></tr><tr><td><code>net</code> 包</td><td>对 TCP&#x2F;UDP&#x2F;Unix Socket 抽象，自动适配系统调用</td></tr><tr><td><code>os</code> 包</td><td>抽象文件系统、信号、进程操作等，内部对 Linux&#x2F;Windows&#x2F;macOS 区分处理</td></tr><tr><td><code>syscall</code> 包</td><td>更底层的系统调用封装，不推荐直接使用，但提供了统一接口</td></tr><tr><td><code>cgo</code></td><td>跨平台地调用 C 库，提供兼容机制</td></tr></tbody></table><p>例如：</p><ul><li>在 Linux 上使用 <code>epoll</code>，在 macOS 上用 <code>kqueue</code>，但对开发者来说只是调用 <code>net.Listen</code>。</li><li>goroutine 自动调度并映射到底层线程，开发者无需关心线程数。</li></ul><hr><h2 id="📦-编译层-vs-JVM"><a href="#📦-编译层-vs-JVM" class="headerlink" title="📦 编译层 vs JVM"></a>📦 编译层 vs JVM</h2><p>Go 采用静态编译，生成平台专属的机器码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GOOS=linux GOARCH=amd64 go build -o app-linux</span><br><span class="line">GOOS=windows GOARCH=amd64 go build -o app.exe</span><br></pre></td></tr></table></figure><p>而 Java 写一次，编译成字节码 <code>.class</code>，由 JVM 解释或 JIT 执行。</p><hr><p>Go 实现跨平台和屏蔽系统差异的关键机制：</p><ol><li><p><strong>原生编译（Native Compilation）</strong>：</p><ul><li>Go 编译器 (<code>gc</code>) 是核心。它将 Go 源代码<strong>直接编译</strong>成目标操作系统和 CPU 架构（如 <code>linux/amd64</code>, <code>windows/386</code>, <code>darwin/arm64</code>）的<strong>原生机器码</strong>。</li><li>编译后的结果是一个<strong>静态链接</strong>（默认行为）或动态链接的<strong>独立的可执行文件</strong>。这个文件包含了运行程序所需的所有代码（除了极少数的系统级动态库，如 <code>libc</code>，但静态链接可以消除这个依赖）。</li><li><strong>与 JVM 的区别：</strong> JVM 将 Java 源代码编译成<strong>字节码</strong>（<code>.class</code> 文件），这个字节码是平台无关的。然后在目标机器上，由特定于该平台的 <strong>JVM 实例</strong> 在运行时将字节码解释执行或即时编译（JIT）成本地机器码执行。Go 没有这个“运行时解释&#x2F;编译”的中间层，它的二进制文件是直接可执行的机器码。</li></ul></li><li><p><strong>强大的标准库（Standard Library Abstraction）</strong>：</p><ul><li>Go 拥有一个设计精良、功能丰富的<strong>标准库</strong>。这是屏蔽系统差异的关键所在。</li><li>标准库对操作系统提供的底层功能（如文件操作、网络 I&#x2F;O、进程管理、时间、环境变量、系统信号、并发原语等）提供了<strong>高度抽象且一致的接口</strong>。</li><li><strong>实现方式：</strong> Go 标准库的实现在内部会针对不同的操作系统（<code>GOOS</code>）使用不同的代码路径（通常是利用 Go 的构建标签 <code>//go:build</code> 或文件后缀如 <code>_linux.go</code>, <code>_windows.go</code>）。当你调用 <code>os.Open()</code> 打开一个文件时：<ul><li>在 Windows 上，标准库内部会调用 <code>CreateFileW</code> 等 Win32 API。</li><li>在 Linux 上，内部会调用 <code>open</code> 系统调用。</li><li>在 macOS 上，内部会调用 <code>open</code> 或相关的 Darwin 系统调用。</li></ul></li><li><strong>开发者视角：</strong> 作为 Go 开发者，你<strong>只使用 <code>os.Open</code> 这个统一的函数</strong>。标准库内部负责处理不同操作系统的具体实现细节。你不需要为不同平台写不同的代码（除非你需要使用非常特定于平台的高级特性）。</li></ul></li><li><p><strong><code>GOOS</code> 和 <code>GOARCH</code> 环境变量（交叉编译）</strong>：</p><ul><li>Go 工具链原生支持<strong>交叉编译</strong>。通过设置环境变量 <code>GOOS</code>（目标操作系统，如 <code>linux</code>, <code>windows</code>, <code>darwin</code>）和 <code>GOARCH</code>（目标 CPU 架构，如 <code>amd64</code>, <code>arm</code>, <code>arm64</code>），你可以在一台机器上（例如你的 macOS 开发机）轻松编译出运行在其他平台（例如 Linux 服务器或 Windows 桌面）上的可执行文件。</li><li>这极大地简化了为多个平台构建和分发软件的过程，是实现“一次编写，到处编译运行”（Write Once, Compile Anywhere）的核心。</li></ul></li><li><p><strong>运行时（Runtime）</strong>：</p><ul><li>Go 程序包含一个轻量级的<strong>运行时</strong> (<code>runtime</code>)，它链接在每个 Go 二进制文件中。这个运行时负责一些核心任务：<ul><li><strong>垃圾回收 (GC)</strong></li><li>**协程调度 (Goroutine Scheduler)**：管理轻量级线程 Goroutines。</li><li><strong>内存分配</strong></li><li>**底层系统交互 (部分)**：例如，网络轮询器 (<code>netpoller</code>) 的实现会根据操作系统选择最高效的方式（如 Linux 的 <code>epoll</code>, BSD&#x2F;macOS 的 <code>kqueue</code>, Windows 的 <code>IOCP</code>）。</li></ul></li><li><strong>与 JVM 的区别：</strong> Go 的运行时是<strong>编译时链接</strong>到每个程序中的，是程序的一部分。JVM 是一个<strong>独立的、庞大的、预先安装在目标机器上的</strong>软件环境，所有 Java 程序都运行在它的实例之上。Go 运行时比整个 JVM 小得多、集成度更高。</li></ul></li></ol><p><strong>总结 Go 如何屏蔽底层差异：</strong></p><table><thead><tr><th align="left">特性</th><th align="left">Go 的方式</th><th align="left">Java&#x2F;JVM 的方式</th><th align="left">目标效果 (屏蔽差异)</th></tr></thead><tbody><tr><td align="left"><strong>执行单元</strong></td><td align="left"><strong>直接编译为目标平台原生机器码</strong></td><td align="left">编译为平台无关字节码，由 JVM 解释&#x2F;JIT</td><td align="left">✅ 程序能在目标平台运行</td></tr><tr><td align="left"><strong>抽象层</strong></td><td align="left"><strong>标准库提供统一 API，内部处理平台差异</strong></td><td align="left">标准库&#x2F;JVM 提供统一 API，内部处理差异</td><td align="left">✅ 开发者使用统一接口</td></tr><tr><td align="left"><strong>部署</strong></td><td align="left"><strong>生成独立的可执行文件 (通常静态链接)</strong></td><td align="left">需要目标平台预装匹配的 JRE&#x2F;JVM</td><td align="left">✅ 程序易于分发和运行</td></tr><tr><td align="left"><strong>交叉编译</strong></td><td align="left"><strong>原生支持 (<code>GOOS</code>&#x2F;<code>GOARCH</code>)</strong></td><td align="left">字节码天然跨平台，但需目标平台有 JVM</td><td align="left">✅ 能轻松为不同平台构建程序</td></tr><tr><td align="left"><strong>运行时</strong></td><td align="left"><strong>轻量级运行时链接到每个二进制文件中</strong></td><td align="left"><strong>庞大独立的 JVM 预先安装在目标机器上</strong></td><td align="left">✅ 提供内存管理、并发等基础服务</td></tr></tbody></table><p><strong>结论：</strong></p><ul><li><strong>是的，Go 语言非常有效地屏蔽了底层系统差异。</strong> 开发者可以专注于业务逻辑，使用 Go 标准库的统一 API 进行开发，而无需关心代码在哪个操作系统（Windows, Linux, macOS）或架构（x86, ARM）上运行。</li><li><strong>Go 实现这一目标的机制与 Java&#x2F;JVM 完全不同。</strong> Go 通过<strong>强大的编译器生成原生可执行文件</strong>和<strong>精心设计的标准库进行内部抽象</strong>来实现跨平台。它<strong>不需要</strong>一个独立的、安装在目标机器上的虚拟机（如 JVM）。Go 程序是自包含的二进制文件。</li><li><strong>优势：</strong> 部署简单（单个文件）、启动速度快、资源消耗（内存）通常更低、没有 JVM 安装和版本管理的依赖。</li><li><strong>潜在限制：</strong> 如果需要直接调用大量特定平台的底层 API（超出标准库范围），可能需要使用 CGo（这会引入复杂性并可能破坏跨平台性）。但对于绝大多数应用开发，Go 标准库的抽象已经足够强大。</li></ul><p>简单来说：<strong>Go 用“一次编译，到处运行”（编译成特定平台的独立二进制）的方式，实现了和 Java “一次编写，到处运行”（依赖 JVM 运行字节码）类似的屏蔽系统差异的效果，但实现原理和部署模型完全不同，且通常更轻量和直接。</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> go </tag>
            
            <tag> jvm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Angular rxjs 性能问题</title>
      <link href="/2025/07/05/front_skills/angular/angular%20rxjs%E6%80%A7%E8%83%BD%E9%97%AE%E9%A2%98/"/>
      <url>/2025/07/05/front_skills/angular/angular%20rxjs%E6%80%A7%E8%83%BD%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>分析 Angular + RxJS 性能问题，最有效的方法是结合：</p><ul><li>浏览器工具（如 Chrome DevTools）</li><li>Angular 自带调试工具（如 Angular DevTools）</li><li>RxJS 专项技巧（如追踪流、订阅分析、内存泄漏检查）</li></ul><hr><h2 id="🔍-一、常见-RxJS-性能问题类型"><a href="#🔍-一、常见-RxJS-性能问题类型" class="headerlink" title="🔍 一、常见 RxJS 性能问题类型"></a>🔍 一、常见 RxJS 性能问题类型</h2><table><thead><tr><th>问题类型</th><th>表现</th></tr></thead><tbody><tr><td>❌ 多余订阅</td><td>多次订阅同一流，或组件重建导致重复订阅</td></tr><tr><td>♻️ 未取消订阅</td><td>组件销毁时没释放订阅，造成内存泄漏</td></tr><tr><td>🌀 高频率流（事件&#x2F;轮询）</td><td>滚动、输入等流未节流，触发变更过多</td></tr><tr><td>🔗 流链条过长</td><td><code>pipe</code> 中操作符太多，逻辑嵌套复杂，调试困难</td></tr><tr><td>⚠️ 误用 <code>combineLatest</code>, <code>switchMap</code> 等</td><td>引发额外 HTTP 请求、内存占用、竞态等问题</td></tr></tbody></table><hr><h2 id="🧰-二、核心工具与步骤"><a href="#🧰-二、核心工具与步骤" class="headerlink" title="🧰 二、核心工具与步骤"></a>🧰 二、核心工具与步骤</h2><hr><h3 id="✅-1-Chrome-DevTools-Performance-面板"><a href="#✅-1-Chrome-DevTools-Performance-面板" class="headerlink" title="✅ 1. Chrome DevTools Performance 面板"></a>✅ 1. <strong>Chrome DevTools Performance 面板</strong></h3><blockquote><p>📌 定位变更频率过高、调用栈异常、微任务泛滥</p></blockquote><p><strong>步骤</strong>：</p><ol><li><p>打开 Chrome DevTools → <code>Performance</code> 标签页</p></li><li><p>点击“录制”按钮，重现性能问题场景（如页面卡顿）</p></li><li><p>查看：</p><ul><li><strong>Major GC</strong>：垃圾回收频率</li><li><strong>Scripting&#x2F;Rendering</strong>：脚本耗时</li><li>关键：找出频繁调用 <code>ɵdetectChanges</code>、<code>Zone.runTask</code> 的位置</li></ul></li><li><p>**火焰图（flame chart）**中查看触发 <code>subscribe</code>, <code>next</code>, <code>tick</code> 等函数的次数与位置</p></li></ol><hr><h3 id="✅-2-Angular-DevTools"><a href="#✅-2-Angular-DevTools" class="headerlink" title="✅ 2. Angular DevTools"></a>✅ 2. <strong>Angular DevTools</strong></h3><blockquote><p>📌 专用于 Angular 项目的调试工具，分析变更检测与组件订阅关系</p></blockquote><p><strong>安装</strong>：<a href="https://angular.dev/tools/devtools">Chrome 插件</a></p><p><strong>使用</strong>：</p><ul><li><p>切换到 <code>Profiler</code> 选项卡</p></li><li><p>点击“Record”</p></li><li><p>重现操作后，查看：</p><ul><li>哪些组件频繁触发 change detection（变更检测）</li><li>哪些组件订阅了 observables</li></ul></li><li><p>点击组件，查看其 <code>Inputs</code>, <code>Change Detection Strategy</code>, <code>Lifecycle Hooks</code></p></li></ul><blockquote><p>👉 结合使用 <code>ChangeDetectionStrategy.OnPush</code> 可以极大降低变更检测开销</p></blockquote><hr><h3 id="✅-3-RxJS-调试技巧"><a href="#✅-3-RxJS-调试技巧" class="headerlink" title="✅ 3. RxJS 调试技巧"></a>✅ 3. <strong>RxJS 调试技巧</strong></h3><h4 id="🔍-a-使用-tap-或-debug-自定义日志："><a href="#🔍-a-使用-tap-或-debug-自定义日志：" class="headerlink" title="🔍 a. 使用 tap 或 debug() 自定义日志："></a>🔍 a. 使用 <code>tap</code> 或 <code>debug()</code> 自定义日志：</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; tap &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs/operators&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">myStream$</span>.<span class="title function_">pipe</span>(</span><br><span class="line">  <span class="title function_">tap</span>(<span class="function"><span class="params">val</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;流值:&#x27;</span>, val))</span><br><span class="line">).<span class="title function_">subscribe</span>();</span><br></pre></td></tr></table></figure><h4 id="🔥-b-打印订阅与取消订阅："><a href="#🔥-b-打印订阅与取消订阅：" class="headerlink" title="🔥 b. 打印订阅与取消订阅："></a>🔥 b. 打印订阅与取消订阅：</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; finalize &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs/operators&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">data$</span>.<span class="title function_">pipe</span>(</span><br><span class="line">  <span class="title function_">tap</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Subscribed&#x27;</span>)),</span><br><span class="line">  <span class="title function_">finalize</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Unsubscribed&#x27;</span>))</span><br><span class="line">).<span class="title function_">subscribe</span>();</span><br></pre></td></tr></table></figure><h4 id="🧪-c-封装通用日志工具："><a href="#🧪-c-封装通用日志工具：" class="headerlink" title="🧪 c. 封装通用日志工具："></a>🧪 c. 封装通用日志工具：</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> debug&lt;T&gt;(<span class="attr">label</span>: <span class="built_in">string</span>): <span class="title class_">MonoTypeOperatorFunction</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">pipe</span>(</span><br><span class="line">    <span class="title function_">tap</span>(</span><br><span class="line">      <span class="function"><span class="params">val</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`[<span class="subst">$&#123;label&#125;</span>] next:`</span>, val),</span><br><span class="line">      <span class="function"><span class="params">err</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">`[<span class="subst">$&#123;label&#125;</span>] error:`</span>, err),</span><br><span class="line">      <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`[<span class="subst">$&#123;label&#125;</span>] complete`</span>)</span><br><span class="line">    )</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="💡-三、RxJS-性能优化建议"><a href="#💡-三、RxJS-性能优化建议" class="headerlink" title="💡 三、RxJS 性能优化建议"></a>💡 三、RxJS 性能优化建议</h2><table><thead><tr><th>问题</th><th>原因</th><th>解决方案</th></tr></thead><tbody><tr><td>多次订阅</td><td>多处 <code>subscribe()</code> 无合并</td><td>用 <code>shareReplay</code>, <code>async pipe</code>, <code>takeUntil</code> 管理订阅</td></tr><tr><td>组件销毁未取消订阅</td><td><code>ngOnDestroy</code> 忽略了清理</td><td>用 <code>takeUntil</code>, <code>Subscription</code> 管理</td></tr><tr><td>高频输入或滚动触发过多</td><td><code>keyup</code>, <code>scroll</code> 等原始流未节流</td><td>使用 <code>debounceTime</code>, <code>throttleTime</code> 降低频率</td></tr><tr><td><code>switchMap</code> 内嵌请求混乱</td><td>多个请求未被正确取消</td><td>仅使用 <code>switchMap</code> 或 <code>exhaustMap</code> 管理竞态请求</td></tr><tr><td>数据层逻辑过于复杂</td><td>链式 <code>pipe</code> 太长，难调试</td><td>拆分流逻辑，用命名函数封装操作符</td></tr></tbody></table><hr><h2 id="🛡️-四、检测内存泄漏（RxJS-特别常见）"><a href="#🛡️-四、检测内存泄漏（RxJS-特别常见）" class="headerlink" title="🛡️ 四、检测内存泄漏（RxJS 特别常见）"></a>🛡️ 四、检测内存泄漏（RxJS 特别常见）</h2><h3 id="✅-使用-Chrome-DevTools-→-Memory-快照"><a href="#✅-使用-Chrome-DevTools-→-Memory-快照" class="headerlink" title="✅ 使用 Chrome DevTools → Memory 快照"></a>✅ 使用 Chrome DevTools → Memory 快照</h3><ol><li>打开 Memory 面板</li><li>创建快照 → 触发交互 → 再拍快照</li><li>查看是否有组件或流对象未被释放</li><li>使用 “Retainers” 找出引用链是否是未清理的 Subscription</li></ol><hr><h2 id="🚀-示例：RxJS-内存泄漏典型场景"><a href="#🚀-示例：RxJS-内存泄漏典型场景" class="headerlink" title="🚀 示例：RxJS 内存泄漏典型场景"></a>🚀 示例：RxJS 内存泄漏典型场景</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;...&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">MyComponent</span> <span class="keyword">implements</span> <span class="title class_">OnInit</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> destroy$ = <span class="keyword">new</span> <span class="title class_">Subject</span>&lt;<span class="built_in">void</span>&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="title function_">ngOnInit</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">service</span>.<span class="title function_">getData</span>().<span class="title function_">pipe</span>(</span><br><span class="line">      <span class="title function_">takeUntil</span>(<span class="variable language_">this</span>.<span class="property">destroy$</span>)</span><br><span class="line">    ).<span class="title function_">subscribe</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">ngOnDestroy</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">destroy$</span>.<span class="title function_">next</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">destroy$</span>.<span class="title function_">complete</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="📘-五、实用工具推荐"><a href="#📘-五、实用工具推荐" class="headerlink" title="📘 五、实用工具推荐"></a>📘 五、实用工具推荐</h2><table><thead><tr><th>工具</th><th>作用</th></tr></thead><tbody><tr><td><code>rxjs-spy</code></td><td>观察流的生命周期，自动打印</td></tr><tr><td><code>ng-profiler</code>（Node）</td><td>分析 Angular 渲染调用栈</td></tr><tr><td><code>Zone.js Profiler</code></td><td>分析异步任务（定时器、HTTP）调度</td></tr></tbody></table><hr><h2 id="✅-总结流程图"><a href="#✅-总结流程图" class="headerlink" title="✅ 总结流程图"></a>✅ 总结流程图</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">用户操作 → DevTools Record</span><br><span class="line">              ↓</span><br><span class="line">      Angular DevTools 检查变更次数</span><br><span class="line">              ↓</span><br><span class="line">   RxJS tap/debug 检查流频率和订阅</span><br><span class="line">              ↓</span><br><span class="line">       Memory Snapshot 排查泄漏</span><br><span class="line">              ↓</span><br><span class="line">       优化：取消订阅 + 节流 + 合并流</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      
        <tags>
            
            <tag> angular </tag>
            
            <tag> Service Worker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js v8内存空间</title>
      <link href="/2025/07/03/front_skills/js/js%20v8%E5%86%85%E5%AD%98%E7%A9%BA%E9%97%B4/"/>
      <url>/2025/07/03/front_skills/js/js%20v8%E5%86%85%E5%AD%98%E7%A9%BA%E9%97%B4/</url>
      
        <content type="html"><![CDATA[<h1 id="v8内存空间"><a href="#v8内存空间" class="headerlink" title="v8内存空间"></a>v8内存空间</h1><p>在 JavaScript 的 V8 引擎中（如 Chrome、Node.js 所使用的引擎），<strong>内存空间</strong>管理是高性能运行的关键之一。<br> V8 将内存划分为多个不同的空间（space），每个空间用于不同类型的数据存储和垃圾回收策略。</p><hr><h2 id="V8-的主要内存空间结构"><a href="#V8-的主要内存空间结构" class="headerlink" title="V8 的主要内存空间结构"></a>V8 的主要内存空间结构</h2><p>V8 将内存分为两个大类：</p><ul><li><strong>堆内存（Heap Space）</strong>：用于存储 JavaScript 对象。</li><li><strong>非堆内存（Non-Heap Space）</strong>：如代码空间、句柄表、内部对象等。</li></ul><p>下面是主要的堆内存空间：</p><h3 id="1-新生代（New-Space）"><a href="#1-新生代（New-Space）" class="headerlink" title="1. 新生代（New Space）"></a>1. <strong>新生代（New Space）</strong></h3><ul><li>存放短生命周期的对象。</li><li>非常小，通常几 MB。</li><li>分为两个半空间（semispace）：<code>from</code> 和 <code>to</code>。</li><li>使用 <strong>Scavenge（复制）算法</strong> 进行垃圾回收：从 from 复制活跃对象到 to，交换空间。</li></ul><h3 id="2-老生代（Old-Space）"><a href="#2-老生代（Old-Space）" class="headerlink" title="2. 老生代（Old Space）"></a>2. <strong>老生代（Old Space）</strong></h3><ul><li><p>存放生命周期较长的对象（从新生代晋升）。</p></li><li><p>内存更大。</p></li><li><p>使用 <strong>标记-清除、标记-整理和增量压缩算法</strong>。</p></li><li><p>分为两部分：</p><ul><li><strong>Old Pointer Space</strong>：包含指向其他对象的对象。</li><li><strong>Old Data Space</strong>：只包含没有指针的数据（如字符串、数字数组）。</li></ul></li></ul><h3 id="3-大对象空间（Large-Object-Space-LOS）"><a href="#3-大对象空间（Large-Object-Space-LOS）" class="headerlink" title="3. 大对象空间（Large Object Space &#x2F; LOS）"></a>3. <strong>大对象空间（Large Object Space &#x2F; LOS）</strong></h3><ul><li>用于分配大于特定阈值的对象（如大型数组）。</li><li>不复制，只做标记清除，避免复制的成本。</li></ul><hr><h2 id="🧩-其他特殊空间（部分属于非堆内存）"><a href="#🧩-其他特殊空间（部分属于非堆内存）" class="headerlink" title="🧩 其他特殊空间（部分属于非堆内存）"></a>🧩 其他特殊空间（部分属于非堆内存）</h2><h3 id="4-代码空间（Code-Space）"><a href="#4-代码空间（Code-Space）" class="headerlink" title="4. 代码空间（Code Space）"></a>4. <strong>代码空间（Code Space）</strong></h3><ul><li>存放编译后的机器码（函数体、字节码）。</li><li>需要可执行权限，结构安全要求高。</li></ul><h3 id="5-Map-Space"><a href="#5-Map-Space" class="headerlink" title="5. Map Space"></a>5. <strong>Map Space</strong></h3><ul><li>存储对象的“形状描述”（hidden class、对象结构描述）。</li></ul><h3 id="6-Cell-Property-Cell-Space"><a href="#6-Cell-Property-Cell-Space" class="headerlink" title="6. Cell&#x2F;Property Cell Space"></a>6. <strong>Cell&#x2F;Property Cell Space</strong></h3><ul><li>用于存储全局变量的引用值（尤其是不可变的）。</li></ul><h3 id="7-Read-Only-Space"><a href="#7-Read-Only-Space" class="headerlink" title="7. Read-Only Space"></a>7. <strong>Read-Only Space</strong></h3><ul><li>存储不可变对象，如共享常量。</li><li>新增于较新版本的 V8，优化 GC。</li></ul><hr><h2 id="🔧-常用内存限制参数（Node-js）"><a href="#🔧-常用内存限制参数（Node-js）" class="headerlink" title="🔧 常用内存限制参数（Node.js）"></a>🔧 常用内存限制参数（Node.js）</h2><p>在 Node.js 中，你可以通过命令行参数设置内存大小，例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node --max-old-space-size=4096 app.js</span><br></pre></td></tr></table></figure><ul><li><p><code>--max-old-space-size</code>：设置老生代最大内存（单位：MB）。</p></li><li><p>默认最大内存约为：</p><ul><li>32 位系统：~700 MB</li><li>64 位系统：<del>1400 MB</del>2048 MB（V8 版本不同）</li></ul></li></ul><hr><h2 id="🧹-垃圾回收与空间迁移示意图"><a href="#🧹-垃圾回收与空间迁移示意图" class="headerlink" title="🧹 垃圾回收与空间迁移示意图"></a>🧹 垃圾回收与空间迁移示意图</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+------------------+          +-------------------+</span><br><span class="line">|   New Space      |  GC后 -&gt; |   Old Space        |</span><br><span class="line">| (from + to 半区) |   晋升   | (活得久的对象)     |</span><br><span class="line">+------------------+          +-------------------+</span><br><span class="line">       ↓                                   ↓</span><br><span class="line">+------------------+          +-------------------+</span><br><span class="line">| Large Object Space|         |   Code Space       |</span><br><span class="line">| (&gt; threshold obj) |         | (函数字节码等)     |</span><br><span class="line">+------------------+          +-------------------+</span><br></pre></td></tr></table></figure><hr><h2 id="✅-总结一览表"><a href="#✅-总结一览表" class="headerlink" title="✅ 总结一览表"></a>✅ 总结一览表</h2><table><thead><tr><th>内存空间</th><th>作用</th><th>GC方式</th><th>特点</th></tr></thead><tbody><tr><td>New Space</td><td>短生命周期对象</td><td>Scavenge</td><td>快速复制回收</td></tr><tr><td>Old Space</td><td>长生命周期对象</td><td>Mark-Sweep &#x2F; Compact</td><td>空间大，回收慢</td></tr><tr><td>Large Object Space</td><td>大型对象</td><td>Mark-Sweep</td><td>不复制，直接分配</td></tr><tr><td>Code Space</td><td>存放编译后代码</td><td>特殊策略</td><td>可执行权限</td></tr><tr><td>Map Space</td><td>对象结构定义</td><td>特殊策略</td><td>小型优化区域</td></tr><tr><td>Read-Only Space</td><td>不可变数据</td><td>几乎不 GC</td><td>安全共享</td></tr></tbody></table><hr><p>在 JavaScript 中，内存空间的概念主要体现在<strong>变量的数据存储方式</strong>和<strong>垃圾回收机制</strong>，而底层实现（如 V8 引擎）则通过划分多个内存空间进行优化。以下是从 JS 开发者视角到 V8 实现层的全面解释：</p><hr><h2 id="🧠-一、JavaScript-开发者角度的内存空间"><a href="#🧠-一、JavaScript-开发者角度的内存空间" class="headerlink" title="🧠 一、JavaScript 开发者角度的内存空间"></a>🧠 一、JavaScript 开发者角度的内存空间</h2><h3 id="1-栈内存（Stack）"><a href="#1-栈内存（Stack）" class="headerlink" title="1. 栈内存（Stack）"></a>1. <strong>栈内存（Stack）</strong></h3><ul><li><p>用于存储<strong>原始类型的值</strong>（primitive types）：</p><ul><li><code>Number</code>, <code>String</code>, <code>Boolean</code>, <code>undefined</code>, <code>null</code>, <code>Symbol</code>, <code>BigInt</code></li></ul></li><li><p>还包括函数调用帧（call stack）、作用域上下文等。</p></li><li><p><strong>特点</strong>：</p><ul><li>内存分配快</li><li>生命周期短（函数调用完就清除）</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">10</span>; <span class="comment">// 存储在栈中</span></span><br></pre></td></tr></table></figure><hr><h3 id="2-堆内存（Heap）"><a href="#2-堆内存（Heap）" class="headerlink" title="2. 堆内存（Heap）"></a>2. <strong>堆内存（Heap）</strong></h3><ul><li><p>用于存储<strong>引用类型的值</strong>（对象、数组、函数等）。</p></li><li><p>数据实际存储在堆中，栈中保存一个引用地址。</p></li><li><p><strong>特点</strong>：</p><ul><li>内存分配慢</li><li>生命周期不定（取决于引用计数和 GC）</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">name</span>: <span class="string">&quot;JS&quot;</span> &#125;; <span class="comment">// 对象实际在堆中</span></span><br></pre></td></tr></table></figure><hr><h2 id="🧹-二、JavaScript-的内存管理机制"><a href="#🧹-二、JavaScript-的内存管理机制" class="headerlink" title="🧹 二、JavaScript 的内存管理机制"></a>🧹 二、JavaScript 的内存管理机制</h2><p>JS 具有<strong>自动垃圾回收机制（GC）</strong>，不需要手动释放内存，但仍需注意内存泄漏问题。</p><h3 id="常用-GC-策略（由引擎如-V8-执行）："><a href="#常用-GC-策略（由引擎如-V8-执行）：" class="headerlink" title="常用 GC 策略（由引擎如 V8 执行）："></a>常用 GC 策略（由引擎如 V8 执行）：</h3><ul><li><strong>标记-清除</strong>（Mark and Sweep）</li><li><strong>引用计数</strong>（有缺陷，现代引擎不用）</li><li><strong>增量收集 &#x2F; 并发收集 &#x2F; 分代 GC</strong></li></ul><hr><h2 id="🏗️-三、V8-引擎下的内存空间结构（进阶）"><a href="#🏗️-三、V8-引擎下的内存空间结构（进阶）" class="headerlink" title="🏗️ 三、V8 引擎下的内存空间结构（进阶）"></a>🏗️ 三、V8 引擎下的内存空间结构（进阶）</h2><p>这是 JS 引擎（如 Node.js 或 Chrome）层面更底层的内存划分：</p><table><thead><tr><th>空间名</th><th>用途</th><th>生命周期</th></tr></thead><tbody><tr><td>New Space</td><td>存短生命周期对象（年轻代）</td><td>几毫秒到秒</td></tr><tr><td>Old Space</td><td>存长生命周期对象（老年代）</td><td>长时间</td></tr><tr><td>Large Object Space</td><td>存大型对象</td><td>与页面一致</td></tr><tr><td>Code Space</td><td>存放 JS 编译后的机器码</td><td>稳定</td></tr><tr><td>Map Space</td><td>存对象结构</td><td>稳定</td></tr><tr><td>Read-Only Space</td><td>存不可变数据</td><td>非常稳定</td></tr></tbody></table><hr><h2 id="🔍-四、内存分配示意图（开发者视角）"><a href="#🔍-四、内存分配示意图（开发者视角）" class="headerlink" title="🔍 四、内存分配示意图（开发者视角）"></a>🔍 四、内存分配示意图（开发者视角）</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function demo() &#123;</span><br><span class="line">  let x = 42;                   // 栈</span><br><span class="line">  let y = &#123; name: &quot;V8&quot; &#125;;       // y: 栈存引用，堆中有对象</span><br><span class="line">  let z = [1, 2, 3];            // z: 栈存引用，堆中有数组</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="⚠️-五、常见内存问题"><a href="#⚠️-五、常见内存问题" class="headerlink" title="⚠️ 五、常见内存问题"></a>⚠️ 五、常见内存问题</h2><table><thead><tr><th>问题</th><th>描述</th></tr></thead><tbody><tr><td>内存泄漏</td><td>无用对象仍被引用，GC 无法释放</td></tr><tr><td>闭包持有无用变量</td><td>函数作用域引用了外部变量，长时间未释放</td></tr><tr><td>全局变量未释放</td><td>全局作用域变量生命周期太长</td></tr><tr><td>DOM 引用未清理</td><td>JS 持有 DOM 节点，导致页面卸载也不释放</td></tr></tbody></table><hr><h2 id="✅-六、内存优化建议"><a href="#✅-六、内存优化建议" class="headerlink" title="✅ 六、内存优化建议"></a>✅ 六、内存优化建议</h2><ol><li><p><strong>及时解除引用</strong>：如 DOM 元素、Timer、Closure</p></li><li><p><strong>使用弱引用（<code>WeakMap</code>, <code>WeakSet</code>）</strong></p></li><li><p><strong>避免全局变量</strong></p></li><li><p><strong>性能监控工具</strong>：</p><ul><li>Chrome DevTools → Memory 面板</li><li>Node.js → <code>--inspect</code>、heapdump</li></ul></li></ol><hr>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 性能 </tag>
            
            <tag> 内存空间 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js 堆栈</title>
      <link href="/2025/07/03/front_skills/js/js%20%E5%A0%86%E6%A0%88/"/>
      <url>/2025/07/03/front_skills/js/js%20%E5%A0%86%E6%A0%88/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="🧠-一、为何要有-栈内存-和-非堆内存（包括代码空间、MapSpace-等）？"><a href="#🧠-一、为何要有-栈内存-和-非堆内存（包括代码空间、MapSpace-等）？" class="headerlink" title="🧠 一、为何要有 栈内存 和 非堆内存（包括代码空间、MapSpace 等）？"></a>🧠 一、为何要有 <strong>栈内存</strong> 和 <strong>非堆内存（包括代码空间、MapSpace 等）</strong>？</h2><h3 id="📌-1-栈内存-vs-堆内存：性能与功能的权衡"><a href="#📌-1-栈内存-vs-堆内存：性能与功能的权衡" class="headerlink" title="📌 1. 栈内存 vs 堆内存：性能与功能的权衡"></a>📌 1. 栈内存 vs 堆内存：性能与功能的权衡</h3><table><thead><tr><th>特性</th><th>栈内存（Stack）</th><th>堆内存（Heap）</th></tr></thead><tbody><tr><td>分配速度</td><td><strong>非常快（指针移动）</strong></td><td>相对较慢（需要查找空闲内存）</td></tr><tr><td>生命周期</td><td>函数调用期内（自动回收）</td><td>不确定（取决于引用和 GC）</td></tr><tr><td>存储类型</td><td>原始值、函数上下文、局部引用</td><td>对象、数组、闭包、函数体等复杂结构</td></tr><tr><td>大小限制</td><td><strong>较小</strong>（通常几十 KB ~ 几 MB）</td><td><strong>大得多</strong>（老生代最大可设 GB 级）</td></tr><tr><td>管理方式</td><td>由编译器&#x2F;运行时自动管理，<strong>顺序存取</strong></td><td>由垃圾回收器管理，<strong>非连续结构</strong></td></tr></tbody></table><p>👉 <strong>为什么需要栈？</strong></p><ul><li>快速响应函数调用（如递归、作用域压栈）</li><li>更节省内存，临时变量很快被释放</li></ul><p>👉 <strong>为什么需要堆？</strong></p><ul><li>存放动态分配和生命周期不确定的对象</li><li>如闭包对象、事件监听器、DOM 节点引用等</li></ul><hr><h3 id="📌-2-为什么还需要“非堆内存”空间（如-Code-Space、ReadOnly-Space）？"><a href="#📌-2-为什么还需要“非堆内存”空间（如-Code-Space、ReadOnly-Space）？" class="headerlink" title="📌 2. 为什么还需要“非堆内存”空间（如 Code Space、ReadOnly Space）？"></a>📌 2. 为什么还需要“非堆内存”空间（如 Code Space、ReadOnly Space）？</h3><p>V8 除了“普通堆”，还有很多<strong>特殊用途的内存区间</strong>：</p><table><thead><tr><th>空间名称</th><th>作用与意义</th></tr></thead><tbody><tr><td><strong>Code Space</strong></td><td>存储 JS 编译后的字节码 &#x2F; 机器码。为了<strong>性能优化和执行权限控制</strong>，需要特殊对待。</td></tr><tr><td><strong>Map Space</strong></td><td>存储对象的隐藏类（Hidden Class）结构，支持快速对象访问。</td></tr><tr><td><strong>ReadOnly Space</strong></td><td>存不可变结构，如 <code>NaN</code>, <code>Infinity</code>，<strong>多线程共享</strong>更安全。</td></tr><tr><td><strong>Large Object Space</strong></td><td>避免复制大对象，直接分配，提高效率。</td></tr></tbody></table><p>✅ 这些空间本质上是为了<strong>安全性、性能、内存利用率</strong>最大化设计的。</p><hr><h2 id="🛠️-二、Chrome-DevTools-→-Memory-面板使用技巧"><a href="#🛠️-二、Chrome-DevTools-→-Memory-面板使用技巧" class="headerlink" title="🛠️ 二、Chrome DevTools → Memory 面板使用技巧"></a>🛠️ 二、Chrome DevTools → Memory 面板使用技巧</h2><p>Chrome DevTools 提供了强大的内存分析功能，主要用于：</p><ul><li><strong>查找内存泄漏</strong></li><li><strong>分析对象生命周期</strong></li><li><strong>监控垃圾回收行为</strong></li></ul><hr><h3 id="📌-打开方式"><a href="#📌-打开方式" class="headerlink" title="📌 打开方式"></a>📌 打开方式</h3><ol><li>打开 DevTools（<code>F12</code> 或 <code>Ctrl + Shift + I</code>）</li><li>切换到 <strong>Memory</strong> 面板</li></ol><hr><h3 id="📌-三种快照工具的作用"><a href="#📌-三种快照工具的作用" class="headerlink" title="📌 三种快照工具的作用"></a>📌 三种快照工具的作用</h3><table><thead><tr><th>工具</th><th>功能</th></tr></thead><tbody><tr><td><strong>Heap snapshot</strong></td><td><strong>静态快照</strong>，显示某一时刻所有内存中的对象和引用关系</td></tr><tr><td><strong>Allocation instrumentation on timeline</strong></td><td><strong>记录分配过程</strong>，查看哪些对象持续存在，适合定位内存泄漏</td></tr><tr><td><strong>Allocation profiler</strong></td><td>显示内存分配的堆栈，帮助你理解<strong>哪些代码</strong>创建了对象</td></tr></tbody></table><hr><h3 id="🧪-使用技巧（经典排查流程）"><a href="#🧪-使用技巧（经典排查流程）" class="headerlink" title="🧪 使用技巧（经典排查流程）"></a>🧪 使用技巧（经典排查流程）</h3><h4 id="✅-1-分析内存泄漏（快照对比法）"><a href="#✅-1-分析内存泄漏（快照对比法）" class="headerlink" title="✅ 1. 分析内存泄漏（快照对比法）"></a>✅ 1. 分析内存泄漏（快照对比法）</h4><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">① 打开页面 → Snapshot1</span><br><span class="line">② 执行操作 → Snapshot2</span><br><span class="line">③ 再清理操作（如返回、解绑）→ Snapshot3</span><br></pre></td></tr></table></figure><ul><li>对比 Snapshot2 和 Snapshot3，看是否有对象未被回收</li><li>用 <strong>“Object retained by”</strong> 找出哪个对象引用了它</li></ul><h4 id="✅-2-查看-Detached-DOM-节点"><a href="#✅-2-查看-Detached-DOM-节点" class="headerlink" title="✅ 2. 查看 Detached DOM 节点"></a>✅ 2. 查看 Detached DOM 节点</h4><ul><li>搜索关键字：<code>Detached</code>，表示已脱离 DOM 树但仍在 JS 引用中的元素</li><li>这类对象非常容易导致内存泄漏（如事件未解绑）</li></ul><h4 id="✅-3-观察“retainers”（引用链）"><a href="#✅-3-观察“retainers”（引用链）" class="headerlink" title="✅ 3. 观察“retainers”（引用链）"></a>✅ 3. 观察“retainers”（引用链）</h4><ul><li>在某个对象上右键 → <code>Reveal in Summary</code></li><li>查看其被哪些对象引用</li><li>找到 GC 无法释放的根引用（通常是全局变量、闭包、缓存）</li></ul><h4 id="✅-4-使用-Timeline-模式分析增长"><a href="#✅-4-使用-Timeline-模式分析增长" class="headerlink" title="✅ 4. 使用 Timeline 模式分析增长"></a>✅ 4. 使用 Timeline 模式分析增长</h4><ul><li>点击 <code>Allocation instrumentation on timeline</code></li><li>执行交互操作</li><li>观察内存是否持续增长，是否 GC 无法回收</li></ul><hr><h3 id="📘-小技巧列表"><a href="#📘-小技巧列表" class="headerlink" title="📘 小技巧列表"></a>📘 小技巧列表</h3><table><thead><tr><th>技巧</th><th>说明</th></tr></thead><tbody><tr><td><code>window.leak = someObject</code></td><td>主动把对象挂到全局，帮助你调试和快照标记</td></tr><tr><td>分配对象时添加 className 或 custom ID</td><td>帮助在 heap snapshot 中识别</td></tr><tr><td>用 <code>console.profile()</code>&#x2F;<code>profileEnd()</code></td><td>结合 Performance 分析内存或执行瓶颈</td></tr><tr><td>开启 GC 日志（Node）</td><td><code>--trace-gc</code>、<code>--inspect</code> 等可用于服务端调试</td></tr></tbody></table><hr><h2 id="✅-总结"><a href="#✅-总结" class="headerlink" title="✅ 总结"></a>✅ 总结</h2><table><thead><tr><th>概念</th><th>作用</th></tr></thead><tbody><tr><td>栈内存</td><td>快速处理函数调用、临时变量，生命周期短，性能高</td></tr><tr><td>堆内存</td><td>动态分配复杂数据结构，对象生命周期受引用控制</td></tr><tr><td>非堆空间</td><td>存机器码、Map 结构、只读常量等，引擎层级优化需要</td></tr><tr><td>DevTools 技巧</td><td>快照比对 + Timeline 观察 + Retainer 链分析是三大绝招</td></tr></tbody></table><hr><p>是的，完全正确！在 JavaScript 中，<strong>栈</strong>不仅仅用于存储原始数据类型，还承担着非常核心的职责：<strong>管理函数的执行过程</strong>。我们来具体解释一下这句话：</p><hr><h2 id="✅-一、栈中包含的内容"><a href="#✅-一、栈中包含的内容" class="headerlink" title="✅ 一、栈中包含的内容"></a>✅ 一、栈中包含的内容</h2><p>在 JavaScript 中，所谓“栈”主要是指<strong>调用栈（Call Stack）</strong>，这是 JS 引擎（如 V8）在运行时用来追踪函数调用的结构。</p><h3 id="📦-调用栈中每一层都叫一个“执行上下文（Execution-Context）”，它包含："><a href="#📦-调用栈中每一层都叫一个“执行上下文（Execution-Context）”，它包含：" class="headerlink" title="📦 调用栈中每一层都叫一个“执行上下文（Execution Context）”，它包含："></a>📦 调用栈中每一层都叫一个“执行上下文（Execution Context）”，它包含：</h3><table><thead><tr><th>组成部分</th><th>说明</th></tr></thead><tbody><tr><td>函数参数</td><td>当前函数调用时传入的参数</td></tr><tr><td>局部变量</td><td>在函数内部声明的变量（<code>let</code>, <code>const</code>, <code>var</code>）</td></tr><tr><td><code>this</code> 绑定</td><td>当前执行环境的 <code>this</code> 值（根据调用方式不同而变化）</td></tr><tr><td>外部引用环境指针</td><td>指向当前上下文的外部作用域，用于作用域链（<code>[[Scope]]</code>）</td></tr><tr><td>函数调用状态</td><td>调用位置、是否暂停等状态信息</td></tr></tbody></table><blockquote><p>✅ 这些内容整体就是函数的“调用帧”（Call Frame），每当你调用一个函数，JS 引擎就把这个帧压到调用栈顶部。</p></blockquote><hr><h2 id="🔁-二、函数调用过程中的调用栈演化示例"><a href="#🔁-二、函数调用过程中的调用栈演化示例" class="headerlink" title="🔁 二、函数调用过程中的调用栈演化示例"></a>🔁 二、函数调用过程中的调用栈演化示例</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">10</span>;</span><br><span class="line">  <span class="title function_">bar</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">bar</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> b = <span class="number">20</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">foo</span>();</span><br></pre></td></tr></table></figure><h3 id="🧱-执行步骤与调用栈状态变化："><a href="#🧱-执行步骤与调用栈状态变化：" class="headerlink" title="🧱 执行步骤与调用栈状态变化："></a>🧱 执行步骤与调用栈状态变化：</h3><ol><li><p><strong>初始状态</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[Global Execution Context]   // 全局上下文入栈</span><br></pre></td></tr></table></figure></li><li><p><strong>调用 foo()</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[foo Execution Context]      // foo 调用帧压栈</span><br><span class="line">[Global Execution Context]</span><br></pre></td></tr></table></figure></li><li><p><strong>foo 中调用 bar()</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[bar Execution Context]      // bar 调用帧压栈</span><br><span class="line">[foo Execution Context]</span><br><span class="line">[Global Execution Context]</span><br></pre></td></tr></table></figure></li><li><p><strong>console.log 执行完毕，bar() 结束</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[foo Execution Context]      // bar 出栈</span><br><span class="line">[Global Execution Context]</span><br></pre></td></tr></table></figure></li><li><p><strong>foo() 结束</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[Global Execution Context]</span><br></pre></td></tr></table></figure></li><li><p><strong>脚本执行结束，栈清空</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[]</span><br></pre></td></tr></table></figure></li></ol><hr><h2 id="🎯-三、作用域链也依赖“执行上下文”栈结构"><a href="#🎯-三、作用域链也依赖“执行上下文”栈结构" class="headerlink" title="🎯 三、作用域链也依赖“执行上下文”栈结构"></a>🎯 三、作用域链也依赖“执行上下文”栈结构</h2><ul><li>每个执行上下文都有一个作用域链（scope chain）指针。</li><li>JS 在查找变量时，先在当前帧找，找不到就向“外层上下文”继续查找，直到全局。</li></ul><hr><h2 id="🧠-总结"><a href="#🧠-总结" class="headerlink" title="🧠 总结"></a>🧠 总结</h2><table><thead><tr><th>栈中内容</th><th>说明</th></tr></thead><tbody><tr><td>Call Stack（调用栈）</td><td>管理函数调用流程，每次调用函数就压栈，函数返回就出栈</td></tr><tr><td>执行上下文（Execution Context）</td><td>每个函数调用的“帧”，包含作用域、变量、参数、<code>this</code> 等</td></tr><tr><td>作用域链指针</td><td>每个上下文记录其外部上下文，构成作用域链</td></tr></tbody></table><hr><p>如果你想深入了解如<strong>闭包变量是如何在栈与堆之间共享的</strong>、<strong>递归调用导致的栈溢出原理</strong>、或<strong>如何用 DevTools 可视化这些调用栈</strong>，我可以给你具体例子或图解。需要吗？</p>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 性能 </tag>
            
            <tag> 内存空间 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Angular Service Worker</title>
      <link href="/2025/07/01/front_skills/angular/angular%20service%20worker/"/>
      <url>/2025/07/01/front_skills/angular/angular%20service%20worker/</url>
      
        <content type="html"><![CDATA[<h1 id="Angular-Service-Worker-使用指南"><a href="#Angular-Service-Worker-使用指南" class="headerlink" title="Angular Service Worker 使用指南"></a>Angular Service Worker 使用指南</h1><p>Angular 提供了内建的 Service Worker 支持，用于构建 PWA（渐进式 Web 应用），实现离线体验、缓存优化和更快的加载速度。</p><h2 id="📦-安装与配置"><a href="#📦-安装与配置" class="headerlink" title="📦 安装与配置"></a>📦 安装与配置</h2><h3 id="1-添加-Service-Worker-支持"><a href="#1-添加-Service-Worker-支持" class="headerlink" title="1. 添加 Service Worker 支持"></a>1. 添加 Service Worker 支持</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng add @angular/pwa</span><br></pre></td></tr></table></figure><p>此命令将自动：</p><ul><li>添加 <code>@angular/service-worker</code> 包</li><li>修改 <code>angular.json</code> 构建配置</li><li>创建 <code>ngsw-config.json</code> 配置文件</li><li>在 <code>index.html</code> 中添加必要的 meta 标签</li></ul><h3 id="2-生产环境构建"><a href="#2-生产环境构建" class="headerlink" title="2. 生产环境构建"></a>2. 生产环境构建</h3><p>Service Worker 仅在生产构建中启用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng build --prod</span><br></pre></td></tr></table></figure><p>构建后会在 <code>dist/</code> 目录生成以下文件：</p><ul><li><code>ngsw-worker.js</code>：Service Worker 主文件</li><li><code>ngsw.json</code>：缓存配置文件</li></ul><h3 id="3-注册-Service-Worker"><a href="#3-注册-Service-Worker" class="headerlink" title="3. 注册 Service Worker"></a>3. 注册 Service Worker</h3><p>在 <code>app.module.ts</code> 中自动添加：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ServiceWorkerModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/service-worker&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; environment &#125; <span class="keyword">from</span> <span class="string">&#x27;../environments/environment&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  <span class="attr">imports</span>: [</span><br><span class="line">    <span class="title class_">ServiceWorkerModule</span>.<span class="title function_">register</span>(<span class="string">&#x27;ngsw-worker.js&#x27;</span>, &#123;</span><br><span class="line">      <span class="attr">enabled</span>: environment.<span class="property">production</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppModule</span> &#123;&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="⚙️-配置文件：ngsw-config-json"><a href="#⚙️-配置文件：ngsw-config-json" class="headerlink" title="⚙️ 配置文件：ngsw-config.json"></a>⚙️ 配置文件：<code>ngsw-config.json</code></h2><p>用于控制缓存行为的核心文件，示例结构如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/index.html&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;assetGroups&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;app&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;installMode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;prefetch&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;resources&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;files&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">          <span class="string">&quot;/favicon.ico&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="string">&quot;/index.html&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="string">&quot;/*.css&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="string">&quot;/*.js&quot;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;assets&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;installMode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;lazy&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;updateMode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;prefetch&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;resources&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;files&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;/assets/**&quot;</span><span class="punctuation">,</span> <span class="string">&quot;/*.(png|jpg|svg)&quot;</span><span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dataGroups&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;api-freshness&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;urls&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;/api/**&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;cacheConfig&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;strategy&quot;</span><span class="punctuation">:</span> <span class="string">&quot;freshness&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;maxSize&quot;</span><span class="punctuation">:</span> <span class="number">100</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;maxAge&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1h&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;timeout&quot;</span><span class="punctuation">:</span> <span class="string">&quot;10s&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="属性解释"><a href="#属性解释" class="headerlink" title="属性解释"></a>属性解释</h3><ul><li><p><code>installMode: prefetch | lazy</code></p><ul><li><code>prefetch</code>: 安装时立即缓存</li><li><code>lazy</code>: 首次访问时才缓存</li></ul></li><li><p><code>updateMode</code>: 更新缓存的方式</p><ul><li><code>prefetch</code>: 后台下载新版本</li></ul></li><li><p><code>dataGroups</code>: 用于控制 API 响应缓存（支持 freshness &#x2F; performance 策略）</p></li></ul><hr><h2 id="🔁-更新检测与提示"><a href="#🔁-更新检测与提示" class="headerlink" title="🔁 更新检测与提示"></a>🔁 更新检测与提示</h2><p>Angular 不会自动刷新页面，需手动监听更新：</p><h3 id="示例：自动提示用户更新"><a href="#示例：自动提示用户更新" class="headerlink" title="示例：自动提示用户更新"></a>示例：自动提示用户更新</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> swUpdate: SwUpdate</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (swUpdate.<span class="property">isEnabled</span>) &#123;</span><br><span class="line">    swUpdate.<span class="property">available</span>.<span class="title function_">subscribe</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="title function_">confirm</span>(<span class="string">&#x27;新版本可用，是否刷新以更新？&#x27;</span>)) &#123;</span><br><span class="line">        <span class="variable language_">window</span>.<span class="property">location</span>.<span class="title function_">reload</span>();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="🧪-开发调试技巧"><a href="#🧪-开发调试技巧" class="headerlink" title="🧪 开发调试技巧"></a>🧪 开发调试技巧</h2><ul><li>使用 Chrome DevTools &gt; Application &gt; Service Workers 面板进行调试</li><li>本地需通过 HTTPS 或 <code>localhost</code> 运行</li><li>重新部署时务必更新文件哈希或构建资源，否则更新不会触发</li></ul><hr><h2 id="📚-参考资源"><a href="#📚-参考资源" class="headerlink" title="📚 参考资源"></a>📚 参考资源</h2><ul><li>官方文档: <a href="https://angular.io/guide/service-worker-intro">Angular Service Worker</a></li><li>PWA 规范: <a href="https://web.dev/progressive-web-apps/">https://web.dev/progressive-web-apps/</a></li></ul><hr><p> <strong>定制化的 <code>ngsw-config.json</code> 文件</strong>，包含：</p><ul><li>常见资源的缓存规则（如 CSS&#x2F;JS、图片、字体、assets）</li><li>对后端 API 的缓存策略（支持离线读取 + 更新）</li><li>更新策略（后台更新、新版本提醒）</li><li>性能与离线体验兼顾的配置</li></ul><hr><h2 id="✅-适用场景（你可以根据需要修改）："><a href="#✅-适用场景（你可以根据需要修改）：" class="headerlink" title="✅ 适用场景（你可以根据需要修改）："></a>✅ 适用场景（你可以根据需要修改）：</h2><ul><li>应用资源希望首次加载后离线可用</li><li>图片等静态资源懒加载缓存</li><li>API 使用 <code>freshness</code> 策略（优先网络，失败用缓存）</li><li>启动页&#x2F;首页等要尽快预加载</li><li>每次部署都更新版本（自动对比文件 hash）</li></ul><hr><h3 id="🧩-定制-ngsw-config-json："><a href="#🧩-定制-ngsw-config-json：" class="headerlink" title="🧩 定制 ngsw-config.json："></a>🧩 定制 <code>ngsw-config.json</code>：</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;$schema&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./node_modules/@angular/service-worker/config/schema.json&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/index.html&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;assetGroups&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;app-shell&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;installMode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;prefetch&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;updateMode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;prefetch&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;resources&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;files&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">          <span class="string">&quot;/favicon.ico&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="string">&quot;/index.html&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="string">&quot;/*.css&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="string">&quot;/*.js&quot;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;assets&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;installMode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;lazy&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;updateMode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;prefetch&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;resources&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;files&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">          <span class="string">&quot;/assets/**&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="string">&quot;/*.(png|jpg|jpeg|svg|webp|woff2|woff|ttf|eot)&quot;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dataGroups&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;api-data&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;urls&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;https://api.example.com/**&quot;</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;cacheConfig&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;strategy&quot;</span><span class="punctuation">:</span> <span class="string">&quot;freshness&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;maxSize&quot;</span><span class="punctuation">:</span> <span class="number">100</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;maxAge&quot;</span><span class="punctuation">:</span> <span class="string">&quot;6h&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;timeout&quot;</span><span class="punctuation">:</span> <span class="string">&quot;10s&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;fallback-api&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;urls&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;/assets/mock/**&quot;</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;cacheConfig&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;strategy&quot;</span><span class="punctuation">:</span> <span class="string">&quot;performance&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;maxSize&quot;</span><span class="punctuation">:</span> <span class="number">50</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;maxAge&quot;</span><span class="punctuation">:</span> <span class="string">&quot;12h&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><hr><h3 id="🔄-更新策略说明"><a href="#🔄-更新策略说明" class="headerlink" title="🔄 更新策略说明"></a>🔄 更新策略说明</h3><p>Angular 默认采用 <strong>版本对比 + hash 检查</strong> 方式更新静态资源：</p><ul><li>每次 <code>ng build --prod</code> 会生成新的哈希值</li><li>用户访问旧版本时，Service Worker 会在后台拉取新版本</li><li>可通过 <code>SwUpdate</code> 监听并提示用户刷新</li></ul><h4 id="示例代码（放在-AppComponent-或-CoreService）："><a href="#示例代码（放在-AppComponent-或-CoreService）：" class="headerlink" title="示例代码（放在 AppComponent 或 CoreService）："></a>示例代码（放在 <code>AppComponent</code> 或 CoreService）：</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">SwUpdate</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/service-worker&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> swUpdate: SwUpdate</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">swUpdate</span>.<span class="property">isEnabled</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">swUpdate</span>.<span class="property">versionUpdates</span>.<span class="title function_">subscribe</span>(<span class="function"><span class="params">evt</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (evt.<span class="property">type</span> === <span class="string">&#x27;VERSION_READY&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> update = <span class="title function_">confirm</span>(<span class="string">&#x27;检测到新版本，是否立即刷新？&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (update) &#123;</span><br><span class="line">          <span class="variable language_">window</span>.<span class="property">location</span>.<span class="title function_">reload</span>();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="⚙️-进阶优化建议"><a href="#⚙️-进阶优化建议" class="headerlink" title="⚙️ 进阶优化建议"></a>⚙️ 进阶优化建议</h2><table><thead><tr><th>内容</th><th>建议</th></tr></thead><tbody><tr><td>图片资源缓存</td><td>使用 <code>installMode: lazy</code> + <code>updateMode: prefetch</code></td></tr><tr><td>API 缓存策略</td><td><code>freshness</code> 更适合动态内容，失败时用缓存</td></tr><tr><td>字体等静态资源</td><td>长期缓存，<code>performance</code> 策略</td></tr><tr><td>缓存清理</td><td>设置 <code>maxSize</code> 和 <code>maxAge</code> 避免无限增长</td></tr><tr><td>多语言版本页面</td><td>每种语言单独配置为不同缓存组（可加路径匹配规则）</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> angular </tag>
            
            <tag> Service Worker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go为啥解决了现代编程难题？</title>
      <link href="/2025/06/26/backend_skills/go/go%20%E5%92%8C%E5%89%8D%E7%AB%AF%E4%B8%80%E8%B5%B7%E6%95%B4%E5%90%88/"/>
      <url>/2025/06/26/backend_skills/go/go%20%E5%92%8C%E5%89%8D%E7%AB%AF%E4%B8%80%E8%B5%B7%E6%95%B4%E5%90%88/</url>
      
        <content type="html"><![CDATA[<h2 id="Go为啥解决了现代编程难题？"><a href="#Go为啥解决了现代编程难题？" class="headerlink" title="Go为啥解决了现代编程难题？"></a>Go为啥解决了现代编程难题？</h2><h3 id="1-简单易学，减少认知负担"><a href="#1-简单易学，减少认知负担" class="headerlink" title="1. 简单易学，减少认知负担"></a>1. <strong>简单易学，减少认知负担</strong></h3><ul><li>Go语言设计非常简洁，去掉了很多复杂特性（比如继承、泛型（直到1.18才引入简易泛型）、宏、异常处理等）</li><li>语法简单，标准库丰富，易于上手，降低了开发门槛</li><li>这解决了团队成员多样化、开发效率不高的问题</li></ul><h3 id="2-并发模型（goroutine-channel）简洁高效"><a href="#2-并发模型（goroutine-channel）简洁高效" class="headerlink" title="2. 并发模型（goroutine + channel）简洁高效"></a>2. <strong>并发模型（goroutine + channel）简洁高效</strong></h3><ul><li>传统并发编程复杂，易死锁、资源竞争</li><li>Go内置轻量级协程 <code>goroutine</code>，几乎无创建开销，且调度器自动调度</li><li><code>channel</code> 提供了简单且安全的通信机制，避免手动锁管理</li><li>适合现代多核、多任务、分布式系统的高并发需求</li><li>解决了写高效并发代码的难题</li></ul><h3 id="3-编译速度快，部署方便"><a href="#3-编译速度快，部署方便" class="headerlink" title="3. 编译速度快，部署方便"></a>3. <strong>编译速度快，部署方便</strong></h3><ul><li>Go编译器非常快，极大提升了开发效率，支持快速迭代</li><li>生成的二进制文件是静态链接的单个可执行文件，依赖少，部署简单</li><li>跨平台支持好，能快速构建在不同系统运行的应用</li><li>适合微服务和云原生环境的快速发布与迭代</li></ul><h3 id="4-内存管理自动化"><a href="#4-内存管理自动化" class="headerlink" title="4. 内存管理自动化"></a>4. <strong>内存管理自动化</strong></h3><ul><li>Go内置了垃圾回收（GC），自动管理内存，减少内存泄漏和悬挂指针等错误</li><li>GC设计比较先进，延迟低，适合服务器应用</li><li>解决了手动管理内存的复杂性和安全隐患</li></ul><h3 id="5-丰富且实用的标准库"><a href="#5-丰富且实用的标准库" class="headerlink" title="5. 丰富且实用的标准库"></a>5. <strong>丰富且实用的标准库</strong></h3><ul><li>网络、加密、HTTP、JSON处理、并发控制等库丰富且高质量</li><li>减少了“造轮子”成本，加快开发速度</li><li>标准库统一，代码风格统一，易于维护</li></ul><h3 id="6-工具链和生态完善"><a href="#6-工具链和生态完善" class="headerlink" title="6. 工具链和生态完善"></a>6. <strong>工具链和生态完善</strong></h3><ul><li>内置格式化工具 <code>gofmt</code>，保证代码风格统一</li><li>内置测试框架 <code>go test</code>，简化单元测试</li><li>性能分析工具 <code>pprof</code>，方便性能优化</li><li>强大的模块化和依赖管理（Go Modules）</li><li>支持容器化、云原生应用</li></ul><h3 id="7-解决大规模软件开发中的工程痛点"><a href="#7-解决大规模软件开发中的工程痛点" class="headerlink" title="7. 解决大规模软件开发中的工程痛点"></a>7. <strong>解决大规模软件开发中的工程痛点</strong></h3><ul><li>支持代码重构和模块化，减少依赖混乱</li><li>静态类型语言保证类型安全，减少运行时错误</li><li>编译期发现错误，减少线上bug</li><li>易读、易维护，适合大型团队合作开发</li></ul><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><table><thead><tr><th>现代编程难题</th><th>Go如何解决</th></tr></thead><tbody><tr><td>并发复杂难管理</td><td>goroutine + channel 简单高效</td></tr><tr><td>语言复杂度高</td><td>简洁语法，减少认知负担</td></tr><tr><td>部署和环境依赖繁琐</td><td>单文件静态编译，跨平台支持</td></tr><tr><td>内存管理难题</td><td>自动垃圾回收，降低内存错误风险</td></tr><tr><td>开发效率低</td><td>快速编译，丰富标准库，工具链支持</td></tr><tr><td>团队代码风格不统一</td><td>gofmt 强制统一代码风格</td></tr><tr><td>大规模软件维护难</td><td>静态类型、安全且易维护</td></tr></tbody></table><h2 id="Go-静态类型却能快速编译的原因"><a href="#Go-静态类型却能快速编译的原因" class="headerlink" title="Go 静态类型却能快速编译的原因"></a>Go 静态类型却能快速编译的原因</h2><h3 id="1-语言设计简洁、特性少，编译复杂度低"><a href="#1-语言设计简洁、特性少，编译复杂度低" class="headerlink" title="1. 语言设计简洁、特性少，编译复杂度低"></a>1. <strong>语言设计简洁、特性少，编译复杂度低</strong></h3><ul><li>Go 设计目标之一就是<strong>极简主义</strong>，避免C++、Java那种复杂的语言特性（比如复杂的泛型、宏、模板元编程、多继承等）</li><li>语言本身语法和类型系统简单，减少编译时的依赖分析和复杂推导，编译器工作量少</li><li>例如，没有头文件（header），也不需要处理宏展开，省了大量预处理时间</li></ul><h3 id="2-快速且高效的依赖管理"><a href="#2-快速且高效的依赖管理" class="headerlink" title="2. 快速且高效的依赖管理"></a>2. <strong>快速且高效的依赖管理</strong></h3><ul><li>Go 编译时只编译当前包和其直接依赖的包，不像有些语言可能会重复编译不必要的代码</li><li>依赖管理通过 <code>go.mod</code> + <code>pkg</code> 缓存机制，避免重复编译已编译的库</li><li>只导入实际用到的包，减少不必要的编译单元和链接工作</li></ul><h3 id="3-增量编译和包缓存"><a href="#3-增量编译和包缓存" class="headerlink" title="3. 增量编译和包缓存"></a>3. <strong>增量编译和包缓存</strong></h3><ul><li>Go 工具链会缓存已编译包的中间结果，二次编译时只编译改动的代码</li><li>这种“增量式”编译显著加快编译速度，特别是大型项目</li></ul><h3 id="4-单一的编译目标（静态编译）"><a href="#4-单一的编译目标（静态编译）" class="headerlink" title="4. 单一的编译目标（静态编译）"></a>4. <strong>单一的编译目标（静态编译）</strong></h3><ul><li>Go 生成的是单个静态链接的二进制，不依赖复杂的链接器或者运行时加载机制</li><li>静态编译减少了链接阶段的复杂度和时间</li></ul><h3 id="5-编译器实现高效"><a href="#5-编译器实现高效" class="headerlink" title="5. 编译器实现高效"></a>5. <strong>编译器实现高效</strong></h3><ul><li>Go 官方编译器（<code>gc</code>）经过多年优化，生成代码快速且合理，编译流程简单直接</li><li>编译器设计避免不必要的内存分配和复杂分析，节省了CPU资源</li></ul><h3 id="6-并行编译"><a href="#6-并行编译" class="headerlink" title="6. 并行编译"></a>6. <strong>并行编译</strong></h3><ul><li>Go 的编译器支持多核并行编译多个包，加速整体构建时间</li><li>充分利用现代多核CPU资源</li></ul><hr><h2 id="你提到的“只导入需要的”——也是关键点"><a href="#你提到的“只导入需要的”——也是关键点" class="headerlink" title="你提到的“只导入需要的”——也是关键点"></a>你提到的“只导入需要的”——也是关键点</h2><ul><li>Go 的包管理和导入机制让编译器只分析和编译实际用到的包</li><li>导入时只带入必要的代码，避免膨胀编译单元</li><li>这也是Go快速编译的重要原因之一</li></ul><hr><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><table><thead><tr><th>原因</th><th>解释</th></tr></thead><tbody><tr><td>语言简洁</td><td>少特性，减少编译复杂度</td></tr><tr><td>依赖管理高效</td><td>只编译用到的包，避免重复</td></tr><tr><td>包缓存和增量编译</td><td>重用已编译产物，减少重复编译时间</td></tr><tr><td>静态链接</td><td>编译目标单一，链接简单</td></tr><tr><td>编译器优化</td><td>编译器自身设计高效，减少不必要开销</td></tr><tr><td>并行编译</td><td>多核并行加速编译过程</td></tr></tbody></table><p>–</p><h2 id="Go-对前端开发者的优势与价值"><a href="#Go-对前端开发者的优势与价值" class="headerlink" title="Go 对前端开发者的优势与价值"></a>Go 对前端开发者的优势与价值</h2><h3 id="1-构建高性能后端服务，提升前端体验"><a href="#1-构建高性能后端服务，提升前端体验" class="headerlink" title="1. 构建高性能后端服务，提升前端体验"></a>1. <strong>构建高性能后端服务，提升前端体验</strong></h3><ul><li>Go 并发能力强，能处理大量请求，保证前端接口响应快、稳定</li><li>快速编译和部署，后端迭代快，前端能更快获得接口更新</li><li>稳定性和高性能减少接口卡顿，提升用户体验</li></ul><h3 id="2-构建微服务架构，支持复杂前端应用"><a href="#2-构建微服务架构，支持复杂前端应用" class="headerlink" title="2. 构建微服务架构，支持复杂前端应用"></a>2. <strong>构建微服务架构，支持复杂前端应用</strong></h3><ul><li>现代前端往往依赖大量微服务</li><li>Go 适合写轻量且高效的微服务，便于拆分后端功能</li><li>前端可以通过清晰稳定的API与多个服务协同工作，提高开发灵活性</li></ul><h3 id="3-生成WebAssembly-Wasm-模块，实现复杂计算任务"><a href="#3-生成WebAssembly-Wasm-模块，实现复杂计算任务" class="headerlink" title="3. 生成WebAssembly (Wasm)模块，实现复杂计算任务"></a>3. <strong>生成WebAssembly (Wasm)模块，实现复杂计算任务</strong></h3><ul><li>Go 可以编译成Wasm模块，前端可调用这些模块来完成CPU密集型任务，比如图像处理、加密计算、游戏逻辑等</li><li>相比纯JavaScript，Wasm模块性能更高，用户体验更好</li><li>前端开发者可以利用Go写复杂逻辑，避免JS性能瓶颈</li></ul><h3 id="4-统一前后端技术栈，降低学习成本"><a href="#4-统一前后端技术栈，降低学习成本" class="headerlink" title="4. 统一前后端技术栈，降低学习成本"></a>4. <strong>统一前后端技术栈，降低学习成本</strong></h3><ul><li>对一些全栈开发者来说，掌握Go能同时负责后端接口和用Wasm支持前端复杂逻辑</li><li>统一语言可以减少跨团队沟通成本，提高协作效率</li></ul><h3 id="5-工具链和自动化支持改善前端项目管理"><a href="#5-工具链和自动化支持改善前端项目管理" class="headerlink" title="5. 工具链和自动化支持改善前端项目管理"></a>5. <strong>工具链和自动化支持改善前端项目管理</strong></h3><ul><li>Go的工具（如格式化、测试、依赖管理）思想能启发前端团队采用类似的自动化流程</li><li>现代前端项目越来越复杂，也需要规范代码风格、测试和性能分析，Go的工具链理念可以借鉴</li></ul><h3 id="6-适合构建前端辅助工具和服务"><a href="#6-适合构建前端辅助工具和服务" class="headerlink" title="6. 适合构建前端辅助工具和服务"></a>6. <strong>适合构建前端辅助工具和服务</strong></h3><ul><li>Go适合写CLI工具、构建静态资源服务器、代理、API网关等</li><li>这些工具直接服务于前端开发和部署工作，提升整体开发效率</li></ul><hr><h2 id="具体举例"><a href="#具体举例" class="headerlink" title="具体举例"></a>具体举例</h2><table><thead><tr><th>Go 优势</th><th>对前端的具体好处</th></tr></thead><tbody><tr><td>并发高效</td><td>后端接口响应快速，前端请求不卡顿</td></tr><tr><td>快速编译和部署</td><td>频繁更新后端接口，前端能同步迭代</td></tr><tr><td>支持Wasm编译</td><td>前端可用Wasm模块做复杂计算，减轻JS压力</td></tr><tr><td>简洁语法，易维护</td><td>团队协作中减少接口沟通和维护成本</td></tr><tr><td>丰富的标准库</td><td>构建辅助服务（如API代理、Mock服务器）更简单</td></tr><tr><td>统一语言栈</td><td>全栈开发者可用Go写后端和部分前端逻辑，减少切换成本</td></tr></tbody></table><hr><h2 id="你可能感兴趣的前端-Go方向"><a href="#你可能感兴趣的前端-Go方向" class="headerlink" title="你可能感兴趣的前端+Go方向"></a>你可能感兴趣的前端+Go方向</h2><ul><li><strong>Go + Wasm 实现前端复杂业务逻辑</strong></li><li><strong>用 Go 写高性能 API 服务，为SPA&#x2F;移动端提供稳定支持</strong></li><li><strong>用 Go 写前端构建工具、自动化脚本</strong></li><li><strong>结合Go和Node.js，打造多语言微服务支持的前端平台</strong></li></ul><hr><h2 id="🔍-并发（Concurrency）-vs-并行（Parallelism）"><a href="#🔍-并发（Concurrency）-vs-并行（Parallelism）" class="headerlink" title="🔍 并发（Concurrency） vs 并行（Parallelism）"></a>🔍 并发（Concurrency） vs 并行（Parallelism）</h2><table><thead><tr><th>概念</th><th>并发（Concurrency）</th><th>并行（Parallelism）</th></tr></thead><tbody><tr><td>定义</td><td>“<strong>同时处理多个任务</strong>”的能力（逻辑上的）</td><td>“<strong>真正同时运行多个任务</strong>”的能力（物理上的）</td></tr><tr><td>本质</td><td>多任务交替执行（快到像同时）</td><td>多核处理器<strong>同时运行多个任务</strong></td></tr><tr><td>是否真同时</td><td>❌ 不是（在单核上是轮换执行）</td><td>✅ 是（多核同时运行）</td></tr><tr><td>例子</td><td>服务员轮流为多桌客人点餐</td><td>多个服务员同时为不同桌子服务</td></tr><tr><td>前提</td><td>不一定需要多核；只要能“切换任务”</td><td>需要多个CPU核心或线程</td></tr><tr><td>Go中的体现</td><td>goroutine 切换任务（调度器控制）</td><td>多个 goroutine 被多个CPU核同时调度执行</td></tr><tr><td>编程目标</td><td>提高<strong>响应性</strong>，资源高效利用</td><td>提高<strong>吞吐量</strong>，任务完成更快</td></tr></tbody></table><hr><h2 id="🧠-谁“更真实”？哪个“更强”？"><a href="#🧠-谁“更真实”？哪个“更强”？" class="headerlink" title="🧠 谁“更真实”？哪个“更强”？"></a>🧠 谁“更真实”？哪个“更强”？</h2><h3 id="✅-两者都“是真的”"><a href="#✅-两者都“是真的”" class="headerlink" title="✅ 两者都“是真的”"></a>✅ 两者都“是真的”</h3><ul><li>并发和并行不是对立的，而是不同层级的概念，<strong>并发是一种程序结构，并行是一种执行方式</strong></li><li><strong>Go 语言主要是并发导向（goroutine），但可以并行运行（多核调度）</strong></li></ul><blockquote><p>一个并发程序，可以在单核 CPU 上运行（交替调度）<br>一个并行程序，必须在多核 CPU 上运行（真正同时）</p></blockquote><hr><h2 id="🧩-Go-是并发的，还是并行的？"><a href="#🧩-Go-是并发的，还是并行的？" class="headerlink" title="🧩 Go 是并发的，还是并行的？"></a>🧩 Go 是并发的，还是并行的？</h2><h3 id="✅-Go-是并发优先的语言，但支持并行"><a href="#✅-Go-是并发优先的语言，但支持并行" class="headerlink" title="✅ Go 是并发优先的语言，但支持并行"></a>✅ Go 是<strong>并发优先的语言</strong>，但支持并行</h3><ul><li><code>goroutine</code> 是语言级别的并发原语，十万级并发轻松管理</li><li>Go 的调度器（runtime）会根据可用 CPU 核心，<strong>将 goroutine 分发到多个内核并行运行</strong></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">runtime.GOMAXPROCS(n) <span class="comment">// 设置最多使用 n 个 CPU 核心</span></span><br></pre></td></tr></table></figure><p>所以你用 <code>go func() &#123;&#125;</code> 启动的是<strong>并发任务</strong>，但如果你的机器是多核，并且 <code>GOMAXPROCS &gt; 1</code>，就能得到 <strong>真正的并行运行效果</strong></p><hr><h2 id="⚖️-类比一图说明"><a href="#⚖️-类比一图说明" class="headerlink" title="⚖️ 类比一图说明"></a>⚖️ 类比一图说明</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">🧠 并发（逻辑多任务）：</span><br><span class="line">🧍‍♂️   🧍‍♀️   🧍‍♂️   🧍‍♀️</span><br><span class="line"> 👨‍🍳 服务员一个个交替处理任务（看起来在“同时”）</span><br><span class="line"></span><br><span class="line">⚙️ 并行（物理多任务）：</span><br><span class="line">🧍‍♂️    🧍‍♀️</span><br><span class="line">👨‍🍳👩‍🍳 两个服务员同时干活（实际同时）</span><br></pre></td></tr></table></figure><hr><h2 id="✅-总结一句话"><a href="#✅-总结一句话" class="headerlink" title="✅ 总结一句话"></a>✅ 总结一句话</h2><blockquote><p><strong>并发</strong>是任务的组织方式，<strong>并行</strong>是任务的执行方式。你可以“并发地编程”，但是否“并行地运行”，取决于CPU。</p></blockquote><hr>]]></content>
      
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go学习笔记一</title>
      <link href="/2025/06/25/backend_skills/go/go%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80/"/>
      <url>/2025/06/25/backend_skills/go/go%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<h1 id="go"><a href="#go" class="headerlink" title="go"></a>go</h1><h2 id="语言特点"><a href="#语言特点" class="headerlink" title="语言特点"></a>语言特点</h2><ul><li>全新的静态类型开发语言</li><li>具有自动垃圾回收、丰富的内置类型</li><li>函数多返回值、错误处理</li><li>匿名函数、闭包、并发编程</li><li>反射、defer、接口</li><li>简洁、更加安全、开源等特性</li><li>充分利用Cpu多核，运行速度媲美C、C++</li><li>内置<strong>运行时</strong>，支持基础、对象等，开发工具丰富</li><li>标准库完备，强大网络库，web服务开发容易，尤其适合服务器编程、网络编程、分布式编程，特别适合云计算领域</li><li>提供了海量并行的支持，适合游戏服务端的开发</li><li>另外，编译运行快 + 学习上手快，学习曲线并不陡峭</li></ul><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h3 id="go-支持的命令"><a href="#go-支持的命令" class="headerlink" title="go 支持的命令"></a>go 支持的命令</h3><ul><li>bug         : start a bug report</li><li>build       : compile packages and dependencies</li><li>clean       : remove object files and cached files</li><li>doc         : show documentation for package or symbol</li><li>env         : print Go environment information</li><li>fix         : update packages to use new APIs</li><li>fmt         : gofmt (reformat) package sources</li><li>generate    : generate Go files by processing source</li><li>get         : add dependencies to current module and install them</li><li>install     : compile and install packages and dependencies</li><li>list        : list packages or modules</li><li>mod         : module maintenance</li><li>run         : compile and run Go program</li><li>test        : test packages</li><li>tool        : run specified go tool</li><li>version     : print Go version</li><li>vet         : report likely mistakes in packages</li></ul><h3 id="一个go文件组成"><a href="#一个go文件组成" class="headerlink" title="一个go文件组成"></a>一个go文件组成</h3><ul><li>包声明<blockquote><p>开头定义包名，形成命名空间; 与文件名没有任何关系，两者可以不一致，也可以一致；</p></blockquote></li><li>引入包  </li><li>函数</li><li>变量</li><li>语句 &amp; 表达式</li><li>注释</li></ul><h3 id="go-vs-js"><a href="#go-vs-js" class="headerlink" title="go vs js"></a>go vs js</h3><table><thead><tr><th>特点</th><th>go</th><th>js</th></tr></thead><tbody><tr><td>书写</td><td>不需要；结尾</td><td>不需要;结尾</td></tr><tr><td>编译器</td><td>先编译在执行</td><td>解释性语言</td></tr><tr><td>标准</td><td>仅此一套</td><td>commonjs、amd、umd、es module</td></tr><tr><td>注释</td><td>支持 &#x2F;&#x2F;, &#x2F;** &#x2F;</td><td>支持 &#x2F;&#x2F;, &#x2F;**&#x2F;</td></tr><tr><td>字符串拼接</td><td>“a” + “b”</td><td>“a” + “b” or <code>$&#123;a&#125;</code></td></tr><tr><td>变量声明</td><td>var age int (直接跟在后面，不用 var age: int )</td><td>var age or let age or const age</td></tr><tr><td>数据类型</td><td>数据： int，float32, float64,支持complex64,complex128,还有其他无符号整数</td><td>number</td></tr></tbody></table><h3 id="go-默认值"><a href="#go-默认值" class="headerlink" title="go 默认值"></a>go 默认值</h3><ul><li>数值类型（包括complex64&#x2F;128）为 0</li><li>布尔类型为 false</li><li>字符串为 “”（空字符串）</li></ul><blockquote><p>以下几种类型为 nil：<br>var a *int<br>var a []int<br>var a map[string] int<br>var a chan int<br>var a func(string) int<br>var a error &#x2F;&#x2F; error 是接口 </p></blockquote><h2 id="🧱-什么是-Go-的“单一编译目标”和“静态编译”？"><a href="#🧱-什么是-Go-的“单一编译目标”和“静态编译”？" class="headerlink" title="🧱 什么是 Go 的“单一编译目标”和“静态编译”？"></a>🧱 什么是 Go 的“单一编译目标”和“静态编译”？</h2><h3 id="✅-单一编译目标"><a href="#✅-单一编译目标" class="headerlink" title="✅ 单一编译目标"></a>✅ 单一编译目标</h3><ul><li>Go 的编译器将源代码编译成<strong>一个独立、可直接执行的二进制文件</strong></li><li>这个文件 <strong>包含了所有依赖的库、运行时和元数据</strong></li><li>不需要运行时再动态链接共享库（.so 或 .dll）</li></ul><h3 id="✅-静态编译-vs-动态链接（对比理解）"><a href="#✅-静态编译-vs-动态链接（对比理解）" class="headerlink" title="✅ 静态编译 vs 动态链接（对比理解）"></a>✅ 静态编译 vs 动态链接（对比理解）</h3><table><thead><tr><th>特性</th><th>静态编译（Go 默认）</th><th>动态链接（如 C&#x2F;C++ 常见）</th></tr></thead><tbody><tr><td>运行时是否依赖外部库</td><td>❌ 不依赖</td><td>✅ 依赖操作系统中的动态库</td></tr><tr><td>启动速度</td><td>🚀 更快</td><td>🐢 启动前需要加载动态库</td></tr><tr><td>部署方便性</td><td>✅ 更方便，一键部署</td><td>❌ 部署需附带或依赖系统库版本</td></tr><tr><td>可移植性</td><td>✅ 极高（跨平台编译）</td><td>❌ 受限于目标平台环境</td></tr><tr><td>编译链接复杂度</td><td>⚡ 相对简单</td><td>❌ 复杂，链接器分析依赖树并处理符号表</td></tr><tr><td>二进制体积</td><td>📦 相对较大</td><td>🪶 小一些（库是外部加载）</td></tr></tbody></table><hr><h2 id="🎯-Go-为何因静态编译而“减少链接复杂度和时间”？"><a href="#🎯-Go-为何因静态编译而“减少链接复杂度和时间”？" class="headerlink" title="🎯 Go 为何因静态编译而“减少链接复杂度和时间”？"></a>🎯 Go 为何因静态编译而“减少链接复杂度和时间”？</h2><ol><li><p><strong>不需处理复杂的动态库依赖树</strong></p><ul><li>不用检查库是否存在、是否兼容、路径是否正确</li><li>Go 直接把所有内容静态打包进一个二进制中，跳过了动态链接器处理流程</li></ul></li><li><p><strong>链接阶段变成“拼装本地代码 + runtime”</strong></p><ul><li>不需要为每个库解决符号地址重定位（relocation）问题</li><li>Go 使用简化的内部链接器，速度快，分析简单</li></ul></li><li><p><strong>减少平台依赖性带来的额外工作</strong></p><ul><li>例如在 C++ 中，链接 OpenSSL、libcurl 之类的动态库很容易出错</li><li>Go 中 <code>import &quot;net/http&quot;</code> 你就能发请求，不需要手动链接系统库</li></ul></li><li><p><strong>跨平台构建一致</strong></p><ul><li>Go 的编译是可移植的：你在 Mac 上可以轻松生成 Linux 上能运行的可执行文件（通过设置 <code>GOOS</code> 和 <code>GOARCH</code>）</li><li>因为所有依赖都打包进去了，不会有“目标系统缺库”之类的部署问题</li></ul></li></ol><hr><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>Go 的静态编译策略不仅让部署变得<strong>极其简单可靠</strong>，还让编译器能在链接阶段执行<strong>最小依赖集</strong>的快速链接。<br>相比动态链接那种<strong>依赖多、符号多、平台差异大</strong>的模式，Go 在编译模型上做了极致的工程简化，因而即使是静态类型语言，也能拥有令人惊讶的编译速度。</p><h2 id="Docker-vs-GO"><a href="#Docker-vs-GO" class="headerlink" title="Docker vs GO"></a>Docker vs GO</h2><table><thead><tr><th>问题</th><th>答案</th></tr></thead><tbody><tr><td>Go 打包和 Docker 镜像打包区别？</td><td>Go 产出可执行文件，Docker 打包运行环境+依赖</td></tr><tr><td>两者是否冲突？</td><td>不冲突，实际开发中常组合使用</td></tr><tr><td>Docker 构建是否能复用文件？</td><td>✅ Docker 使用分层缓存机制，实现复用</td></tr><tr><td>Go 的静态编译是否有利于容器化？</td><td>✅ 非常适合，Go 产物无需依赖运行时库，镜像体积极小</td></tr></tbody></table><h2 id="❓Go-是否“像-Docker-一样支持分层构建”？"><a href="#❓Go-是否“像-Docker-一样支持分层构建”？" class="headerlink" title="❓Go 是否“像 Docker 一样支持分层构建”？"></a>❓Go 是否“像 Docker 一样支持分层构建”？</h2><h3 id="✅-答案是：本身不支持“分层编译”，但支持“模块缓存”和“构建缓存”，实现类似的复用效果"><a href="#✅-答案是：本身不支持“分层编译”，但支持“模块缓存”和“构建缓存”，实现类似的复用效果" class="headerlink" title="✅ 答案是：本身不支持“分层编译”，但支持“模块缓存”和“构建缓存”，实现类似的复用效果"></a>✅ 答案是：<strong>本身不支持“分层编译”，但支持“模块缓存”和“构建缓存”，实现类似的复用效果</strong></h3><p>虽然 Go 编译本身不是像 Docker 那样的“层级镜像系统”，但它提供了一些机制可以<strong>模拟出类似 Docker 分层的高效构建行为</strong>，特别是在模块化、多包编译、CI&#x2F;CD流水线中非常重要。</p><hr><h2 id="🧱-Go-构建中类似“分层”的机制"><a href="#🧱-Go-构建中类似“分层”的机制" class="headerlink" title="🧱 Go 构建中类似“分层”的机制"></a>🧱 Go 构建中类似“分层”的机制</h2><h3 id="1-Go-Modules-缓存机制（模块层复用）"><a href="#1-Go-Modules-缓存机制（模块层复用）" class="headerlink" title="1. Go Modules 缓存机制（模块层复用）"></a>1. <strong>Go Modules 缓存机制（模块层复用）</strong></h3><ul><li>使用 <code>go.mod</code> 和 <code>go.sum</code> 来管理依赖模块</li><li>每次运行 <code>go build</code> &#x2F; <code>go mod download</code>，模块会被下载到 <code>$GOPATH/pkg/mod</code> 或 <code>~/go/pkg/mod</code></li><li>如果依赖未变化，模块就不会重新下载或重新编译，直接复用已缓存的模块</li></ul><p>📦 <strong>相当于 Docker 的“基础镜像层”</strong></p><hr><h3 id="2-增量构建缓存（build-cache）"><a href="#2-增量构建缓存（build-cache）" class="headerlink" title="2. 增量构建缓存（build cache）"></a>2. <strong>增量构建缓存（build cache）</strong></h3><ul><li>Go 在构建过程中会将中间产物缓存到 <code>$GOCACHE</code>（默认 <code>~/.cache/go-build</code>）</li><li>当你修改少量代码或只改了某个包，Go 只重新编译受影响的包，其它模块会直接从缓存中复用</li><li>这种方式大大加快大型项目的编译速度</li></ul><p>📦 <strong>相当于 Docker 的“中间层缓存”</strong></p><hr><h3 id="3-包级别的独立构建单位"><a href="#3-包级别的独立构建单位" class="headerlink" title="3. 包级别的独立构建单位"></a>3. <strong>包级别的独立构建单位</strong></h3><ul><li>Go 每个包（<code>package</code>）都可以独立编译，它们之间形成依赖图（DAG）</li><li>当你改动某个包时，只有该包及其依赖它的上层包会重新编译，其它包保持不变</li><li><strong>这就是 Go 模拟“编译层”复用的关键机制</strong></li></ul><p>📦 <strong>相当于 Docker 每一层的构建指令</strong></p><hr><h2 id="🚀-如何让-Go-更像-Docker-分层一样高效？"><a href="#🚀-如何让-Go-更像-Docker-分层一样高效？" class="headerlink" title="🚀 如何让 Go 更像 Docker 分层一样高效？"></a>🚀 如何让 Go 更像 Docker 分层一样高效？</h2><table><thead><tr><th>技术实践</th><th>原理</th><th>目的</th></tr></thead><tbody><tr><td>固定 <code>go.mod</code> 顺序和内容</td><td>模块缓存不变则不会触发重新下载</td><td>加速依赖构建</td></tr><tr><td>结构清晰的多包划分</td><td>编译粒度细，复用率更高</td><td>提升构建速度、解耦</td></tr><tr><td>使用 <code>go build -o</code> 控制输出</td><td>精确构建目标，避免多余操作</td><td>减少无效编译</td></tr><tr><td>使用 <code>go install ./...</code></td><td>自动缓存已编译包</td><td>快速构建全项目</td></tr><tr><td>多阶段 Dockerfile 编译Go程序</td><td>将“构建”和“运行”解耦，复用构建阶段镜像</td><td>减少镜像体积，提升构建复用效率</td></tr></tbody></table><hr><h2 id="❌-Go-不具备的“Docker式分层”功能"><a href="#❌-Go-不具备的“Docker式分层”功能" class="headerlink" title="❌ Go 不具备的“Docker式分层”功能"></a>❌ Go 不具备的“Docker式分层”功能</h2><p>虽然 Go 有模块化和缓存机制，但它：</p><table><thead><tr><th>特点</th><th>Go 是否支持？</th><th>理由&#x2F;解释</th></tr></thead><tbody><tr><td>镜像层可视化管理</td><td>❌</td><td>Go 没有类似 <code>docker image history</code> 的构建层记录</td></tr><tr><td>可重用层共享仓库</td><td>❌</td><td>Docker 镜像层可上传到仓库，Go 构建缓存是本地的</td></tr><tr><td>内容寻址唯一性</td><td>❌</td><td>Docker 用 SHA256 内容地址标识层，Go 缓存相对透明</td></tr></tbody></table><hr><h2 id="✅-总结"><a href="#✅-总结" class="headerlink" title="✅ 总结"></a>✅ 总结</h2><table><thead><tr><th>对比维度</th><th>Docker 分层镜像</th><th>Go 的构建复用机制（“类分层”）</th></tr></thead><tbody><tr><td>是否真正分层</td><td>✅ 镜像层真实存在</td><td>❌ 编译产物不可分层，但可增量缓存</td></tr><tr><td>是否可复用</td><td>✅ 多个镜像可复用同一层</td><td>✅ 多次构建可复用模块、包、缓存</td></tr><tr><td>是否可上传&#x2F;分发</td><td>✅ 镜像层可推送到远程仓库</td><td>❌ Go 缓存是本地的，不可分发</td></tr><tr><td>可视化与调试工具</td><td>✅ 有 image history, layer diff 等工具</td><td>❌ 没有标准图形工具查看缓存内容</td></tr></tbody></table><hr><h2 id="一句话总结"><a href="#一句话总结" class="headerlink" title="一句话总结"></a>一句话总结</h2><blockquote><p><strong>Go 构建过程本身不是分层的，但它通过模块缓存、增量编译和包级编译单元，实现了类似 Docker 分层的高效复用机制</strong>。这使得 Go 项目即使规模庞大，也能保持极快的构建速度。</p></blockquote><hr>]]></content>
      
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go struct interface学习</title>
      <link href="/2025/06/15/backend_skills/go/go%20struct_interface/"/>
      <url>/2025/06/15/backend_skills/go/go%20struct_interface/</url>
      
        <content type="html"><![CDATA[<h2 id="Go-的类型检查特点"><a href="#Go-的类型检查特点" class="headerlink" title="Go 的类型检查特点"></a>Go 的类型检查特点</h2><h3 id="1-编译时类型检查"><a href="#1-编译时类型检查" class="headerlink" title="1. 编译时类型检查"></a>1. <strong>编译时类型检查</strong></h3><ul><li>Go 在编译阶段对变量、函数参数、返回值等都会进行严格的类型检查</li><li>类型不匹配的代码无法通过编译，能尽早发现潜在错误，避免运行时崩溃</li><li>例如，不能把 <code>int</code> 赋值给 <code>string</code>，编译器会报错</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a <span class="type">int</span> = <span class="number">10</span></span><br><span class="line"><span class="keyword">var</span> b <span class="type">string</span> = a  <span class="comment">// 编译错误，类型不匹配</span></span><br></pre></td></tr></table></figure><h3 id="2-静态类型和类型推断"><a href="#2-静态类型和类型推断" class="headerlink" title="2. 静态类型和类型推断"></a>2. <strong>静态类型和类型推断</strong></h3><ul><li>虽然Go是静态类型语言，但它支持类型推断，声明变量时可以用<code>:=</code>自动推断类型</li><li>但推断后的变量类型依然固定，不能动态改变</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x := <span class="number">42</span>    <span class="comment">// x 是 int 类型</span></span><br><span class="line">x = <span class="string">&quot;abc&quot;</span>  <span class="comment">// 编译错误，类型不匹配</span></span><br></pre></td></tr></table></figure><h3 id="3-接口类型的动态行为"><a href="#3-接口类型的动态行为" class="headerlink" title="3. 接口类型的动态行为"></a>3. <strong>接口类型的动态行为</strong></h3><ul><li>Go的接口类型支持多态（polymorphism），允许变量保存实现了某接口的任意类型的值</li><li>但接口本身有静态类型，编译时仍会检查接口的方法是否实现完整</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Reader <span class="keyword">interface</span> &#123;</span><br><span class="line">    Read(p []<span class="type">byte</span>) (n <span class="type">int</span>, err <span class="type">error</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">useReader</span><span class="params">(r Reader)</span></span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>传入的参数必须实现<code>Reader</code>接口，否则编译报错</li></ul><h3 id="4-无隐式类型转换"><a href="#4-无隐式类型转换" class="headerlink" title="4. 无隐式类型转换"></a>4. <strong>无隐式类型转换</strong></h3><ul><li>Go不支持隐式类型转换，所有类型转换必须显式写出</li><li>这样减少了因自动转换带来的类型错误</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i <span class="type">int</span> = <span class="number">42</span></span><br><span class="line"><span class="keyword">var</span> f <span class="type">float64</span> = <span class="type">float64</span>(i)  <span class="comment">// 需要显式转换</span></span><br></pre></td></tr></table></figure><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><table><thead><tr><th>特点</th><th>说明</th></tr></thead><tbody><tr><td>静态类型</td><td>变量类型在编译时确定</td></tr><tr><td>编译时类型检查</td><td>不匹配的类型会导致编译失败</td></tr><tr><td>类型推断</td><td>支持自动推断但类型固定</td></tr><tr><td>接口类型多态</td><td>支持接口实现的多态行为</td></tr><tr><td>显式类型转换</td><td>不支持隐式类型转换，必须明确转换</td></tr></tbody></table><hr><h2 id="Go-语言的一种设计哲学：值类型为主、指针类型为辅，灵活按需选择。"><a href="#Go-语言的一种设计哲学：值类型为主、指针类型为辅，灵活按需选择。" class="headerlink" title="Go 语言的一种设计哲学：值类型为主、指针类型为辅，灵活按需选择。"></a>Go 语言的一种设计哲学：值类型为主、指针类型为辅，灵活按需选择。</h2><p>这两种写法都合法，但用途略有不同，下面系统解释：</p><p>✅ 1. p2 :&#x3D; Person{Name: “Bob”} —— 值类型（struct 值）<br>创建的是一个 结构体的值拷贝。<br>数据存储在栈或堆上，由 Go 编译器决定。<br>适合：</p><p>小结构体<br>不需要修改结构体本身<br>安全性更高（不会影响原始值）<br>示例：<br>func printPerson(p Person) {<br>    p.Age &#x3D; 99    &#x2F;&#x2F; 不会影响原始值<br>}</p><p>✅ 2. p3 :&#x3D; &amp;Person{Name: “Carol”} —— 指针类型（struct 指针）<br>创建一个结构体值，然后返回它的地址（用 &amp; 取地址）<br>p3 是一个指向该结构体的指针<br>适合：</p><p>希望在函数或方法中 修改原始结构体字段<br>避免复制大型结构体<br>与接口（如 io.Writer）配合使用<br>示例：<br>func setAge(p *Person) {<br>    p.Age &#x3D; 100   &#x2F;&#x2F; 修改原始值<br>}</p><p>🧠 为什么 Go 要支持这两种方式？<br>Go 是一门偏系统级语言，但又力求简洁，它支持这两种方式的原因：</p><table><thead><tr><th>目的</th><th>解释</th></tr></thead><tbody><tr><td>控制内存和性能</td><td>值类型避免堆分配，效率高；大对象用指针避免复制</td></tr><tr><td>安全和直观语义</td><td>函数参数传值时更清晰，是否会被修改一目了然</td></tr><tr><td>灵活支持方法接收器</td><td>方法可绑定值类型或指针类型，让用户决定是否共享或复制</td></tr><tr><td>简化语法</td><td>即使是指针类型，Go 也允许你用 p.Name 直接访问字段（自动解引用）</td></tr></tbody></table><p>🔧 方法接收器的对比示意<br>type Person struct {<br>    Name string<br>    Age  int<br>}</p><p>func (p Person) SayHi() {         &#x2F;&#x2F; 值接收器，不会改结构体<br>    fmt.Println(“Hi”, p.Name)<br>}</p><p>func (p *Person) GrowUp() {       &#x2F;&#x2F; 指针接收器，修改原始数据<br>    p.Age++<br>}</p><p>✅ 总结对比</p><table><thead><tr><th>特性</th><th>值类型 Person{…}</th><th>指针类型 &amp;Person{…}</th></tr></thead><tbody><tr><td>拷贝行为</td><td>拷贝所有字段</td><td>只拷贝地址</td></tr><tr><td>方法接收器</td><td>调用值接收器方法</td><td>可以调用值 &amp; 指针接收器方法</td></tr><tr><td>可否修改原值</td><td>否（会复制）</td><td>是（直接修改原始值）</td></tr><tr><td>协作对象共享</td><td>不共享</td><td>可共享</td></tr></tbody></table><p>❓实战建议<br>✅ 默认用值类型（Person{}）<br>✅ 需要修改字段、共享实例，用指针（&amp;Person{}）<br>✅ 方法需要修改结构体时，用 *Person 方法接收器</p><h2 id="在-c-Counter-或-c-Counter-的这个“前缀位置”是否可以写其他类型？"><a href="#在-c-Counter-或-c-Counter-的这个“前缀位置”是否可以写其他类型？" class="headerlink" title="在 (c *Counter) 或 (c Counter) 的这个“前缀位置”是否可以写其他类型？"></a>在 (c *Counter) 或 (c Counter) 的这个“前缀位置”是否可以写其他类型？</h2><p>✅ 简洁回答：<br>在方法定义中，只能是某种类型的接收器，必须是：</p><p>自定义的 结构体类型<br>自定义的 非结构体类型（如自定义的 type MyInt int 这种）<br>它们的 指针类型<br>func (r ReceiverType) MethodName() {<br>    &#x2F;&#x2F; …<br>}</p><p>你不能在那里加任意的类型，比如内建类型（int, string），也不能加函数或别的东西。</p><p>🧠 正确的语法是：方法接收器 (receiver)<br>这是 Go 特有的机制，用来定义“方法属于哪个类型”。</p><p>例子：结构体接收器（值 &amp; 指针）<br>type Counter struct {<br>    Value int<br>}</p><p>&#x2F;&#x2F; 值接收器<br>func (c Counter) Print() {<br>    fmt.Println(“Value:”, c.Value)<br>}</p><p>&#x2F;&#x2F; 指针接收器<br>func (c *Counter) Increment() {<br>    c.Value++<br>}</p><p>例子：自定义非结构体类型也可以<br>type MyInt int</p><p>func (m MyInt) Double() MyInt {<br>    return m * 2<br>}</p><p>❌ 不允许的：内建类型、组合类型不能直接作为接收器<br>错误 ❌：<br>func (i int) Foo() {}        &#x2F;&#x2F; ❌ 不行，int 是内建类型</p><p>func ([3]int) Bar() {}       &#x2F;&#x2F; ❌ 不行，不能用数组或切片类型直接做接收器</p><p>正确 ✅：先定义类型<br>type MyArray [3]int</p><p>func (a MyArray) Bar() {}    &#x2F;&#x2F; ✅ 这样就可以</p><p>✅ 小结</p><table><thead><tr><th>能作为方法接收器的类型</th><th>示例</th></tr></thead><tbody><tr><td>自定义结构体类型</td><td>type Person struct {…}</td></tr><tr><td>自定义基本类型</td><td>type MyInt int</td></tr><tr><td>指针类型（自定义）</td><td>*Person, *MyInt</td></tr></tbody></table><h2 id="interface-是否可以作为方法的接收器？"><a href="#interface-是否可以作为方法的接收器？" class="headerlink" title="interface 是否可以作为方法的接收器？"></a>interface 是否可以作为方法的接收器？</h2><p>🧠 简洁回答：<br>❌ 接口类型（interface）不能作为方法接收器。<br>你不能写：</p><p>func (i interface{}) DoSomething() {}  &#x2F;&#x2F; ❌ 非法</p><p>Go 不允许你给 interface{} 或任意接口定义方法，因为接口本身是一个“行为集合”的抽象，不是行为的实现者。</p><p>✅ 接收器的本质是“实现者”<br>Go 中的方法是绑定在具体类型（结构体、自定义类型）上的。你可以理解为：</p><p>接口（interface）：是“契约”（定义你应该做什么）<br>结构体 &#x2F; 类型：是“实现者”（具体做什么）</p><p>✅ 正确做法：让类型实现接口，而不是给接口加方法<br>type Greeter interface {<br>    Greet()<br>}</p><p>type Person struct {<br>    Name string<br>}</p><p>&#x2F;&#x2F; 给 Person 实现 Greet 方法<br>func (p Person) Greet() {<br>    fmt.Println(“Hello,”, p.Name)<br>}</p><p>&#x2F;&#x2F; Now Person implements Greeter!</p><p>你可以将 Person 赋值给 Greeter 接口：</p><p>var g Greeter &#x3D; Person{Name: “Alice”}<br>g.Greet() &#x2F;&#x2F; ✅ 正确</p><p>🚫 为什么不能给 interface{} 添加方法？<br>因为接口表示一组方法的集合，它是为了“被实现”，不是为了去实现方法。</p><p>如果允许给接口定义方法，就变成了逻辑自相矛盾的结构（接口实现自己？）。</p><p>✅ 补充：你可以给“自定义类型的接口变量”赋值，但不能定义它的行为<br>type Any interface{}   &#x2F;&#x2F; 合法</p><p>func (a Any) Foo() {}  &#x2F;&#x2F; ❌ 错误！接口不能作为接收器</p><p>但你可以做的是：定义一个结构体，然后让它实现接口。</p><p>✅ 总结</p><table><thead><tr><th>能否作为接收器</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>✅ 可以</td><td>struct</td><td>推荐方式</td></tr><tr><td>✅ 可以</td><td>自定义类型</td><td>比如 type MyInt int</td></tr><tr><td>❌ 不可以</td><td>interface{}</td><td>接口不能定义行为，只能被实现</td></tr></tbody></table><h2 id="为什么-Go-的方法（比如-func-p-Person-Greet-）不是定义在结构体内部，而是“散落”在外面？"><a href="#为什么-Go-的方法（比如-func-p-Person-Greet-）不是定义在结构体内部，而是“散落”在外面？" class="headerlink" title="为什么 Go 的方法（比如 func (p Person) Greet()）不是定义在结构体内部，而是“散落”在外面？"></a>为什么 Go 的方法（比如 func (p Person) Greet()）不是定义在结构体内部，而是“散落”在外面？</h2><blockquote><p>这样不是看起来很乱、很分离吗？</p></blockquote><p>✅ 简短回答：Go 是有意这样设计的 —— 方法和类型分离定义，是为了：<br>保持语法简洁；<br>提升组合性（composition）；<br>避免 Java&#x2F;TypeScript 那种“面向对象强耦合”风格。</p><p>🔍 类比：Go vs 其他语言</p><table><thead><tr><th>语言</th><th>方法定义位置</th><th>示例</th></tr></thead><tbody><tr><td>Java&#x2F;C++</td><td>类或结构体内部</td><td>class Person { void greet() {…} }</td></tr><tr><td>TypeScript</td><td>类内部定义方法</td><td>class Person { greet() { … } }</td></tr><tr><td>Go</td><td>结构体外定义方法</td><td>func (p Person) Greet() { … }</td></tr></tbody></table><p>所以你会看到 Go 是函数式 + 面向接口风格混合，不像典型面向对象语言那样“方法必须藏在类里”。</p><p>🧠 为什么 Go 要这么设计？（设计哲学）</p><ol><li>✅ 简化语法，避免 Java&#x2F;TS 那种冗长类结构<br>你在 Go 里不需要写：</li></ol><p>type Person struct {<br>    Name string<br>    func Greet() {} &#x2F;&#x2F; ❌ 不支持嵌入函数<br>}</p><p>结构体就只是存数据，不掺杂行为。所有方法定义都在外面，这样逻辑更清晰，也更自由组合。</p><ol start="2"><li>✅ 支持跨文件分布式定义方法<br>Go 支持在不同文件中给同一个类型定义方法：</li></ol><p>&#x2F;&#x2F; person.go<br>type Person struct {<br>    Name string<br>}</p><p>&#x2F;&#x2F; greet.go<br>func (p Person) Greet() {<br>    fmt.Println(“Hello,”, p.Name)<br>}</p><p>你在同一个包里，可以把一个类型的方法“拆开定义”，很适合大项目模块化开发。</p><ol start="3"><li>✅ 鼓励组合（composition）而不是继承<br>Go 不支持类继承，而是通过组合 + 接口来组织代码。<br>把方法写在结构体外，更有利于将行为拆分、重用、解耦。</li></ol><p>💡 如果你觉得“结构体和方法写在一起更清晰”，该怎么做？<br>可以通过组织代码风格来保持整洁，例如：</p><p>&#x2F;&#x2F; person.go<br>type Person struct {<br>    Name string<br>    Age  int<br>}</p><p>func (p Person) Greet() {<br>    fmt.Println(“Hi,”, p.Name)<br>}</p><p>func (p *Person) Birthday() {<br>    p.Age++<br>}</p><p>这样“结构体 + 它的方法”写在一起，也很清晰。</p><p>✅ 总结</p><table><thead><tr><th>问题</th><th>回答</th></tr></thead><tbody><tr><td>为什么 Go 不把方法放进 struct？</td><td>Go 有意将数据和行为分离，保持灵活、简洁</td></tr><tr><td>是否可以组织得更整洁？</td><td>可以，方法定义靠近结构体写，或分在同一文件</td></tr></tbody></table><p>你说得完全正确。</p><p>在 Go 中，结构体字面量（struct literal）确实有两种写法：</p><hr><h2 id="✅-两种结构体字面量写法"><a href="#✅-两种结构体字面量写法" class="headerlink" title="✅ 两种结构体字面量写法"></a>✅ 两种结构体字面量写法</h2><h3 id="1-带字段名的字面量（key-value）✅-推荐"><a href="#1-带字段名的字面量（key-value）✅-推荐" class="headerlink" title="1. 带字段名的字面量（key-value）✅ 推荐"></a>1. <strong>带字段名的字面量（key-value）✅ 推荐</strong></h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name <span class="type">string</span></span><br><span class="line">    Age  <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">p := Person&#123;</span><br><span class="line">    Name: <span class="string">&quot;Alice&quot;</span>,</span><br><span class="line">    Age:  <span class="number">30</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>优点</strong>：字段顺序无关。</li><li><strong>清晰</strong>，可读性高，字段添加&#x2F;重构安全。</li><li><strong>推荐使用</strong>。</li></ul><hr><h3 id="2-不带字段名的字面量（值列表）⚠️-不推荐使用"><a href="#2-不带字段名的字面量（值列表）⚠️-不推荐使用" class="headerlink" title="2. 不带字段名的字面量（值列表）⚠️ 不推荐使用"></a>2. <strong>不带字段名的字面量（值列表）⚠️ 不推荐使用</strong></h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p := Person&#123;<span class="string">&quot;Alice&quot;</span>, <span class="number">30</span>&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>字段顺序必须严格一致</strong>（与结构体定义顺序完全一致）。</li><li>一旦结构体字段改动（增加、顺序变化），这段代码就会出错或行为错误。</li><li><strong>仅限结构体定义和初始化在同一文件中时可用</strong>（不能跨 package 使用）。</li></ul><hr><h2 id="🔒-Go-对匿名字段初始化的限制"><a href="#🔒-Go-对匿名字段初始化的限制" class="headerlink" title="🔒 Go 对匿名字段初始化的限制"></a>🔒 Go 对匿名字段初始化的限制</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> A <span class="keyword">struct</span> &#123;</span><br><span class="line">    <span class="type">string</span></span><br><span class="line">    <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a := A&#123;<span class="string">&quot;hello&quot;</span>, <span class="number">42</span>&#125; <span class="comment">// 合法，但强依赖顺序</span></span><br></pre></td></tr></table></figure><p>这种形式是允许的，但更容易出错。如果字段较多或含有嵌套结构体，不推荐使用。</p><hr><h2 id="📌-编译器限制：不允许跨-package-使用非键名初始化"><a href="#📌-编译器限制：不允许跨-package-使用非键名初始化" class="headerlink" title="📌 编译器限制：不允许跨 package 使用非键名初始化"></a>📌 编译器限制：不允许跨 package 使用非键名初始化</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假设在另一个 package 定义了：</span></span><br><span class="line"><span class="keyword">type</span> Point <span class="keyword">struct</span> &#123;</span><br><span class="line">    X <span class="type">int</span></span><br><span class="line">    Y <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在另一个包中使用时：</span></span><br><span class="line">p := somepkg.Point&#123;<span class="number">10</span>, <span class="number">20</span>&#125; <span class="comment">// ❌ 编译错误：必须使用键值形式</span></span><br></pre></td></tr></table></figure><p>Go 的设计初衷是：<strong>当结构体不在你控制范围时（如来自外部包），必须显式写字段名</strong>，防止顺序错误带来的潜在 bug。</p><hr><h2 id="✅-总结"><a href="#✅-总结" class="headerlink" title="✅ 总结"></a>✅ 总结</h2><table><thead><tr><th>写法</th><th>是否要求顺序一致</th><th>是否推荐</th><th>跨包使用</th></tr></thead><tbody><tr><td><code>Struct&#123;Field: val&#125;</code></td><td>❌ 否</td><td>✅ 推荐</td><td>✅ 支持</td></tr><tr><td><code>Struct&#123;val1, val2&#125;</code></td><td>✅ 是</td><td>⚠️ 不推荐</td><td>❌ 不支持</td></tr></tbody></table><p>如果你希望代码更健壮、易维护，建议<strong>始终使用 key-value 形式</strong>。</p>]]></content>
      
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> Rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从数据分析到大语言模型（LLM）</title>
      <link href="/2025/06/08/python_skills/python+ai%E6%A8%A1%E5%9E%8B%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/"/>
      <url>/2025/06/08/python_skills/python+ai%E6%A8%A1%E5%9E%8B%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/</url>
      
        <content type="html"><![CDATA[<h1 id="Python-学习路线：从数据分析到大语言模型（LLM）"><a href="#Python-学习路线：从数据分析到大语言模型（LLM）" class="headerlink" title="Python 学习路线：从数据分析到大语言模型（LLM）"></a>Python 学习路线：从数据分析到大语言模型（LLM）</h1><p>🎯 <strong>适用对象</strong><br>想用 Python 做 数据分析、AI、机器学习、甚至大语言模型开发 的开发者、学生或研究者。<br>不同阶段会推荐不同内容和工具，可按阶段逐步学习。</p><h2 id="🧭-学习路线总览"><a href="#🧭-学习路线总览" class="headerlink" title="🧭 学习路线总览"></a>🧭 学习路线总览</h2><h3 id="📘-阶段一：Python-基础（所有方向的必备）"><a href="#📘-阶段一：Python-基础（所有方向的必备）" class="headerlink" title="📘 阶段一：Python 基础（所有方向的必备）"></a>📘 阶段一：Python 基础（所有方向的必备）</h3><p>⏱ <strong>时间建议</strong>：1~2 周</p><p><strong>核心内容</strong>：</p><ul><li>基础语法、变量、条件语句、循环</li><li>函数、模块、面向对象</li><li>内置数据结构（列表、字典、集合、元组）</li><li>异常处理、文件操作</li><li>虚拟环境、pip 包管理</li></ul><p><strong>推荐资源</strong>：</p><ul><li><strong>书籍</strong>：《Python 编程：从入门到实践》</li><li><strong>在线</strong>：Python 官方教程、LeetCode 简单题练习</li><li><strong>工具</strong>：Jupyter Notebook 或 VS Code</li></ul><hr><h3 id="📊-阶段二：数据分析与科学计算（偏分析）"><a href="#📊-阶段二：数据分析与科学计算（偏分析）" class="headerlink" title="📊 阶段二：数据分析与科学计算（偏分析）"></a>📊 阶段二：数据分析与科学计算（偏分析）</h3><p>⏱ <strong>时间建议</strong>：3~4 周</p><p><strong>核心库</strong>：</p><table><thead><tr><th>库名</th><th>用途</th></tr></thead><tbody><tr><td><strong>NumPy</strong></td><td>数组与矩阵运算（科学计算核心）</td></tr><tr><td><strong>Pandas</strong></td><td>数据读取、清洗、操作，适合表格类数据</td></tr><tr><td><strong>Matplotlib &#x2F; Seaborn</strong></td><td>数据可视化</td></tr><tr><td><strong>SciPy</strong></td><td>科学运算（信号处理、积分、优化）</td></tr></tbody></table><p><strong>学习目标</strong>：</p><ul><li>读取 CSV &#x2F; Excel &#x2F; JSON 数据</li><li>数据清洗与预处理（缺失值、重复值）</li><li>数据透视表、分组聚合</li><li>画图：柱状图、折线图、热力图、直方图</li></ul><p><strong>实战项目</strong>：</p><ul><li>销售数据分析</li><li>股票趋势可视化</li><li>新冠疫情数据可视化</li></ul><hr><h3 id="🤖-阶段三：机器学习（ML）"><a href="#🤖-阶段三：机器学习（ML）" class="headerlink" title="🤖 阶段三：机器学习（ML）"></a>🤖 阶段三：机器学习（ML）</h3><p>⏱ <strong>时间建议</strong>：1~2 月</p><p><strong>核心库</strong>：</p><table><thead><tr><th>库名</th><th>用途</th></tr></thead><tbody><tr><td><strong>scikit-learn</strong></td><td>传统机器学习算法实现</td></tr><tr><td><strong>xgboost &#x2F; lightgbm</strong></td><td>提升树模型</td></tr><tr><td><strong>joblib</strong></td><td>模型保存与部署</td></tr></tbody></table><p><strong>学习内容</strong>：</p><ul><li>数据预处理（标准化、归一化、特征选择）</li><li>常见算法：线性回归、逻辑回归、KNN、决策树、SVM、KMeans、随机森林、XGBoost</li><li>交叉验证、网格搜索、模型评估指标（准确率、AUC、F1）</li></ul><p><strong>实战项目</strong>：</p><ul><li>信用卡欺诈识别</li><li>房价预测</li><li>客户流失建模</li></ul><hr><h3 id="🧠-阶段四：深度学习（DL）与神经网络"><a href="#🧠-阶段四：深度学习（DL）与神经网络" class="headerlink" title="🧠 阶段四：深度学习（DL）与神经网络"></a>🧠 阶段四：深度学习（DL）与神经网络</h3><p>⏱ <strong>时间建议</strong>：1~2 月</p><p><strong>核心框架</strong>：</p><table><thead><tr><th>框架</th><th>说明</th></tr></thead><tbody><tr><td><strong>TensorFlow &#x2F; Keras</strong></td><td>Google 出品，部署方便</td></tr><tr><td><strong>PyTorch</strong></td><td>更灵活，研究者和大模型爱用</td></tr><tr><td><strong>torchvision</strong></td><td>图像处理</td></tr><tr><td><strong>datasets、transformers</strong></td><td>LLM 和 NLP 项目核心工具</td></tr></tbody></table><p><strong>学习内容</strong>：</p><ul><li>人工神经网络基础（MLP）</li><li>CNN、RNN、LSTM、GRU、Transformer 架构</li><li>损失函数、优化器（SGD, Adam）、反向传播</li><li>训练技巧（BatchNorm、Dropout、Early Stopping）</li></ul><p><strong>实战项目</strong>：</p><ul><li>图像分类（猫狗大战）</li><li>情感分析（IMDB 影评）</li><li>数字识别（MNIST）</li></ul><hr><h3 id="🧠💬-阶段五：大语言模型（LLM）与-AIGC"><a href="#🧠💬-阶段五：大语言模型（LLM）与-AIGC" class="headerlink" title="🧠💬 阶段五：大语言模型（LLM）与 AIGC"></a>🧠💬 阶段五：大语言模型（LLM）与 AIGC</h3><p>⏱ <strong>时间建议</strong>：2~3 月（持续深入）</p><p><strong>核心工具&#x2F;框架</strong>：</p><table><thead><tr><th>工具&#x2F;库</th><th>作用</th></tr></thead><tbody><tr><td><strong>transformers（Hugging Face）</strong></td><td>加载 BERT、GPT、T5 等模型</td></tr><tr><td><strong>langchain &#x2F; llamaindex</strong></td><td>构建 RAG 系统（检索增强生成）</td></tr><tr><td><strong>peft, LoRA, QLoRA</strong></td><td>微调大型模型（如 LLAMA）</td></tr><tr><td><strong>Gradio, Streamlit</strong></td><td>搭建模型界面</td></tr><tr><td><strong>OpenAI API, ChatGPT API</strong></td><td>使用&#x2F;调用现成大模型</td></tr></tbody></table><p><strong>学习内容</strong>：</p><ul><li>Transformer 架构深入理解（Attention、位置编码等）</li><li>微调大语言模型（如 BERT、GPT-2）</li><li>RAG 系统搭建：检索 + 生成</li><li>多模态模型（图像+文本、语音+文本）</li><li>Prompt Engineering（提示词设计）</li></ul><p><strong>实战项目</strong>：</p><ul><li>问答机器人（RAG + ChatGPT）</li><li>文本摘要与翻译</li><li>私有知识库问答系统</li><li>LLM 微调与评估（如 LoRA + Alpaca）</li></ul><hr><h3 id="📦-工程实践补充"><a href="#📦-工程实践补充" class="headerlink" title="📦 工程实践补充"></a>📦 工程实践补充</h3><table><thead><tr><th>技能</th><th>内容</th></tr></thead><tbody><tr><td><strong>Git</strong></td><td>版本控制</td></tr><tr><td><strong>Docker</strong></td><td>模型部署</td></tr><tr><td><strong>Linux</strong></td><td>服务器操作与 GPU 管理</td></tr><tr><td><strong>REST API &#x2F; FastAPI</strong></td><td>接口封装与部署</td></tr><tr><td><strong>数据库（SQL &#x2F; MongoDB）</strong></td><td>数据持久化</td></tr><tr><td><strong>多进程 &#x2F; 分布式（Ray、Dask）</strong></td><td>大规模数据处理</td></tr></tbody></table><hr><h3 id="📚-进阶资源推荐"><a href="#📚-进阶资源推荐" class="headerlink" title="📚 进阶资源推荐"></a>📚 进阶资源推荐</h3><table><thead><tr><th>方向</th><th>推荐资源</th></tr></thead><tbody><tr><td><strong>数据分析</strong></td><td>《Python 数据科学手册》, DataCamp</td></tr><tr><td><strong>机器学习</strong></td><td>Andrew Ng 的 Machine Learning、fast.ai</td></tr><tr><td><strong>深度学习</strong></td><td>《Deep Learning》Goodfellow、CS231n</td></tr><tr><td><strong>LLM &#x2F; NLP</strong></td><td>huggingface.co 教程、Langchain 文档、OpenAI Cookbook</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go 与 Rust 在 IoT 中的定位与对比</title>
      <link href="/2025/06/06/backend_skills/go/go%20vs%20rust%E9%80%89%E9%A1%B9/"/>
      <url>/2025/06/06/backend_skills/go/go%20vs%20rust%E9%80%89%E9%A1%B9/</url>
      
        <content type="html"><![CDATA[<h2 id="Go-学习-技能路线-—-为前端-AI-自动化测试-边缘质检整合"><a href="#Go-学习-技能路线-—-为前端-AI-自动化测试-边缘质检整合" class="headerlink" title="Go 学习 &amp; 技能路线 — 为前端 AI 自动化测试 + 边缘质检整合"></a>Go 学习 &amp; 技能路线 — 为前端 AI 自动化测试 + 边缘质检整合</h2><h3 id="1️⃣-Go-基础与工程实践（必备）"><a href="#1️⃣-Go-基础与工程实践（必备）" class="headerlink" title="1️⃣ Go 基础与工程实践（必备）"></a>1️⃣ Go 基础与工程实践（必备）</h3><ul><li><strong>语法和特性</strong>：变量、函数、结构体、接口、错误处理、包管理（go mod）</li><li><strong>并发编程</strong>：goroutine、channel、select、sync 包，学会写高效安全的并发代码</li><li><strong>测试与调试</strong>：单元测试（testing）、benchmark，熟练调试（delve）</li><li><strong>目的</strong>：写出高性能、可维护的后台程序，处理异步任务、调用 AI 服务。</li></ul><h3 id="2️⃣-网络与服务开发"><a href="#2️⃣-网络与服务开发" class="headerlink" title="2️⃣ 网络与服务开发"></a>2️⃣ 网络与服务开发</h3><ul><li><strong>HTTP 服务框架</strong>：熟练使用 net&#x2F;http、Gin、Echo 等构建 RESTful API</li><li><strong>WebSocket</strong>：实时通信能力（边缘设备状态推送）</li><li><strong>RPC 框架</strong>：gRPC，适合微服务间高效通信</li><li><strong>API 设计与鉴权</strong>：JWT&#x2F;OAuth2等身份认证</li><li><strong>目的</strong>：实现边缘设备控制、前端测试调度、任务分发接口。</li></ul><h3 id="3️⃣-调用与管理-AI-测试脚本"><a href="#3️⃣-调用与管理-AI-测试脚本" class="headerlink" title="3️⃣ 调用与管理 AI 测试脚本"></a>3️⃣ 调用与管理 AI 测试脚本</h3><ul><li><strong>调用外部进程</strong>：os&#x2F;exec 执行 Playwright&#x2F;Puppeteer&#x2F;Cypress 脚本</li><li><strong>处理标准输入输出流</strong>：捕获测试结果、实时日志输出</li><li><strong>JSON 编解码</strong>：与 AI 服务或前端测试脚本交互的数据格式解析</li><li><strong>消息队列</strong>：Kafka、RabbitMQ，用于调度大量测试任务和边缘数据采集</li><li><strong>目的</strong>：编排自动化测试流程，实时处理测试结果。</li></ul><h3 id="4️⃣-数据库与缓存"><a href="#4️⃣-数据库与缓存" class="headerlink" title="4️⃣ 数据库与缓存"></a>4️⃣ 数据库与缓存</h3><ul><li><strong>关系型数据库</strong>：MySQL&#x2F;PostgreSQL，存储测试任务、质检数据</li><li><strong>NoSQL</strong>：Redis 用于缓存边缘状态、测试任务队列</li><li><strong>时间序列数据库（了解）</strong>：如 InfluxDB，存储边缘设备传感器数据或质检指标</li><li><strong>目的</strong>：持久化数据、快速查询、实时状态管理。</li></ul><h3 id="5️⃣-边缘计算-设备通信"><a href="#5️⃣-边缘计算-设备通信" class="headerlink" title="5️⃣ 边缘计算 &amp; 设备通信"></a>5️⃣ 边缘计算 &amp; 设备通信</h3><ul><li><strong>MQTT 或 WebSocket</strong>：边缘设备数据通信</li><li><strong>轻量级协议</strong>：CoAP（了解）</li><li><strong>边缘设备管理</strong>：设备上下线、远程配置</li><li><strong>分布式系统基础</strong>：服务发现（etcd&#x2F;consul）、配置中心</li><li><strong>目的</strong>：收集边缘数据，实现质检任务下发和反馈。</li></ul><h3 id="6️⃣-AI-与数据处理"><a href="#6️⃣-AI-与数据处理" class="headerlink" title="6️⃣ AI 与数据处理"></a>6️⃣ AI 与数据处理</h3><ul><li><strong>调用 AI 模型</strong>：通过 REST&#x2F;gRPC 调用 AI 图像识别、NLP模型接口</li><li><strong>数据预处理和分析</strong>：Go 语言中的数据处理（简单数据清洗、日志分析）</li><li><strong>异步任务调度</strong>：Go 协程池和工作队列管理异步 AI 任务</li><li><strong>目的</strong>：自动化分析测试结果，生成质检报告。</li></ul><h3 id="7️⃣-监控与日志"><a href="#7️⃣-监控与日志" class="headerlink" title="7️⃣ 监控与日志"></a>7️⃣ 监控与日志</h3><ul><li><strong>日志框架</strong>：Zap、Logrus，结构化日志，便于分析</li><li><strong>指标监控</strong>：Prometheus Client，用于收集系统和业务指标</li><li><strong>追踪</strong>：OpenTelemetry，链路追踪边缘设备和测试流程</li><li><strong>目的</strong>：保障系统稳定，快速定位问题。</li></ul><h3 id="8️⃣-部署与运维"><a href="#8️⃣-部署与运维" class="headerlink" title="8️⃣ 部署与运维"></a>8️⃣ 部署与运维</h3><ul><li><strong>Docker 容器化</strong>：多环境运行自动化测试和边缘质检服务</li><li><strong>Kubernetes 基础</strong>：服务编排与扩展，负载均衡</li><li><strong>CI&#x2F;CD 流程</strong>：自动化测试触发、部署</li></ul><h3 id="额外建议"><a href="#额外建议" class="headerlink" title="额外建议"></a>额外建议</h3><ul><li>理解前端测试框架（Playwright、Cypress）使用及脚本结构，方便整合和调度</li><li>学习边缘计算架构设计，了解如何高效收集处理分布式边缘数据</li><li>熟悉云服务（AWS IoT、Azure IoT Hub、阿里云物联网等），未来可能和边缘设备结合</li></ul><h3 id="典型学习路线示例（3个月规划）"><a href="#典型学习路线示例（3个月规划）" class="headerlink" title="典型学习路线示例（3个月规划）"></a>典型学习路线示例（3个月规划）</h3><table><thead><tr><th>周数</th><th>学习目标</th></tr></thead><tbody><tr><td>1-2</td><td>Go 基础语法、并发编程、单元测试</td></tr><tr><td>3-4</td><td>Go Web 服务开发（Gin + REST API）</td></tr><tr><td>5-6</td><td>调用前端测试脚本（Playwright 执行管理）</td></tr><tr><td>7-8</td><td>数据库 + Redis 设计，消息队列入门</td></tr><tr><td>9-10</td><td>边缘设备通信协议及 Go 实现，MQTT&#x2F;WebSocket</td></tr><tr><td>11-12</td><td>AI 模型调用和异步任务，日志监控部署</td></tr></tbody></table><hr><h2 id="Go-vs-Rust-在-IoT-中的定位与对比"><a href="#Go-vs-Rust-在-IoT-中的定位与对比" class="headerlink" title="Go vs Rust 在 IoT 中的定位与对比"></a>Go vs Rust 在 IoT 中的定位与对比</h2><p>在 IoT（物联网）前端智能设备领域，Go 与 Rust 各有优势，但 Rust 更适合底层嵌入式设备开发，应用更广；而 Go 更适用于边缘计算&#x2F;网关&#x2F;后端服务。</p><h3 id="🧠-总结一句话："><a href="#🧠-总结一句话：" class="headerlink" title="🧠 总结一句话："></a>🧠 总结一句话：</h3><p>Rust 在设备端、资源受限场景更常用；Go 更适合运行在智能设备背后的边缘节点或云网关。</p><h3 id="✅-对比表：Go-vs-Rust-在-IoT-中的定位"><a href="#✅-对比表：Go-vs-Rust-在-IoT-中的定位" class="headerlink" title="✅ 对比表：Go vs Rust 在 IoT 中的定位"></a>✅ 对比表：Go vs Rust 在 IoT 中的定位</h3><table><thead><tr><th>对比项</th><th>Go</th><th>Rust</th></tr></thead><tbody><tr><td>应用层级</td><td>边缘网关、管理服务、OTA、云侧应用</td><td>嵌入式固件、驱动、传感器控制、边缘执行引擎</td></tr><tr><td>编译体积</td><td>较大（几 MB 起跳）</td><td>可控制很小（KB ~ MB）</td></tr><tr><td>内存占用</td><td>高于 Rust，较低控制</td><td>极低，可运行在无操作系统（bare metal）设备</td></tr><tr><td>性能控制</td><td>中等偏高（GC 影响）</td><td>极强，近乎 C&#x2F;C++，无 GC</td></tr><tr><td>并发能力</td><td>极强（goroutine 原生）</td><td>高度安全（async&#x2F;.await，Send&#x2F;Sync 编译期检测）</td></tr><tr><td>安全性</td><td>安全但依赖约定（有 GC）</td><td>编译期内存安全，适用于硬实时设备</td></tr><tr><td>嵌入式生态支持</td><td>很弱（几乎无 microcontroller 级支持）</td><td>丰富（嵌入式生态完整：no_std、HAL、RTIC 等）</td></tr><tr><td>编译目标平台</td><td>通常是 Linux&#x2F;ARM64；交叉编译复杂</td><td>可精细编译到 ARM Cortex-M0&#x2F;M4、RISC-V 等</td></tr><tr><td>IoT 实际使用案例</td><td>Tailscale（网络），VerneMQ（MQTT），ThingsBoard</td><td>Espressif、Amazon、Siemens、Drone、Bosch 等厂商使用</td></tr></tbody></table><h3 id="📦-实际使用场景分析"><a href="#📦-实际使用场景分析" class="headerlink" title="📦 实际使用场景分析"></a>📦 实际使用场景分析</h3><h4 id="✅-Rust-更常见于："><a href="#✅-Rust-更常见于：" class="headerlink" title="✅ Rust 更常见于："></a>✅ Rust 更常见于：</h4><table><thead><tr><th>场景</th><th>说明</th></tr></thead><tbody><tr><td>MCU 固件开发</td><td>替代 C&#x2F;C++ 写嵌入式设备代码</td></tr><tr><td>传感器数据处理</td><td>实时采集、高速响应</td></tr><tr><td>BLE&#x2F;NFC&#x2F;ZigBee 控制</td><td>驱动级编程</td></tr><tr><td>智能设备边缘算法推理</td><td>模型剪枝 + 编译部署，执行边缘智能任务</td></tr><tr><td>安全关键设备</td><td>如智能门锁、车载控制器、工业 PLC 等</td></tr></tbody></table><h4 id="✅-Go-更常见于："><a href="#✅-Go-更常见于：" class="headerlink" title="✅ Go 更常见于："></a>✅ Go 更常见于：</h4><table><thead><tr><th>场景</th><th>说明</th></tr></thead><tbody><tr><td>边缘网关</td><td>连接 IoT 设备与云端，如 MQTT、CoAP、REST 网关</td></tr><tr><td>OTA 升级服务</td><td>管理固件版本、设备注册、日志上报等</td></tr><tr><td>云端设备管理后台</td><td>可视化界面、设备控制、数据中台服务</td></tr><tr><td>AI 边缘检测服务（可配合 TensorRT、Go + C）</td><td>对视频流、传感数据进行边缘智能处理</td></tr></tbody></table><hr><h2 id="🛠️-生态和工具对比"><a href="#🛠️-生态和工具对比" class="headerlink" title="🛠️ 生态和工具对比"></a>🛠️ 生态和工具对比</h2><table><thead><tr><th>特性</th><th>Go</th><th>Rust</th></tr></thead><tbody><tr><td>嵌入式 HAL（硬件抽象层）</td><td>❌ 几乎无</td><td>✅ embedded-hal</td></tr><tr><td>无操作系统支持（bare metal）</td><td>❌ 无</td><td>✅ #![no_std] 完整支持</td></tr><tr><td>调试与测试工具链</td><td>简单，适合服务型调试</td><td>丰富（如 probe-rs，cargo-embed）</td></tr><tr><td>编译跨平台</td><td>支持 Linux&#x2F;ARM 编译较好</td><td>支持</td></tr></tbody></table><h2 id="🧱-1-Go-goroutine-channel-构建的并发模型"><a href="#🧱-1-Go-goroutine-channel-构建的并发模型" class="headerlink" title="🧱 1. Go: goroutine + channel 构建的并发模型"></a>🧱 1. Go: goroutine + channel 构建的并发模型</h2><h3 id="✅-模型特点："><a href="#✅-模型特点：" class="headerlink" title="✅ 模型特点："></a>✅ 模型特点：</h3><ul><li>goroutine 是轻量级线程（调度由 Go runtime 完成）</li><li>channel 是 Go 原生的通信工具，基于 CSP（通信顺序进程）模型：<strong>共享通过通信，而不是通过共享</strong></li><li>编译器不检查线程安全，但 channel 本身是线程安全的</li></ul><h3 id="✅-安全保证方式："><a href="#✅-安全保证方式：" class="headerlink" title="✅ 安全保证方式："></a>✅ 安全保证方式：</h3><ul><li>利用 channel 来序列化并发访问，避免共享变量</li><li>程序员需要遵守约定，否则可能出现 <strong>死锁、泄漏、并发写入错误</strong></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">    ch &lt;- <span class="number">42</span></span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line">x := &lt;-ch  <span class="comment">// 主线程从 goroutine 获取数据</span></span><br></pre></td></tr></table></figure><hr><h2 id="🦀-2-Rust-安全并发基于所有权（Ownership）-类型系统"><a href="#🦀-2-Rust-安全并发基于所有权（Ownership）-类型系统" class="headerlink" title="🦀 2. Rust: 安全并发基于所有权（Ownership） + 类型系统"></a>🦀 2. Rust: 安全并发基于所有权（Ownership） + 类型系统</h2><h3 id="✅-模型特点：-1"><a href="#✅-模型特点：-1" class="headerlink" title="✅ 模型特点："></a>✅ 模型特点：</h3><ul><li>Rust 没有语言级“线程”关键字，而是通过 <code>std::thread</code> 实现多线程</li><li>并发安全不是通过“运行时调度”，而是通过<strong>编译器静态类型系统</strong>保障的</li></ul><h3 id="✅-安全保证方式：-1"><a href="#✅-安全保证方式：-1" class="headerlink" title="✅ 安全保证方式："></a>✅ 安全保证方式：</h3><ul><li>Rust 使用“所有权 + 借用检查器”强制保证线程之间不能发生数据竞争</li><li>如果使用共享状态，必须用 <code>Mutex&lt;T&gt;</code>、<code>Arc&lt;T&gt;</code> 这类类型来显式管理</li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::thread;</span><br><span class="line"><span class="keyword">use</span> std::sync::mpsc; <span class="comment">// 多生产者单消费者通道</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> (tx, rx) = mpsc::<span class="title function_ invoke__">channel</span>();</span><br><span class="line"></span><br><span class="line">    thread::<span class="title function_ invoke__">spawn</span>(<span class="keyword">move</span> || &#123;</span><br><span class="line">        tx.<span class="title function_ invoke__">send</span>(<span class="number">42</span>).<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">x</span> = rx.<span class="title function_ invoke__">recv</span>().<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="✅-类型系统层面防错示例："><a href="#✅-类型系统层面防错示例：" class="headerlink" title="✅ 类型系统层面防错示例："></a>✅ 类型系统层面防错示例：</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">data</span> = <span class="built_in">vec!</span>[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">thread::<span class="title function_ invoke__">spawn</span>(<span class="keyword">move</span> || &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;:?&#125;&quot;</span>, data); <span class="comment">// OK：所有权移动进线程</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面这行编译失败：data 已被 move</span></span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;&#123;:?&#125;&quot;</span>, data);</span><br></pre></td></tr></table></figure><p>Rust 会在 <strong>编译期报错阻止数据竞争</strong>，Go 在这种场景下不会报错，但可能在运行时引发 panic 或数据错乱。</p><hr><h2 id="🚦-关键对比：Go-vs-Rust-并发模型"><a href="#🚦-关键对比：Go-vs-Rust-并发模型" class="headerlink" title="🚦 关键对比：Go vs Rust 并发模型"></a>🚦 关键对比：Go vs Rust 并发模型</h2><table><thead><tr><th>维度</th><th>Go</th><th>Rust</th></tr></thead><tbody><tr><td>并发原语</td><td>goroutine + channel</td><td>thread + mpsc &#x2F; crossbeam &#x2F; async</td></tr><tr><td>并发模型理论</td><td>CSP（通信顺序进程）</td><td>所有权模型 + 类型系统 + 强制同步</td></tr><tr><td>是否运行时检查安全</td><td>❌ 编译器不检查并发是否安全</td><td>✅ 编译器静态保证无数据竞争</td></tr><tr><td>通信机制</td><td>channel（阻塞&#x2F;非阻塞）</td><td>channel（mpsc、crossbeam）、共享内存+锁</td></tr><tr><td>是否易学</td><td>✅ 上手快，适合中小型系统</td><td>❌ 上手难，需要理解借用、生命周期</td></tr><tr><td>并发安全的保障方式</td><td>借助 channel 实现逻辑隔离</td><td>借助类型系统强制数据访问规则</td></tr></tbody></table><hr><h2 id="🧠-总结一句话"><a href="#🧠-总结一句话" class="headerlink" title="🧠 总结一句话"></a>🧠 总结一句话</h2><blockquote><p><strong>Go 通过运行时调度 goroutine 和 channel 提供轻量并发模型，易用但并发安全需程序员自己控制；Rust 则借助编译器的所有权系统，在编译期就强制保证线程安全，代价是学习门槛更高。</strong></p></blockquote><hr><h2 id="✅-建议（适合谁？）"><a href="#✅-建议（适合谁？）" class="headerlink" title="✅ 建议（适合谁？）"></a>✅ 建议（适合谁？）</h2><table><thead><tr><th>场景</th><th>推荐语言</th></tr></thead><tbody><tr><td>快速构建后端服务、高并发Web应用</td><td>✅ Go（更快更轻量）</td></tr><tr><td>构建系统级程序、驱动、嵌入式、高安全要求</td><td>✅ Rust（零成本抽象 + 编译期保障）</td></tr></tbody></table><hr>]]></content>
      
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> Rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js- 数组累计迭代循环</title>
      <link href="/2025/06/05/front_skills/js/js%20%E6%95%B0%E7%BB%84%E8%BF%AD%E4%BB%A3%E5%BE%AA%E7%8E%AF/"/>
      <url>/2025/06/05/front_skills/js/js%20%E6%95%B0%E7%BB%84%E8%BF%AD%E4%BB%A3%E5%BE%AA%E7%8E%AF/</url>
      
        <content type="html"><![CDATA[<h2 id="Math-abs-是一个良好防御性编程手段，"><a href="#Math-abs-是一个良好防御性编程手段，" class="headerlink" title="Math.abs() 是一个良好防御性编程手段，"></a>Math.abs() 是一个良好防御性编程手段，</h2><blockquote><p>尤其在处理时间差（如分钟 - 基准分钟）时可能出现负数的情况下。</p></blockquote><p>不过是否需要 Math.abs()，取决于你是否有防护边界逻辑。下面我来详细说明使用与不使用 Math.abs() 的区别。</p><p>✅ 场景复盘<br>const minute &#x3D; new Date().getMinutes(); &#x2F;&#x2F; 比如 4<br>const baseMinute &#x3D; 6;<br>const interval &#x3D; 10;</p><p>const offset &#x3D; Math.floor((minute - baseMinute) &#x2F; interval);<br>const index &#x3D; offset % list.length;</p><p>在这个例子中，若当前分钟是 4，则 minute - baseMinute &#x3D; -2，除以后是负数，Math.floor(-0.2) 是 -1。</p><p>最终 index &#x3D; -1 % list.length，在 JavaScript 中会得到负数（因为 % 不是真正的“模”，而是“余数”）。</p><p>✅ 推荐方式：加 Math.abs() 是 不准确的做法<br>const offset &#x3D; Math.floor(Math.abs(minute - baseMinute) &#x2F; interval);</p><p>这虽然让负数变正，但也可能打乱你的原始轮询节奏（比如提前一轮访问了 list[0]），不推荐。</p><p>✅ 推荐正确写法：限定边界或 fallback 逻辑<br>最佳实践如下：</p><p>const minute &#x3D; new Date().getMinutes(); &#x2F;&#x2F; 0~59<br>const baseMinute &#x3D; 6;<br>const interval &#x3D; 10;<br>const list &#x3D; [‘a’, ‘b’, ‘c’, ‘d’];</p><p>let offset &#x3D; 0;<br>if (minute &gt;&#x3D; baseMinute) {<br>  offset &#x3D; Math.floor((minute - baseMinute) &#x2F; interval);<br>}</p><p>const index &#x3D; offset % list.length;<br>const newItem &#x3D; { …list[index] };</p><p>或者直接用 Math.max() 保护负值：</p><p>const rawOffset &#x3D; Math.floor((minute - baseMinute) &#x2F; interval);<br>const offset &#x3D; Math.max(0, rawOffset);<br>const index &#x3D; offset % list.length;</p><p>✅ 总结</p><table><thead><tr><th>方法</th><th>是否推荐</th><th>原因</th></tr></thead><tbody><tr><td>Math.abs(…)</td><td>🚫 不推荐</td><td>会打乱轮询逻辑</td></tr><tr><td>Math.max(0, offset)</td><td>✅ 推荐</td><td>简单且保证非负</td></tr><tr><td>if (minute &gt;&#x3D; base) 判断</td><td>✅ 推荐</td><td>更清晰的业务语义</td></tr><tr><td>不处理负数</td><td>❌ 有 bug 风险</td><td>-1 % n 结果是负数</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 性能 </tag>
            
            <tag> 原生 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前后端通信协议全景手册</title>
      <link href="/2025/06/04/front_skills/js/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%89%8D%E5%90%8E%E7%AB%AF%E9%80%9A%E4%BF%A1/"/>
      <url>/2025/06/04/front_skills/js/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%89%8D%E5%90%8E%E7%AB%AF%E9%80%9A%E4%BF%A1/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="📘-前后端通信协议全景手册（完整版）"><a href="#📘-前后端通信协议全景手册（完整版）" class="headerlink" title="📘 前后端通信协议全景手册（完整版）"></a>📘 前后端通信协议全景手册（完整版）</h1><hr><h2 id="🧱-协议类型总览"><a href="#🧱-协议类型总览" class="headerlink" title="🧱 协议类型总览"></a>🧱 协议类型总览</h2><table><thead><tr><th>分类</th><th>协议</th><th>描述</th></tr></thead><tbody><tr><td>HTTP 请求响应</td><td>REST、GraphQL、gRPC-Web、JSON-RPC</td><td>前端发起请求，后端返回响应</td></tr><tr><td>实时通信</td><td>WebSocket、SSE、MQTT</td><td>后端主动推送消息</td></tr><tr><td>远程调用协议</td><td>gRPC、JSON-RPC</td><td>更偏后端间通信，但部分适用于前后端</td></tr><tr><td>事件驱动通信</td><td>SSE、WebSocket、MQTT</td><td>面向事件的异步处理模型</td></tr></tbody></table><hr><h2 id="1️⃣-RESTful-API"><a href="#1️⃣-RESTful-API" class="headerlink" title="1️⃣ RESTful API"></a>1️⃣ RESTful API</h2><ul><li><strong>模型</strong>：请求-响应（基于 HTTP 标准）</li><li><strong>数据格式</strong>：JSON（最常用）</li><li><strong>特点</strong>：资源为中心、URL 语义清晰</li></ul><p>✅ <strong>优势</strong>：</p><ul><li>简单直观，浏览器天然支持</li><li>支持缓存机制（如 GET 请求）</li><li>社区支持与工具丰富（如 Swagger）</li></ul><p>❌ <strong>劣势</strong>：</p><ul><li>接口冗余（过多 endpoint）</li><li>不擅长复杂嵌套数据聚合</li></ul><p>🛠 <strong>使用场景</strong>：</p><ul><li>各类 Web &#x2F; App 系统</li><li>中后台业务管理平台</li></ul><hr><h2 id="2️⃣-GraphQL"><a href="#2️⃣-GraphQL" class="headerlink" title="2️⃣ GraphQL"></a>2️⃣ GraphQL</h2><ul><li><strong>模型</strong>：请求-响应（单入口 POST）</li><li><strong>数据格式</strong>：JSON</li><li><strong>特点</strong>：前端定义所需数据结构</li></ul><p>✅ <strong>优势</strong>：</p><ul><li>单请求获取嵌套数据，避免多接口调用</li><li>类型系统完善，可自动生成文档</li><li>强前后端解耦能力</li></ul><p>❌ <strong>劣势</strong>：</p><ul><li>性能优化较复杂（N+1 查询等）</li><li>缓存机制较弱，依赖客户端或中间层处理</li></ul><p>🛠 <strong>使用场景</strong>：</p><ul><li>需要灵活数据结构、定制字段的系统</li><li>多端接入（Web &#x2F; App &#x2F; 小程序）</li></ul><hr><h2 id="3️⃣-gRPC-gRPC-Web"><a href="#3️⃣-gRPC-gRPC-Web" class="headerlink" title="3️⃣ gRPC &#x2F; gRPC-Web"></a>3️⃣ gRPC &#x2F; gRPC-Web</h2><ul><li><strong>模型</strong>：请求-响应 &#x2F; 流式（双向或单向）</li><li><strong>数据格式</strong>：Protobuf（二进制）</li><li><strong>特点</strong>：高性能、强类型、适合微服务</li></ul><p>✅ <strong>优势</strong>：</p><ul><li>二进制更高效，节省带宽</li><li>强类型、自动代码生成（Proto）</li><li>支持客户端流 &#x2F; 服务端流 &#x2F; 双向流</li></ul><p>❌ <strong>劣势</strong>：</p><ul><li>浏览器不直接支持（需 gRPC-Web + 网关）</li><li>前端调试相对复杂</li></ul><p>🛠 <strong>使用场景</strong>：</p><ul><li>微服务架构内部通信</li><li>需要高吞吐量、高性能的数据接口</li></ul><hr><h2 id="4️⃣-JSON-RPC"><a href="#4️⃣-JSON-RPC" class="headerlink" title="4️⃣ JSON-RPC"></a>4️⃣ JSON-RPC</h2><ul><li><strong>模型</strong>：请求-响应（可支持双向）</li><li><strong>数据格式</strong>：JSON</li><li><strong>特点</strong>：轻量、函数式调用结构</li></ul><p>✅ <strong>优势</strong>：</p><ul><li>抽象为远程函数调用</li><li>结构规范，解析简洁</li></ul><p>❌ <strong>劣势</strong>：</p><ul><li>缺乏广泛标准化支持</li><li>不适合复杂数据聚合或大型系统接口</li></ul><p>🛠 <strong>使用场景</strong>：</p><ul><li>控制类指令、远程操作</li><li>使用 WebSocket 做结构化消息封装</li></ul><hr><h2 id="5️⃣-WebSocket"><a href="#5️⃣-WebSocket" class="headerlink" title="5️⃣ WebSocket"></a>5️⃣ WebSocket</h2><ul><li><strong>模型</strong>：全双工持久连接</li><li><strong>数据格式</strong>：任意（JSON、二进制）</li><li><strong>特点</strong>：实时通信，客户端可收也可发</li></ul><p>✅ <strong>优势</strong>：</p><ul><li>实时双向通信</li><li>适合订阅、聊天室、多人互动等场景</li></ul><p>❌ <strong>劣势</strong>：</p><ul><li>实现复杂（心跳、断线重连、状态管理）</li><li>无缓存机制</li></ul><p>🛠 <strong>使用场景</strong>：</p><ul><li>聊天系统、在线协同编辑</li><li>多人游戏、金融&#x2F;监控数据推送</li></ul><hr><h2 id="6️⃣-Server-Sent-Events（SSE）"><a href="#6️⃣-Server-Sent-Events（SSE）" class="headerlink" title="6️⃣ Server-Sent Events（SSE）"></a>6️⃣ Server-Sent Events（SSE）</h2><ul><li><strong>模型</strong>：服务器 → 客户端单向推送（HTTP 流）</li><li><strong>数据格式</strong>：EventStream（纯文本）</li><li><strong>特点</strong>：浏览器原生支持，轻量推送</li></ul><p>✅ <strong>优势</strong>：</p><ul><li>实现简单，浏览器兼容好</li><li>自动重连机制</li><li>基于 HTTP，部署简单</li></ul><p>❌ <strong>劣势</strong>：</p><ul><li>单向推送，不支持客户端主动发消息</li><li>不支持二进制</li></ul><p>🛠 <strong>使用场景</strong>：</p><ul><li>实时进度条、状态更新</li><li>系统提示、轻量消息推送</li></ul><hr><h2 id="7️⃣-MQTT（前端少用，但可集成）"><a href="#7️⃣-MQTT（前端少用，但可集成）" class="headerlink" title="7️⃣ MQTT（前端少用，但可集成）"></a>7️⃣ MQTT（前端少用，但可集成）</h2><ul><li><strong>模型</strong>：发布&#x2F;订阅（Broker 中心）</li><li><strong>数据格式</strong>：小型二进制消息</li><li><strong>特点</strong>：极低带宽，嵌入式友好</li></ul><p>✅ <strong>优势</strong>：</p><ul><li>消息可靠、有序、可持久</li><li>非常适合 IoT 和低功耗设备</li><li>可通过 WebSocket 网关让前端使用</li></ul><p>❌ <strong>劣势</strong>：</p><ul><li>需要专门 Broker 服务</li><li>前端使用需额外适配（如 Paho&#x2F;MQTT.js）</li></ul><p>🛠 <strong>使用场景</strong>：</p><ul><li>设备控制面板</li><li>IoT 设备管理与数据同步</li></ul><hr><h2 id="🧩-协议对比总览表"><a href="#🧩-协议对比总览表" class="headerlink" title="🧩 协议对比总览表"></a>🧩 协议对比总览表</h2><table><thead><tr><th>协议</th><th>通信模型</th><th>格式</th><th>实时性</th><th>双向</th><th>易实现</th><th>推荐使用场景</th></tr></thead><tbody><tr><td>REST</td><td>请求-响应</td><td>JSON</td><td>❌</td><td>✅</td><td>✅✅✅</td><td>通用 Web 系统、后台 API</td></tr><tr><td>GraphQL</td><td>请求-响应</td><td>JSON</td><td>❌</td><td>✅</td><td>✅✅</td><td>多端数据聚合、前端定制接口</td></tr><tr><td>gRPC-Web</td><td>请求 &#x2F; 流</td><td>Protobuf</td><td>✅✅✅</td><td>✅</td><td>⚠️</td><td>高性能微服务、内部通信</td></tr><tr><td>JSON-RPC</td><td>请求-响应</td><td>JSON</td><td>✅</td><td>✅</td><td>✅</td><td>远程控制、命令式通信</td></tr><tr><td>WebSocket</td><td>持久双向连接</td><td>任意</td><td>✅✅✅</td><td>✅</td><td>⚠️</td><td>实时协作、推送、互动系统</td></tr><tr><td>SSE</td><td>服务端单向推送</td><td>文本流</td><td>✅✅</td><td>❌</td><td>✅✅✅</td><td>通知、轻量状态更新</td></tr><tr><td>MQTT</td><td>发布&#x2F;订阅</td><td>二进制</td><td>✅✅</td><td>✅</td><td>⚠️</td><td>IoT、设备通信、仪表面板</td></tr></tbody></table><hr>]]></content>
      
      
      
        <tags>
            
            <tag> 原生 </tag>
            
            <tag> REST </tag>
            
            <tag> GraphQL </tag>
            
            <tag> gRPC </tag>
            
            <tag> JSON-RPC </tag>
            
            <tag> SSE </tag>
            
            <tag> WebSocket </tag>
            
            <tag> MQTT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AlmaLinux  fapolicy</title>
      <link href="/2025/06/03/devops_skills/linux/amllinux%20fapolicy/"/>
      <url>/2025/06/03/devops_skills/linux/amllinux%20fapolicy/</url>
      
        <content type="html"><![CDATA[<h2 id="已经将-host-dir-加入了-etc-fapolicyd-rule-d-下"><a href="#已经将-host-dir-加入了-etc-fapolicyd-rule-d-下" class="headerlink" title="已经将 &#x2F;host&#x2F;dir 加入了 &#x2F;etc&#x2F;fapolicyd&#x2F;rule.d&#x2F; 下"></a>已经将 &#x2F;host&#x2F;dir 加入了 &#x2F;etc&#x2F;fapolicyd&#x2F;rule.d&#x2F; 下</h2><p>这说明你已经尝试通过 fapolicyd 的规则允许容器挂载目录被访问。但仍然遇到：</p><p>runc create failed: waiting for init preliminary setup: read init-p: connection reset by peer</p><p>这强烈表明 fapolicyd 仍在拦截或干扰容器启动，可能是：</p><p>🔍 根因可能有：<br>✅ 1. 规则文件存在，但没有生效<br>fapolicyd 的规则文件修改后，需要重建数据库并重启服务：</p><p>sudo fagenrules<br>sudo systemctl restart fapolicyd</p><p>否则更改不会生效。</p><p>✅ 2. 规则不正确或太保守<br>你是否加的是白名单规则？例如：</p><p>allow perm&#x3D;execute : dir&#x3D;&#x2F;host&#x2F;dir</p><p>若写法不对，或权限不足，fapolicyd 依然会拒绝。</p><p>✅ 3. 容器执行文件路径未包含在白名单中<br>容器运行时，如 Docker&#x2F;Podman，会从 &#x2F;usr&#x2F;bin&#x2F;runc、&#x2F;usr&#x2F;bin&#x2F;containerd-shim、或者 container 镜像中的 &#x2F;bin&#x2F;sh 启动进程。这些执行路径也需被允许。</p><p>✅ 解决建议<br>✅ 方法一：确认规则是否生效<br>执行以下命令以检查哪些操作被阻止：</p><p>sudo journalctl -t fapolicyd</p><p>你可以看到被拒绝的路径，例如：</p><p>fapolicyd: access denied: &#x2F;host&#x2F;dir&#x2F;somebin</p><p>这会帮你确认还缺少哪些规则。</p><p>✅ 方法二：临时禁用 fapolicyd 验证问题是否确实来自它<br>sudo systemctl stop fapolicyd</p><p>然后重新运行你的容器命令，例如：</p><p>docker run -v &#x2F;host&#x2F;dir:&#x2F;container&#x2F;dir your-image</p><p>如果成功启动，说明确实是 fapolicyd 在阻止。</p><p>✅ 方法三：加宽规则允许容器使用<br>可以尝试添加更宽泛的规则，如：</p><p>allow perm&#x3D;any all : dir&#x3D;&#x2F;host&#x2F;dir</p><p>然后重建规则并重启服务：</p><p>sudo fagenrules<br>sudo systemctl restart fapolicyd</p><p>✅ 方法四（开发或非生产环境）：<br>如果你只是本地测试容器，建议暂时关闭 fapolicyd：</p><p>sudo systemctl disable –now fapolicyd</p><h2 id="systemctl-stop-fapolicyd-是-临时关闭服务，它的行为如下："><a href="#systemctl-stop-fapolicyd-是-临时关闭服务，它的行为如下：" class="headerlink" title="systemctl stop fapolicyd 是 临时关闭服务，它的行为如下："></a>systemctl stop fapolicyd 是 临时关闭服务，它的行为如下：</h2><p>✅ 不会自动恢复运行<br>一旦你执行了：</p><p>systemctl stop fapolicyd</p><p>fapolicyd 服务会一直保持关闭状态，直到你手动启动它。</p><p>❗除非发生以下情况之一，它才会“自动恢复”：</p><table><thead><tr><th>情况</th><th>是否会导致 fapolicyd 重新启动</th></tr></thead><tbody><tr><td>你手动运行 systemctl start fapolicyd</td><td>✅ 是</td></tr><tr><td>服务器重启（且 fapolicyd 设置为开机自启）</td><td>✅ 是</td></tr><tr><td>有人或自动脚本运行 systemctl restart</td><td>✅ 是</td></tr><tr><td>只是停止服务，没有重启系统</td><td>❌ 否，服务不会自动恢复</td></tr></tbody></table><p>你可以检查是否设为开机启动：</p><p>systemctl is-enabled fapolicyd</p><p>如果返回：</p><p>enabled：说明重启系统后它会恢复运行<br>disabled：重启系统后它仍然不会启动</p><p>✅ 如果你想让它彻底不再自动运行：<br>sudo systemctl disable fapolicyd</p><p>这样即使系统重启，它也不会恢复。</p><p>✅ 如果你只是临时调试，建议做完后恢复：<br>sudo systemctl start fapolicyd</p><p>🧠 补充建议<br>正在排查容器启动失败的问题，临时关闭 fapolicyd 是一种好方法。<br>但建议最终还是加规则解决根本问题，而不是依赖关闭服务。</p><h2 id="sudo-fapolicyd-–debug"><a href="#sudo-fapolicyd-–debug" class="headerlink" title="sudo fapolicyd –debug"></a>sudo fapolicyd –debug</h2><p>确实可能会阻塞系统或导致 SSH 卡顿，原因如下：</p><p>⚠️ 为什么 fapolicyd –debug 可能导致系统卡顿甚至 SSH 登录失败？<br>✅ 原因一：debug 模式会劫持系统调用<br>fapolicyd –debug 模式会：</p><p>拦截并打印系统中所有的文件执行相关事件<br>输出非常密集，尤其在高频操作系统中（容器、cron、sshd）<br>如果你在 –debug 模式下启动了容器或系统活跃进程，fapolicyd 会疯狂打印，严重拖慢系统，甚至导致：</p><p>进程调度异常<br>SSH 登录卡死<br>CPU 飙高<br>系统响应变慢</p><p>✅ 如何恢复系统<br>方法一：远程连接失败？尝试本地控制台登录<br>如果你有 IPMI、iDRAC、BMC 或 KVM 接口，优先通过控制台连接后执行：</p><p>sudo killall fapolicyd<br>sudo systemctl restart fapolicyd</p><p>方法二：尝试已有会话恢复<br>如果你还有一个已经登录的 ssh 会话或 tmux&#x2F;screen 没死，尝试：</p><p>ps aux | grep fapolicyd<br>kill -9 <pid></p><p>方法三：强制重启服务器（最后手段）<br>如果你无法通过任何方式登录，可能需要通过云后台或物理按钮执行：</p><p>硬重启（reboot &#x2F; power cycle）</p><p>⚠️ 重启后，fapolicyd 会再次启动（如果是 enabled 状态），所以建议马上：</p><p>sudo systemctl disable fapolicyd</p><p>✅ 正确使用 fapolicyd 的调试方式（不影响系统）<br>下次你可以改用更安全的方式调试：</p><p>sudo fapolicyd –debug &gt; &#x2F;tmp&#x2F;fapolicyd.log 2&gt;&amp;1 &amp;</p><p>这样它在后台运行，且日志被重定向，不会卡死终端。</p><p>也可以临时调低日志量：</p><p>sudo fapolicyd –debug –rules&#x3D;&#x2F;tmp&#x2F;minimal.rules</p><p>用一个最小化规则集避免频繁触发。</p><p>✅ 总结建议</p><table><thead><tr><th>动作</th><th>建议</th></tr></thead><tbody><tr><td>系统卡死原因</td><td>–debug 模式输出过多导致系统负荷异常</td></tr><tr><td>恢复方法</td><td>杀掉进程或重启系统</td></tr><tr><td>避免卡顿</td><td>后台运行并重定向日志</td></tr><tr><td>容器调试</td><td>建议用 auditd 或 strace 替代</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> AlmaLinux </tag>
            
            <tag> fapolicy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>postMessage vs NgRx</title>
      <link href="/2025/06/02/front_skills/angular/postmessage%E4%B8%8Engrx%E7%9A%84%E9%80%89%E6%8B%A9/"/>
      <url>/2025/06/02/front_skills/angular/postmessage%E4%B8%8Engrx%E7%9A%84%E9%80%89%E6%8B%A9/</url>
      
        <content type="html"><![CDATA[<h1 id="📌-postMessage-vs-NgRx-——-技术选型与场景分析"><a href="#📌-postMessage-vs-NgRx-——-技术选型与场景分析" class="headerlink" title="📌 postMessage vs NgRx —— 技术选型与场景分析"></a>📌 postMessage vs NgRx —— 技术选型与场景分析</h1><hr><h2 id="🧭-两种方案的典型使用场景"><a href="#🧭-两种方案的典型使用场景" class="headerlink" title="🧭 两种方案的典型使用场景"></a>🧭 两种方案的典型使用场景</h2><h3 id="✅-NgRx-的典型场景"><a href="#✅-NgRx-的典型场景" class="headerlink" title="✅ NgRx 的典型场景"></a>✅ NgRx 的典型场景</h3><ul><li>应用运行在 <strong>同一个 Angular 应用上下文内</strong></li><li>需要<strong>集中式状态管理</strong>、统一逻辑流（例如全局用户状态、表单状态）</li><li>组件之间是<strong>父子、兄弟</strong>关系，或通过服务可以注入连接</li></ul><h4 id="🟢-优点："><a href="#🟢-优点：" class="headerlink" title="🟢 优点："></a>🟢 优点：</h4><ul><li>类型安全、结构清晰</li><li>可调试、可追踪</li><li>遵循 Angular 哲学</li></ul><hr><h3 id="✅-postMessage-的典型场景"><a href="#✅-postMessage-的典型场景" class="headerlink" title="✅ postMessage 的典型场景"></a>✅ postMessage 的典型场景</h3><ul><li>页面包含 <strong>跨 iframe</strong>、嵌入第三方页面，或与<strong>非 Angular 应用交互</strong></li><li>Angular 无法直接访问或控制通信目标窗口（如嵌入别的系统、老旧页面、跨域）</li><li>需要在<strong>不同浏览上下文</strong>（标签页 &#x2F; 窗口）之间通信</li></ul><h4 id="🟡-优点："><a href="#🟡-优点：" class="headerlink" title="🟡 优点："></a>🟡 优点：</h4><ul><li>不依赖 Angular，<strong>浏览器原生通信能力</strong></li><li>适用于任何 HTML 环境</li><li>支持跨域</li></ul><hr><h2 id="✅-所以该不该用-postMessage？"><a href="#✅-所以该不该用-postMessage？" class="headerlink" title="✅ 所以该不该用 postMessage？"></a>✅ 所以该不该用 postMessage？</h2><h3 id="👇-以下情况-必须用-postMessage"><a href="#👇-以下情况-必须用-postMessage" class="headerlink" title="👇 以下情况 必须用 postMessage"></a>👇 以下情况 <strong>必须用 postMessage</strong></h3><table><thead><tr><th>场景</th><th>原因</th></tr></thead><tbody><tr><td>Angular 页面嵌入到一个父页面（iframe）</td><td>Angular 没法用 NgRx 和外部通信，只能 <code>postMessage</code></td></tr><tr><td>跨域系统通信（如 SSO 回调、不同子系统协作）</td><td>跨域只能用浏览器原生 API</td></tr><tr><td>与非 Angular 系统交互（老系统、JS 插件）</td><td>无法共享 NgRx store</td></tr></tbody></table><hr><h3 id="👇-以下情况-不应该用-postMessage"><a href="#👇-以下情况-不应该用-postMessage" class="headerlink" title="👇 以下情况 不应该用 postMessage"></a>👇 以下情况 <strong>不应该用 postMessage</strong></h3><table><thead><tr><th>场景</th><th>原因</th></tr></thead><tbody><tr><td>组件之间通信（兄弟组件、父子组件、跨模块）</td><td>用 <code>@Input/@Output</code>、服务共享、NgRx 更合适</td></tr><tr><td>所有组件都在 Angular 项目中，能访问公共服务</td><td><code>postMessage</code> 是不必要的复杂化</td></tr></tbody></table><hr><h2 id="✅-建议如何回应同事"><a href="#✅-建议如何回应同事" class="headerlink" title="✅ 建议如何回应同事"></a>✅ 建议如何回应同事</h2><p>可以这样说：</p><blockquote><p>“确实，在 Angular 内部组件通信我们首选 NgRx。但我们这部分通信涉及到 **[嵌套 iframe &#x2F; 第三方系统 &#x2F; 跨域应用]**，这些场景 NgRx 是无能为力的，我们只能使用浏览器的 <code>postMessage</code> API 来传递信息。”</p></blockquote><p>或者更技术一点：</p><blockquote><p>“NgRx 是状态管理工具，不是跨窗口通信方案。我们这里是在 DOM 层级结构之间通信，<code>postMessage</code> 是唯一通用、安全、浏览器支持的机制。”</p></blockquote><hr><h2 id="🧩-总结"><a href="#🧩-总结" class="headerlink" title="🧩 总结"></a>🧩 总结</h2><table><thead><tr><th>用途</th><th>推荐技术</th></tr></thead><tbody><tr><td>Angular 内部状态管理</td><td>✅ NgRx</td></tr><tr><td>Angular 内部组件通信</td><td>✅ <code>@Input/@Output</code>、服务、NgRx</td></tr><tr><td>跨 iframe &#x2F; 跨窗口通信</td><td>✅ <code>postMessage</code></td></tr><tr><td>与非 Angular 系统通信</td><td>✅ <code>postMessage</code></td></tr></tbody></table><hr><hr><h1 id="❓不同浏览器窗口之间能不能使用-postMessage？"><a href="#❓不同浏览器窗口之间能不能使用-postMessage？" class="headerlink" title="❓不同浏览器窗口之间能不能使用 postMessage？"></a>❓不同浏览器窗口之间能不能使用 <code>postMessage</code>？</h1><p>✅ <strong>简洁回答：可以，但前提是你必须“持有”目标窗口的引用。</strong></p><hr><h2 id="🔑-什么是“持有引用”？"><a href="#🔑-什么是“持有引用”？" class="headerlink" title="🔑 什么是“持有引用”？"></a>🔑 什么是“持有引用”？</h2><p>在浏览器中，<code>postMessage</code> 的前提是：你<strong>必须能访问目标窗口的 <code>window</code> 对象</strong>，包括以下几种典型场景。</p><hr><h2 id="✅-可通信的“不同窗口”场景"><a href="#✅-可通信的“不同窗口”场景" class="headerlink" title="✅ 可通信的“不同窗口”场景"></a>✅ 可通信的“不同窗口”场景</h2><table><thead><tr><th>场景</th><th>是否支持 <code>postMessage</code></th><th>如何引用</th></tr></thead><tbody><tr><td>当前页打开的 <code>window.open()</code> 弹窗</td><td>✅ 支持</td><td><code>window.open()</code> 的返回值就是子窗口引用</td></tr><tr><td>弹窗访问其父窗口 (<code>opener</code>)</td><td>✅ 支持</td><td><code>window.opener</code> 是父窗口的引用</td></tr><tr><td><code>iframe</code> 与其父窗口之间</td><td>✅ 支持</td><td><code>window.parent</code> 或 <code>iframe.contentWindow</code></td></tr><tr><td>同源标签页之间</td><td>❌ 不支持直接使用 <code>postMessage</code></td><td>可以使用 <code>BroadcastChannel</code> 替代</td></tr></tbody></table><hr><h2 id="❌-不支持的场景（你没引用到目标窗口）"><a href="#❌-不支持的场景（你没引用到目标窗口）" class="headerlink" title="❌ 不支持的场景（你没引用到目标窗口）"></a>❌ 不支持的场景（你没引用到目标窗口）</h2><table><thead><tr><th>场景</th><th>是否支持</th><th>说明</th></tr></thead><tbody><tr><td>页面 A 和 页面 B 是手动打开的两个标签页</td><td>❌ 不支持</td><td>没有相互 window 引用，无法通信</td></tr><tr><td>浏览器两个独立 tab</td><td>❌ 不支持</td><td>同上</td></tr><tr><td>通过 <code>window.name</code> 找另一个窗口</td><td>❌ 不支持</td><td><code>window.name</code> 只是标识，不是引用</td></tr></tbody></table><hr><h2 id="✅-正确示例：两个窗口互发消息"><a href="#✅-正确示例：两个窗口互发消息" class="headerlink" title="✅ 正确示例：两个窗口互发消息"></a>✅ 正确示例：两个窗口互发消息</h2><p><strong>父窗口：</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> childWindow = <span class="variable language_">window</span>.<span class="title function_">open</span>(<span class="string">&#x27;child.html&#x27;</span>, <span class="string">&#x27;_blank&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送消息到子窗口</span></span><br><span class="line">childWindow.<span class="title function_">postMessage</span>(&#123; <span class="attr">type</span>: <span class="string">&#x27;HELLO&#x27;</span> &#125;, <span class="string">&#x27;https://child-domain.com&#x27;</span>);</span><br></pre></td></tr></table></figure><p><strong>子窗口：</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;message&#x27;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;收到父窗口消息:&#x27;</span>, event.<span class="property">data</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 回复父窗口</span></span><br><span class="line">  event.<span class="property">source</span>.<span class="title function_">postMessage</span>(&#123; <span class="attr">type</span>: <span class="string">&#x27;RECEIVED&#x27;</span> &#125;, event.<span class="property">origin</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><hr><h2 id="❌-错误示例：没有引用就不能发"><a href="#❌-错误示例：没有引用就不能发" class="headerlink" title="❌ 错误示例：没有引用就不能发"></a>❌ 错误示例：没有引用就不能发</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 页面 A</span></span><br><span class="line"><span class="comment">// 想给用户手动打开的页面 B 发消息</span></span><br><span class="line"><span class="comment">// ❌ 没有任何引用 -&gt; 无法获取 B 的 window -&gt; 不能 postMessage</span></span><br></pre></td></tr></table></figure><hr><h2 id="🧠-如果确实需要“跨标签页通信”怎么办？"><a href="#🧠-如果确实需要“跨标签页通信”怎么办？" class="headerlink" title="🧠 如果确实需要“跨标签页通信”怎么办？"></a>🧠 如果确实需要“跨标签页通信”怎么办？</h2><p>✅ 推荐方案：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 BroadcastChannel（同源）</span></span><br><span class="line"><span class="keyword">const</span> channel = <span class="keyword">new</span> <span class="title class_">BroadcastChannel</span>(<span class="string">&#x27;my_channel&#x27;</span>);</span><br><span class="line">channel.<span class="title function_">postMessage</span>(&#123; <span class="attr">action</span>: <span class="string">&#x27;refresh&#x27;</span> &#125;);</span><br><span class="line"></span><br><span class="line">channel.<span class="property">onmessage</span> = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;其他 tab 发来消息:&#x27;</span>, e.<span class="property">data</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h2 id="🔐-安全提醒"><a href="#🔐-安全提醒" class="headerlink" title="🔐 安全提醒"></a>🔐 安全提醒</h2><p>无论使用哪种方式：</p><ul><li>✅ **验证 <code>event.origin</code>**：确保只接收可信来源的信息</li><li>❌ **不要盲目信任 <code>event.data</code>**：加上结构校验、类型判断</li><li>❌ <strong>避免使用 <code>&#39;*&#39;</code> 作为目标 origin</strong>，除非你完全了解并能控制风险</li></ul><hr><h2 id="✅-总结表"><a href="#✅-总结表" class="headerlink" title="✅ 总结表"></a>✅ 总结表</h2><table><thead><tr><th>场景</th><th>是否可以 <code>postMessage</code></th></tr></thead><tbody><tr><td>iframe ↔ parent &#x2F; child</td><td>✅ 支持</td></tr><tr><td>当前页打开的弹窗（<code>window.open</code>）</td><td>✅ 支持</td></tr><tr><td>弹窗访问其 opener</td><td>✅ 支持</td></tr><tr><td>手动打开的两个标签页</td><td>❌ 不支持（请用 <code>BroadcastChannel</code>）</td></tr></tbody></table><hr><h2 id="🚀-替代方案（实现类似跨-tab-通信）"><a href="#🚀-替代方案（实现类似跨-tab-通信）" class="headerlink" title="🚀 替代方案（实现类似跨 tab 通信）"></a>🚀 替代方案（实现类似跨 tab 通信）</h2><ul><li><code>BroadcastChannel</code> ✅（同源最推荐）</li><li><code>localStorage + storage</code> 事件 ✅（兼容性好）</li><li><code>IndexedDB + SharedWorker</code> ✅（适合复杂共享）</li></ul><hr>]]></content>
      
      
      
        <tags>
            
            <tag> angular </tag>
            
            <tag> postMessage </tag>
            
            <tag> NgRx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AI大模型的前端架构</title>
      <link href="/2025/06/02/bigdata_for_analyze/ai%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%89%8D%E7%AB%AF/"/>
      <url>/2025/06/02/bigdata_for_analyze/ai%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%89%8D%E7%AB%AF/</url>
      
        <content type="html"><![CDATA[<p>“AI 大模型的前端架构” 是一个很有深度的话题，通常指的是基于大模型能力构建的 Web 应用前端架构设计，<br>例如像 ChatGPT、Copilot、Notion AI 这样的产品。下面从 架构层次、技术栈、关键模块设计 等方面详细说明。</p><p>🧠 AI 大模型应用的前端架构全貌<br>🧱 一、前端整体架构层次<br>用户交互层（UI）<br>└──&gt; 会话管理与状态层（上下文 &#x2F; Prompt 管理）<br>     └──&gt; AI 接口调用层（API 调用 &#x2F; 流式处理 &#x2F; 错误重试）<br>         └──&gt; 数据缓存层（本地缓存 &#x2F; IndexedDB &#x2F; session）<br>             └──&gt; 服务通信层（WebSocket &#x2F; REST &#x2F; SSE）</p><p>🧩 二、核心前端模块</p><table><thead><tr><th>模块</th><th>功能说明</th></tr></thead><tbody><tr><td>📜 Prompt 构建器</td><td>用户输入转系统提示，结构化构建 prompt（模板引擎&#x2F;JSON构造）</td></tr><tr><td>🎤 多模态输入支持</td><td>文本、图片、语音等输入处理和上传</td></tr><tr><td>⌛ 流式响应渲染</td><td>支持 Token-by-token 响应展示（如 GPT 输出打字机效果）</td></tr><tr><td>🧠 会话管理</td><td>记录对话上下文、多轮历史、嵌套调用树</td></tr><tr><td>🛡️ 安全 &amp; 过滤</td><td>屏蔽敏感输出、token 超长裁剪、前端 PII 脱敏</td></tr><tr><td>💾 本地缓存</td><td>IndexedDB 或 localStorage 做最近历史或响应缓存</td></tr><tr><td>🧪 工具插件</td><td>支持工具调用（Function Calling）、代码执行（REPL）等</td></tr></tbody></table><p>🔧 三、技术栈建议</p><table><thead><tr><th>层级</th><th>推荐技术</th></tr></thead><tbody><tr><td>前端框架</td><td>React（或 Vue）、Next.js（SSR &#x2F; SEO）</td></tr><tr><td>状态管理</td><td>Zustand、Redux Toolkit（轻量）、Jotai</td></tr><tr><td>请求框架</td><td>Axios &#x2F; fetch + React Query（支持缓存 &amp; 错误重试）</td></tr><tr><td>流式渲染</td><td>使用 SSE（EventSource）&#x2F; WebSocket 配合分片渲染</td></tr><tr><td>富文本输出</td><td>Markdown + 语法高亮（如 Shiki、PrismJS）</td></tr><tr><td>多模态支持</td><td>上传组件、画布、音频录制（如 RecordRTC）</td></tr><tr><td>Web Worker</td><td>做 Token 分析、批量文本处理的异步任务</td></tr><tr><td>设计系统</td><td>Tailwind CSS &#x2F; ShadCN UI &#x2F; Ant Design</td></tr></tbody></table><p>🔁 四、与大模型的通信方式<br>✅ 通常支持以下几种接口模式：<br>REST API（同步返回）<br>SSE（Server-Sent Events）：流式输出（如 OpenAI GPT）<br>WebSocket：需要双向通信（如多人协同 &#x2F; 智能体框架）<br>&#x2F;&#x2F; SSE 示例：流式响应<br>const eventSource &#x3D; new EventSource(‘&#x2F;api&#x2F;stream’);<br>eventSource.onmessage &#x3D; (e) &#x3D;&gt; {<br>  const data &#x3D; JSON.parse(e.data);<br>  updateUI(data.delta);<br>};</p><p>🧠 五、前端如何提升 AI 应用体验？</p><table><thead><tr><th>技术手段</th><th>作用</th></tr></thead><tbody><tr><td>延迟打字效果（stream rendering）</td><td>更像人类思考过程，避免“卡顿感”</td></tr><tr><td>Prompt 可视化构建</td><td>提高 prompt 质量，减少冗余</td></tr><tr><td>多轮上下文合并与裁剪</td><td>保持 token 不超限，同时保留语义</td></tr><tr><td>插件系统（tool call UI）</td><td>增强 AI 调用工具时的交互（如调用“天气插件”）</td></tr><tr><td>本地思维链（Chain-of-Thought 展示）</td><td>帮助用户理解 AI 推理过程</td></tr></tbody></table><p>🔒 六、安全与性能关注点<br>Token 超限处理（自动截断 &#x2F; 滑窗）<br>前端敏感信息屏蔽（如 PII 过滤）<br>防 prompt injection 攻击（前端输入校验）<br>模型响应超时、断流处理<br>请求幂等性（防止重复发送）</p><p>✨ 示例项目&#x2F;应用参考<br>ChatGPT UI<br>OpenAI Cookbooks<br>LangChain UI</p><h2 id="✅-构建一个【ChatGPT-类-AI-聊天网页】"><a href="#✅-构建一个【ChatGPT-类-AI-聊天网页】" class="headerlink" title="✅ 构建一个【ChatGPT 类 AI 聊天网页】"></a>✅ 构建一个【ChatGPT 类 AI 聊天网页】</h2><h3 id="✅-可选目标方向举例："><a href="#✅-可选目标方向举例：" class="headerlink" title="✅ 可选目标方向举例："></a>✅ 可选目标方向举例：</h3><table><thead><tr><th>目标类型</th><th>实现方向建议</th></tr></thead><tbody><tr><td>🔹 聊天网页 Demo</td><td>适合从零开发，聚焦 UI 和流式响应</td></tr><tr><td>🔹 工具增强型 AI 助手</td><td>支持函数调用 + 工具注册机制</td></tr><tr><td>🔹 团队协同对话界面</td><td>引入 WebSocket + 多用户上下文隔离</td></tr><tr><td>🔹 嵌入已有系统的 AI 能力</td><td>模块化封装 + 组件解耦，适配嵌入</td></tr></tbody></table><hr><h2 id="🏗️-构建-“AI-聊天网页”-类产品，以下是一个组件级蓝图示例："><a href="#🏗️-构建-“AI-聊天网页”-类产品，以下是一个组件级蓝图示例：" class="headerlink" title="🏗️ 构建 “AI 聊天网页” 类产品，以下是一个组件级蓝图示例："></a>🏗️ 构建 “AI 聊天网页” 类产品，以下是一个<strong>组件级蓝图示例：</strong></h2><h3 id="🔧-架构主模块图："><a href="#🔧-架构主模块图：" class="headerlink" title="🔧 架构主模块图："></a>🔧 架构主模块图：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">App</span><br><span class="line">├── UI 层</span><br><span class="line">│   ├── ChatInput              // Prompt 输入框组件（支持多模态）</span><br><span class="line">│   ├── ChatWindow             // 消息流展示 + Stream 渲染</span><br><span class="line">│   ├── ToolCallBar            // 函数调用建议 / 插件面板</span><br><span class="line">│   └── CoTVisualizer          // 本地推理链条展示组件（可选）</span><br><span class="line">│</span><br><span class="line">├── 状态管理层（Zustand/Jotai）</span><br><span class="line">│   └── useChatStore          // 当前会话上下文、历史记录管理</span><br><span class="line">│</span><br><span class="line">├── 网络通信层</span><br><span class="line">│   ├── useChatAPI             // 请求封装，支持流式 / 工具调用</span><br><span class="line">│   └── SSEListener / WSBridge // SSE or WebSocket 通信模块</span><br><span class="line">│</span><br><span class="line">├── Prompt 编译器</span><br><span class="line">│   └── buildPrompt.ts         // 可视化 prompt → JSON or string</span><br><span class="line">│</span><br><span class="line">├── 安全模块</span><br><span class="line">│   └── sanitizeInput.ts       // PII 过滤、注入攻击拦截等</span><br></pre></td></tr></table></figure><hr><h2 id="🔁-接入-LLM-接口（如-OpenAI）的小贴士："><a href="#🔁-接入-LLM-接口（如-OpenAI）的小贴士：" class="headerlink" title="🔁 接入 LLM 接口（如 OpenAI）的小贴士："></a>🔁 接入 LLM 接口（如 OpenAI）的小贴士：</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SSE 请求封装</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">fetchStreamedResponse</span>(<span class="params">prompt: <span class="built_in">string</span>, onMessage: (delta: <span class="built_in">string</span>) =&gt; <span class="built_in">void</span></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> source = <span class="keyword">new</span> <span class="title class_">EventSource</span>(<span class="string">`/api/stream?prompt=<span class="subst">$&#123;<span class="built_in">encodeURIComponent</span>(prompt)&#125;</span>`</span>);</span><br><span class="line">  source.<span class="property">onmessage</span> = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> data = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(e.<span class="property">data</span>);</span><br><span class="line">    <span class="title function_">onMessage</span>(data.<span class="property">delta</span>); <span class="comment">// 渲染 delta 内容</span></span><br><span class="line">  &#125;;</span><br><span class="line">  source.<span class="property">onerror</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    source.<span class="title function_">close</span>();</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="🧰-Prompt-工程-工具调用结构（支持-Function-Calling）："><a href="#🧰-Prompt-工程-工具调用结构（支持-Function-Calling）：" class="headerlink" title="🧰 Prompt 工程 + 工具调用结构（支持 Function Calling）："></a>🧰 Prompt 工程 + 工具调用结构（支持 Function Calling）：</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构建 Prompt 请求体</span></span><br><span class="line"><span class="keyword">const</span> payload = &#123;</span><br><span class="line">  <span class="attr">model</span>: <span class="string">&quot;gpt-4&quot;</span>,</span><br><span class="line">  <span class="attr">messages</span>: chatHistory,</span><br><span class="line">  <span class="attr">tools</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&quot;function&quot;</span>,</span><br><span class="line">      <span class="attr">function</span>: &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;getWeather&quot;</span>,</span><br><span class="line">        <span class="attr">description</span>: <span class="string">&quot;获取天气&quot;</span>,</span><br><span class="line">        <span class="attr">parameters</span>: &#123; <span class="attr">location</span>: <span class="string">&quot;string&quot;</span> &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="🎨-UI-设计系统推荐（简洁-响应式）："><a href="#🎨-UI-设计系统推荐（简洁-响应式）：" class="headerlink" title="🎨 UI 设计系统推荐（简洁 + 响应式）："></a>🎨 UI 设计系统推荐（简洁 + 响应式）：</h2><ul><li><strong>Tailwind CSS + ShadCN UI</strong>：快速构建聊天框、按钮、卡片等</li><li><strong>Code 高亮</strong>：PrismJS + markdown-it（含语法扩展）</li><li><strong>对话气泡式布局</strong>：基于 <code>flex</code> 和 <code>scroll-auto</code> 实现双端输出</li></ul><hr><h2 id="🧱-你可以选择的部署方式："><a href="#🧱-你可以选择的部署方式：" class="headerlink" title="🧱 你可以选择的部署方式："></a>🧱 你可以选择的部署方式：</h2><table><thead><tr><th>目标平台</th><th>技术路径</th></tr></thead><tbody><tr><td>✅ 网页端</td><td>Next.js &#x2F; Vite + React + Tailwind</td></tr><tr><td>✅ 桌面端</td><td>Electron + React（可整合本地文件调用）</td></tr><tr><td>✅ 微信小程序</td><td>使用 uni-app &#x2F; Taro + 云函数</td></tr><tr><td>✅ 浏览器插件</td><td>manifest v3 + Web UI + background 连接</td></tr><tr><td>✅ 嵌入企业系统</td><td>封装为组件库或 iframe 嵌入</td></tr></tbody></table><hr>]]></content>
      
      
      
        <tags>
            
            <tag> ai </tag>
            
            <tag> 大模型 </tag>
            
            <tag> 前端架构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Prometheus gateway</title>
      <link href="/2025/06/01/automatically_test_skills/Prometheus%20gateway/"/>
      <url>/2025/06/01/automatically_test_skills/Prometheus%20gateway/</url>
      
        <content type="html"><![CDATA[<h2 id="📌-回顾一下流程"><a href="#📌-回顾一下流程" class="headerlink" title="📌 回顾一下流程"></a>📌 回顾一下流程</h2><p>E2E 测试 (Cypress &#x2F; Playwright)<br>       ↓<br>自定义脚本 pushMetric() 推送指标<br>       ↓<br>Prometheus PushGateway (暂存指标)<br>       ↓<br>Prometheus 定时抓取 PushGateway 的数据<br>       ↓<br>Prometheus 存储数据（时间序列数据库）<br>       ↓<br>Grafana 展示 Prometheus 中的数据</p><h2 id="PushGateway-的作用和数据存储原理"><a href="#PushGateway-的作用和数据存储原理" class="headerlink" title="PushGateway 的作用和数据存储原理"></a>PushGateway 的作用和数据存储原理</h2><p>🔄 PushGateway 的定位<br>PushGateway 是 中转站，用于 主动推送（push） 的监控数据。</p><p>它 不会持久化数据 —— 所有数据都是驻留在内存中。</p><p>Prometheus 会定期来拉取（scrape）这些驻留的数据。</p><p>🧯 数据生命周期<br>数据存在于 PushGateway 的内存里，直到：</p><p>被 Prometheus 抓取到。</p><p>被新的指标（用相同 job+instance 标签）覆盖。</p><p>被手动或程序调用 DELETE API 清理。</p><p>🗃️ Prometheus 的数据存储位置</p><p>Prometheus 是一个 时间序列数据库，</p><p>当它从 PushGateway 抓取到数据后，会将其存入本地存储（磁盘）。</p><p>默认路径：&#x2F;prometheus（在容器中）</p><p>如果你挂载 volume，如：<br>prometheus:<br>  volumes:<br>    - .&#x2F;prometheus-data:&#x2F;prometheus</p><p>那数据会保存在宿主机的 .&#x2F;prometheus-data 目录中。</p><p>📥 PushGateway 的抓取方式<br>Prometheus 配置中：</p><p>scrape_configs:</p><ul><li>job_name: ‘pushgateway’<br>static_configs:<ul><li>targets: [‘pushgateway:9091’]</li></ul></li></ul><p>表示 Prometheus 会 定时拉取 PushGateway 上的 &#x2F;metrics 页面。</p><h2 id="举例：推送数据之后发生了什么"><a href="#举例：推送数据之后发生了什么" class="headerlink" title="举例：推送数据之后发生了什么"></a>举例：推送数据之后发生了什么</h2><p>你运行测试并执行：</p><p>pushMetric({ job: ‘e2e_test’, value: 1 });</p><p>PushGateway 在 &#x2F;metrics 暂存如下内容：</p><h3 id="HELP-e2e-test-success-…"><a href="#HELP-e2e-test-success-…" class="headerlink" title="HELP e2e_test_success …"></a>HELP e2e_test_success …</h3><h3 id="TYPE-e2e-test-success-gauge"><a href="#TYPE-e2e-test-success-gauge" class="headerlink" title="TYPE e2e_test_success gauge"></a>TYPE e2e_test_success gauge</h3><p>e2e_test_success{job&#x3D;”e2e_test”} 1</p><p>Prometheus 每 5s 来抓取一次：</p><p>GET <a href="http://pushgateway:9091/metrics">http://pushgateway:9091/metrics</a></p><p>Prometheus 存入自己的本地数据库（时间戳+值）。<br>Grafana 读取 Prometheus 的时间序列数据库来画图。</p><p>❗️注意事项</p><table><thead><tr><th>项目</th><th>注意点</th></tr></thead><tbody><tr><td>持久化</td><td>PushGateway 不会持久化数据（重启就没了）。Prometheus 会保存。</td></tr><tr><td>标签覆盖</td><td>再次推送同一 job+instance 会覆盖旧值</td></tr><tr><td>推送时机</td><td>推送完必须在 Prometheus 抓取前不要清理，否则 Prometheus 抓不到</td></tr><tr><td>清理</td><td>推送完成后可以用 HTTP DELETE 请求清理 job（可选）</td></tr></tbody></table><p>✅ 推荐实践<br>把 PushGateway 和 Prometheus 放在一个局域网 Docker 网络中。<br>每次测试完成后再推送指标，不用持续推。<br>使用 job&#x3D;test_job 和 instance&#x3D;test_suite_name 区分不同来源。<br>保证 Prometheus 的 scrape_interval 足够频繁（默认 15s，可设为 5s）。</p><hr><h3 id="✅-数据流全链路复盘"><a href="#✅-数据流全链路复盘" class="headerlink" title="✅ 数据流全链路复盘"></a>✅ 数据流全链路复盘</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">E2E 测试 (Cypress / Playwright)</span><br><span class="line">       ↓</span><br><span class="line">自定义脚本 pushMetric()</span><br><span class="line">       ↓</span><br><span class="line">PushGateway（内存暂存）</span><br><span class="line">       ↓</span><br><span class="line">Prometheus（周期抓取）</span><br><span class="line">       ↓</span><br><span class="line">Prometheus 本地 TSDB（时间序列数据库）</span><br><span class="line">       ↓</span><br><span class="line">Grafana 展示指标</span><br></pre></td></tr></table></figure><hr><h3 id="💡-重点澄清与易混概念解析"><a href="#💡-重点澄清与易混概念解析" class="headerlink" title="💡 重点澄清与易混概念解析"></a>💡 重点澄清与易混概念解析</h3><table><thead><tr><th>概念</th><th>说明</th></tr></thead><tbody><tr><td><strong>PushGateway</strong></td><td>仅在内存中暂存指标，无持久化；供 Prometheus 抓取；重启即清。</td></tr><tr><td><strong>Prometheus</strong></td><td>周期性抓取（pull model）；抓取后存储到本地 TSDB。</td></tr><tr><td><strong>抓取 vs 推送</strong></td><td>PushGateway 由客户端主动推送数据，Prometheus 负责拉取（scrape）。</td></tr></tbody></table><hr><h3 id="🚨-注意事项补充"><a href="#🚨-注意事项补充" class="headerlink" title="🚨 注意事项补充"></a>🚨 注意事项补充</h3><table><thead><tr><th>风险点</th><th>说明</th></tr></thead><tbody><tr><td>❌ <strong>抓取前清理指标</strong></td><td>会导致 Prometheus 抓不到数据。务必保证抓取后再清理。</td></tr><tr><td>❌ <strong>多次推送覆盖数据</strong></td><td>同一个 <code>job + instance</code> 会被覆盖，非叠加。</td></tr><tr><td>❌ <strong>PushGateway 重启</strong></td><td>数据全失，除非 Prometheus 已抓取保存。</td></tr></tbody></table><hr><h3 id="🔧-推荐实践补充建议"><a href="#🔧-推荐实践补充建议" class="headerlink" title="🔧 推荐实践补充建议"></a>🔧 推荐实践补充建议</h3><ul><li><p>设置 Prometheus 的 <code>scrape_interval</code> 为 5s（适配瞬时 E2E 测试）。</p></li><li><p>使用明确的标签组合区分测试来源：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">pushMetric</span>(&#123;</span><br><span class="line">  <span class="attr">job</span>: <span class="string">&#x27;e2e_test&#x27;</span>,</span><br><span class="line">  <span class="attr">instance</span>: <span class="string">&#x27;cypress_suite_1&#x27;</span>,</span><br><span class="line">  <span class="attr">labels</span>: &#123;</span><br><span class="line">    <span class="attr">env</span>: <span class="string">&#x27;staging&#x27;</span>,</span><br><span class="line">    <span class="attr">branch</span>: <span class="string">&#x27;feature-x&#x27;</span>,</span><br><span class="line">    <span class="attr">build_id</span>: <span class="string">&#x27;build-789&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">value</span>: <span class="number">1</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>定义一个专用清理脚本（可选）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X DELETE http://pushgateway:9091/metrics/job/e2e_test/instance/cypress_suite_1</span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="✅-完整的-Demo-示例，包括："><a href="#✅-完整的-Demo-示例，包括：" class="headerlink" title="✅ 完整的 Demo 示例，包括："></a>✅ 完整的 Demo 示例，包括：</h3><ul><li>一个最小可运行的 Prometheus + PushGateway Docker Compose 配置</li><li><code>pushMetric()</code> 的 Node.js 脚本（或支持 TypeScript）</li><li>Prometheus 的 <code>prometheus.yml</code> 配置</li><li>Grafana 面板 JSON（展示 <code>e2e_test_success</code> 相关数据）</li></ul><hr>]]></content>
      
      
      
        <tags>
            
            <tag> 自动化测试 </tag>
            
            <tag> Prometheus </tag>
            
            <tag> gateway </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vite 的入口是 HTML</title>
      <link href="/2025/05/30/front_package_build_skills/vite/vite%E4%B8%BA%E4%BD%95html%E5%85%A5%E5%8F%A3/"/>
      <url>/2025/05/30/front_package_build_skills/vite/vite%E4%B8%BA%E4%BD%95html%E5%85%A5%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<h3 id="Vite-的入口是-HTML-的原因"><a href="#Vite-的入口是-HTML-的原因" class="headerlink" title="Vite 的入口是 HTML 的原因"></a>Vite 的入口是 HTML 的原因</h3><ol><li><p><strong>现代浏览器原生支持 ES 模块（ESM）加载</strong></p><ul><li>Vite 利用了浏览器原生对 ES 模块的支持，直接在浏览器中通过 <code>&lt;script type=&quot;module&quot; src=&quot;main.js&quot;&gt;</code> 来加载模块。</li><li>浏览器是从 HTML 文件开始解析的，HTML 文件天然是入口，因为它包含了对 JS、CSS、图片等资源的引用。</li></ul></li><li><p><strong>简化开发流程</strong></p><ul><li>传统打包工具（如 webpack）通常以 JS 文件作为入口，最终打包成一个大的 JS 文件。</li><li>Vite 直接以 HTML 作为入口，浏览器会解析 HTML，自动加载其中声明的 JS 模块，减少了中间打包的复杂度。</li><li>这也方便开发者在 HTML 中灵活引入多个脚本、样式和资源。</li></ul></li><li><p><strong>更符合现代前端项目结构</strong></p><ul><li>现代前端应用往往是 SPA（单页应用），主入口就是一个 HTML 文件（比如 <code>index.html</code>），里面引用了主 JS 脚本和资源。</li><li>Vite 利用这一点，让开发环境更接近生产环境的真实运行状态，热更新更快，启动更快。</li></ul></li><li><p><strong>方便对 HTML 进行处理</strong></p><ul><li>Vite 还支持对 HTML 文件做特殊处理，比如内联环境变量、自动注入资源等。</li><li>如果入口是 HTML，Vite 可以在启动时动态注入脚本标签，做更灵活的资源管理。</li></ul></li></ol><hr><h3 id="简单对比"><a href="#简单对比" class="headerlink" title="简单对比"></a>简单对比</h3><table><thead><tr><th>传统打包工具入口</th><th>Vite 入口</th><th>优势</th></tr></thead><tbody><tr><td>JavaScript 文件</td><td>HTML 文件</td><td>利用浏览器原生模块加载机制，更快更轻便</td></tr></tbody></table><hr><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>Vite 以 HTML 作为入口，是因为 HTML 是浏览器的天然入口文件，利用浏览器原生 ES 模块支持，简化开发流程，加快启动速度，同时方便对资源进行灵活管理。</p>]]></content>
      
      
      
        <tags>
            
            <tag> webpack </tag>
            
            <tag> vite </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>playwright vs cypress</title>
      <link href="/2025/05/29/automatically_test_skills/playwright%20vs%20cypress/"/>
      <url>/2025/05/29/automatically_test_skills/playwright%20vs%20cypress/</url>
      
        <content type="html"><![CDATA[<p><strong>Playwright</strong> 和 <strong>Cypress</strong> 的优缺点对比，以及适合的使用场景</p><hr><h2 id="🧩-一览对比"><a href="#🧩-一览对比" class="headerlink" title="🧩 一览对比"></a>🧩 一览对比</h2><table><thead><tr><th>特性</th><th><strong>Playwright</strong></th><th><strong>Cypress</strong></th></tr></thead><tbody><tr><td>浏览器支持</td><td>Chromium, Firefox, WebKit（Safari 引擎）</td><td>仅支持 Chromium 和部分 Firefox（Safari 不支持）</td></tr><tr><td>多语言支持</td><td>✅（JS&#x2F;TS、Python、Java、.NET）</td><td>❌（仅支持 JS&#x2F;TS）</td></tr><tr><td>并发测试</td><td>✅ 原生支持，速度快</td><td>⚠️ 社区插件支持，较为复杂</td></tr><tr><td>网络拦截&#x2F;模拟请求</td><td>✅ 非常强大且灵活</td><td>✅ 也支持，但功能比 Playwright 弱一些</td></tr><tr><td>CI&#x2F;CD 集成</td><td>✅ 易于集成各种 CI 平台</td><td>✅ 易于集成</td></tr><tr><td>文档和社区</td><td>📘 官方文档完善，社区逐渐壮大</td><td>📘 文档丰富，社区活跃，生态成熟</td></tr><tr><td>调试体验</td><td>✅ DevTools 集成，调试体验好</td><td>✅ 内置 GUI 调试器，适合前端开发者</td></tr><tr><td>跨页面&#x2F;多标签页支持</td><td>✅ 原生支持</td><td>❌ 支持不佳</td></tr><tr><td>原生 iframe 测试支持</td><td>✅ 强大</td><td>⚠️ 有限制</td></tr><tr><td>测试速度</td><td>✅ 快（并发 + 头less 高效）</td><td>⚠️ 较慢（单线程 + 有限制）</td></tr><tr><td>安装包体积</td><td>⚠️ 稍大</td><td>✅ 相对小巧</td></tr></tbody></table><hr><h2 id="✅-Playwright-的优点"><a href="#✅-Playwright-的优点" class="headerlink" title="✅ Playwright 的优点"></a>✅ Playwright 的优点</h2><ol><li><strong>多浏览器支持好</strong>：唯一支持 WebKit（可测试 Safari）。</li><li><strong>语言选择多</strong>：支持 Python、Java、.NET，适合多技术栈团队。</li><li><strong>跨页面、iframe、popup 支持优秀</strong>。</li><li><strong>强大的网络拦截和请求模拟能力</strong>。</li><li><strong>测试速度快</strong>，原生并发运行。</li><li><strong>Headless 模式稳定、适合 CI&#x2F;CD</strong>。</li></ol><h3 id="❌-缺点"><a href="#❌-缺点" class="headerlink" title="❌ 缺点"></a>❌ 缺点</h3><ul><li>学习曲线略高，尤其对于非 Node.js 背景开发者。</li><li>文档虽然完善但不如 Cypress 社区活跃。</li><li>UI 调试工具不如 Cypress GUI 直观。</li></ul><hr><h2 id="✅-Cypress-的优点"><a href="#✅-Cypress-的优点" class="headerlink" title="✅ Cypress 的优点"></a>✅ Cypress 的优点</h2><ol><li><strong>学习曲线低</strong>，适合前端开发者快速上手。</li><li><strong>内置 GUI 测试运行器</strong>，可视化调试非常友好。</li><li><strong>断言和测试语法自然，集成 Mocha + Chai</strong>。</li><li><strong>生态成熟，有丰富的插件和社区支持</strong>。</li></ol><h3 id="❌-缺点-1"><a href="#❌-缺点-1" class="headerlink" title="❌ 缺点"></a>❌ 缺点</h3><ul><li>只支持 Chromium&#x2F;Firefox，不支持 Safari。</li><li>不支持多标签页、复杂 iframe 测试。</li><li>并发和大规模测试性能差，需要配置额外插件。</li><li>网络请求拦截不如 Playwright 灵活。</li></ul><hr><h2 id="📌-使用场景推荐"><a href="#📌-使用场景推荐" class="headerlink" title="📌 使用场景推荐"></a>📌 使用场景推荐</h2><table><thead><tr><th>使用场景</th><th>推荐工具</th><th>理由</th></tr></thead><tbody><tr><td>需要测试 Safari、iOS 浏览器</td><td>✅ Playwright</td><td>Cypress 不支持 WebKit</td></tr><tr><td>多语言团队（Python&#x2F;Java 等）</td><td>✅ Playwright</td><td>Cypress 仅支持 JS&#x2F;TS</td></tr><tr><td>中大型项目、并发执行测试</td><td>✅ Playwright</td><td>性能更佳，支持并发</td></tr><tr><td>需要强大的网络请求控制</td><td>✅ Playwright</td><td>拦截和模拟最强</td></tr><tr><td>初学者、小型前端项目</td><td>✅ Cypress</td><td>上手简单，GUI 直观</td></tr><tr><td>Vue&#x2F;React 项目 + 快速开发反馈</td><td>✅ Cypress</td><td>和前端框架结合紧密</td></tr></tbody></table><hr><h2 id="总结建议"><a href="#总结建议" class="headerlink" title="总结建议"></a>总结建议</h2><ul><li><strong>Playwright 更适合对浏览器兼容性、性能、复杂页面结构要求较高的项目。</strong></li><li><strong>Cypress 更适合小团队、前端主导项目，尤其是快速迭代开发。</strong></li></ul><hr>]]></content>
      
      
      
        <tags>
            
            <tag> 自动化测试 </tag>
            
            <tag> cypress </tag>
            
            <tag> playwright </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>闯关类游戏适合度分析</title>
      <link href="/2025/05/26/game/moon/%E6%B8%B8%E6%88%8F%E9%A1%B9%E7%9B%AE%E8%B0%83%E7%A0%94/"/>
      <url>/2025/05/26/game/moon/%E6%B8%B8%E6%88%8F%E9%A1%B9%E7%9B%AE%E8%B0%83%E7%A0%94/</url>
      
        <content type="html"><![CDATA[<h2 id="⚔️-闯关类游戏适合度分析"><a href="#⚔️-闯关类游戏适合度分析" class="headerlink" title="⚔️ 闯关类游戏适合度分析"></a>⚔️ 闯关类游戏适合度分析</h2><h3 id="1-适合的场景"><a href="#1-适合的场景" class="headerlink" title="1. 适合的场景"></a>1. <strong>适合的场景</strong></h3><ul><li><strong>关卡数量适中</strong><br>关卡数十到几百个都可以，但需要合理规划资源加载和内存管理。</li><li><strong>2D 闯关游戏</strong><br>典型的横版、竖版关卡跳跃、解谜、射击等2D玩法，非常适合。</li><li><strong>画面资源合理</strong><br>图片、音效大小控制得好，能保证游戏加载快、流畅。</li><li><strong>逻辑复杂度适中</strong><br>关卡内的逻辑交互不要过于复杂，避免微信小游戏性能瓶颈。</li></ul><h3 id="2-潜在挑战"><a href="#2-潜在挑战" class="headerlink" title="2. 潜在挑战"></a>2. <strong>潜在挑战</strong></h3><ul><li><strong>包体限制</strong><br>微信小游戏对单个包体大小有限制（通常4MB左右，分包可扩展到几十MB），资源要做分包和动态加载。</li><li><strong>内存限制</strong><br>微信小游戏运行时内存有限，过大的场景和资源会卡顿或崩溃。</li><li><strong>性能优化</strong><br>需要注意绘制优化、避免不必要的逻辑计算，保持游戏帧率稳定。</li></ul><h3 id="3-优化建议"><a href="#3-优化建议" class="headerlink" title="3. 优化建议"></a>3. <strong>优化建议</strong></h3><ul><li><strong>资源分包加载</strong><br>利用 Cocos Creator 的分包功能，分关卡加载资源，减少启动时包体大小。</li><li><strong>远程资源加载</strong><br>关卡资源放到服务器，按需下载，减少本地包体压力。</li><li><strong>合理利用缓存</strong><br>关卡间复用资源，避免重复加载。</li><li><strong>脚本优化</strong><br>精简逻辑，减少每帧计算量，利用事件驱动减少无效更新。</li></ul><hr><h2 id="✅-总结："><a href="#✅-总结：" class="headerlink" title="✅ 总结："></a>✅ 总结：</h2><table><thead><tr><th>项目类型</th><th>是否适合微信小游戏 + Cocos Creator</th></tr></thead><tbody><tr><td>轻度&#x2F;中度 2D 闯关游戏</td><td>非常适合，建议做好资源管理和优化</td></tr><tr><td>3D 或重度大场景闯关游戏</td><td>可能受限，建议先做性能测试，评估可行性</td></tr></tbody></table><hr>]]></content>
      
      
      
        <tags>
            
            <tag> Cocos Creator 3.x </tag>
            
            <tag> 闯关类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cocos Creator 3.x</title>
      <link href="/2025/05/26/game/moon/Cocos%20Creator%203.x/"/>
      <url>/2025/05/26/game/moon/Cocos%20Creator%203.x/</url>
      
        <content type="html"><![CDATA[<p>在使用 <strong>Cocos Creator 3.x</strong> 开发微信小程序时，项目初始化的流程分为以下几个步骤：</p><table><thead><tr><th>对比项</th><th>Cocos Creator 2.x</th><th>Cocos Creator 3.x</th></tr></thead><tbody><tr><td>引擎架构</td><td>基于原生渲染管线</td><td>支持更强的现代渲染管线</td></tr><tr><td>2D支持</td><td>成熟稳定</td><td>兼容 2D + 原生支持 3D（2D性能略低）</td></tr><tr><td>开发体验</td><td>快、轻量，适合新手</td><td>统一 2D&#x2F;3D 体系，面向未来</td></tr><tr><td>推荐用途</td><td>快速开发微信小游戏 MVP</td><td>想后期升级为 3D 或做 WebGL 效果更强的游戏</td></tr></tbody></table><table><thead><tr><th>阶段</th><th>关卡数量</th><th>说明</th></tr></thead><tbody><tr><td><strong>首发版本（MVP）</strong></td><td>8～12 关卡</td><td>保证基本玩法完整，能测留存</td></tr><tr><td><strong>完整版本</strong></td><td>20～30 关卡</td><td>包括多个主题场景、难度递增</td></tr><tr><td><strong>扩展包（DLC）</strong></td><td>持续追加</td><td>结合节日、文化活动持续更新</td></tr></tbody></table><p>是的，<strong>Cocos Creator 开发 + 微信小程序导入运行</strong> 是官方支持的标准开发模式，流程清晰、效率较高。下面我将详细解释这种开发模式的原理、优缺点、适用场景等：</p><hr><h2 id="✅-开发模式概览："><a href="#✅-开发模式概览：" class="headerlink" title="✅ 开发模式概览："></a>✅ 开发模式概览：</h2><blockquote><p><strong>“用 Cocos Creator 编写游戏逻辑和界面，构建成微信小游戏，再用微信开发者工具运行调试”</strong></p></blockquote><hr><h2 id="📦-一、这种模式的工作流程"><a href="#📦-一、这种模式的工作流程" class="headerlink" title="📦 一、这种模式的工作流程"></a>📦 一、这种模式的工作流程</h2><h3 id="1-使用-Cocos-Creator-开发核心逻辑"><a href="#1-使用-Cocos-Creator-开发核心逻辑" class="headerlink" title="1. 使用 Cocos Creator 开发核心逻辑"></a>1. <strong>使用 Cocos Creator 开发核心逻辑</strong></h3><ul><li>场景编辑器：搭建 UI、背景、角色等</li><li>脚本编写：使用 TypeScript &#x2F; JavaScript 实现交互、动画等逻辑</li><li>动画、粒子、碰撞等均在 Cocos 内完成</li></ul><h3 id="2-使用构建系统导出为微信小游戏格式"><a href="#2-使用构建系统导出为微信小游戏格式" class="headerlink" title="2. 使用构建系统导出为微信小游戏格式"></a>2. <strong>使用构建系统导出为微信小游戏格式</strong></h3><ul><li><p>构建平台选择「微信小游戏」</p></li><li><p>会生成适配微信平台的 <code>wechatgame/</code> 文件夹，包括：</p><ul><li><code>game.js</code>, <code>game.json</code>, <code>project.config.json</code>（微信平台需要）</li><li><code>assets</code>、<code>main.js</code>（由 Creator 生成）</li></ul></li></ul><h3 id="3-导入微信开发者工具"><a href="#3-导入微信开发者工具" class="headerlink" title="3. 导入微信开发者工具"></a>3. <strong>导入微信开发者工具</strong></h3><ul><li>微信工具负责运行和调试导出的项目</li><li>可进行真机预览、远程调试、上传审核等操作</li></ul><hr><h2 id="✅-二、开发模式图示（简化）"><a href="#✅-二、开发模式图示（简化）" class="headerlink" title="✅ 二、开发模式图示（简化）"></a>✅ 二、开发模式图示（简化）</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[ Cocos Creator 开发环境 ]</span><br><span class="line">        ↓ 构建为微信小游戏</span><br><span class="line">[ wechatgame 输出目录 ]</span><br><span class="line">        ↓ 导入</span><br><span class="line">[ 微信开发者工具 ]</span><br><span class="line">        ↓ 编译 + 上传 + 发布</span><br><span class="line">[ 微信小程序平台上线 ]</span><br></pre></td></tr></table></figure><hr><h2 id="⚙️-三、优缺点分析"><a href="#⚙️-三、优缺点分析" class="headerlink" title="⚙️ 三、优缺点分析"></a>⚙️ 三、优缺点分析</h2><table><thead><tr><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>✅ 可视化编辑 + 脚本开发，效率高</td><td>⚠️ 微信小游戏平台有平台限制（内存、文件大小）</td></tr><tr><td>✅ 一键构建支持微信小游戏格式</td><td>⚠️ 不能直接使用 Web 的全 API（如 DOM）</td></tr><tr><td>✅ 支持代码热更新、自动分包</td><td>⚠️ 真机调试需依赖微信开发者工具</td></tr><tr><td>✅ 官方支持，更新及时</td><td>⚠️ 如果涉及原生功能，需要桥接 SDK</td></tr></tbody></table><hr><h2 id="🧩-四、适合什么项目？"><a href="#🧩-四、适合什么项目？" class="headerlink" title="🧩 四、适合什么项目？"></a>🧩 四、适合什么项目？</h2><table><thead><tr><th>项目类型</th><th>是否推荐使用该模式</th></tr></thead><tbody><tr><td>休闲小游戏</td><td>✅ 非常适合（页面少、体积小）</td></tr><tr><td>教育&#x2F;互动类小游戏</td><td>✅ 适合（动画丰富、逻辑简单）</td></tr><tr><td>重度 3D 游戏</td><td>⚠️ 不推荐（资源体积大，微信平台限制较多）</td></tr><tr><td>H5 游戏移植</td><td>✅ 适合（Cocos 能很好适配 Web 和小程序）</td></tr></tbody></table><hr><h2 id="🚀-五、进阶建议"><a href="#🚀-五、进阶建议" class="headerlink" title="🚀 五、进阶建议"></a>🚀 五、进阶建议</h2><ul><li>✅ 使用 <code>cc.assetManager.loadRemote()</code> 动态加载远程资源，节省包体</li><li>✅ 使用微信提供的 <code>wx.createUserInfoButton</code>、<code>wx.login</code> 等 API，可通过 Creator 的 JS 直接调用</li><li>✅ 如果要上传代码时保留调试信息，可在构建时 <strong>关闭压缩和混淆</strong></li></ul><hr><h2 id="🛠-六、Cocos-Creator-其他导出平台（对比）"><a href="#🛠-六、Cocos-Creator-其他导出平台（对比）" class="headerlink" title="🛠 六、Cocos Creator 其他导出平台（对比）"></a>🛠 六、Cocos Creator 其他导出平台（对比）</h2><table><thead><tr><th>平台</th><th>说明</th></tr></thead><tbody><tr><td>Web（HTML5）</td><td>可以直接部署为网页</td></tr><tr><td>iOS&#x2F;Android</td><td>需要接入原生 SDK，打包成 App</td></tr><tr><td>Facebook Instant Game</td><td>支持导出为 Facebook 游戏平台格式</td></tr><tr><td>ByteDance 小游戏</td><td>支持字节跳动系小程序平台</td></tr></tbody></table><hr><hr><h2 id="✅-一、安装前准备"><a href="#✅-一、安装前准备" class="headerlink" title="✅ 一、安装前准备"></a>✅ 一、安装前准备</h2><h3 id="1-安装必要软件"><a href="#1-安装必要软件" class="headerlink" title="1. 安装必要软件"></a>1. 安装必要软件</h3><ul><li><strong>Cocos Creator 3.x</strong>（官网下载：<a href="https://www.cocos.com)/">https://www.cocos.com）</a></li><li><strong>微信开发者工具</strong>（官网下载：<a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html%EF%BC%89">https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html）</a></li><li>可选：<strong>Node.js</strong>（用于命令行构建或集成工具）</li></ul><hr><h2 id="✅-二、创建并设置项目"><a href="#✅-二、创建并设置项目" class="headerlink" title="✅ 二、创建并设置项目"></a>✅ 二、创建并设置项目</h2><h3 id="1-创建新项目"><a href="#1-创建新项目" class="headerlink" title="1. 创建新项目"></a>1. 创建新项目</h3><p>打开 Cocos Creator：</p><ul><li>选择 “新建项目”</li><li>模板选择：<strong>空白项目</strong></li><li>填写项目名和路径，点击“创建”。</li></ul><h3 id="2-项目配置"><a href="#2-项目配置" class="headerlink" title="2. 项目配置"></a>2. 项目配置</h3><ul><li><p>打开项目后，在菜单栏点击 <code>项目 -&gt; 项目设置（Project Settings）</code></p></li><li><p>在 <strong>模块设置（Modules）</strong> 中，确保以下模块被启用：</p><ul><li><code>UI</code></li><li><code>2D</code></li><li><code>physics2d</code>（如用到物理效果）</li><li><code>web</code>（用于兼容 Web 平台）</li><li><code>wechatgame</code>（关键）</li></ul></li></ul><hr><h2 id="✅-三、构建为微信小程序"><a href="#✅-三、构建为微信小程序" class="headerlink" title="✅ 三、构建为微信小程序"></a>✅ 三、构建为微信小程序</h2><h3 id="1-打开构建面板"><a href="#1-打开构建面板" class="headerlink" title="1. 打开构建面板"></a>1. 打开构建面板</h3><ul><li>点击顶部菜单 <code>项目 -&gt; 构建</code>，打开构建面板</li></ul><h3 id="2-构建设置"><a href="#2-构建设置" class="headerlink" title="2. 构建设置"></a>2. 构建设置</h3><ul><li><strong>平台</strong>：选择 <code>微信小游戏</code></li><li><strong>构建路径</strong>：默认或自定义（例如：<code>build/wechatgame</code>）</li><li><strong>游戏包名</strong>：自定义名称，例如 <code>my-smile-game</code></li><li><strong>首场景</strong>：确认正确填写（默认是 <code>db://assets/scene/...</code>）</li><li><strong>分包</strong>：建议开启自动分包（提升加载效率）</li></ul><h3 id="3-构建"><a href="#3-构建" class="headerlink" title="3. 构建"></a>3. 构建</h3><p>点击 <code>构建</code> 按钮，等待生成完成</p><hr><h2 id="✅-四、微信开发者工具导入项目"><a href="#✅-四、微信开发者工具导入项目" class="headerlink" title="✅ 四、微信开发者工具导入项目"></a>✅ 四、微信开发者工具导入项目</h2><h3 id="1-打开微信开发者工具"><a href="#1-打开微信开发者工具" class="headerlink" title="1. 打开微信开发者工具"></a>1. 打开微信开发者工具</h3><ul><li>点击 <code>+</code> 创建新项目</li><li><strong>项目目录</strong>：选择 Cocos 构建后生成的 <code>wechatgame</code> 目录</li><li><strong>AppID</strong>：选择你的小程序 AppID（可选测试号）</li><li><strong>项目名称</strong>：自定义</li><li><strong>是否使用云开发</strong>：一般选择“否”</li></ul><p>点击“创建”进入项目</p><hr><h2 id="✅-五、调试与发布"><a href="#✅-五、调试与发布" class="headerlink" title="✅ 五、调试与发布"></a>✅ 五、调试与发布</h2><h3 id="1-调试"><a href="#1-调试" class="headerlink" title="1. 调试"></a>1. 调试</h3><ul><li>在微信开发者工具中点击“编译”或“预览”</li><li>可实时查看日志、FPS、网络请求等</li></ul><h3 id="2-发布"><a href="#2-发布" class="headerlink" title="2. 发布"></a>2. 发布</h3><ul><li>通过开发者工具上传代码，提交审核，发布上线</li></ul><hr><h2 id="✅-补充建议"><a href="#✅-补充建议" class="headerlink" title="✅ 补充建议"></a>✅ 补充建议</h2><h3 id="📦-小技巧"><a href="#📦-小技巧" class="headerlink" title="📦 小技巧"></a>📦 小技巧</h3><ul><li>开启 “图集合图” 优化资源包大小</li><li><code>assets/resources</code> 目录可动态加载资源</li><li>开启 <code>调试面板</code> 有助于调试性能和显示状态</li></ul><h3 id="🛠️-常见问题"><a href="#🛠️-常见问题" class="headerlink" title="🛠️ 常见问题"></a>🛠️ 常见问题</h3><table><thead><tr><th>问题</th><th>解决方法</th></tr></thead><tbody><tr><td><code>window is not defined</code> 报错</td><td>检查是否使用了 Web 端特有 API</td></tr><tr><td>资源无法加载</td><td>检查是否放入了 <code>resources</code> 目录，并正确引用路径</td></tr><tr><td>黑屏</td><td>检查首场景路径是否正确，或者资源未打包</td></tr></tbody></table><hr>]]></content>
      
      
      
        <tags>
            
            <tag> Cocos Creator 3.x </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ai自动化测试用例生成</title>
      <link href="/2025/05/26/automatically_test_skills/ai%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E7%94%9F%E6%88%90/"/>
      <url>/2025/05/26/automatically_test_skills/ai%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E7%94%9F%E6%88%90/</url>
      
        <content type="html"><![CDATA[<h2 id="🧠-1-输入信息收集（Prompt-Design）"><a href="#🧠-1-输入信息收集（Prompt-Design）" class="headerlink" title="🧠 1. 输入信息收集（Prompt Design）"></a>🧠 1. <strong>输入信息收集（Prompt Design）</strong></h2><p>AI 生成测试用例的前提是了解你系统的以下信息：</p><ul><li><strong>用户故事&#x2F;业务流程</strong>：例如，“用户可以登录、搜索产品并加入购物车”。</li><li><strong>页面结构或 UI 元素信息</strong>：可以是 HTML、组件树或页面截图。</li><li><strong>可用的测试框架</strong>：如 Playwright、Cypress、Puppeteer、Selenium 等。</li><li><strong>测试语言偏好</strong>：JavaScript&#x2F;TypeScript、Python、Java 等。</li><li><strong>API 文档&#x2F;接口规范（如 Swagger）</strong>：用于后端集成测试。</li></ul><hr><h2 id="⚙️-2-大模型生成测试用例的方式"><a href="#⚙️-2-大模型生成测试用例的方式" class="headerlink" title="⚙️ 2. 大模型生成测试用例的方式"></a>⚙️ 2. <strong>大模型生成测试用例的方式</strong></h2><p>大模型主要扮演 <strong>自然语言转代码</strong> 的角色，以下是具体流程：</p><h3 id="✅-示例-Prompt（面向-ChatGPT-或-API）"><a href="#✅-示例-Prompt（面向-ChatGPT-或-API）" class="headerlink" title="✅ 示例 Prompt（面向 ChatGPT 或 API）"></a>✅ 示例 Prompt（面向 ChatGPT 或 API）</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">你是一个经验丰富的测试工程师。请根据以下用户流程生成一份基于 Playwright 的 E2E 测试脚本，使用 TypeScript：</span><br><span class="line"></span><br><span class="line">用户流程：</span><br><span class="line">1. 用户访问首页 https://myshop.com</span><br><span class="line">2. 点击“登录”</span><br><span class="line">3. 输入邮箱和密码（email: test@example.com, password: 123456）</span><br><span class="line">4. 登录成功后，搜索“iPhone 15”</span><br><span class="line">5. 在搜索结果中点击第一个商品</span><br><span class="line">6. 点击“加入购物车”</span><br><span class="line">7. 验证购物车中包含此商品</span><br><span class="line"></span><br><span class="line">要求：</span><br><span class="line">- 使用 async/await</span><br><span class="line">- 包含断言检查</span><br></pre></td></tr></table></figure><h3 id="🧪-模型输出示例（Playwright）"><a href="#🧪-模型输出示例（Playwright）" class="headerlink" title="🧪 模型输出示例（Playwright）"></a>🧪 模型输出示例（Playwright）</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; test, expect &#125; <span class="keyword">from</span> <span class="string">&#x27;@playwright/test&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;用户登录并添加商品到购物车&#x27;</span>, <span class="keyword">async</span> (&#123; page &#125;) =&gt; &#123;</span><br><span class="line">  <span class="keyword">await</span> page.<span class="title function_">goto</span>(<span class="string">&#x27;https://myshop.com&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">await</span> page.<span class="title function_">click</span>(<span class="string">&#x27;text=登录&#x27;</span>);</span><br><span class="line">  <span class="keyword">await</span> page.<span class="title function_">fill</span>(<span class="string">&#x27;input[name=&quot;email&quot;]&#x27;</span>, <span class="string">&#x27;test@example.com&#x27;</span>);</span><br><span class="line">  <span class="keyword">await</span> page.<span class="title function_">fill</span>(<span class="string">&#x27;input[name=&quot;password&quot;]&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>);</span><br><span class="line">  <span class="keyword">await</span> page.<span class="title function_">click</span>(<span class="string">&#x27;button:has-text(&quot;登录&quot;)&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">expect</span>(page).<span class="title function_">toHaveURL</span>(<span class="regexp">/dashboard/</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">await</span> page.<span class="title function_">fill</span>(<span class="string">&#x27;input[placeholder=&quot;搜索&quot;]&#x27;</span>, <span class="string">&#x27;iPhone 15&#x27;</span>);</span><br><span class="line">  <span class="keyword">await</span> page.<span class="title function_">click</span>(<span class="string">&#x27;button:has-text(&quot;搜索&quot;)&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">await</span> page.<span class="title function_">click</span>(<span class="string">&#x27;.product-list .product-item:first-child&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">await</span> page.<span class="title function_">click</span>(<span class="string">&#x27;button:has-text(&quot;加入购物车&quot;)&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">await</span> page.<span class="title function_">click</span>(<span class="string">&#x27;a:has-text(&quot;购物车&quot;)&#x27;</span>);</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">expect</span>(page.<span class="title function_">locator</span>(<span class="string">&#x27;.cart-items&#x27;</span>)).<span class="title function_">toContainText</span>(<span class="string">&#x27;iPhone 15&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><hr><h2 id="🤖-3-AI-自动化集成的方式"><a href="#🤖-3-AI-自动化集成的方式" class="headerlink" title="🤖 3. AI 自动化集成的方式"></a>🤖 3. <strong>AI 自动化集成的方式</strong></h2><h3 id="✅-可嵌入工作流的方式有："><a href="#✅-可嵌入工作流的方式有：" class="headerlink" title="✅ 可嵌入工作流的方式有："></a>✅ 可嵌入工作流的方式有：</h3><ul><li><strong>CI&#x2F;CD 流程中自动生成回归测试脚本</strong></li><li><strong>结合低代码工具（如 Retool、Internal.io）可视化测试步骤</strong></li><li><strong>结合页面爬虫 + GPT 自动构造页面交互路径</strong></li><li><strong>AI agent（如 AutoGPT）逐页探索 UI 并生成测试用例</strong></li></ul><hr><h2 id="🧩-4-与其他工具的集成建议"><a href="#🧩-4-与其他工具的集成建议" class="headerlink" title="🧩 4. 与其他工具的集成建议"></a>🧩 4. <strong>与其他工具的集成建议</strong></h2><table><thead><tr><th>工具&#x2F;平台</th><th>作用</th></tr></thead><tbody><tr><td>Playwright&#x2F;Cypress</td><td>执行生成的测试脚本</td></tr><tr><td>LangChain + GPT</td><td>实现测试步骤的规划与脚本生成</td></tr><tr><td>Puppeteer + GPT Vision（图像识别）</td><td>基于 UI 屏幕截图自动生成测试</td></tr><tr><td>Postman + AI</td><td>自动生成 API 层 E2E 测试用例</td></tr></tbody></table><hr><h2 id="🛠️-5-最佳实践建议"><a href="#🛠️-5-最佳实践建议" class="headerlink" title="🛠️ 5. 最佳实践建议"></a>🛠️ 5. <strong>最佳实践建议</strong></h2><ul><li>优先从**常见用户流程（happy path）**生成测试</li><li>用 <strong>mock 数据或 test account</strong> 避免破坏生产环境</li><li>每次部署后用 GPT 自动对比 UI 改动并生成差异测试</li><li>若产品设计采用 Figma，可通过 Figma plugin 提取页面结构生成测试脚本</li></ul><hr><p>在比较 <strong>React 组件测试</strong> 和 <strong>E2E 自动化测试</strong> 的自动生成难度时，有以下几个关键维度可以帮助你理解：</p><hr><h2 id="✅-总体结论："><a href="#✅-总体结论：" class="headerlink" title="✅ 总体结论："></a>✅ 总体结论：</h2><table><thead><tr><th>项目</th><th>哪个更简单生成？</th></tr></thead><tbody><tr><td><strong>自动生成 React 单元&#x2F;集成测试</strong></td><td>✅ <strong>更简单</strong></td></tr><tr><td><strong>自动生成 E2E 测试（端到端）</strong></td><td>🚫 相对复杂</td></tr></tbody></table><hr><h2 id="🔍-原因详解："><a href="#🔍-原因详解：" class="headerlink" title="🔍 原因详解："></a>🔍 原因详解：</h2><h3 id="一、React-单元-集成测试（通常使用-Jest-Testing-Library）"><a href="#一、React-单元-集成测试（通常使用-Jest-Testing-Library）" class="headerlink" title="一、React 单元&#x2F;集成测试（通常使用 Jest + Testing Library）"></a>一、React 单元&#x2F;集成测试（通常使用 Jest + Testing Library）</h3><h4 id="✔️-更容易自动化的原因："><a href="#✔️-更容易自动化的原因：" class="headerlink" title="✔️ 更容易自动化的原因："></a>✔️ 更容易自动化的原因：</h4><ul><li>输入输出明确（props、state）</li><li>通常只涉及一个组件，不依赖后端或完整页面流程</li><li>DOM结构清晰、可预测（模型能通过 JSX 推理测试）</li><li>更容易 mock 外部依赖（如 API、context）</li></ul><h4 id="🧠-示例："><a href="#🧠-示例：" class="headerlink" title="🧠 示例："></a>🧠 示例：</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Button.tsx</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">Button</span>(<span class="params">&#123; onClick &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;onClick&#125;</span>&gt;</span>Click me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>GPT 很容易生成测试：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; render, screen, fireEvent &#125; <span class="keyword">from</span> <span class="string">&#x27;@testing-library/react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Button</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./Button&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;点击按钮触发事件&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> handleClick = jest.<span class="title function_">fn</span>();</span><br><span class="line">  <span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleClick&#125;</span> /&gt;</span></span>);</span><br><span class="line">  fireEvent.<span class="title function_">click</span>(screen.<span class="title function_">getByText</span>(<span class="string">&#x27;Click me&#x27;</span>));</span><br><span class="line">  <span class="title function_">expect</span>(handleClick).<span class="title function_">toHaveBeenCalled</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><hr><h3 id="二、E2E-测试（使用-Playwright-Cypress-等）"><a href="#二、E2E-测试（使用-Playwright-Cypress-等）" class="headerlink" title="二、E2E 测试（使用 Playwright &#x2F; Cypress 等）"></a>二、E2E 测试（使用 Playwright &#x2F; Cypress 等）</h3><h4 id="🚫-更复杂的原因："><a href="#🚫-更复杂的原因：" class="headerlink" title="🚫 更复杂的原因："></a>🚫 更复杂的原因：</h4><ul><li>需要理解多个页面之间的<strong>业务流程</strong></li><li>涉及<strong>异步网络请求、认证、环境配置</strong></li><li>页面元素可能是动态加载、难以定位</li><li>UI 样式或布局变化可能导致测试失败</li><li>更依赖完整的运行系统或 mock 服务</li></ul><hr><h2 id="📊-总结对比"><a href="#📊-总结对比" class="headerlink" title="📊 总结对比"></a>📊 总结对比</h2><table><thead><tr><th>维度</th><th>React 单元测试</th><th>E2E 测试</th></tr></thead><tbody><tr><td>场景范围</td><td>单一组件</td><td>整个用户操作流程</td></tr><tr><td>依赖复杂度</td><td>低（仅组件内部逻辑）</td><td>高（页面跳转、后端接口）</td></tr><tr><td>模型理解成本</td><td>低（JSX结构清晰）</td><td>高（需理解整个业务流程）</td></tr><tr><td>自动生成准确性</td><td>✅ 高</td><td>🚫 可能需大量人工干预</td></tr><tr><td>易于本地运行验证</td><td>✅ 易（无需环境）</td><td>🚫 难（需后端、数据库等）</td></tr></tbody></table><hr><h2 id="✨-实战建议："><a href="#✨-实战建议：" class="headerlink" title="✨ 实战建议："></a>✨ 实战建议：</h2><ul><li><strong>先用 AI 自动生成 React 测试</strong>（快速提升覆盖率）</li><li>然后手动 + AI 辅助生成核心的 E2E 流程测试（如登录、下单等）</li><li>E2E 生成可结合低代码 UI 抽象或页面爬虫辅助结构分析</li></ul><hr>]]></content>
      
      
      
        <tags>
            
            <tag> 自动化测试 </tag>
            
            <tag> cypress </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>reactjs ai大模型单元测试</title>
      <link href="/2025/05/25/front_skills/react/react%20ai%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
      <url>/2025/05/25/front_skills/react/react%20ai%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h2 id="LLM"><a href="#LLM" class="headerlink" title=" LLM"></a> LLM</h2><h2 id="✅-一、你要测试的典型对象"><a href="#✅-一、你要测试的典型对象" class="headerlink" title="✅ 一、你要测试的典型对象"></a>✅ 一、你要测试的典型对象</h2><p>举例：你有个 React Hook 或 service 用来调用大模型 API：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/services/llmService.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">callLLM</span>(<span class="params">prompt: <span class="built_in">string</span></span>): <span class="title class_">Promise</span>&lt;<span class="built_in">string</span>&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;/api/llm&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">    <span class="attr">body</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123; prompt &#125;),</span><br><span class="line">    <span class="attr">headers</span>: &#123; <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span> &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">const</span> data = <span class="keyword">await</span> response.<span class="title function_">json</span>();</span><br><span class="line">  <span class="keyword">return</span> data.<span class="property">result</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>目标是为这个函数自动生成测试。</p><hr><h2 id="🛠️-二、推荐的技术栈"><a href="#🛠️-二、推荐的技术栈" class="headerlink" title="🛠️ 二、推荐的技术栈"></a>🛠️ 二、推荐的技术栈</h2><table><thead><tr><th>目标</th><th>工具</th></tr></thead><tbody><tr><td>单元测试框架</td><td><a href="https://jestjs.io/">Jest</a></td></tr><tr><td>模拟 HTTP 请求</td><td><a href="https://mswjs.io/">msw</a></td></tr><tr><td>自动生成测试代码（AI 辅助）</td><td>ChatGPT、CodiumAI、TestGPT</td></tr></tbody></table><hr><h2 id="🔁-三、用-AI-自动生成测试用例（方式）"><a href="#🔁-三、用-AI-自动生成测试用例（方式）" class="headerlink" title="🔁 三、用 AI 自动生成测试用例（方式）"></a>🔁 三、用 AI 自动生成测试用例（方式）</h2><h3 id="✅-方法-1：用-ChatGPT-自动生成测试"><a href="#✅-方法-1：用-ChatGPT-自动生成测试" class="headerlink" title="✅ 方法 1：用 ChatGPT 自动生成测试"></a>✅ 方法 1：用 ChatGPT 自动生成测试</h3><p>你可以把你的函数贴进来，并让 ChatGPT 为你写 Jest 测试。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">为以下函数写一个 Jest 单元测试，模拟 API 返回和异常：</span><br><span class="line"></span><br><span class="line">export async function callLLM(prompt: string): Promise&lt;string&gt; &#123;</span><br><span class="line">  const response = await fetch(&#x27;/api/llm&#x27;, &#123;</span><br><span class="line">    method: &#x27;POST&#x27;,</span><br><span class="line">    body: JSON.stringify(&#123; prompt &#125;),</span><br><span class="line">    headers: &#123; &#x27;Content-Type&#x27;: &#x27;application/json&#x27; &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">  const data = await response.json();</span><br><span class="line">  return data.result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>➡️ ChatGPT 会给出类似这样的测试：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// __tests__/llmService.test.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; callLLM &#125; <span class="keyword">from</span> <span class="string">&#x27;../services/llmService&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">global</span>.<span class="property">fetch</span> = jest.<span class="title function_">fn</span>();</span><br><span class="line"></span><br><span class="line"><span class="title function_">describe</span>(<span class="string">&#x27;callLLM&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">afterEach</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    jest.<span class="title function_">clearAllMocks</span>();</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;should return result when API responds successfully&#x27;</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> mockResponse = &#123; <span class="attr">result</span>: <span class="string">&#x27;Hello, world!&#x27;</span> &#125;;</span><br><span class="line">    (fetch <span class="keyword">as</span> jest.<span class="property">Mock</span>).<span class="title function_">mockResolvedValue</span>(&#123;</span><br><span class="line">      <span class="attr">json</span>: <span class="function">() =&gt;</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(mockResponse),</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="title function_">callLLM</span>(<span class="string">&#x27;Hi&#x27;</span>);</span><br><span class="line">    <span class="title function_">expect</span>(result).<span class="title function_">toBe</span>(<span class="string">&#x27;Hello, world!&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;should throw error if fetch fails&#x27;</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    (fetch <span class="keyword">as</span> jest.<span class="property">Mock</span>).<span class="title function_">mockRejectedValue</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Network error&#x27;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">expect</span>(<span class="title function_">callLLM</span>(<span class="string">&#x27;Hi&#x27;</span>)).<span class="property">rejects</span>.<span class="title function_">toThrow</span>(<span class="string">&#x27;Network error&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><hr><h2 id="🤖-方法-2：集成-AI-测试自动化工具（前沿方向）"><a href="#🤖-方法-2：集成-AI-测试自动化工具（前沿方向）" class="headerlink" title="🤖 方法 2：集成 AI 测试自动化工具（前沿方向）"></a>🤖 方法 2：集成 AI 测试自动化工具（前沿方向）</h2><h3 id="✨-1-CodiumAI（自动补全测试）"><a href="#✨-1-CodiumAI（自动补全测试）" class="headerlink" title="✨ 1. CodiumAI（自动补全测试）"></a>✨ 1. CodiumAI（自动补全测试）</h3><ul><li>VSCode 插件</li><li>根据函数生成 Jest 测试模板</li><li>支持 TS、React、Node</li></ul><p>📦 安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code --install-extension Codium.codiumai</span><br></pre></td></tr></table></figure><p>官网：<a href="https://www.codium.ai/">https://www.codium.ai</a></p><hr><h3 id="✨-2-TestGPT（ChatGPT-自动生成测试）"><a href="#✨-2-TestGPT（ChatGPT-自动生成测试）" class="headerlink" title="✨ 2. TestGPT（ChatGPT 自动生成测试）"></a>✨ 2. TestGPT（ChatGPT 自动生成测试）</h3><p>可以结合 ChatGPT API 或 OpenAI 插件，传入代码片段，返回 Jest 测试。</p><hr><h2 id="📦-四、为-React-Component-生成-LLM-Mock-测试（完整流程）"><a href="#📦-四、为-React-Component-生成-LLM-Mock-测试（完整流程）" class="headerlink" title="📦 四、为 React Component 生成 LLM Mock 测试（完整流程）"></a>📦 四、为 React Component 生成 LLM Mock 测试（完整流程）</h2><p>假设你有一个组件，输入 prompt 调用大模型接口：</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// PromptInput.tsx</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; callLLM &#125; <span class="keyword">from</span> <span class="string">&#x27;./services/llmService&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">PromptInput</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [prompt, setPrompt] = <span class="title function_">useState</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> [result, setResult] = <span class="title function_">useState</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleSubmit</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">callLLM</span>(prompt);</span><br><span class="line">    <span class="title function_">setResult</span>(res);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">&#123;prompt&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;(e)</span> =&gt;</span> setPrompt(e.target.value)&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleSubmit&#125;</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;result&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>你可以写一个自动化测试这样测试它（用 <code>@testing-library/react</code>）：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; render, screen, fireEvent &#125; <span class="keyword">from</span> <span class="string">&#x27;@testing-library/react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">PromptInput</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./PromptInput&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> llmService <span class="keyword">from</span> <span class="string">&#x27;./services/llmService&#x27;</span>;</span><br><span class="line"></span><br><span class="line">jest.<span class="title function_">mock</span>(<span class="string">&#x27;./services/llmService&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;renders input and displays LLM response&#x27;</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  (llmService.<span class="property">callLLM</span> <span class="keyword">as</span> jest.<span class="property">Mock</span>).<span class="title function_">mockResolvedValue</span>(<span class="string">&#x27;Mock response&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">PromptInput</span> /&gt;</span></span>);</span><br><span class="line">  fireEvent.<span class="title function_">change</span>(screen.<span class="title function_">getByRole</span>(<span class="string">&#x27;textbox&#x27;</span>), &#123; <span class="attr">target</span>: &#123; <span class="attr">value</span>: <span class="string">&#x27;Hi&#x27;</span> &#125; &#125;);</span><br><span class="line">  fireEvent.<span class="title function_">click</span>(screen.<span class="title function_">getByText</span>(<span class="string">&#x27;Submit&#x27;</span>));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> result = <span class="keyword">await</span> screen.<span class="title function_">findByText</span>(<span class="string">&#x27;Mock response&#x27;</span>);</span><br><span class="line">  <span class="title function_">expect</span>(result).<span class="title function_">toBeInTheDocument</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><hr><h2 id="🧩-五、可选：测试生成平台一键生成"><a href="#🧩-五、可选：测试生成平台一键生成" class="headerlink" title="🧩 五、可选：测试生成平台一键生成"></a>🧩 五、可选：测试生成平台一键生成</h2><ul><li><strong>CodiumAI</strong></li><li><strong>GitHub Copilot Labs</strong></li><li><strong>TestGPT（社区项目）</strong></li></ul><hr><h2 id="✅-总结：React-LLM-测试自动化建议"><a href="#✅-总结：React-LLM-测试自动化建议" class="headerlink" title="✅ 总结：React + LLM 测试自动化建议"></a>✅ 总结：React + LLM 测试自动化建议</h2><table><thead><tr><th>类型</th><th>推荐做法</th></tr></thead><tbody><tr><td>LLM 调用函数测试</td><td>用 Jest 单测，mock <code>fetch</code> 或 axios</td></tr><tr><td>React 组件测试</td><td>用 <code>@testing-library/react</code> + Jest</td></tr><tr><td>自动生成测试代码</td><td>ChatGPT、CodiumAI、Copilot Labs、TestGPT 等辅助</td></tr><tr><td>稳定测试建议</td><td>使用 <code>msw</code> 作为 mock server 来模拟 LLM 响应</td></tr></tbody></table><hr>]]></content>
      
      
      
        <tags>
            
            <tag> reactjs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端跨域</title>
      <link href="/2025/05/21/front_skills/js/%E5%89%8D%E7%AB%AF%E8%B7%A8%E5%9F%9F/"/>
      <url>/2025/05/21/front_skills/js/%E5%89%8D%E7%AB%AF%E8%B7%A8%E5%9F%9F/</url>
      
        <content type="html"><![CDATA[<h2 id="🌐-什么是跨域（CORS）"><a href="#🌐-什么是跨域（CORS）" class="headerlink" title="🌐 什么是跨域（CORS）"></a>🌐 什么是跨域（CORS）</h2><p><strong>跨域（Cross-Origin）</strong>：当前网页的 JS 在向不同源发起请求时，如果协议、域名、端口任一不相同，就会被认为是“跨域”。</p><h3 id="举个例子："><a href="#举个例子：" class="headerlink" title="举个例子："></a>举个例子：</h3><ul><li>页面地址：<a href="https://example.com/">https://example.com</a></li><li>访问 API：<a href="https://api.example.com/">https://api.example.com</a> ✅ <strong>跨域</strong></li></ul><hr><h2 id="🔒-同源策略限制内容"><a href="#🔒-同源策略限制内容" class="headerlink" title="🔒 同源策略限制内容"></a>🔒 同源策略限制内容</h2><p>浏览器会限制以下行为：</p><ul><li><code>XMLHttpRequest</code> &#x2F; <code>fetch</code> 请求被拦截</li><li><code>读取跨域响应数据</code> 会失败（即便请求成功）</li><li>部分 <code>cookie</code>、<code>localStorage</code> 等也受限</li></ul><hr><h2 id="✅-常见跨域解决方案"><a href="#✅-常见跨域解决方案" class="headerlink" title="✅ 常见跨域解决方案"></a>✅ 常见跨域解决方案</h2><h3 id="1-CORS（Cross-Origin-Resource-Sharing）"><a href="#1-CORS（Cross-Origin-Resource-Sharing）" class="headerlink" title="1. CORS（Cross-Origin Resource Sharing）"></a>1. <strong>CORS（Cross-Origin Resource Sharing）</strong></h3><p>最推荐的方式，由服务端设置响应头允许跨域访问。</p><h4 id="服务端设置响应头（示例）："><a href="#服务端设置响应头（示例）：" class="headerlink" title="服务端设置响应头（示例）："></a>服务端设置响应头（示例）：</h4><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Access-Control-Allow-Origin</span><span class="punctuation">: </span>https://example.com</span><br><span class="line"><span class="attribute">Access-Control-Allow-Methods</span><span class="punctuation">: </span>GET, POST, PUT</span><br><span class="line"><span class="attribute">Access-Control-Allow-Headers</span><span class="punctuation">: </span>Content-Type</span><br><span class="line"><span class="attribute">Access-Control-Allow-Credentials</span><span class="punctuation">: </span>true</span><br></pre></td></tr></table></figure><p>优点：</p><ul><li>标准、安全</li><li>支持多种请求方式</li></ul><p>缺点：</p><ul><li>需要服务端配合设置</li></ul><hr><h3 id="2-JSONP（仅支持-GET-请求）"><a href="#2-JSONP（仅支持-GET-请求）" class="headerlink" title="2. JSONP（仅支持 GET 请求）"></a>2. <strong>JSONP</strong>（仅支持 GET 请求）</h3><p>原理：利用 <code>&lt;script&gt;</code> 标签没有跨域限制的特性，通过动态插入 <code>&lt;script&gt;</code> 实现跨域数据请求。</p><h4 id="使用方式："><a href="#使用方式：" class="headerlink" title="使用方式："></a>使用方式：</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;https://api.example.com/data?callback=handleData&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">function</span> <span class="title function_">handleData</span>(<span class="params">data</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>优点：</p><ul><li>兼容老浏览器</li></ul><p>缺点：</p><ul><li>只支持 GET</li><li>不安全，不推荐用于现代项目</li></ul><hr><h3 id="3-代理转发（开发时最常用）"><a href="#3-代理转发（开发时最常用）" class="headerlink" title="3. 代理转发（开发时最常用）"></a>3. <strong>代理转发（开发时最常用）</strong></h3><p>在本地开发时，可以使用 Webpack&#x2F;Vite 配置代理，将请求转发到目标 API，避免浏览器发起跨域请求。</p><h4 id="Vite-配置示例："><a href="#Vite-配置示例：" class="headerlink" title="Vite 配置示例："></a>Vite 配置示例：</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vite.config.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">server</span>: &#123;</span><br><span class="line">    <span class="attr">proxy</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;/api&#x27;</span>: &#123;</span><br><span class="line">        <span class="attr">target</span>: <span class="string">&#x27;https://api.example.com&#x27;</span>,</span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">rewrite</span>: <span class="function"><span class="params">path</span> =&gt;</span> path.<span class="title function_">replace</span>(<span class="regexp">/^\/api/</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优点：</p><ul><li>开发方便</li><li>无需改动后端</li></ul><p>缺点：</p><ul><li>仅适用于开发环境</li></ul><hr><h3 id="4-服务器中间层代理（后端转发）"><a href="#4-服务器中间层代理（后端转发）" class="headerlink" title="4. 服务器中间层代理（后端转发）"></a>4. <strong>服务器中间层代理（后端转发）</strong></h3><p>后端自己请求外部 API，再返回给前端，前端请求的始终是同源接口。</p><h4 id="原理图："><a href="#原理图：" class="headerlink" title="原理图："></a>原理图：</h4><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">前端 ——&gt; 自己服务器 ——&gt; 外部 API</span><br></pre></td></tr></table></figure><p>优点：</p><ul><li>彻底规避跨域</li><li>可控制缓存、安全性</li></ul><p>缺点：</p><ul><li>增加服务器负担</li></ul><hr><h3 id="5-window-postMessage（用于-iframe-跨域通信）"><a href="#5-window-postMessage（用于-iframe-跨域通信）" class="headerlink" title="5. window.postMessage（用于 iframe 跨域通信）"></a>5. <strong>window.postMessage（用于 iframe 跨域通信）</strong></h3><p>用于两个不同源的页面之间通过 iframe 或 window.open 传递消息。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 子页面</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">parent</span>.<span class="title function_">postMessage</span>(<span class="string">&#x27;data from child&#x27;</span>, <span class="string">&#x27;https://parent.com&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 父页面监听</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;message&#x27;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (event.<span class="property">origin</span> === <span class="string">&#x27;https://child.com&#x27;</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">data</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><hr><h2 id="🧠-总结推荐"><a href="#🧠-总结推荐" class="headerlink" title="🧠 总结推荐"></a>🧠 总结推荐</h2><table><thead><tr><th>方式</th><th>适用场景</th><th>是否安全</th><th>支持请求类型</th><th>是否需后端</th></tr></thead><tbody><tr><td>CORS</td><td>推荐方式</td><td>✅ 安全</td><td>所有</td><td>✅</td></tr><tr><td>JSONP</td><td>老项目&#x2F;兼容需求</td><td>❌ 不安全</td><td>GET</td><td>✅</td></tr><tr><td>本地代理</td><td>本地开发</td><td>✅ 安全</td><td>所有</td><td>❌</td></tr><tr><td>服务端代理</td><td>所有场景</td><td>✅ 安全</td><td>所有</td><td>✅</td></tr><tr><td>postMessage</td><td>页面嵌套</td><td>✅ 安全</td><td>-</td><td>❌</td></tr></tbody></table><hr><p>Nginx 也是一种 <strong>常见且强大</strong> 的跨域解决方案，适用于<strong>生产环境</strong>中通过 <strong>反向代理</strong> 来解决跨域问题，或者通过配置 <strong>CORS 响应头</strong> 来支持跨域访问。</p><hr><h2 id="🔁-一、Nginx-解决跨域的两种方式"><a href="#🔁-一、Nginx-解决跨域的两种方式" class="headerlink" title="🔁 一、Nginx 解决跨域的两种方式"></a>🔁 一、Nginx 解决跨域的两种方式</h2><hr><h3 id="✅-方式一：反向代理跨域（推荐）"><a href="#✅-方式一：反向代理跨域（推荐）" class="headerlink" title="✅ 方式一：反向代理跨域（推荐）"></a>✅ 方式一：<strong>反向代理跨域（推荐）</strong></h3><p>通过 Nginx 把前端请求代理到后端服务器，<strong>前端请求的是同源地址</strong>，从而避免跨域。</p><h4 id="📌-示例场景："><a href="#📌-示例场景：" class="headerlink" title="📌 示例场景："></a>📌 示例场景：</h4><ul><li>前端页面：<code>https://www.my-site.com</code></li><li>后端 API：<code>https://api.example.com</code></li><li>Nginx 配置反向代理 <code>/api</code> 到 <code>https://api.example.com</code></li></ul><h4 id="🛠-Nginx-配置示例："><a href="#🛠-Nginx-配置示例：" class="headerlink" title="🛠 Nginx 配置示例："></a>🛠 Nginx 配置示例：</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">  <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">  <span class="attribute">server_name</span> www.my-site.com;</span><br><span class="line"></span><br><span class="line">  <span class="section">location</span> / &#123;</span><br><span class="line">    <span class="attribute">root</span> /usr/share/nginx/html;</span><br><span class="line">    <span class="attribute">index</span> index.html;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="section">location</span> /api/ &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span> https://api.example.com/;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Forwarded-Proto <span class="variable">$scheme</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>🔄 这样浏览器看到的是同一个源 <code>www.my-site.com</code>，跨域问题就不存在了。</p></blockquote><hr><h3 id="✅-方式二：添加-CORS-响应头"><a href="#✅-方式二：添加-CORS-响应头" class="headerlink" title="✅ 方式二：添加 CORS 响应头"></a>✅ 方式二：<strong>添加 CORS 响应头</strong></h3><p>如果你控制的是 <strong>API 服务所在的 Nginx</strong>，可以直接配置 CORS 响应头，允许跨域访问。</p><h4 id="🛠-Nginx-配置-CORS-示例："><a href="#🛠-Nginx-配置-CORS-示例：" class="headerlink" title="🛠 Nginx 配置 CORS 示例："></a>🛠 Nginx 配置 CORS 示例：</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">location</span> /api/ &#123;</span><br><span class="line">  <span class="attribute">add_header</span> <span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span> <span class="string">&#x27;*&#x27;</span> always;</span><br><span class="line">  <span class="attribute">add_header</span> <span class="string">&#x27;Access-Control-Allow-Methods&#x27;</span> <span class="string">&#x27;GET, POST, OPTIONS&#x27;</span>;</span><br><span class="line">  <span class="attribute">add_header</span> <span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span> <span class="string">&#x27;Content-Type, Authorization&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">if</span> (<span class="variable">$request_method</span> = <span class="string">&#x27;OPTIONS&#x27;</span>) &#123;</span><br><span class="line">    <span class="attribute">return</span> <span class="number">204</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">proxy_pass</span> http://backend_api;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="📌-说明："><a href="#📌-说明：" class="headerlink" title="📌 说明："></a>📌 说明：</h4><ul><li><code>Access-Control-Allow-Origin: *</code> 允许所有域访问（可以换成具体域名）</li><li><code>OPTIONS</code> 请求用于预检请求（preflight），所以要返回 204（No Content）</li></ul><hr><h2 id="🧠-Nginx-配置总结对比"><a href="#🧠-Nginx-配置总结对比" class="headerlink" title="🧠 Nginx 配置总结对比"></a>🧠 Nginx 配置总结对比</h2><table><thead><tr><th>跨域方式</th><th>应用层</th><th>是否需改动后端</th><th>安全性</th><th>复杂度</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>✅ Nginx 反向代理</td><td>服务器</td><td>❌（只改 Nginx）</td><td>高</td><td>中</td><td>高效、可控、生产可用</td><td>需配置服务器、维护代理路径</td></tr><tr><td>✅ CORS 响应头</td><td>后端</td><td>✅ 需要支持</td><td>高</td><td>低</td><td>标准、安全</td><td>后端需支持、预检可能耗性能</td></tr><tr><td>⚠️ JSONP</td><td>前端+后端</td><td>✅ 需要接口支持</td><td>低</td><td>中</td><td>简单、支持老浏览器</td><td>仅支持 GET，存在 XSS 风险</td></tr><tr><td>✅ 本地开发代理</td><td>前端构建工具</td><td>❌</td><td>中</td><td>低</td><td>配置简单，开发方便</td><td>仅限开发环境，生产不适用</td></tr><tr><td>✅ 服务端代理</td><td>后端</td><td>✅（自己转发）</td><td>高</td><td>中高</td><td>可控制安全与缓存</td><td>增加服务压力，维护成本</td></tr><tr><td>✅ postMessage</td><td>前端</td><td>❌</td><td>高</td><td>中</td><td>跨窗口安全通信</td><td>场景有限，仅适合 iframe</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 性能 </tag>
            
            <tag> 原生 </tag>
            
            <tag> 跨域 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ai图片识别</title>
      <link href="/2025/05/21/bigdata_for_analyze/ai%E5%9B%BE%E7%89%87%E8%AF%86%E5%88%AB/"/>
      <url>/2025/05/21/bigdata_for_analyze/ai%E5%9B%BE%E7%89%87%E8%AF%86%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<p>你说的“AI识别图片文字，并编辑，保持样式一样，然后保存后下载”，这个需求比普通OCR文字识别复杂不少，因为要<strong>保证文字样式（字体、大小、颜色、排版）完全一致</strong>，而且能编辑和保存，下载最终效果。<br>这背后涉及的关键技术和原理，可以分成几个重点模块：</p><hr><h2 id="1-文字识别（OCR）-样式识别"><a href="#1-文字识别（OCR）-样式识别" class="headerlink" title="1. 文字识别（OCR） + 样式识别"></a>1. <strong>文字识别（OCR） + 样式识别</strong></h2><ul><li><p><strong>文字识别（OCR）</strong></p><ul><li>利用深度学习模型识别图片中的文字内容。</li><li>典型技术：CNN+RNN+CTC，或者基于Transformer的OCR模型。</li></ul></li><li><p><strong>样式识别（字体、字号、颜色、排版）</strong></p><ul><li><p>除了文字内容，还需要检测文字的字体类型、字号、颜色、粗细、斜体、下划线、文字间距等样式信息。</p></li><li><p>技术难点：</p><ul><li>文字样式识别通常结合视觉特征提取（如文字区域颜色直方图、纹理特征）</li><li>或者使用基于深度学习的图像分割与分类模型，来估计字体类型和文字属性</li></ul></li><li><p>可能结合字体库匹配技术（通过字体渲染对比），识别最接近的字体。</p></li></ul></li></ul><hr><h2 id="2-版面分析与文字定位"><a href="#2-版面分析与文字定位" class="headerlink" title="2. 版面分析与文字定位"></a>2. <strong>版面分析与文字定位</strong></h2><ul><li>识别文字的精确位置、行间距、段落间距，保持排版结构不变。</li><li>通过图像分割和布局分析（如基于深度学习的版面分析模型、传统投影分析方法）得到文字块的边界框。</li><li>保持文本对齐、换行、缩进、文字旋转角度等信息。</li></ul><hr><h2 id="3-文字编辑交互"><a href="#3-文字编辑交互" class="headerlink" title="3. 文字编辑交互"></a>3. <strong>文字编辑交互</strong></h2><ul><li>用户界面（UI）技术：支持对识别出的文字内容和样式进行修改。</li><li>文本编辑组件需要支持富文本格式，保留字体、字号、颜色等属性。</li><li>编辑时实时同步样式和排版。</li></ul><hr><h2 id="4-图像重绘与样式还原"><a href="#4-图像重绘与样式还原" class="headerlink" title="4. 图像重绘与样式还原"></a>4. <strong>图像重绘与样式还原</strong></h2><ul><li><p><strong>将编辑后的文字重新渲染回图片</strong>，保持原有的视觉效果。</p></li><li><p>关键技术：</p><ul><li>精准定位原文字区域，进行背景覆盖（擦除原文字）</li><li>使用与原文字相同字体、颜色、大小，重新绘制编辑后的文字</li><li>字体渲染技术（基于FreeType等字体渲染库）</li><li>对齐排版：行间距、字间距、对齐方式需要精准匹配</li><li>有时还需处理阴影、描边、渐变等复杂样式。</li></ul></li></ul><hr><h2 id="5-文件保存与下载"><a href="#5-文件保存与下载" class="headerlink" title="5. 文件保存与下载"></a>5. <strong>文件保存与下载</strong></h2><ul><li>将编辑并重绘后的图像保存为合适格式（PNG、JPEG、PDF等），保持图像质量。</li><li>通过浏览器或应用端提供文件下载接口。</li></ul><hr><h2 id="技术总结表"><a href="#技术总结表" class="headerlink" title="技术总结表"></a>技术总结表</h2><table><thead><tr><th>阶段</th><th>关键技术&#x2F;工具</th><th>技术要点及难点</th></tr></thead><tbody><tr><td>文字识别</td><td>OCR（CNN+RNN+CTC，Transformer等）</td><td>高准确率文字识别，支持多语言</td></tr><tr><td>样式识别</td><td>字体匹配，图像分割，深度学习视觉模型</td><td>字体、颜色、字号、粗细、斜体等样式精确提取</td></tr><tr><td>版面分析</td><td>版面布局分析，文本定位</td><td>保持文字间距、行距、对齐、旋转角度不变</td></tr><tr><td>文字编辑</td><td>富文本编辑组件（Web端如Draft.js等）</td><td>支持样式同步编辑</td></tr><tr><td>图像重绘</td><td>字体渲染库（FreeType、Pillow等）</td><td>背景擦除 + 文字重绘，保证视觉效果一致</td></tr><tr><td>文件保存&#x2F;下载</td><td>图像编码（PNG&#x2F;JPEG）、浏览器文件API</td><td>保持高质量图像，方便用户下载</td></tr></tbody></table><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>这个功能的核心难点就在于**“识别+保持样式+还原样式”**的闭环，尤其是字体和排版的精准还原。</p></blockquote><p>这是一个非常成熟且现实可行的商业策略，类似于 <strong>“Freemium（免费+增值）模式”</strong>，在 SaaS、设计类工具、AI 应用等行业广泛采用。下面是详细分析：</p><hr><h2 id="🎯-模式核心理念"><a href="#🎯-模式核心理念" class="headerlink" title="🎯 模式核心理念"></a>🎯 模式核心理念</h2><blockquote><p><strong>基础离线功能免费（或一次性低价）+ 高级云端功能通过订阅收费</strong>。</p></blockquote><p>这样既能吸引用户试用和留存，又能通过高价值服务实现持续营收。</p><hr><h2 id="✅-离线功能（免费或买断）建议内容"><a href="#✅-离线功能（免费或买断）建议内容" class="headerlink" title="✅ 离线功能（免费或买断）建议内容"></a>✅ 离线功能（免费或买断）建议内容</h2><p>这些功能不依赖服务器，可以本地运行，提供“够用”的体验：</p><h3 id="📦-离线功能列表（免费-一次性买断）："><a href="#📦-离线功能列表（免费-一次性买断）：" class="headerlink" title="📦 离线功能列表（免费&#x2F;一次性买断）："></a>📦 离线功能列表（免费&#x2F;一次性买断）：</h3><ul><li>本地图片导入和导出</li><li>基础OCR识别（基于轻量模型）</li><li>简单字体识别和保留（仅支持常用字体）</li><li>基础图像编辑（裁剪、旋转、替换文字）</li><li>简单排版和拖拽式布局</li><li>快捷键、批量处理（轻量版）</li><li>本地保存编辑历史、草稿</li></ul><p>✅ <strong>适用场景</strong>：设计初稿、在无网环境下编辑、隐私敏感任务等。</p><hr><h2 id="💡-云端订阅功能（高级功能）"><a href="#💡-云端订阅功能（高级功能）" class="headerlink" title="💡 云端订阅功能（高级功能）"></a>💡 云端订阅功能（高级功能）</h2><p>这些功能依赖高算力、实时更新和联网协作，适合作为收费亮点：</p><h3 id="🌐-云端订阅服务（按月-年订阅）："><a href="#🌐-云端订阅服务（按月-年订阅）：" class="headerlink" title="🌐 云端订阅服务（按月&#x2F;年订阅）："></a>🌐 云端订阅服务（按月&#x2F;年订阅）：</h3><ul><li>高精度OCR（云端大模型）</li><li>字体风格智能识别与匹配（包括稀有字体）</li><li>自动布局优化（智能网格&#x2F;黄金比例等）</li><li>云端AI图片修复、背景替换、风格迁移</li><li>跨设备同步（桌面+移动端）</li><li>云端字体和模板资源库（每月新增）</li><li>团队协作、共享项目、版本控制</li><li>企业客户支持（私有部署&#x2F;API接入）</li></ul><p>📈 <strong>高级用户价值</strong>：提升效率、风格保持更一致、实现跨团队编辑工作流。</p><hr><h2 id="💰-收费模式建议"><a href="#💰-收费模式建议" class="headerlink" title="💰 收费模式建议"></a>💰 收费模式建议</h2><table><thead><tr><th>模式</th><th>内容</th><th>收费策略</th></tr></thead><tbody><tr><td>免费版</td><td>基础离线功能</td><td>免费，鼓励下载试用</td></tr><tr><td>专业买断版</td><td>解锁全部离线编辑功能</td><td>一次性付费（如 ¥198）</td></tr><tr><td>云端订阅 Pro</td><td>解锁全部AI服务+云协作功能</td><td>月付 ¥39 &#x2F; 年付 ¥299</td></tr><tr><td>团队&#x2F;企业版</td><td>多人协作+私有部署+API接口</td><td>自定义定价（企业谈判）</td></tr></tbody></table><hr><h2 id="🚀-优势与盈利路径"><a href="#🚀-优势与盈利路径" class="headerlink" title="🚀 优势与盈利路径"></a>🚀 优势与盈利路径</h2><table><thead><tr><th>项目</th><th>说明</th></tr></thead><tbody><tr><td><strong>低门槛引流</strong></td><td>免费离线版可吸引大量用户安装和尝试</td></tr><tr><td><strong>用户转化率提升</strong></td><td>有需求的用户会自然升级为订阅用户</td></tr><tr><td><strong>收入稳定可预测</strong></td><td>订阅制可带来持续现金流（ARR &#x2F; MRR）</td></tr><tr><td><strong>差异化定位</strong></td><td>结合隐私保护 + 云智能，区别于全在线工具</td></tr><tr><td><strong>企业市场拓展</strong></td><td>离线+私有云部署可适配B端安全合规需求</td></tr></tbody></table><hr>]]></content>
      
      
      
        <tags>
            
            <tag> ai </tag>
            
            <tag> 图片 </tag>
            
            <tag> 识别 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tomcat webapps 和 target</title>
      <link href="/2025/05/20/backend_skills/tomcat/tomcat%20webapps/"/>
      <url>/2025/05/20/backend_skills/tomcat/tomcat%20webapps/</url>
      
        <content type="html"><![CDATA[<p><code>webapps</code> 和 <code>target</code> 是在 Java Web 应用开发和部署中经常遇到的两个目录，它们的功能和作用是不同的。以下是它们的详细区别：</p><hr><h3 id="🔸-webapps-——-Tomcat-的部署目录"><a href="#🔸-webapps-——-Tomcat-的部署目录" class="headerlink" title="🔸 webapps —— Tomcat 的部署目录"></a>🔸 <code>webapps</code> —— Tomcat 的部署目录</h3><ul><li><p><strong>位置：</strong> 位于 Tomcat 安装目录下，例如：<code>$TOMCAT_HOME/webapps</code></p></li><li><p><strong>作用：</strong> Tomcat 在启动时会自动扫描该目录下的 <code>.war</code> 文件或已解压的 Web 应用文件夹并进行部署。</p></li><li><p><strong>使用方式：</strong></p><ul><li>把编译好的 <code>.war</code> 文件放到 <code>webapps</code> 中，Tomcat 会自动解压并部署。</li><li>也可以直接将解压后的 Web 应用目录放入 <code>webapps</code>，无需 <code>.war</code> 文件。</li></ul></li><li><p><strong>示例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$TOMCAT_HOME/webapps/myapp.war</span><br><span class="line">$TOMCAT_HOME/webapps/myapp/  （解压后的文件夹）</span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="🔸-target-——-Maven-Gradle-构建输出目录"><a href="#🔸-target-——-Maven-Gradle-构建输出目录" class="headerlink" title="🔸 target —— Maven&#x2F;Gradle 构建输出目录"></a>🔸 <code>target</code> —— Maven&#x2F;Gradle 构建输出目录</h3><ul><li><strong>位置：</strong> 位于你的项目目录下，例如：<code>/your-project/target</code></li><li><strong>作用：</strong> 存放项目构建后的输出内容，包括 <code>.class</code> 文件、打包好的 <code>.war</code> 文件、临时构建文件等。</li><li><strong>自动生成：</strong> 每次运行 Maven 的 <code>mvn package</code> 或 <code>mvn install</code> 时，都会生成或更新。</li><li><strong>不能直接部署：</strong> <code>target</code> 是本地构建目录，Tomcat 不会读取它，除非你手动将 <code>.war</code> 拷贝到 <code>webapps</code> 中。</li></ul><hr><h3 id="🔄-常见流程："><a href="#🔄-常见流程：" class="headerlink" title="🔄 常见流程："></a>🔄 常见流程：</h3><ol><li><p>开发完成后，使用 Maven 构建项目：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn clean package</span><br></pre></td></tr></table></figure></li><li><p>构建后会在 <code>target/</code> 下生成 <code>.war</code> 文件，比如：<code>target/myapp.war</code></p></li><li><p>手动将该 <code>.war</code> 文件拷贝到 Tomcat 的 <code>webapps/</code> 目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> target/myapp.war <span class="variable">$TOMCAT_HOME</span>/webapps/</span><br></pre></td></tr></table></figure></li><li><p>启动 Tomcat，自动部署。</p></li></ol><hr><h3 id="✅-总结对比表："><a href="#✅-总结对比表：" class="headerlink" title="✅ 总结对比表："></a>✅ 总结对比表：</h3><table><thead><tr><th>项目</th><th><code>webapps</code></th><th><code>target</code></th></tr></thead><tbody><tr><td>所属</td><td>Tomcat</td><td>开发构建工具 (如 Maven)</td></tr><tr><td>功能</td><td>Tomcat 部署目录</td><td>项目构建输出目录</td></tr><tr><td>使用方式</td><td>Tomcat 启动时自动读取</td><td>需要手动拷贝或通过插件部署</td></tr><tr><td>是否自动生成</td><td>否，需要你放置文件</td><td>是，构建时自动生成</td></tr><tr><td>内容</td><td><code>.war</code> 或 Web 应用目录结构</td><td><code>.class</code> 文件、<code>.war</code> 文件等</td></tr></tbody></table><hr><p>如需自动将 <code>target/*.war</code> 部署到 Tomcat，可以使用插件（如 Maven 的 <code>tomcat7-maven-plugin</code>）进行自动部署。</p><p>要通过浏览器访问部署在 Tomcat 的 <code>webapps</code> 目录中的 Web 应用</p><ol><li>Tomcat 正常启动；</li><li>Web 应用已正确部署到 <code>webapps</code>；</li><li>使用正确的 URL 进行访问。</li></ol><hr><h2 id="✅-一、访问请求的基本格式："><a href="#✅-一、访问请求的基本格式：" class="headerlink" title="✅ 一、访问请求的基本格式："></a>✅ 一、访问请求的基本格式：</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://&lt;服务器IP&gt;:&lt;端口&gt;/&lt;项目名&gt;/&lt;资源路径&gt;</span><br></pre></td></tr></table></figure><ul><li><code>服务器IP</code>：部署 Tomcat 的主机 IP，开发本地通常是 <code>localhost</code> 或 <code>127.0.0.1</code></li><li><code>端口</code>：默认是 <code>8080</code>，除非你改了 <code>server.xml</code></li><li><code>项目名</code>：等于部署在 <code>webapps</code> 下 <code>.war</code> 或文件夹的名字（除非是 ROOT）</li><li><code>资源路径</code>：Web 应用中的请求路径，比如 JSP、Servlet、Spring 控制器路径等</li></ul><hr><h2 id="🔸-二、示例说明"><a href="#🔸-二、示例说明" class="headerlink" title="🔸 二、示例说明"></a>🔸 二、示例说明</h2><p>假设你的 Tomcat 安装在本地，端口是默认的 <code>8080</code>，<code>webapps</code> 下有一个应用叫 <code>myapp</code>：</p><h3 id="示例-1：访问首页"><a href="#示例-1：访问首页" class="headerlink" title="示例 1：访问首页"></a>示例 1：访问首页</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8080/myapp/</span><br></pre></td></tr></table></figure><blockquote><p>默认会加载 <code>web.xml</code> 中配置的 <code>welcome-file</code>（比如 <code>index.jsp</code>）</p></blockquote><hr><h3 id="示例-2：访问-JSP-页面"><a href="#示例-2：访问-JSP-页面" class="headerlink" title="示例 2：访问 JSP 页面"></a>示例 2：访问 JSP 页面</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8080/myapp/login.jsp</span><br></pre></td></tr></table></figure><hr><h3 id="示例-3：访问-Servlet"><a href="#示例-3：访问-Servlet" class="headerlink" title="示例 3：访问 Servlet"></a>示例 3：访问 Servlet</h3><p>如果在 <code>web.xml</code> 中定义了一个 Servlet 映射路径 <code>/login</code>，那么可以通过：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8080/myapp/login</span><br></pre></td></tr></table></figure><hr><h3 id="示例-4：访问-Spring-MVC-Controller"><a href="#示例-4：访问-Spring-MVC-Controller" class="headerlink" title="示例 4：访问 Spring MVC Controller"></a>示例 4：访问 Spring MVC Controller</h3><p>如果你用的是 Spring MVC，并在 Controller 中写了路径：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/user/list&quot;)</span></span><br></pre></td></tr></table></figure><p>则访问地址是：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8080/myapp/user/list</span><br></pre></td></tr></table></figure><hr><h2 id="✅-三、特殊情况：ROOT-项目"><a href="#✅-三、特殊情况：ROOT-项目" class="headerlink" title="✅ 三、特殊情况：ROOT 项目"></a>✅ 三、特殊情况：ROOT 项目</h2><p>如果你将应用部署为：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">webapps/ROOT/</span><br></pre></td></tr></table></figure><p>或：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">webapps/ROOT.war</span><br></pre></td></tr></table></figure><p>那么你就<strong>不需要写项目名</strong>，直接访问：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8080/</span><br></pre></td></tr></table></figure><hr><h2 id="✅-四、排查访问不了的问题"><a href="#✅-四、排查访问不了的问题" class="headerlink" title="✅ 四、排查访问不了的问题"></a>✅ 四、排查访问不了的问题</h2><table><thead><tr><th>问题</th><th>检查方向</th></tr></thead><tbody><tr><td>页面 404</td><td>路径是否正确、应用是否成功部署</td></tr><tr><td>端口访问不了</td><td>Tomcat 是否启动、端口是否防火墙拦截</td></tr><tr><td>报错页面</td><td>JSP&#x2F;Servlet&#x2F;Controller 是否有异常</td></tr></tbody></table><hr>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webgl vs webgpu</title>
      <link href="/2025/05/19/front_skills/canvas/webgl%20vs%20webgpu/"/>
      <url>/2025/05/19/front_skills/canvas/webgl%20vs%20webgpu/</url>
      
        <content type="html"><![CDATA[<p><strong>前端在什么时候该用 WebGPU？</strong></p><hr><h2 id="🔍-一、WebGPU-vs-WebGL-全面对比"><a href="#🔍-一、WebGPU-vs-WebGL-全面对比" class="headerlink" title="🔍 一、WebGPU vs WebGL 全面对比"></a>🔍 一、WebGPU vs WebGL 全面对比</h2><table><thead><tr><th>特性</th><th>WebGL</th><th>WebGPU</th></tr></thead><tbody><tr><td>发布时间</td><td>2011（WebGL 1）</td><td>2023（正式在 Chrome 启用）</td></tr><tr><td>基于底层</td><td>OpenGL ES</td><td>Vulkan &#x2F; Metal &#x2F; D3D12</td></tr><tr><td>GPU 渲染支持</td><td>✅ 是（图形渲染）</td><td>✅ 是（图形 + 通用计算）</td></tr><tr><td>计算着色器（GPGPU）</td><td>❌ 不支持</td><td>✅ 支持 compute shader</td></tr><tr><td>性能</td><td>中（CPU→GPU 数据瓶颈）</td><td>高（更少 CPU→GPU 往返）</td></tr><tr><td>API 粒度</td><td>较高层，较易用</td><td>低层、灵活但复杂</td></tr><tr><td>学习曲线</td><td>适中</td><td>陡峭（接近原生 GPU 编程）</td></tr><tr><td>浏览器支持</td><td>✅ 全面支持</td><td>🟡 Chrome、Edge 稳定支持，Safari&#x2F;Firefox 实验性支持</td></tr><tr><td>应用生态</td><td>成熟（Three.js、Babylon.js）</td><td>新兴，生态尚在建立</td></tr></tbody></table><hr><h2 id="🧠-二、前端什么时候用-WebGPU？"><a href="#🧠-二、前端什么时候用-WebGPU？" class="headerlink" title="🧠 二、前端什么时候用 WebGPU？"></a>🧠 二、前端什么时候用 WebGPU？</h2><h3 id="✅-适合使用-WebGPU-的前端场景"><a href="#✅-适合使用-WebGPU-的前端场景" class="headerlink" title="✅ 适合使用 WebGPU 的前端场景"></a>✅ <strong>适合使用 WebGPU 的前端场景</strong></h3><ol><li><p><strong>高性能数据可视化</strong></p><ul><li>如：百万级点云渲染、大规模地理数据、时间序列热力图</li><li>优势：GPU 并行处理 + 自定义计算管线（如聚合、排序）</li></ul></li><li><p><strong>3D 引擎 &#x2F; 游戏引擎开发</strong></p><ul><li>WebGPU 提供更底层的图形控制，适合开发游戏&#x2F;模拟引擎</li></ul></li><li><p><strong>AI 推理 &#x2F; 机器学习前端计算</strong></p><ul><li>TensorFlow.js、ONNX.js 已开始探索用 WebGPU 加速模型推理</li></ul></li><li><p><strong>数字孪生、仿真系统</strong></p><ul><li>如工业 3D 监控、建筑 BIM 场景等，图形密集场景</li></ul></li><li><p><strong>自定义图形管线 &#x2F; 渲染引擎</strong></p><ul><li>开发自己的可视化&#x2F;地图库，或超越 Three.js 的功能时使用</li></ul></li></ol><hr><h3 id="❌-不推荐使用-WebGPU-的前端场景"><a href="#❌-不推荐使用-WebGPU-的前端场景" class="headerlink" title="❌ 不推荐使用 WebGPU 的前端场景"></a>❌ <strong>不推荐使用 WebGPU 的前端场景</strong></h3><table><thead><tr><th>情况</th><th>原因</th></tr></thead><tbody><tr><td>普通网站图表（柱状图、折线图）</td><td>Canvas &#x2F; SVG 足够，WebGPU 复杂过度</td></tr><tr><td>已有成熟 3D 可视化框架可满足</td><td>WebGL 性能已足够，不必迁移</td></tr><tr><td>要兼容所有浏览器（含 Safari、旧设备）</td><td>WebGPU 尚未全面兼容</td></tr><tr><td>团队缺乏图形编程经验</td><td>学习成本极高，调试难</td></tr></tbody></table><hr><h2 id="🧩-三、推荐迁移路径（渐进式使用-WebGPU）"><a href="#🧩-三、推荐迁移路径（渐进式使用-WebGPU）" class="headerlink" title="🧩 三、推荐迁移路径（渐进式使用 WebGPU）"></a>🧩 三、推荐迁移路径（渐进式使用 WebGPU）</h2><table><thead><tr><th>阶段</th><th>技术建议</th></tr></thead><tbody><tr><td>🔹 初级阶段</td><td>使用 Three.js &#x2F; Babylon.js（WebGL）</td></tr><tr><td>🔸 中级阶段</td><td>使用 Three.js 的 WebGPU 渲染器尝试（实验）</td></tr><tr><td>🔶 高级阶段</td><td>直接用 WebGPU API &#x2F; wgpu &#x2F; Dawn 编写自定义渲染</td></tr><tr><td>🔺 尖端探索</td><td>WebGPU + WASM + Rust 做跨端 GPU 渲染引擎</td></tr></tbody></table><hr><h2 id="✳️-工具-框架推荐（WebGPU）"><a href="#✳️-工具-框架推荐（WebGPU）" class="headerlink" title="✳️ 工具 &#x2F; 框架推荐（WebGPU）"></a>✳️ 工具 &#x2F; 框架推荐（WebGPU）</h2><table><thead><tr><th>名称</th><th>用途</th><th>说明</th></tr></thead><tbody><tr><td><strong>wgpu</strong></td><td>Rust WebGPU 引擎</td><td>可编译为 WASM 使用，性能强劲</td></tr><tr><td><strong>Dawn</strong></td><td>Chrome 用的 WebGPU 实现</td><td>Google 主导</td></tr><tr><td><strong>Three.js (WebGPURenderer)</strong></td><td>实验支持 WebGPU</td><td>熟悉 Three 的可尝试</td></tr><tr><td><strong>TensorFlow.js + WebGPU backend</strong></td><td>浏览器 AI 推理</td><td>已开始试验 WebGPU 计算</td></tr><tr><td><strong>Babylon.js</strong></td><td>支持 WebGPU 渲染后端</td><td>对 WebGPU 适配中</td></tr></tbody></table><hr><h2 id="✅-总结一句话"><a href="#✅-总结一句话" class="headerlink" title="✅ 总结一句话"></a>✅ 总结一句话</h2><blockquote><p><strong>WebGL 仍是当前前端主流图形引擎，但 WebGPU 是未来高性能前端图形和计算的标准平台。</strong></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> webgpu </tag>
            
            <tag> canvas </tag>
            
            <tag> svg </tag>
            
            <tag> webgl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>地图vue react angular支持</title>
      <link href="/2025/05/19/front_skills/canvas/%E5%9C%B0%E5%9B%BEvue%20react%20angular%E6%94%AF%E6%8C%81/"/>
      <url>/2025/05/19/front_skills/canvas/%E5%9C%B0%E5%9B%BEvue%20react%20angular%E6%94%AF%E6%8C%81/</url>
      
        <content type="html"><![CDATA[<p><strong>React、Vue、Angular</strong> 都有封装得非常成熟的地图组件或生态插件，常用地图平台（如 Mapbox、Leaflet、Google Maps、高德地图、百度地图等）基本都有对应的官方或社区封装，可以直接使用。</p><hr><h2 id="✅-一、React-封装的地图组件"><a href="#✅-一、React-封装的地图组件" class="headerlink" title="✅ 一、React 封装的地图组件"></a>✅ 一、React 封装的地图组件</h2><h3 id="1-react-leaflet"><a href="#1-react-leaflet" class="headerlink" title="1. react-leaflet"></a>1. <a href="https://react-leaflet.js.org/"><strong>react-leaflet</strong></a></h3><ul><li>Leaflet 的 React 封装（社区成熟度高）</li><li>优点：轻量、插件多、易上手</li><li>示例：</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">MapContainer</span>, <span class="title class_">TileLayer</span>, <span class="title class_">Marker</span>, <span class="title class_">Popup</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-leaflet&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">MapContainer</span> <span class="attr">center</span>=<span class="string">&#123;[51.505,</span> <span class="attr">-0.09</span>]&#125; <span class="attr">zoom</span>=<span class="string">&#123;13&#125;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">height:</span> &quot;<span class="attr">100vh</span>&quot; &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">TileLayer</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">url</span>=<span class="string">&quot;https://&#123;s&#125;.tile.openstreetmap.org/&#123;z&#125;/&#123;x&#125;/&#123;y&#125;.png&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">Marker</span> <span class="attr">position</span>=<span class="string">&#123;[51.505,</span> <span class="attr">-0.09</span>]&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Popup</span>&gt;</span>这里是伦敦<span class="tag">&lt;/<span class="name">Popup</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">Marker</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">MapContainer</span>&gt;</span></span></span><br></pre></td></tr></table></figure><hr><h3 id="2-react-map-gl"><a href="#2-react-map-gl" class="headerlink" title="2. react-map-gl"></a>2. <a href="https://visgl.github.io/react-map-gl/"><strong>react-map-gl</strong></a></h3><ul><li>Mapbox 的 React 封装（由 Uber 推出）</li><li>高性能、现代感强，适合可视化项目</li><li>支持 WebGL、DeckGL 等高阶功能</li></ul><hr><h3 id="3-google-maps-react"><a href="#3-google-maps-react" class="headerlink" title="3. google-maps-react"></a>3. <a href="https://github.com/fullstackreact/google-maps-react"><strong>google-maps-react</strong></a></h3><ul><li>对接 Google 地图</li><li>适合全球数据项目、自动路线规划等场景</li></ul><hr><h2 id="✅-二、Vue-封装的地图组件"><a href="#✅-二、Vue-封装的地图组件" class="headerlink" title="✅ 二、Vue 封装的地图组件"></a>✅ 二、Vue 封装的地图组件</h2><h3 id="1-vue2-leaflet-vue3-leaflet"><a href="#1-vue2-leaflet-vue3-leaflet" class="headerlink" title="1. vue2-leaflet &#x2F; vue3-leaflet"></a>1. <a href="https://vue-leaflet.github.io/"><strong>vue2-leaflet &#x2F; vue3-leaflet</strong></a></h3><ul><li>Leaflet 的 Vue 封装，支持 Vue 2 和 Vue 3</li><li>示例：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;LMap :zoom=&quot;13&quot; :center=&quot;[47.413220, -1.219482]&quot;&gt;</span><br><span class="line">  &lt;LTileLayer :url=&quot;&#x27;https://&#123;s&#125;.tile.openstreetmap.org/&#123;z&#125;/&#123;x&#125;/&#123;y&#125;.png&#x27;&quot; /&gt;</span><br><span class="line">  &lt;LMarker :lat-lng=&quot;[47.413220, -1.219482]&quot; /&gt;</span><br><span class="line">&lt;/LMap&gt;</span><br></pre></td></tr></table></figure><hr><h3 id="2-vue3-openlayers"><a href="#2-vue3-openlayers" class="headerlink" title="2. vue3-openlayers"></a>2. <a href="https://github.com/MelihAltintas/vue3-openlayers"><strong>vue3-openlayers</strong></a></h3><ul><li>封装 OpenLayers（支持投影坐标、轨迹等专业 GIS 功能）</li></ul><hr><h3 id="3-高德-百度地图封装："><a href="#3-高德-百度地图封装：" class="headerlink" title="3. 高德&#x2F;百度地图封装："></a>3. 高德&#x2F;百度地图封装：</h3><ul><li><a href="https://elemefe.github.io/vue-amap/">vue-amap</a>（高德）</li><li><a href="https://dafrok.github.io/vue-baidu-map/#/">vue-baidu-map-3x</a>（百度）</li></ul><hr><h2 id="✅-三、Angular-地图组件"><a href="#✅-三、Angular-地图组件" class="headerlink" title="✅ 三、Angular 地图组件"></a>✅ 三、Angular 地图组件</h2><h3 id="1-ngx-leaflet"><a href="#1-ngx-leaflet" class="headerlink" title="1. ngx-leaflet"></a>1. <a href="https://github.com/Asymmetrik/ngx-leaflet"><strong>ngx-leaflet</strong></a></h3><ul><li>Angular 的 Leaflet 封装，结构清晰、文档完备</li><li>示例：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">leaflet</span> </span></span><br><span class="line"><span class="tag">     [<span class="attr">leafletOptions</span>]=<span class="string">&quot;options&quot;</span> </span></span><br><span class="line"><span class="tag">     [<span class="attr">leafletLayers</span>]=<span class="string">&quot;layers&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h3 id="2-angular-google-maps"><a href="#2-angular-google-maps" class="headerlink" title="2. @angular&#x2F;google-maps"></a>2. <a href="https://angular.io/components/google-maps/overview"><strong>@angular&#x2F;google-maps</strong></a></h3><ul><li>官方提供的 Google Maps 组件</li><li>安全、依赖稳定</li></ul><hr><h3 id="3-angular-mapbox-gl"><a href="#3-angular-mapbox-gl" class="headerlink" title="3. angular-mapbox-gl"></a>3. <a href="https://github.com/Wykks/ngx-mapbox-gl"><strong>angular-mapbox-gl</strong></a></h3><ul><li>Mapbox 的 Angular 封装</li><li>支持 GeoJSON、交互事件等功能</li></ul><hr><h2 id="🎯-总结对比表"><a href="#🎯-总结对比表" class="headerlink" title="🎯 总结对比表"></a>🎯 总结对比表</h2><table><thead><tr><th>框架</th><th>Leaflet 支持</th><th>Mapbox 支持</th><th>Google Maps 支持</th><th>其他平台支持（高德&#x2F;百度）</th></tr></thead><tbody><tr><td>React</td><td>✅ react-leaflet</td><td>✅ react-map-gl</td><td>✅ google-maps-react</td><td>🟡（需要社区封装）</td></tr><tr><td>Vue</td><td>✅ vue-leaflet</td><td>🟡 vue-mapbox-gl</td><td>🟡（较少）</td><td>✅ vue-amap、vue-baidu-map</td></tr><tr><td>Angular</td><td>✅ ngx-leaflet</td><td>✅ angular-mapbox-gl</td><td>✅ @angular&#x2F;google-maps</td><td>🟡</td></tr></tbody></table><hr><h2 id="建议选型"><a href="#建议选型" class="headerlink" title="建议选型"></a>建议选型</h2><ul><li><strong>简单可视化、轻量级地图</strong>：Leaflet（react-leaflet、vue-leaflet）</li><li><strong>高性能、3D 地图或 WebGL 需要</strong>：Mapbox（react-map-gl、ngx-mapbox-gl）</li><li><strong>精准路线、街景等功能</strong>：Google Maps</li><li><strong>国内项目、导航&#x2F;定位</strong>：高德（vue-amap）或百度（vue-baidu-map）</li></ul><hr><p><strong>不是所有地图组件都默认使用 GPU 加速（即 WebGL）</strong>。是否支持 GPU 取决于它们底层的渲染引擎，而不是仅仅是 React&#x2F;Vue&#x2F;Angular 框架本身。</p><blockquote><p>常见地图库的 GPU 支持情况。</p></blockquote><hr><h2 id="✅-判断地图是否使用-GPU：看是否基于-WebGL"><a href="#✅-判断地图是否使用-GPU：看是否基于-WebGL" class="headerlink" title="✅ 判断地图是否使用 GPU：看是否基于 WebGL"></a>✅ 判断地图是否使用 GPU：看是否基于 WebGL</h2><table><thead><tr><th>渲染技术</th><th>是否使用 GPU</th><th>特点</th></tr></thead><tbody><tr><td><strong>Canvas 2D</strong></td><td>❌ 不使用 GPU（纯 CPU 绘图）</td><td>性能好，但不如 GPU 适合大数据</td></tr><tr><td><strong>SVG</strong></td><td>❌ 不使用 GPU</td><td>交互友好，性能较差</td></tr><tr><td><strong>WebGL</strong></td><td>✅ 使用 GPU</td><td>高性能、适合复杂数据、3D、动画等</td></tr></tbody></table><hr><h2 id="🧭-主流地图库-GPU-支持情况"><a href="#🧭-主流地图库-GPU-支持情况" class="headerlink" title="🧭 主流地图库 GPU 支持情况"></a>🧭 主流地图库 GPU 支持情况</h2><table><thead><tr><th>地图平台 &#x2F; 库</th><th>是否用 WebGL (GPU)</th><th>说明</th></tr></thead><tbody><tr><td><strong>Leaflet</strong></td><td>❌ 否</td><td>使用 DOM + Canvas；不支持 WebGL</td></tr><tr><td><strong>Mapbox GL JS</strong></td><td>✅ 是</td><td>基于 WebGL，支持 3D、实时动画等</td></tr><tr><td><strong>Google Maps JS API</strong></td><td>🟡 部分是</td><td>默认不是 WebGL，但某些功能（如 3D View）使用 GPU</td></tr><tr><td><strong>OpenLayers</strong></td><td>✅ 支持（可选）</td><td>有 Canvas 和 WebGL 两种渲染模式</td></tr><tr><td><strong>CesiumJS</strong></td><td>✅ 是</td><td>专为 3D 地球设计，强烈依赖 GPU</td></tr><tr><td><strong>ECharts 地图</strong></td><td>✅（Canvas&#x2F;WebGL）</td><td>ECharts5 开始默认优先使用 GPU</td></tr></tbody></table><hr><h2 id="📦-React-Vue-Angular-的地图封装是否支持-GPU？"><a href="#📦-React-Vue-Angular-的地图封装是否支持-GPU？" class="headerlink" title="📦 React &#x2F; Vue &#x2F; Angular 的地图封装是否支持 GPU？"></a>📦 React &#x2F; Vue &#x2F; Angular 的地图封装是否支持 GPU？</h2><table><thead><tr><th>框架地图封装</th><th>GPU 支持</th><th>底层依赖</th></tr></thead><tbody><tr><td><strong>react-leaflet</strong></td><td>❌</td><td>Leaflet（不支持 WebGL）</td></tr><tr><td><strong>vue-leaflet &#x2F; ngx-leaflet</strong></td><td>❌</td><td>同上</td></tr><tr><td><strong>react-map-gl</strong></td><td>✅</td><td>Mapbox GL JS（WebGL）</td></tr><tr><td><strong>angular-mapbox-gl</strong></td><td>✅</td><td>Mapbox GL JS</td></tr><tr><td><strong>@angular&#x2F;google-maps</strong></td><td>🟡</td><td>Google Maps JS API</td></tr><tr><td><strong>vue3-openlayers</strong></td><td>✅（可选）</td><td>OpenLayers v6+</td></tr><tr><td><strong>vue-amap &#x2F; vue-baidu-map</strong></td><td>🟡</td><td>高德&#x2F;百度支持部分 WebGL（例如热力图、3D 建筑）</td></tr></tbody></table><hr><h2 id="✅-GPU-地图推荐选型"><a href="#✅-GPU-地图推荐选型" class="headerlink" title="✅ GPU 地图推荐选型"></a>✅ GPU 地图推荐选型</h2><table><thead><tr><th>场景</th><th>推荐地图引擎</th><th>GPU 使用情况</th></tr></thead><tbody><tr><td>高性能、大数据、实时地图</td><td>Mapbox GL JS</td><td>✅ WebGL</td></tr><tr><td>3D 地图、数字地球</td><td>CesiumJS</td><td>✅ WebGL</td></tr><tr><td>国内定位、路线、静态地图为主</td><td>高德&#x2F;百度地图 API</td><td>🟡 有部分支持</td></tr><tr><td>简单静态地图或交互有限场景</td><td>Leaflet</td><td>❌ CPU Canvas</td></tr></tbody></table><hr><h2 id="如何确认浏览器正在用-GPU-渲染地图？"><a href="#如何确认浏览器正在用-GPU-渲染地图？" class="headerlink" title="如何确认浏览器正在用 GPU 渲染地图？"></a>如何确认浏览器正在用 GPU 渲染地图？</h2><p>你可以打开浏览器的 DevTools（开发者工具） → <code>Performance</code> → 录制地图渲染，或者看 Chrome 的：</p><ul><li><code>chrome://gpu</code> 页面：查看 WebGL 是否启用</li><li>查看 Canvas 的上下文类型：<code>canvas.getContext(&#39;webgl&#39;)</code> 成功则表示使用 GPU</li></ul><hr><h2 id="🔧-结论总结"><a href="#🔧-结论总结" class="headerlink" title="🔧 结论总结"></a>🔧 结论总结</h2><ul><li>框架（React、Vue、Angular）本身<strong>不决定是否用 GPU</strong>，关键是地图库底层是否基于 WebGL。</li><li>如果你要实现<strong>大规模数据渲染、高频率交互、动画&#x2F;3D 地图</strong>，<strong>务必选择基于 WebGL 的地图库</strong>（如 Mapbox、Cesium）。</li><li>如果你使用的是 Leaflet 或其封装（如 react-leaflet），默认不会用 GPU，但可以搭配 WebGL 插件（如 leaflet.glify）来提升性能。</li></ul><hr><h2 id="✅-目前主流地图引擎还📌几乎都未全面支持-WebGPU-。但："><a href="#✅-目前主流地图引擎还📌几乎都未全面支持-WebGPU-。但：" class="headerlink" title="✅ 目前主流地图引擎还📌几乎都未全面支持 WebGPU**。但："></a>✅ 目前主流地图引擎还<strong>📌</strong>几乎都未全面支持 WebGPU**。但：</h2><ul><li>WebGPU 是未来图形渲染的方向，<strong>比 WebGL 更强大（更接近原生 GPU 能力）</strong>；</li><li>有极个别项目正在探索 WebGPU，但大多仍处于实验阶段；</li><li>实际生产中地图仍使用 WebGL 或 Canvas（如 Mapbox GL、Cesium）；</li><li>如果你对 <strong>WebGPU + 地图结合开发</strong> 感兴趣，那是前沿探索领域，值得关注。</li></ul><hr><h2 id="什么是-WebGPU？"><a href="#什么是-WebGPU？" class="headerlink" title="什么是 WebGPU？"></a>什么是 WebGPU？</h2><p>WebGPU 是一种 <strong>新一代浏览器图形 API</strong>，相对于 WebGL，它更接近 Vulkan &#x2F; Metal &#x2F; Direct3D 12，优点：</p><table><thead><tr><th>特性</th><th>WebGL</th><th>WebGPU</th></tr></thead><tbody><tr><td>图形性能</td><td>好</td><td>更好（低开销）</td></tr><tr><td>计算能力（GPGPU）</td><td>弱</td><td>强（支持 Compute）</td></tr><tr><td>开发粒度</td><td>高层封装</td><td>更底层，更灵活</td></tr><tr><td>支持平台</td><td>全面</td><td>现代浏览器才支持</td></tr><tr><td>上手难度</td><td>低</td><td>高</td></tr></tbody></table><hr><h2 id="🗺️-地图引擎对-WebGPU-的支持现状（截至-2025）"><a href="#🗺️-地图引擎对-WebGPU-的支持现状（截至-2025）" class="headerlink" title="🗺️ 地图引擎对 WebGPU 的支持现状（截至 2025）"></a>🗺️ 地图引擎对 WebGPU 的支持现状（截至 2025）</h2><table><thead><tr><th>地图引擎 &#x2F; 框架</th><th>WebGPU 支持</th><th>说明</th></tr></thead><tbody><tr><td><strong>Mapbox GL JS</strong></td><td>❌ 不支持</td><td>基于 WebGL</td></tr><tr><td><strong>CesiumJS</strong></td><td>❌ 不支持</td><td>WebGL 专家级使用，暂无 WebGPU</td></tr><tr><td><strong>Leaflet</strong></td><td>❌ 不支持</td><td>基于 DOM&#x2F;Canvas</td></tr><tr><td><strong>OpenLayers</strong></td><td>❌ 不支持</td><td>支持 Canvas&#x2F;WebGL</td></tr><tr><td><strong>Google Maps</strong></td><td>❌ 不支持</td><td>封闭 API，不支持 WebGPU</td></tr><tr><td><strong>deck.gl（可扩展）</strong></td><td>🟡 实验中</td><td>部分研究使用 WebGPU adapter</td></tr><tr><td><strong>raw WebGPU 实现地图</strong></td><td>🧪 纯研究&#x2F;自研</td><td>可做但要手动实现投影、渲染流程</td></tr></tbody></table><hr><h2 id="🚀-想做-WebGPU-地图，有哪些途径？"><a href="#🚀-想做-WebGPU-地图，有哪些途径？" class="headerlink" title="🚀 想做 WebGPU + 地图，有哪些途径？"></a>🚀 想做 WebGPU + 地图，有哪些途径？</h2><ol><li><p><strong>自己用 WebGPU 编写地图引擎（高门槛）</strong></p><ul><li>需要：地理投影、瓦片加载、坐标变换、图层管理、着色器编写</li><li>框架推荐：<a href="https://github.com/gfx-rs/wgpu">wgpu</a>（Rust）、<a href="https://gpuweb.github.io/gpuweb/">WebGPU native bindings</a></li></ul></li><li><p><strong>使用支持 WebGPU 的 3D 渲染引擎 + 自建地图逻辑</strong></p><ul><li>比如：Babylon.js、Three.js（部分 WebGPU 适配中）</li><li>适合：3D 地球、场景地图</li></ul></li><li><p><strong>关注 WebGPU 地图探索项目</strong></p><ul><li>示例：<a href="https://www.unfolded.ai/">Unfolded.ai</a>（由 Uber deck.gl 团队支持）</li><li>deck.gl 虽然还基于 WebGL，但已架构上适配下一代渲染（未来可扩展到 WebGPU）</li></ul></li></ol><hr><h2 id="✅-总结"><a href="#✅-总结" class="headerlink" title="✅ 总结"></a>✅ 总结</h2><p>| 引擎<br>    | 当前可用手段                       |</p><p>| ———– | —————————- |<br>| 高性能地图渲染     | 使用 WebGL（Mapbox GL、Cesium）   |<br>| WebGPU 地图探索 | 自研 or deck.gl 实验项目           |<br>| 跨平台强渲染      | 可用 Rust&#x2F;WebAssembly + WebGPU |<br>| 未来技术储备      | 关注 WebGPU 标准与浏览器支持           |</p><hr>]]></content>
      
      
      
        <tags>
            
            <tag> canvas </tag>
            
            <tag> svg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>地图canvas和svg选择</title>
      <link href="/2025/05/18/front_skills/canvas/%E5%9C%B0%E5%9B%BEcanvas%20vs%20svg/"/>
      <url>/2025/05/18/front_skills/canvas/%E5%9C%B0%E5%9B%BEcanvas%20vs%20svg/</url>
      
        <content type="html"><![CDATA[<h2 id="在开发地图时，选择使用-Canvas-还是-SVG-主要取决于你项目的需求、地图的复杂程度、交互性能要求以及渲染对象的数量。"><a href="#在开发地图时，选择使用-Canvas-还是-SVG-主要取决于你项目的需求、地图的复杂程度、交互性能要求以及渲染对象的数量。" class="headerlink" title="在开发地图时，选择使用 Canvas 还是 SVG 主要取决于你项目的需求、地图的复杂程度、交互性能要求以及渲染对象的数量。"></a>在开发地图时，选择使用 Canvas 还是 SVG 主要取决于你项目的需求、地图的复杂程度、交互性能要求以及渲染对象的数量。</h2><h3 id="一、Canvas-与-SVG-的核心区别"><a href="#一、Canvas-与-SVG-的核心区别" class="headerlink" title="一、Canvas 与 SVG 的核心区别"></a>一、Canvas 与 SVG 的核心区别</h3><h4 id="1-渲染机制"><a href="#1-渲染机制" class="headerlink" title="1. 渲染机制"></a>1. 渲染机制</h4><ul><li><strong>Canvas</strong> 是一种基于位图（bitmap）的渲染方式，操作的是像素。你每次绘图都在一张“画布”上进行，而图形绘制后不再保持 DOM 元素结构。</li><li><strong>SVG</strong> 是一种基于矢量的 XML 标记语言，渲染的是 DOM 节点，图形在页面中作为可操作的元素存在。</li></ul><hr><h3 id="二、地图开发中如何选择？"><a href="#二、地图开发中如何选择？" class="headerlink" title="二、地图开发中如何选择？"></a>二、地图开发中如何选择？</h3><h4 id="✔-使用-Canvas-的场景（推荐用于大规模、复杂地图）"><a href="#✔-使用-Canvas-的场景（推荐用于大规模、复杂地图）" class="headerlink" title="✔ 使用 Canvas 的场景（推荐用于大规模、复杂地图）"></a>✔ 使用 Canvas 的场景（推荐用于大规模、复杂地图）</h4><ol><li><p><strong>需要高性能渲染的大量对象（如地理信息系统 GIS、游戏地图）</strong>：</p><ul><li>如果地图上有成千上万的要素（如道路、建筑、点标记等），SVG 会因为 DOM 元素太多而明显卡顿。</li><li>例子：在一张城市地图上渲染几万条公交线路，Canvas 的性能会远优于 SVG。</li></ul></li><li><p><strong>动态绘制、频繁刷新（如拖拽、缩放、实时数据变化）</strong>：</p><ul><li>Canvas 的像素渲染方式更适合快速连续重绘，例如地图缩放、平移时刷新整个画布。</li></ul></li><li><p><strong>需要手动控制图层渲染顺序、粒度精细（如图层叠加、着色、热点分析）</strong>。</p></li></ol><h4 id="✔-使用-SVG-的场景（推荐用于交互复杂、对象较少的地图）"><a href="#✔-使用-SVG-的场景（推荐用于交互复杂、对象较少的地图）" class="headerlink" title="✔ 使用 SVG 的场景（推荐用于交互复杂、对象较少的地图）"></a>✔ 使用 SVG 的场景（推荐用于交互复杂、对象较少的地图）</h4><ol><li><p><strong>需要每个地图元素具备独立交互能力（如点击、悬停、拖拽）</strong>：</p><ul><li>SVG 的每个形状都是独立的 DOM 元素，便于添加事件监听器，例如点击显示弹窗、改变样式。</li><li>例子：一个展示 100 个省份边界的可交互地图，可以用 SVG 来高效实现点击、悬浮等交互。</li></ul></li><li><p><strong>需要响应式布局和 CSS 样式控制（如响应式仪表盘、主题变换）</strong>。</p><ul><li>SVG 元素可直接通过 CSS 控制样式，方便适配不同屏幕或主题切换。</li></ul></li><li><p><strong>开发迭代需求高、便于调试与扩展的项目</strong>：</p><ul><li>SVG 的结构清晰、调试方便，适合团队协作和未来维护。</li></ul></li></ol><hr><h3 id="三、混合使用的建议（高阶策略）"><a href="#三、混合使用的建议（高阶策略）" class="headerlink" title="三、混合使用的建议（高阶策略）"></a>三、混合使用的建议（高阶策略）</h3><p>现代地图库（如 D3.js、Leaflet、Mapbox、ECharts）已经支持 <strong>Canvas + SVG 的混合渲染</strong>，可以根据具体图层特点进行优化：</p><ul><li><strong>底图（复杂背景）用 Canvas</strong>：提升性能。</li><li><strong>前景元素（标注、交互点）用 SVG</strong>：保留良好的交互体验。</li></ul><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Mapbox 使用 canvas 渲染地形数据</span></span><br><span class="line"><span class="comment">// 然后使用 D3 的 SVG 叠加图层实现省份标签交互</span></span><br></pre></td></tr></table></figure><hr><h3 id="四、性能对比总结表"><a href="#四、性能对比总结表" class="headerlink" title="四、性能对比总结表"></a>四、性能对比总结表</h3><table><thead><tr><th>维度</th><th>Canvas</th><th>SVG</th></tr></thead><tbody><tr><td>渲染性能</td><td>高，适合大数据量</td><td>较低，数据多时性能下降</td></tr><tr><td>交互性</td><td>需手动计算元素命中</td><td>原生支持 DOM 事件绑定</td></tr><tr><td>可维护性&#x2F;调试</td><td>较低，画布上无法直接识别元素</td><td>高，可通过开发者工具查看和修改元素</td></tr><tr><td>响应式支持</td><td>较差，需要手动适配</td><td>好，支持 CSS 和 ViewBox 响应式设计</td></tr><tr><td>渲染复杂图形</td><td>高效，支持像素级别渲染效果（阴影、渐变等）</td><td>限制较多，不支持复杂图像处理</td></tr></tbody></table><hr><h3 id="五、推荐实践框架"><a href="#五、推荐实践框架" class="headerlink" title="五、推荐实践框架"></a>五、推荐实践框架</h3><ul><li><strong>轻量级地图交互</strong>：使用 SVG + <a href="https://d3js.org/">D3.js</a></li><li><strong>高性能地图渲染</strong>：使用 Canvas + <a href="https://pixijs.com/">PixiJS</a></li><li><strong>复杂地图平台</strong>：使用 <a href="https://docs.mapbox.com/mapbox-gl-js/">Mapbox GL JS</a> 或 <a href="https://leafletjs.com/">Leaflet</a>（可 Canvas 或 SVG 自选）</li></ul><hr><h3 id="六、结语建议"><a href="#六、结语建议" class="headerlink" title="六、结语建议"></a>六、结语建议</h3><blockquote><p>如果你要做一个<strong>数据量庞大、需要性能优化的地图系统</strong>，选择 Canvas 更为合适；如果是一个<strong>强调交互和美观展示的小型地图组件</strong>，SVG 会带来更好的开发体验。对于大多数现代项目，<strong>混合使用是最佳实践</strong>。</p></blockquote><h2 id="SVG-Canvas-混合地图的实现，核心在于将两者作为不同的图层叠加渲染，分别处理不同任务："><a href="#SVG-Canvas-混合地图的实现，核心在于将两者作为不同的图层叠加渲染，分别处理不同任务：" class="headerlink" title="SVG + Canvas 混合地图的实现，核心在于将两者作为不同的图层叠加渲染，分别处理不同任务："></a>SVG + Canvas 混合地图的实现，核心在于<strong>将两者作为不同的图层叠加渲染</strong>，分别处理不同任务：</h2><ul><li><strong>Canvas</strong> 用于绘制大量、高性能图形（底图、热力图等）。</li><li><strong>SVG</strong> 用于添加可交互的图形元素（例如标注、点击区域等）。</li></ul><hr><p>我们可以通过 HTML 结构，将 <code>&lt;canvas&gt;</code> 和 <code>&lt;svg&gt;</code> 标签放在同一个容器内，并通过 <strong>绝对定位 + 透明背景</strong> 来叠加两者。</p><h3 id="📦-HTML-CSS-结构"><a href="#📦-HTML-CSS-结构" class="headerlink" title="📦 HTML + CSS 结构"></a>📦 HTML + CSS 结构</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;map-container&quot;</span> <span class="attr">style</span>=<span class="string">&quot;position: relative; width: 800px; height: 600px;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">&quot;map-canvas&quot;</span> <span class="attr">width</span>=<span class="string">&quot;800&quot;</span> <span class="attr">height</span>=<span class="string">&quot;600&quot;</span> <span class="attr">style</span>=<span class="string">&quot;position: absolute; top: 0; left: 0; z-index: 0;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">svg</span> <span class="attr">id</span>=<span class="string">&quot;map-svg&quot;</span> <span class="attr">width</span>=<span class="string">&quot;800&quot;</span> <span class="attr">height</span>=<span class="string">&quot;600&quot;</span> <span class="attr">style</span>=<span class="string">&quot;position: absolute; top: 0; left: 0; z-index: 1; pointer-events: none;&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 交互图形放这里 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="🎨-JS-渲染示例"><a href="#🎨-JS-渲染示例" class="headerlink" title="🎨 JS 渲染示例"></a>🎨 JS 渲染示例</h3><h4 id="1-绘制-Canvas-底图（用于性能优先的地理要素）"><a href="#1-绘制-Canvas-底图（用于性能优先的地理要素）" class="headerlink" title="1. 绘制 Canvas 底图（用于性能优先的地理要素）"></a>1. 绘制 Canvas 底图（用于性能优先的地理要素）</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> canvas = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;map-canvas&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> ctx = canvas.<span class="title function_">getContext</span>(<span class="string">&quot;2d&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例：绘制若干城市热力点</span></span><br><span class="line"><span class="keyword">const</span> cities = [</span><br><span class="line">  &#123; <span class="attr">x</span>: <span class="number">100</span>, <span class="attr">y</span>: <span class="number">120</span>, <span class="attr">value</span>: <span class="number">80</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">x</span>: <span class="number">300</span>, <span class="attr">y</span>: <span class="number">200</span>, <span class="attr">value</span>: <span class="number">50</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">x</span>: <span class="number">500</span>, <span class="attr">y</span>: <span class="number">300</span>, <span class="attr">value</span>: <span class="number">70</span> &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">cities.<span class="title function_">forEach</span>(<span class="function"><span class="params">city</span> =&gt;</span> &#123;</span><br><span class="line">  ctx.<span class="title function_">beginPath</span>();</span><br><span class="line">  ctx.<span class="title function_">arc</span>(city.<span class="property">x</span>, city.<span class="property">y</span>, city.<span class="property">value</span> / <span class="number">2</span>, <span class="number">0</span>, <span class="title class_">Math</span>.<span class="property">PI</span> * <span class="number">2</span>);</span><br><span class="line">  ctx.<span class="property">fillStyle</span> = <span class="string">&quot;rgba(255,0,0,0.4)&quot;</span>;</span><br><span class="line">  ctx.<span class="title function_">fill</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="2-绘制-SVG-图层（用于交互元素）"><a href="#2-绘制-SVG-图层（用于交互元素）" class="headerlink" title="2. 绘制 SVG 图层（用于交互元素）"></a>2. 绘制 SVG 图层（用于交互元素）</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> svg = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;map-svg&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个交互性强的 SVG 标签（如城市标记）</span></span><br><span class="line"><span class="keyword">const</span> marker = <span class="variable language_">document</span>.<span class="title function_">createElementNS</span>(<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span>, <span class="string">&quot;circle&quot;</span>);</span><br><span class="line">marker.<span class="title function_">setAttribute</span>(<span class="string">&quot;cx&quot;</span>, <span class="string">&quot;100&quot;</span>);</span><br><span class="line">marker.<span class="title function_">setAttribute</span>(<span class="string">&quot;cy&quot;</span>, <span class="string">&quot;120&quot;</span>);</span><br><span class="line">marker.<span class="title function_">setAttribute</span>(<span class="string">&quot;r&quot;</span>, <span class="string">&quot;10&quot;</span>);</span><br><span class="line">marker.<span class="title function_">setAttribute</span>(<span class="string">&quot;fill&quot;</span>, <span class="string">&quot;blue&quot;</span>);</span><br><span class="line">marker.<span class="title function_">setAttribute</span>(<span class="string">&quot;stroke&quot;</span>, <span class="string">&quot;white&quot;</span>);</span><br><span class="line">marker.<span class="title function_">setAttribute</span>(<span class="string">&quot;stroke-width&quot;</span>, <span class="string">&quot;2&quot;</span>);</span><br><span class="line">marker.<span class="property">style</span>.<span class="property">pointerEvents</span> = <span class="string">&quot;auto&quot;</span>;  <span class="comment">// 允许事件穿透到此元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加事件监听</span></span><br><span class="line">marker.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&quot;点击了城市标记！&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">svg.<span class="title function_">appendChild</span>(marker);</span><br></pre></td></tr></table></figure><hr><h2 id="🚀-技术要点与优化建议"><a href="#🚀-技术要点与优化建议" class="headerlink" title="🚀 技术要点与优化建议"></a>🚀 技术要点与优化建议</h2><table><thead><tr><th>关键点</th><th>说明</th></tr></thead><tbody><tr><td>图层分离</td><td>使用 <code>z-index</code> 控制 Canvas（底层）与 SVG（上层）</td></tr><tr><td>事件穿透</td><td>设定 <code>pointer-events: none</code> 给 SVG 容器，让事件默认落到 Canvas；对具体 SVG 元素可单独设置 <code>pointer-events: auto</code></td></tr><tr><td>坐标同步</td><td>保持 Canvas 与 SVG 使用相同的坐标系统，适配缩放&#x2F;平移需要联动</td></tr><tr><td>响应式支持</td><td>使用 <code>viewBox</code> 或监听 <code>resize</code> 来适配变化</td></tr></tbody></table><hr><h2 id="🧠-高阶整合（结合地图框架）"><a href="#🧠-高阶整合（结合地图框架）" class="headerlink" title="🧠 高阶整合（结合地图框架）"></a>🧠 高阶整合（结合地图框架）</h2><p>如果你在用 Mapbox 或 Leaflet 等库，可以利用其已有的底图和坐标系统：</p><h3 id="📍Mapbox-D3（SVG-图层）"><a href="#📍Mapbox-D3（SVG-图层）" class="headerlink" title="📍Mapbox + D3（SVG 图层）"></a>📍Mapbox + D3（SVG 图层）</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">map.<span class="title function_">on</span>(<span class="string">&#x27;render&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> center = map.<span class="title function_">getCenter</span>();</span><br><span class="line">  <span class="keyword">const</span> zoom = map.<span class="title function_">getZoom</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将地理坐标转换为屏幕坐标，用于 SVG 定位</span></span><br><span class="line">  <span class="keyword">const</span> screenPos = map.<span class="title function_">project</span>([lng, lat]);</span><br><span class="line">  d3.<span class="title function_">select</span>(<span class="string">&quot;#marker&quot;</span>)</span><br><span class="line">    .<span class="title function_">attr</span>(<span class="string">&quot;cx&quot;</span>, screenPos.<span class="property">x</span>)</span><br><span class="line">    .<span class="title function_">attr</span>(<span class="string">&quot;cy&quot;</span>, screenPos.<span class="property">y</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      
        <tags>
            
            <tag> canvas </tag>
            
            <tag> svg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack react迁移到vite</title>
      <link href="/2025/05/15/front_package_build_skills/vite/webpack%20react%E8%BF%81%E7%A7%BB%E5%88%B0vite/"/>
      <url>/2025/05/15/front_package_build_skills/vite/webpack%20react%E8%BF%81%E7%A7%BB%E5%88%B0vite/</url>
      
        <content type="html"><![CDATA[<p>将 <strong>React 项目从 Webpack 迁移到 Vite</strong> 是一个非常实际的升级，能够大幅提升开发启动速度和热更新体验。下面是 <strong>从 Webpack 到 Vite 的完整迁移指南（React 版）</strong>，分为通用步骤 + React 特有部分：</p><hr><h2 id="✅-1-安装-Vite-和必要插件"><a href="#✅-1-安装-Vite-和必要插件" class="headerlink" title="✅ 1. 安装 Vite 和必要插件"></a>✅ 1. 安装 Vite 和必要插件</h2><p>卸载 Webpack 相关依赖：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm remove webpack webpack-cli webpack-dev-server</span><br></pre></td></tr></table></figure><p>安装 Vite 和 React 插件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vite @vitejs/plugin-react --save-dev</span><br></pre></td></tr></table></figure><hr><h2 id="✅-2-创建-vite-config-js"><a href="#✅-2-创建-vite-config-js" class="headerlink" title="✅ 2. 创建 vite.config.js"></a>✅ 2. 创建 <code>vite.config.js</code></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vite.config.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> react <span class="keyword">from</span> <span class="string">&#x27;@vitejs/plugin-react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> path <span class="keyword">from</span> <span class="string">&#x27;path&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="title function_">react</span>()],</span><br><span class="line">  <span class="attr">resolve</span>: &#123;</span><br><span class="line">    <span class="attr">alias</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;@&#x27;</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;./src&#x27;</span>), <span class="comment">// Webpack 的别名替代</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">server</span>: &#123;</span><br><span class="line">    <span class="attr">port</span>: <span class="number">3000</span>,</span><br><span class="line">    <span class="attr">open</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">build</span>: &#123;</span><br><span class="line">    <span class="attr">outDir</span>: <span class="string">&#x27;dist&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><hr><h2 id="✅-3-创建-修改-index-html"><a href="#✅-3-创建-修改-index-html" class="headerlink" title="✅ 3. 创建&#x2F;修改 index.html"></a>✅ 3. 创建&#x2F;修改 <code>index.html</code></h2><p>Vite 以 <code>index.html</code> 为入口，不使用 HtmlWebpackPlugin。你需要自己写：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- index.html --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>React + Vite<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/src/main.jsx&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="✅-4-修改入口文件"><a href="#✅-4-修改入口文件" class="headerlink" title="✅ 4. 修改入口文件"></a>✅ 4. 修改入口文件</h2><p>Webpack 可能用 <code>index.js</code> 或 <code>App.js</code>，Vite 推荐用 <code>main.jsx</code>。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/main.jsx</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom/client&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.jsx&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./index.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>)).<span class="title function_">render</span>(</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">React.StrictMode</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">App</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">React.StrictMode</span>&gt;</span></span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><hr><h2 id="✅-5-环境变量迁移"><a href="#✅-5-环境变量迁移" class="headerlink" title="✅ 5. 环境变量迁移"></a>✅ 5. 环境变量迁移</h2><p>Webpack 使用 <code>process.env.NODE_ENV</code>；<br>Vite 使用 <code>.env</code> 文件，并且变量必须以 <code>VITE_</code> 开头。</p><h3 id="例子："><a href="#例子：" class="headerlink" title="例子："></a>例子：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># .env</span><br><span class="line">VITE_API_BASE=https://api.example.com</span><br></pre></td></tr></table></figure><p>使用方式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> api = <span class="keyword">import</span>.<span class="property">meta</span>.<span class="property">env</span>.<span class="property">VITE_API_BASE</span></span><br></pre></td></tr></table></figure><hr><h2 id="✅-6-CSS-SCSS-支持"><a href="#✅-6-CSS-SCSS-支持" class="headerlink" title="✅ 6. CSS &#x2F; SCSS 支持"></a>✅ 6. CSS &#x2F; SCSS 支持</h2><p>Vite 原生支持 CSS Modules 和 Sass。</p><p>你可以在 React 组件中直接这样写：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> styles <span class="keyword">from</span> <span class="string">&#x27;./App.module.scss&#x27;</span></span><br></pre></td></tr></table></figure><p>配置全局 Sass 变量（可选）：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vite.config.js</span></span><br><span class="line"><span class="attr">css</span>: &#123;</span><br><span class="line">  <span class="attr">preprocessorOptions</span>: &#123;</span><br><span class="line">    <span class="attr">scss</span>: &#123;</span><br><span class="line">      <span class="attr">additionalData</span>: <span class="string">`@import &quot;@/styles/variables.scss&quot;;`</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="✅-7-别名、资源引用等-Webpack-特性迁移"><a href="#✅-7-别名、资源引用等-Webpack-特性迁移" class="headerlink" title="✅ 7. 别名、资源引用等 Webpack 特性迁移"></a>✅ 7. 别名、资源引用等 Webpack 特性迁移</h2><table><thead><tr><th>Webpack 功能</th><th>Vite 替代方式</th></tr></thead><tbody><tr><td><code>resolve.alias</code></td><td><code>vite.config.js</code> 的 <code>resolve.alias</code></td></tr><tr><td><code>HtmlWebpackPlugin</code></td><td>直接编辑 <code>index.html</code></td></tr><tr><td><code>DefinePlugin</code></td><td><code>define</code> + <code>.env</code> + <code>import.meta.env</code></td></tr><tr><td><code>file-loader</code>, <code>url-loader</code></td><td>直接 <code>import img from &#39;./logo.png&#39;</code></td></tr><tr><td>Babel</td><td><code>@vitejs/plugin-react</code> 内置处理</td></tr></tbody></table><hr><h2 id="✅-8-修改-package-json-脚本"><a href="#✅-8-修改-package-json-脚本" class="headerlink" title="✅ 8. 修改 package.json 脚本"></a>✅ 8. 修改 <code>package.json</code> 脚本</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;dev&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vite&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vite build&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;serve&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vite preview&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><hr><h2 id="✅-9-热更新（HMR）"><a href="#✅-9-热更新（HMR）" class="headerlink" title="✅ 9. 热更新（HMR）"></a>✅ 9. 热更新（HMR）</h2><p>无需配置，Vite 默认支持 React Fast Refresh。</p><hr><h2 id="🔁-示例对比：Webpack-vs-Vite-结构对照"><a href="#🔁-示例对比：Webpack-vs-Vite-结构对照" class="headerlink" title="🔁 示例对比：Webpack vs Vite 结构对照"></a>🔁 示例对比：Webpack vs Vite 结构对照</h2><table><thead><tr><th>Webpack 文件</th><th>Vite 文件</th></tr></thead><tbody><tr><td><code>webpack.config.js</code></td><td><code>vite.config.js</code></td></tr><tr><td><code>public/index.html</code> 模板</td><td>根目录 <code>index.html</code></td></tr><tr><td><code>src/index.js</code></td><td><code>src/main.jsx</code></td></tr><tr><td><code>process.env.API_URL</code></td><td><code>import.meta.env.VITE_API_URL</code></td></tr></tbody></table><hr><h2 id="✅-Bonus-支持-TypeScript"><a href="#✅-Bonus-支持-TypeScript" class="headerlink" title="✅ Bonus: 支持 TypeScript?"></a>✅ Bonus: 支持 TypeScript?</h2><p>Vite 完美支持 TS：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install typescript @types/react @types/react-dom --save-dev</span><br></pre></td></tr></table></figure><p>改入口为 <code>main.tsx</code>，组件为 <code>.tsx</code> 即可。</p><hr><h1 id="Webpack-是-v4，且依赖老旧。"><a href="#Webpack-是-v4，且依赖老旧。" class="headerlink" title="Webpack 是 v4，且依赖老旧。**"></a>Webpack 是 v4，且依赖老旧。**</h1><p>这种情况迁移到 Vite <strong>确实更复杂，但也更有意义</strong> —— 因为：</p><ul><li>Webpack 4 不支持 ES modules 完整功能，构建较慢</li><li>老插件体系（如 <code>extract-text-webpack-plugin</code>、旧版 Babel 配置等）不兼容现代生态</li><li>Vite 使用原生 ESM + ESBuild，现代又轻快</li></ul><hr><h2 id="✅-面对旧-Webpack-项目，迁移到-Vite-的关键思路"><a href="#✅-面对旧-Webpack-项目，迁移到-Vite-的关键思路" class="headerlink" title="✅ 面对旧 Webpack 项目，迁移到 Vite 的关键思路"></a>✅ 面对旧 Webpack 项目，迁移到 Vite 的关键思路</h2><h3 id="一、优先评估「旧依赖」是否阻碍迁移"><a href="#一、优先评估「旧依赖」是否阻碍迁移" class="headerlink" title="一、优先评估「旧依赖」是否阻碍迁移"></a>一、优先评估「旧依赖」是否阻碍迁移</h3><p>你需要清楚这几个点：</p><table><thead><tr><th>依赖类型</th><th>能否直接替代？</th><th>注意事项</th></tr></thead><tbody><tr><td>Babel 7.x 配置</td><td>✅ 支持，Vite 用 ESBuild 替代大多数转换</td><td></td></tr><tr><td>SCSS &#x2F; Less Loader</td><td>✅ Vite 原生支持</td><td><code>sass</code>、<code>less</code> 要更新版本</td></tr><tr><td><code>extract-text-webpack-plugin</code></td><td>❌ 废弃了，用 CSS 自动提取</td><td></td></tr><tr><td><code>file-loader</code>, <code>url-loader</code></td><td>❌ 废弃了，Vite 自动处理</td><td></td></tr><tr><td><code>webpack-dev-server</code></td><td>✅ 替代为 Vite 内建服务器</td><td></td></tr><tr><td><code>DefinePlugin</code></td><td>✅ 用 Vite <code>define</code> 或 <code>.env</code></td><td></td></tr><tr><td><code>HtmlWebpackPlugin</code></td><td>✅ 直接使用 HTML 模板</td><td></td></tr></tbody></table><hr><h2 id="✅-遇到旧-Webpack-项目时，你可以这样迁移"><a href="#✅-遇到旧-Webpack-项目时，你可以这样迁移" class="headerlink" title="✅ 遇到旧 Webpack 项目时，你可以这样迁移"></a>✅ 遇到旧 Webpack 项目时，你可以这样迁移</h2><h3 id="✅-1-把-Webpack-配置文件对照转成-Vite-配置"><a href="#✅-1-把-Webpack-配置文件对照转成-Vite-配置" class="headerlink" title="✅ 1. 把 Webpack 配置文件对照转成 Vite 配置"></a>✅ 1. 把 Webpack 配置文件对照转成 Vite 配置</h3><p>贴一个旧 Webpack 示例（可能和你类似）：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js (v4 项目)</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">&#x27;webpack&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&#x27;./src/index.js&#x27;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;bundle.js&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">resolve</span>: &#123;</span><br><span class="line">    <span class="attr">alias</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;@&#x27;</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;src&#x27;</span>),</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123; <span class="attr">test</span>: <span class="regexp">/\.jsx?$/</span>, <span class="attr">use</span>: <span class="string">&#x27;babel-loader&#x27;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">test</span>: <span class="regexp">/\.scss$/</span>, <span class="attr">use</span>: [<span class="string">&#x27;style-loader&#x27;</span>, <span class="string">&#x27;css-loader&#x27;</span>, <span class="string">&#x27;sass-loader&#x27;</span>] &#125;,</span><br><span class="line">      &#123; <span class="attr">test</span>: <span class="regexp">/\.(png|jpg|gif)$/</span>, <span class="attr">use</span>: <span class="string">&#x27;file-loader&#x27;</span> &#125;,</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123; <span class="attr">template</span>: <span class="string">&#x27;./public/index.html&#x27;</span> &#125;),</span><br><span class="line">    <span class="keyword">new</span> webpack.<span class="title class_">DefinePlugin</span>(&#123; <span class="string">&#x27;process.env.NODE_ENV&#x27;</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(<span class="string">&#x27;development&#x27;</span>) &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对应的 <strong>Vite 配置如下</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vite.config.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> react <span class="keyword">from</span> <span class="string">&#x27;@vitejs/plugin-react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> path <span class="keyword">from</span> <span class="string">&#x27;path&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="title function_">react</span>()],</span><br><span class="line">  <span class="attr">resolve</span>: &#123;</span><br><span class="line">    <span class="attr">alias</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;@&#x27;</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;src&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">define</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;process.env.NODE_ENV&#x27;</span>: <span class="string">&#x27;&quot;development&quot;&#x27;</span> <span class="comment">// 或使用 import.meta.env</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">css</span>: &#123;</span><br><span class="line">    <span class="attr">preprocessorOptions</span>: &#123;</span><br><span class="line">      <span class="attr">scss</span>: &#123;</span><br><span class="line">        <span class="attr">additionalData</span>: <span class="string">`@import &quot;@/styles/variables.scss&quot;;`</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">build</span>: &#123;</span><br><span class="line">    <span class="attr">outDir</span>: <span class="string">&#x27;dist&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><hr><h3 id="✅-2-替换不兼容的插件-loader"><a href="#✅-2-替换不兼容的插件-loader" class="headerlink" title="✅ 2. 替换不兼容的插件 &#x2F; loader"></a>✅ 2. 替换不兼容的插件 &#x2F; loader</h3><table><thead><tr><th>Webpack v4 使用</th><th>Vite 替代</th></tr></thead><tbody><tr><td><code>babel-loader</code></td><td><code>@vitejs/plugin-react</code> 内置支持</td></tr><tr><td><code>style-loader</code></td><td>Vite 自动注入 CSS</td></tr><tr><td><code>file-loader</code></td><td>直接 <code>import image from &#39;./img.png&#39;</code></td></tr><tr><td><code>HtmlWebpackPlugin</code></td><td>手写 <code>index.html</code> 模板</td></tr></tbody></table><hr><h3 id="✅-3-更新旧依赖（建议性操作）"><a href="#✅-3-更新旧依赖（建议性操作）" class="headerlink" title="✅ 3. 更新旧依赖（建议性操作）"></a>✅ 3. 更新旧依赖（建议性操作）</h3><p>你可以执行以下操作来清除潜在的 v4 依赖污染：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> -rf node_modules package-lock.json</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p>然后迁移这些依赖到 Vite 生态：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vite @vitejs/plugin-react sass less --save-dev</span><br></pre></td></tr></table></figure><hr><h2 id="❗-小心事项"><a href="#❗-小心事项" class="headerlink" title="❗ 小心事项"></a>❗ 小心事项</h2><h3 id="1-process-env、global、Buffer-这类-Node-API"><a href="#1-process-env、global、Buffer-这类-Node-API" class="headerlink" title="1. process.env、global、Buffer 这类 Node API"></a>1. <code>process.env</code>、<code>global</code>、<code>Buffer</code> 这类 Node API</h3><p>Vite 是纯浏览器运行，不再默认 polyfill 这些，需要：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vite-plugin-node-polyfills --save-dev</span><br></pre></td></tr></table></figure><h3 id="2-Babel-配置（如-babelrc）"><a href="#2-Babel-配置（如-babelrc）" class="headerlink" title="2. Babel 配置（如 .babelrc）"></a>2. Babel 配置（如 .babelrc）</h3><p>Vite 使用 esbuild，速度更快，但如果你用了高级 Babel 插件（如装饰器、class properties），可以保留 <code>.babelrc</code> 并在 <code>vite.config.js</code> 中启用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">react</span>(&#123;</span><br><span class="line">  <span class="attr">babel</span>: &#123;</span><br><span class="line">    <span class="attr">presets</span>: [<span class="string">&#x27;@babel/preset-env&#x27;</span>],</span><br><span class="line">    <span class="attr">plugins</span>: [<span class="string">&#x27;@babel/plugin-proposal-class-properties&#x27;</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><hr><h2 id="✅-总结：Webpack-4-项目迁移-Vite-的路线图"><a href="#✅-总结：Webpack-4-项目迁移-Vite-的路线图" class="headerlink" title="✅ 总结：Webpack 4 项目迁移 Vite 的路线图"></a>✅ 总结：Webpack 4 项目迁移 Vite 的路线图</h2><ol><li>移除旧 Webpack 和相关 loader</li><li>安装 <code>vite</code> 和 <code>@vitejs/plugin-react</code></li><li>替代旧配置：手写 <code>index.html</code>，用 alias、define、css 配置替代 Webpack 配置</li><li>移除 Babel 配置（或保留兼容处理）</li><li>手动检查 polyfill 需求（如 <code>process</code>、<code>Buffer</code>）</li><li>重建 <code>package.json</code> 脚本</li></ol><hr>]]></content>
      
      
      
        <tags>
            
            <tag> webpack </tag>
            
            <tag> vite </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack vue迁移到vite</title>
      <link href="/2025/05/15/front_package_build_skills/vite/webpack%20vue%E8%BF%81%E7%A7%BB%E5%88%B0vite/"/>
      <url>/2025/05/15/front_package_build_skills/vite/webpack%20vue%E8%BF%81%E7%A7%BB%E5%88%B0vite/</url>
      
        <content type="html"><![CDATA[<p>将一个使用 Webpack 的项目迁移到 Vite 是一个很好的选择，尤其是如果你想获得更快的开发服务器启动速度和更现代化的构建体验。不过两者有较大差异，因此迁移需要逐步进行。以下是迁移的核心步骤：</p><hr><h2 id="✅-1-vue项目迁移，安装-Vite-并配置基础结构"><a href="#✅-1-vue项目迁移，安装-Vite-并配置基础结构" class="headerlink" title="✅ 1. vue项目迁移，安装 Vite 并配置基础结构"></a>✅ 1. vue项目迁移，安装 Vite 并配置基础结构</h2><h3 id="安装依赖："><a href="#安装依赖：" class="headerlink" title="安装依赖："></a>安装依赖：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm remove webpack webpack-cli webpack-dev-server</span><br><span class="line">npm install vite @vitejs/plugin-vue sass less --save-dev</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="添加-vite-config-js："><a href="#添加-vite-config-js：" class="headerlink" title="添加 vite.config.js："></a>添加 <code>vite.config.js</code>：</h3><p>创建一个基本的 Vite 配置文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vite.config.js</span></span><br><span class="line"><span class="comment">// vite.config.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> vue <span class="keyword">from</span> <span class="string">&#x27;@vitejs/plugin-vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> path <span class="keyword">from</span> <span class="string">&#x27;path&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="title function_">vue</span>()],</span><br><span class="line">  <span class="attr">resolve</span>: &#123;</span><br><span class="line">    <span class="attr">alias</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;@&#x27;</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;src&#x27;</span>),</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">define</span>: &#123;</span><br><span class="line">    <span class="comment">// 替代 webpack DefinePlugin</span></span><br><span class="line">    <span class="attr">__VUE_OPTIONS_API__</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">__VUE_PROD_DEVTOOLS__</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">&#x27;process.env&#x27;</span>: &#123;</span><br><span class="line">      <span class="attr">MY_ENV</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(process.<span class="property">env</span>.<span class="property">MY_ENV</span>) <span class="comment">// 或者使用 import.meta.env</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">css</span>: &#123;</span><br><span class="line">    <span class="attr">preprocessorOptions</span>: &#123;</span><br><span class="line">      <span class="attr">scss</span>: &#123;</span><br><span class="line">        <span class="attr">additionalData</span>: <span class="string">`@import &quot;@/styles/variables.scss&quot;;`</span> <span class="comment">// 全局 Sass 变量</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">less</span>: &#123;</span><br><span class="line">        <span class="attr">additionalData</span>: <span class="string">`@import &quot;@/styles/variables.less&quot;;`</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">server</span>: &#123;</span><br><span class="line">    <span class="attr">port</span>: <span class="number">3000</span>,</span><br><span class="line">    <span class="attr">open</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="✅-2-调整入口文件和目录结构"><a href="#✅-2-调整入口文件和目录结构" class="headerlink" title="✅ 2. 调整入口文件和目录结构"></a>✅ 2. 调整入口文件和目录结构</h2><p>Webpack 默认是 <code>src/index.js</code> 或通过 <code>webpack.config.js</code> 指定；<br>Vite 默认入口是 <code>index.html</code>，里面通过 <code>&lt;script type=&quot;module&quot; src=&quot;/src/main.js&quot;&gt;&lt;/script&gt;</code> 引入。</p><p>你需要：</p><ul><li>创建或修改 <code>index.html</code></li><li>确保脚本通过 ESM 模式引入：</li><li>如果你想用类似 &lt;%&#x3D; %&gt; 模板语法：需要用 vite-plugin-html</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- public/index.html 或根目录 index.html --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>&lt;%= htmlWebpackPlugin.options.title %&gt;<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/src/main.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="✅-3-替换-Webpack-特有配置"><a href="#✅-3-替换-Webpack-特有配置" class="headerlink" title="✅ 3. 替换 Webpack 特有配置"></a>✅ 3. 替换 Webpack 特有配置</h2><ul><li><strong>别名处理：</strong></li></ul><p>Webpack 中用 <code>resolve.alias</code>，Vite 中也支持：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vite.config.js</span></span><br><span class="line"><span class="keyword">import</span> path <span class="keyword">from</span> <span class="string">&#x27;path&#x27;</span></span><br><span class="line"><span class="attr">resolve</span>: &#123;</span><br><span class="line">  <span class="attr">alias</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;@&#x27;</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;./src&#x27;</span>),</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="✴️-4-环境变量处理（替代-DefinePlugin）"><a href="#✴️-4-环境变量处理（替代-DefinePlugin）" class="headerlink" title="✴️ 4. 环境变量处理（替代 DefinePlugin）"></a>✴️ 4. 环境变量处理（替代 DefinePlugin）</h3><p>Webpack 用 <code>process.env.XXX</code>，在 Vite 中：</p><ul><li>使用 <code>.env</code> 文件</li><li>变量前缀必须是 <code>VITE_</code></li></ul><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># .env</span><br><span class="line">VITE_API_BASE=https://api.example.com</span><br></pre></td></tr></table></figure><p>然后在代码中使用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> api = <span class="keyword">import</span>.<span class="property">meta</span>.<span class="property">env</span>.<span class="property">VITE_API_BASE</span></span><br></pre></td></tr></table></figure><hr><h2 id="✴️-5-Sass-Less-支持"><a href="#✴️-5-Sass-Less-支持" class="headerlink" title="✴️ 5. Sass &#x2F; Less 支持"></a>✴️ 5. Sass &#x2F; Less 支持</h2><p>Vite 原生支持 Sass&#x2F;Less，直接在组件中这样写就行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">@import &quot;@/styles/mixins.scss&quot;;</span><br><span class="line">.container &#123;</span><br><span class="line">  color: $primary-color;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h2 id="✅-4-替换-Loader-插件"><a href="#✅-4-替换-Loader-插件" class="headerlink" title="✅ 4. 替换 Loader &#x2F; 插件"></a>✅ 4. 替换 Loader &#x2F; 插件</h2><p>Webpack 的 Loader &#x2F; Plugin 通常需要使用 Vite 插件替代。例如：</p><table><thead><tr><th>Webpack Loader</th><th>Vite 插件</th></tr></thead><tbody><tr><td><code>babel-loader</code></td><td>不需要，Vite 默认支持 ESBuild</td></tr><tr><td><code>vue-loader</code></td><td><code>@vitejs/plugin-vue</code></td></tr><tr><td><code>css-loader</code> &#x2F; <code>style-loader</code></td><td>Vite 内置 CSS 支持</td></tr><tr><td><code>file-loader</code>, <code>url-loader</code></td><td>静态资源直接 import 即可</td></tr></tbody></table><hr><h2 id="✅-5-开发脚本修改"><a href="#✅-5-开发脚本修改" class="headerlink" title="✅ 5. 开发脚本修改"></a>✅ 5. 开发脚本修改</h2><p>修改 <code>package.json</code> 中的脚本命令：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;dev&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vite&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vite build&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;serve&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vite preview&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><hr><h2 id="✅-6-检查动态导入和代码分割"><a href="#✅-6-检查动态导入和代码分割" class="headerlink" title="✅ 6. 检查动态导入和代码分割"></a>✅ 6. 检查动态导入和代码分割</h2><p>Webpack 的 <code>require.ensure</code>、<code>require()</code> 需要替换为标准的 <code>import()</code> 语法。</p><hr><h2 id="✅-7-全局变量-Polyfill-处理（如-Node-js-内建模块）"><a href="#✅-7-全局变量-Polyfill-处理（如-Node-js-内建模块）" class="headerlink" title="✅ 7. 全局变量&#x2F;Polyfill 处理（如 Node.js 内建模块）"></a>✅ 7. 全局变量&#x2F;Polyfill 处理（如 Node.js 内建模块）</h2><p>Vite 是浏览器优先的，Vite 不会自动注入 Node 内建模块（如 <code>process</code>, <code>path</code>, <code>buffer</code>），你可以：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vite-plugin-node-polyfills --save-dev</span><br></pre></td></tr></table></figure><p>然后在 <code>vite.config.js</code> 中使用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> rollupNodePolyFill <span class="keyword">from</span> <span class="string">&#x27;rollup-plugin-node-polyfills&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="title function_">vue</span>()],</span><br><span class="line">  <span class="attr">optimizeDeps</span>: &#123;</span><br><span class="line">    <span class="attr">include</span>: [<span class="string">&#x27;process&#x27;</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">build</span>: &#123;</span><br><span class="line">    <span class="attr">rollupOptions</span>: &#123;</span><br><span class="line">      <span class="attr">plugins</span>: [<span class="title function_">rollupNodePolyFill</span>()]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="✅-8-热更新、CSS-变量、PostCSS-等高级配置"><a href="#✅-8-热更新、CSS-变量、PostCSS-等高级配置" class="headerlink" title="✅ 8. 热更新、CSS 变量、PostCSS 等高级配置"></a>✅ 8. 热更新、CSS 变量、PostCSS 等高级配置</h2><p>根据你在 Webpack 中的用法，对应地迁移：</p><ul><li>PostCSS → <code>postcss.config.js</code></li><li>全局样式 → 在 <code>vite.config.js</code> 中配置 <code>css.preprocessorOptions</code></li></ul><hr>]]></content>
      
      
      
        <tags>
            
            <tag> webpack </tag>
            
            <tag> vite </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web Components 和 Shadow DOM</title>
      <link href="/2025/05/14/front_skills/js/web%20components/"/>
      <url>/2025/05/14/front_skills/js/web%20components/</url>
      
        <content type="html"><![CDATA[<p>Web Components 和 Shadow DOM **并不使用 <code>&lt;iframe&gt;</code>**，尽管它们在某些方面（如封装性）看起来类似。让我们详细区分一下它们：</p><hr><h3 id="✅-Web-Components-和-Shadow-DOM-的本质"><a href="#✅-Web-Components-和-Shadow-DOM-的本质" class="headerlink" title="✅ Web Components 和 Shadow DOM 的本质"></a>✅ <strong>Web Components 和 Shadow DOM 的本质</strong></h3><ul><li><p><strong>Web Components</strong> 是一组前端 API，包括：</p><ul><li><code>Custom Elements</code>（自定义元素）</li><li><code>Shadow DOM</code>（影子 DOM）</li><li><code>HTML Templates</code>（模板）</li></ul></li><li><p><strong>Shadow DOM</strong> 提供了 <strong>封装样式和结构</strong> 的能力，使组件内部的 DOM 和样式不会影响外部，也不被外部影响。</p></li></ul><blockquote><p><strong>关键点：Shadow DOM 是运行在主文档上下文中的 DOM 树，并非独立的文档环境。</strong></p></blockquote><hr><h3 id="❌-iframe-的作用和区别"><a href="#❌-iframe-的作用和区别" class="headerlink" title="❌ iframe 的作用和区别"></a>❌ <strong>iframe 的作用和区别</strong></h3><ul><li><code>&lt;iframe&gt;</code> 会嵌入一个完全独立的 <strong>浏览器上下文</strong>（包括 JS 执行环境、CSS、全局变量等）。</li><li>它和主页面之间的隔离程度远高于 Shadow DOM，属于“进程级别”的隔离（安全沙箱）。</li><li>适用于嵌入第三方页面、广告、或完全隔离的内容。</li></ul><hr><h3 id="🔍-对比总结表"><a href="#🔍-对比总结表" class="headerlink" title="🔍 对比总结表"></a>🔍 对比总结表</h3><table><thead><tr><th>特性</th><th>Shadow DOM</th><th><code>&lt;iframe&gt;</code></th></tr></thead><tbody><tr><td>是否隔离样式</td><td>✅ 是（封装）</td><td>✅ 是（完全隔离）</td></tr><tr><td>是否隔离 JS 作用域</td><td>❌ 否（共享全局作用域）</td><td>✅ 是（独立 JS 环境）</td></tr><tr><td>是否是独立文档</td><td>❌ 否</td><td>✅ 是（有自己的 <code>document</code>）</td></tr><tr><td>加载性能影响</td><td>✅ 轻量</td><td>❌ 较重，尤其是多个 iframe</td></tr><tr><td>常用于</td><td>UI 组件封装、Design Systems</td><td>广告、嵌入外部内容、跨域内容展示</td></tr></tbody></table><hr><h3 id="✅-举个例子：Shadow-DOM"><a href="#✅-举个例子：Shadow-DOM" class="headerlink" title="✅ 举个例子：Shadow DOM"></a>✅ 举个例子：Shadow DOM</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">my-component</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">class</span> <span class="title class_">MyComponent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">HTMLElement</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">super</span>();</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> shadow = <span class="variable language_">this</span>.<span class="title function_">attachShadow</span>(&#123; <span class="attr">mode</span>: <span class="string">&#x27;open&#x27;</span> &#125;);</span></span><br><span class="line"><span class="language-javascript">      shadow.<span class="property">innerHTML</span> = <span class="string">`&lt;style&gt;p &#123; color: red; &#125;&lt;/style&gt;&lt;p&gt;Hello!&lt;/p&gt;`</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  customElements.<span class="title function_">define</span>(<span class="string">&#x27;my-component&#x27;</span>, <span class="title class_">MyComponent</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面这个组件中的 <code>&lt;p&gt;</code> 标签样式不会影响页面其他内容，也不会被外部样式污染 —— 但它<strong>仍运行在主页面的上下文中</strong>，不是通过 iframe 实现的。</p><hr><h3 id="🧠-总结一句话："><a href="#🧠-总结一句话：" class="headerlink" title="🧠 总结一句话："></a>🧠 总结一句话：</h3><p><strong>Shadow DOM 是“样式和 DOM 封装”，而 iframe 是“运行环境级别的隔离”。两者不是一回事，Shadow DOM 不使用 iframe。</strong></p><h2 id="✅-一、目标：将组件资源拆分为多个文件"><a href="#✅-一、目标：将组件资源拆分为多个文件" class="headerlink" title="✅ 一、目标：将组件资源拆分为多个文件"></a>✅ 一、目标：将组件资源拆分为多个文件</h2><p>比如：</p><ul><li><code>my-component.js</code>：定义组件逻辑</li><li><code>my-component.html</code>：定义模板结构</li><li><code>my-component.css</code>：定义样式</li></ul><hr><h2 id="✅-二、实现方式：使用-JavaScript-动态加载外部资源"><a href="#✅-二、实现方式：使用-JavaScript-动态加载外部资源" class="headerlink" title="✅ 二、实现方式：使用 JavaScript 动态加载外部资源"></a>✅ 二、实现方式：使用 JavaScript 动态加载外部资源</h2><h3 id="📄-my-component-html"><a href="#📄-my-component-html" class="headerlink" title="📄 my-component.html"></a>📄 <code>my-component.html</code></h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;greeting&quot;</span>&gt;</span>Hello from Shadow DOM!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="📄-my-component-css"><a href="#📄-my-component-css" class="headerlink" title="📄 my-component.css"></a>📄 <code>my-component.css</code></h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.greeting</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="📄-my-component-js"><a href="#📄-my-component-js" class="headerlink" title="📄 my-component.js"></a>📄 <code>my-component.js</code></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyComponent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">HTMLElement</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">attachShadow</span>(&#123; <span class="attr">mode</span>: <span class="string">&#x27;open&#x27;</span> &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">connectedCallback</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> [htmlText, cssText] = <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">all</span>([</span><br><span class="line">      <span class="title function_">fetch</span>(<span class="string">&#x27;my-component.html&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> res.<span class="title function_">text</span>()),</span><br><span class="line">      <span class="title function_">fetch</span>(<span class="string">&#x27;my-component.css&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> res.<span class="title function_">text</span>())</span><br><span class="line">    ]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> template = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;template&#x27;</span>);</span><br><span class="line">    template.<span class="property">innerHTML</span> = <span class="string">`</span></span><br><span class="line"><span class="string">      &lt;style&gt;<span class="subst">$&#123;cssText&#125;</span>&lt;/style&gt;</span></span><br><span class="line"><span class="string">      <span class="subst">$&#123;htmlText&#125;</span></span></span><br><span class="line"><span class="string">    `</span>;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">shadowRoot</span>.<span class="title function_">appendChild</span>(template.<span class="property">content</span>.<span class="title function_">cloneNode</span>(<span class="literal">true</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">customElements.<span class="title function_">define</span>(<span class="string">&#x27;my-component&#x27;</span>, <span class="title class_">MyComponent</span>);</span><br></pre></td></tr></table></figure><h3 id="📄-使用："><a href="#📄-使用：" class="headerlink" title="📄 使用："></a>📄 使用：</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span> <span class="attr">src</span>=<span class="string">&quot;my-component.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">my-component</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="✅-三、好处"><a href="#✅-三、好处" class="headerlink" title="✅ 三、好处"></a>✅ 三、好处</h2><ul><li><strong>结构清晰</strong>：HTML、CSS、JS 分离，便于维护</li><li><strong>可重用性高</strong>：可作为独立模块复用</li><li><strong>保持封装性</strong>：依旧使用 Shadow DOM，样式不会外泄</li></ul><hr><h2 id="⚠️-注意事项"><a href="#⚠️-注意事项" class="headerlink" title="⚠️ 注意事项"></a>⚠️ 注意事项</h2><ol><li><strong>跨域问题</strong>：资源必须允许浏览器访问（同源或正确 CORS 设置）。</li><li><strong>性能</strong>：每次创建组件都可能触发 fetch，可使用缓存或优化加载逻辑。</li><li><strong>资源依赖</strong>：需要确保 CSS 和 HTML 文件在 JS 加载之前可访问。</li></ol><hr><p><code>this.attachShadow(&#123; mode: &#39;open&#39; &#125;)</code>、<code>Promise.all()</code> 是<strong>原生 Web 技术</strong>的一部分，<br>而 Vue、React、Angular 这类框架有自己独特的抽象和机制。</p><hr><h2 id="🔍-一句话总结："><a href="#🔍-一句话总结：" class="headerlink" title="🔍 一句话总结："></a>🔍 一句话总结：</h2><blockquote><p><strong>原生 Web Components</strong> 用浏览器原生 API（如 Shadow DOM、Custom Elements）来封装组件；<br><strong>Vue、React、Angular</strong> 则用自己设计的“组件系统”来实现相似目的，但不依赖 Shadow DOM（默认情况下）。</p></blockquote><hr><h2 id="✅-对比核心区别"><a href="#✅-对比核心区别" class="headerlink" title="✅ 对比核心区别"></a>✅ 对比核心区别</h2><table><thead><tr><th>特性&#x2F;行为</th><th>原生 Web Components</th><th>Vue &#x2F; React &#x2F; Angular</th></tr></thead><tbody><tr><td><strong>组件机制</strong></td><td>使用 <code>class</code> + <code>customElements</code></td><td>使用框架语法（如 Vue SFC、JSX、TSX）</td></tr><tr><td><strong>封装 DOM（结构）</strong></td><td>使用 <code>Shadow DOM</code></td><td>使用虚拟 DOM（VNode），默认非封装</td></tr><tr><td><strong>封装样式（CSS 隔离）</strong></td><td>自动隔离 via Shadow DOM</td><td>使用 CSS Modules、Scoped CSS、JSS</td></tr><tr><td><strong><code>attachShadow(&#123;mode&#125;)</code></strong></td><td>显式调用以开启封装</td><td>没有这个 API，框架自动管理</td></tr><tr><td><strong>异步加载（如 <code>Promise.all</code>）</strong></td><td>使用浏览器 API</td><td>通常用 <code>async/await</code> 或框架方式（hooks、lifecycle）</td></tr><tr><td><strong>运行时依赖</strong></td><td>无（原生浏览器支持）</td><td>依赖框架运行时（Vue、React 等）</td></tr></tbody></table><hr><h2 id="🧪-举个例子比较一下："><a href="#🧪-举个例子比较一下：" class="headerlink" title="🧪 举个例子比较一下："></a>🧪 举个例子比较一下：</h2><h3 id="🌐-原生-Web-Component"><a href="#🌐-原生-Web-Component" class="headerlink" title="🌐 原生 Web Component"></a>🌐 原生 Web Component</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyComponent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">HTMLElement</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">attachShadow</span>(&#123; <span class="attr">mode</span>: <span class="string">&#x27;open&#x27;</span> &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">connectedCallback</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">shadowRoot</span>.<span class="property">innerHTML</span> = <span class="string">`&lt;p&gt;Hello&lt;/p&gt;`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">customElements.<span class="title function_">define</span>(<span class="string">&#x27;my-component&#x27;</span>, <span class="title class_">MyComponent</span>);</span><br></pre></td></tr></table></figure><h3 id="⚛️-React-组件（等价实现）"><a href="#⚛️-React-组件（等价实现）" class="headerlink" title="⚛️ React 组件（等价实现）"></a>⚛️ React 组件（等价实现）</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">MyComponent</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>React 不使用 Shadow DOM，而是通过虚拟 DOM 管理结构，靠 JS 隔离样式或使用模块化 CSS。</p></blockquote><hr><h2 id="🤔-那为什么框架不用-Shadow-DOM-呢？"><a href="#🤔-那为什么框架不用-Shadow-DOM-呢？" class="headerlink" title="🤔 那为什么框架不用 Shadow DOM 呢？"></a>🤔 那为什么框架不用 Shadow DOM 呢？</h2><h3 id="✅-优点（不用的原因）："><a href="#✅-优点（不用的原因）：" class="headerlink" title="✅ 优点（不用的原因）："></a>✅ 优点（不用的原因）：</h3><ol><li><strong>性能问题</strong>：Shadow DOM 创建成本较高，虚拟 DOM 更易批量优化。</li><li><strong>工具生态好</strong>：框架有更强的开发体验（如 HMR、TypeScript 支持）。</li><li><strong>灵活性高</strong>：组件样式、结构更可控，不依赖浏览器底层 API。</li><li><strong>跨平台渲染支持更好</strong>（如 SSR、React Native）。</li></ol><h3 id="❗但：框架也可以使用-Shadow-DOM"><a href="#❗但：框架也可以使用-Shadow-DOM" class="headerlink" title="❗但：框架也可以使用 Shadow DOM"></a>❗但：框架也<strong>可以使用</strong> Shadow DOM</h3><ul><li>Vue 和 Angular 可以启用 <code>shadow DOM</code> 模式（<code>shadow: true</code>）。</li><li>React 可以封装原生 Web Components 并渲染到 Shadow Root。<br>但这通常只在特定场景下使用，如构建设计系统、嵌入外部平台等。</li></ul><hr><h2 id="✅-总结"><a href="#✅-总结" class="headerlink" title="✅ 总结"></a>✅ 总结</h2><table><thead><tr><th>对比点</th><th>原生 Web Components</th><th>Vue&#x2F;React&#x2F;Angular</th></tr></thead><tbody><tr><td>是否使用 Shadow DOM</td><td>✅ 默认使用</td><td>❌ 默认不使用（可选启用）</td></tr><tr><td>是否使用 Promise.all</td><td>✅ 直接用原生 API</td><td>✅ 也用，但通常包在生命周期钩子中</td></tr><tr><td>封装性</td><td>✅ 强，原生封装</td><td>❌ 默认弱，用工具实现封装</td></tr><tr><td>上手难度</td><td>🚧 较高，需手写底层逻辑</td><td>✅ 更高层抽象，开发体验好</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> iframe </tag>
            
            <tag> Web Components </tag>
            
            <tag> Shadow DOM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iframe嵌入问题</title>
      <link href="/2025/05/13/front_skills/js/iframe%20%E5%B5%8C%E5%85%A5%E9%97%AE%E9%A2%98/"/>
      <url>/2025/05/13/front_skills/js/iframe%20%E5%B5%8C%E5%85%A5%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="一、基本语法"><a href="#一、基本语法" class="headerlink" title="一、基本语法"></a>一、基本语法</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;https://example.com&quot;</span> <span class="attr">width</span>=<span class="string">&quot;600&quot;</span> <span class="attr">height</span>=<span class="string">&quot;400&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="常用属性："><a href="#常用属性：" class="headerlink" title="常用属性："></a>常用属性：</h3><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td><code>src</code></td><td>要加载的网页地址（URL）</td></tr><tr><td><code>width</code></td><td>框架宽度（像素或百分比）</td></tr><tr><td><code>height</code></td><td>框架高度</td></tr><tr><td><code>name</code></td><td>给iframe命名，可用于通过链接或脚本引用</td></tr><tr><td><code>allow</code></td><td>控制哪些特性可以使用（如摄像头、全屏）</td></tr><tr><td><code>sandbox</code></td><td>启用额外的安全限制</td></tr><tr><td><code>frameborder</code>（已废弃）</td><td>控制是否显示边框</td></tr><tr><td><code>loading</code></td><td>懒加载（<code>lazy</code> 或 <code>eager</code>）</td></tr><tr><td><code>referrerpolicy</code></td><td>控制引用信息的发送策略</td></tr></tbody></table><hr><h2 id="二、常见用途"><a href="#二、常见用途" class="headerlink" title="二、常见用途"></a>二、常见用途</h2><ol><li><p><strong>嵌入第三方内容</strong><br>如YouTube视频、Google Maps、Twitter帖子等。</p></li><li><p><strong>跨域加载资源</strong><br>加载其他域的页面，尤其用于广告或微前端架构。</p></li><li><p><strong>沙箱隔离</strong><br>使用 <code>sandbox</code> 属性可以限制 iframe 中内容的行为，增强安全性。</p></li></ol><hr><h2 id="三、sandbox-属性详解"><a href="#三、sandbox-属性详解" class="headerlink" title="三、sandbox 属性详解"></a>三、<code>sandbox</code> 属性详解</h2><p><code>sandbox</code> 属性可以开启一个“安全沙箱”环境，防止iframe中的内容执行一些潜在危险的操作。</p><p>常见值：</p><table><thead><tr><th>值</th><th>含义</th></tr></thead><tbody><tr><td><code>allow-scripts</code></td><td>允许脚本运行（但不能创建弹窗）</td></tr><tr><td><code>allow-forms</code></td><td>允许表单提交</td></tr><tr><td><code>allow-same-origin</code></td><td>允许iframe内容与主页面同源（用于访问 cookies、localStorage 等）</td></tr><tr><td><code>allow-popups</code></td><td>允许弹出窗口</td></tr><tr><td><code>allow-modals</code></td><td>允许模态对话框</td></tr><tr><td><code>allow-downloads</code></td><td>允许下载</td></tr></tbody></table><p>⚠️ 默认情况下，启用 <code>sandbox</code> 会阻止几乎所有功能，只有指定的功能才会被放开。</p><hr><h2 id="四、安全性注意"><a href="#四、安全性注意" class="headerlink" title="四、安全性注意"></a>四、安全性注意</h2><ol><li><p><strong>跨域限制</strong></p><ul><li>同源策略限制 JavaScript 访问 iframe 中的内容，除非两个页面同源。</li><li>可以用 <code>postMessage()</code> 实现跨域通信。</li></ul></li><li><p><strong>防点击劫持（Clickjacking）</strong></p><ul><li>网站可以使用 HTTP 头部 <code>X-Frame-Options: DENY</code> 或 <code>Content-Security-Policy: frame-ancestors</code> 来防止被 iframe 嵌入。</li></ul></li><li><p><strong>不要轻信 iframe 加载的内容</strong></p><ul><li>第三方 iframe 可能包含恶意脚本或尝试进行权限提升。</li></ul></li></ol><hr><h2 id="五、iframe-与现代前端的结合"><a href="#五、iframe-与现代前端的结合" class="headerlink" title="五、iframe 与现代前端的结合"></a>五、iframe 与现代前端的结合</h2><ol><li><p><strong>微前端架构</strong></p><ul><li>使用 iframe 将多个独立的应用程序集成在一个壳应用中。</li></ul></li><li><p><strong>懒加载与性能优化</strong></p><ul><li>使用 <code>loading=&quot;lazy&quot;</code> 让 iframe 在进入视口时才加载，提升性能。</li></ul></li><li><p><strong>通信机制：<code>window.postMessage()</code></strong><br>用于 iframe 与父页面之间的安全通信：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父页面发送消息</span></span><br><span class="line">iframe.<span class="property">contentWindow</span>.<span class="title function_">postMessage</span>(<span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;https://example.com&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// iframe 接收消息</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;message&#x27;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (event.<span class="property">origin</span> === <span class="string">&#x27;https://parent.com&#x27;</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;收到消息:&#x27;</span>, event.<span class="property">data</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ol><hr><h2 id="六、iframe-的替代方案"><a href="#六、iframe-的替代方案" class="headerlink" title="六、iframe 的替代方案"></a>六、iframe 的替代方案</h2><p>在某些场景下，iframe 被认为是不优雅或性能差的解决方案，替代方案包括：</p><ul><li>使用 Web Components + Shadow DOM</li><li>Ajax&#x2F;Fetch + 动态内容加载</li><li>SPA（单页面应用）路由切换</li><li>微前端框架（如 Qiankun、Single-SPA）</li></ul><p>在实现跨域嵌入时，使用 <code>&lt;iframe&gt;</code> 是一种常见的解决方案，尤其是当你需要嵌入第三方内容或者外部网站时。然而，跨域嵌入也会遇到一些限制，尤其是在与 <code>iframe</code> 内容的交互和控制方面。具体而言，浏览器的同源政策（Same-Origin Policy）会限制你在一个域下操作或访问来自其他域的 <code>iframe</code> 内容，除非跨域资源支持特定的跨域通信协议。</p><p>为了克服这些限制，除了使用 <code>&lt;iframe&gt;</code> 之外，还有一些替代方案，你可以根据实际需求来选择合适的方案。</p><h3 id="1-跨域通信：postMessage"><a href="#1-跨域通信：postMessage" class="headerlink" title="1. 跨域通信：postMessage"></a>1. <strong>跨域通信：<code>postMessage</code></strong></h3><p>如果你控制嵌入的 <code>iframe</code> 页面和父页面，那么可以通过 <code>postMessage</code> 实现跨域通信。这种方式可以让父页面和嵌入的 <code>iframe</code> 页面进行消息传递，而无需违反浏览器的同源政策。</p><h4 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h4><p>父页面向 <code>iframe</code> 页面发送消息：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> iframe = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;myIframe&#x27;</span>);</span><br><span class="line">iframe.<span class="property">contentWindow</span>.<span class="title function_">postMessage</span>(<span class="string">&#x27;Hello iframe&#x27;</span>, <span class="string">&#x27;https://example.com&#x27;</span>);</span><br></pre></td></tr></table></figure><p><code>iframe</code> 页面接收并处理消息：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;message&#x27;</span>, <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (event.<span class="property">origin</span> !== <span class="string">&#x27;https://yourdomain.com&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span>; <span class="comment">// 验证消息来源</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Received message:&#x27;</span>, event.<span class="property">data</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这种方法适用于父页面与 <code>iframe</code> 页面之间需要相互交换数据的场景。</p><hr><h3 id="2-CORS（跨域资源共享）"><a href="#2-CORS（跨域资源共享）" class="headerlink" title="2. CORS（跨域资源共享）"></a>2. <strong>CORS（跨域资源共享）</strong></h3><p>CORS 是一种允许浏览器向不同源的服务器发出请求并获取响应的机制。通过设置合适的服务器头（<code>Access-Control-Allow-Origin</code>），服务器可以允许特定的源访问它的资源。虽然 CORS 主要用于 AJAX 请求，但它也有助于控制跨域访问权限。</p><p>如果你的 <code>iframe</code> 页面能够访问并处理 CORS 请求，那么可以通过 Ajax 来加载数据，而不依赖于传统的 <code>iframe</code>。例如，通过请求 API 获取数据，并动态加载页面内容。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;https://example.com/api/data&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">  <span class="attr">headers</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Authorization&#x27;</span>: <span class="string">&#x27;Bearer token&#x27;</span> <span class="comment">// 如果需要认证</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> response.<span class="title function_">json</span>())</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(data));</span><br></pre></td></tr></table></figure><p>CORS 适用于从服务器端控制跨域请求的场景，尤其是当你希望通过 API 与远程资源交互时。</p><hr><h3 id="3-JSONP（JSON-with-Padding）"><a href="#3-JSONP（JSON-with-Padding）" class="headerlink" title="3. JSONP（JSON with Padding）"></a>3. <strong>JSONP（JSON with Padding）</strong></h3><p>JSONP 是一种绕过同源策略限制的技术，通常用于跨域获取数据。它通过在 <code>&lt;script&gt;</code> 标签中嵌入远程 URL 来加载数据，从而绕过浏览器的同源策略。</p><p>JSONP 主要用于跨域的数据请求，而不适用于嵌入整个页面或互动内容。由于其安全性问题，JSONP 已逐渐被其他技术（如 CORS）所取代，但它仍然可以在一些特定场景下使用。</p><h4 id="示例：-1"><a href="#示例：-1" class="headerlink" title="示例："></a>示例：</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://example.com/data?callback=handleResponse&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">handleResponse</span>(<span class="params">data</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Received data:&#x27;</span>, data);</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>JSONP 适用于只需要获取数据并不需要复杂交互的场景，且要求目标服务器支持 JSONP。</p><hr><h3 id="4-Web-Components-和-Shadow-DOM"><a href="#4-Web-Components-和-Shadow-DOM" class="headerlink" title="4. Web Components 和 Shadow DOM"></a>4. <strong>Web Components 和 Shadow DOM</strong></h3><p>如果你需要将第三方内容嵌入到网页中，但又不想使用传统的 <code>&lt;iframe&gt;</code>，可以考虑使用 <strong>Web Components</strong> 和 <strong>Shadow DOM</strong>。Web Components 是一种用于封装和隔离 HTML 元素及其行为的标准，Shadow DOM 可以帮助你将嵌套的元素和样式封装在一个“影子”树中，避免样式和事件的污染。</p><h4 id="示例：-2"><a href="#示例：-2" class="headerlink" title="示例："></a>示例：</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">my-widget</span>&gt;</span><span class="tag">&lt;/<span class="name">my-widget</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">class</span> <span class="title class_">MyWidget</span> <span class="keyword">extends</span> <span class="title class_ inherited__">HTMLElement</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">super</span>();</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> shadow = <span class="variable language_">this</span>.<span class="title function_">attachShadow</span>(&#123; <span class="attr">mode</span>: <span class="string">&#x27;open&#x27;</span> &#125;);</span></span><br><span class="line"><span class="language-javascript">      shadow.<span class="property">innerHTML</span> = <span class="string">`&lt;iframe src=&quot;https://example.com&quot;&gt;&lt;/iframe&gt;`</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  customElements.<span class="title function_">define</span>(<span class="string">&#x27;my-widget&#x27;</span>, <span class="title class_">MyWidget</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Web Components 和 Shadow DOM 适用于希望通过封装来避免样式和脚本冲突的场景，尤其是在复杂的应用中，能够提供更好的代码组织和重用。</p><hr><h3 id="5-Server-Side-Embedding-代理方式"><a href="#5-Server-Side-Embedding-代理方式" class="headerlink" title="5. Server-Side Embedding (代理方式)"></a>5. <strong>Server-Side Embedding (代理方式)</strong></h3><p>另一种方法是使用 <strong>服务器端代理</strong>，即在你的服务器上中转数据或内容。服务器从第三方网站获取数据或页面，然后将其嵌入到你的网页中。这种方式可以有效绕过浏览器的跨域限制，因为跨域问题仅限于浏览器端，服务器端没有同源策略的限制。</p><h4 id="示例：-3"><a href="#示例：-3" class="headerlink" title="示例："></a>示例：</h4><ul><li>你可以在服务器上使用像 <code>Node.js</code>、<code>PHP</code>、<code>Python</code> 等技术来发起 HTTP 请求，从第三方网站获取数据或页面。</li><li>然后，将该内容通过你的服务器传递给前端，前端无需使用 <code>&lt;iframe&gt;</code>，而是直接显示或渲染从服务器获取的数据。</li></ul><p>这种方法适用于需要嵌入外部资源，但不希望受限于浏览器的跨域策略，同时你控制服务器端代码的场景。</p><hr><h3 id="6-Proxy-Iframe（代理-iframe）"><a href="#6-Proxy-Iframe（代理-iframe）" class="headerlink" title="6. Proxy Iframe（代理 iframe）"></a>6. <strong>Proxy Iframe（代理 <code>iframe</code>）</strong></h3><p>如果你不能修改第三方页面的内容，但又需要跨域嵌入，你可以创建一个代理 <code>iframe</code>。这种方法涉及通过你自己的服务器创建一个 <code>iframe</code> 页面，页面本身可以从第三方获取内容。</p><h4 id="示例：-4"><a href="#示例：-4" class="headerlink" title="示例："></a>示例：</h4><ul><li>你将第三方页面请求通过服务器代理，服务器再将其发送到客户端。</li><li>前端 <code>iframe</code> 引用的是你的服务器，而不是直接引用第三方页面。</li></ul><p>这种方法避免了直接跨域访问第三方内容，但可能涉及额外的工作和服务器负担。</p><hr><h3 id="7-Server-Side-Rendering-SSR"><a href="#7-Server-Side-Rendering-SSR" class="headerlink" title="7. Server-Side Rendering (SSR)"></a>7. <strong>Server-Side Rendering (SSR)</strong></h3><p>在一些复杂的应用中，可以考虑 <strong>服务器端渲染（SSR）</strong> 的方式，通过服务器生成 HTML 内容，然后将其直接发送到浏览器，而不通过 <code>iframe</code>。</p><p>例如，如果你需要集成外部内容，可以通过服务器从第三方网站抓取并生成静态页面内容，然后在浏览器中直接渲染。这种方式可以避免跨域问题，但需要更多的服务器端处理和缓存。</p><hr><h3 id="8-Content-Embedding-via-API"><a href="#8-Content-Embedding-via-API" class="headerlink" title="8. Content Embedding via API"></a>8. <strong>Content Embedding via API</strong></h3><p>如果第三方提供了 <strong>API 接口</strong>，而你只需要嵌入其中的部分数据或功能，可以直接使用 API 获取数据并动态渲染到你的页面中，而不是通过 <code>iframe</code> 嵌入完整页面。</p><p>例如，第三方提供了一个社交媒体的 API，你可以直接使用该 API 获取用户的数据并在页面上展示，而无需嵌入整个网站或应用。</p><hr><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>除了传统的 <code>&lt;iframe&gt;</code> 嵌入方法外，还有多种替代方案来实现跨域嵌入，每种方案都有不同的适用场景：</p><ol><li>**<code>postMessage</code>**：适用于父页面与 <code>iframe</code> 页面之间的跨域通信。</li><li><strong>CORS</strong>：适用于 API 请求，允许跨域访问资源。</li><li><strong>JSONP</strong>：适用于简单的跨域数据获取，已逐渐被 CORS 替代。</li><li><strong>Web Components 和 Shadow DOM</strong>：适用于需要封装和隔离的内容嵌入。</li><li><strong>Server-Side Embedding</strong>：适用于通过服务器中转跨域内容。</li><li><strong>Proxy Iframe</strong>：通过服务器代理解决跨域问题。</li><li><strong>Server-Side Rendering</strong>：通过服务器渲染并直接传递内容。</li><li><strong>Content Embedding via API</strong>：通过 API 动态嵌入外部内容。</li></ol><p>选择哪种方法取决于你的具体需求，控制的权限，跨域安全策略，和所嵌入的内容的特性。</p>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> iframe </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css Rule tree</title>
      <link href="/2025/05/04/front_skills/css3/css%20rule%20tree/"/>
      <url>/2025/05/04/front_skills/css3/css%20rule%20tree/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="🌳-什么是-Rule-Tree？"><a href="#🌳-什么是-Rule-Tree？" class="headerlink" title="🌳 什么是 Rule Tree？"></a>🌳 什么是 Rule Tree？</h2><p><strong>Rule Tree</strong> 是浏览器在构建 CSSOM 时的一部分结构，<strong>它组织了 CSS 中的所有规则（Rule）</strong>，即每一个选择器+声明组合的结构体。</p><blockquote><p>它的作用是：把从不同来源（内部、外部、继承）来的规则，按“层叠规则（Cascading Rules）”归并起来，为后续匹配和计算样式做准备。</p></blockquote><hr><h2 id="🧩-Rule-Tree-的结构本质（简化版）"><a href="#🧩-Rule-Tree-的结构本质（简化版）" class="headerlink" title="🧩 Rule Tree 的结构本质（简化版）"></a>🧩 Rule Tree 的结构本质（简化版）</h2><p>每个 Rule 节点代表一条规则：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;selector&quot;</span><span class="punctuation">:</span> <span class="string">&quot;div.main&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;declarations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span> <span class="attr">&quot;property&quot;</span><span class="punctuation">:</span> <span class="string">&quot;color&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;red&quot;</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span> <span class="attr">&quot;property&quot;</span><span class="punctuation">:</span> <span class="string">&quot;font-size&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;16px&quot;</span> <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;origin&quot;</span><span class="punctuation">:</span> <span class="string">&quot;author&quot;</span><span class="punctuation">,</span>     <span class="comment">// 来源（浏览器、用户、作者）</span></span><br><span class="line">  <span class="attr">&quot;important&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span>     <span class="comment">// 是否有 !important</span></span><br><span class="line">  <span class="attr">&quot;specificity&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="number">0</span><span class="punctuation">,</span> <span class="number">1</span><span class="punctuation">,</span> <span class="number">1</span><span class="punctuation">]</span> <span class="comment">// 优先级（ID数、类数、标签数）</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><hr><h2 id="🔁-Rule-Tree-是怎么“合并规则”的？"><a href="#🔁-Rule-Tree-是怎么“合并规则”的？" class="headerlink" title="🔁 Rule Tree 是怎么“合并规则”的？"></a>🔁 Rule Tree 是怎么“合并规则”的？</h2><h3 id="假设我们有如下三条规则："><a href="#假设我们有如下三条规则：" class="headerlink" title="假设我们有如下三条规则："></a>假设我们有如下三条规则：</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 默认浏览器样式 */</span></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: black;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 外部样式表 */</span></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 内联样式 */</span></span><br><span class="line">&lt;<span class="selector-tag">p</span> style=&quot;<span class="attribute">color</span>: blue;&quot;&gt;</span><br></pre></td></tr></table></figure><p>浏览器处理的顺序：</p><table><thead><tr><th>来源</th><th>优先级高低</th><th>说明</th></tr></thead><tbody><tr><td>浏览器默认（user agent）</td><td>最低</td><td>最后被覆盖</td></tr><tr><td>作者样式表（外部CSS）</td><td>中等</td><td>一般使用的样式</td></tr><tr><td>行内样式</td><td>高</td><td><code>style=&quot;&quot;</code> 写的样式</td></tr><tr><td><code>!important</code></td><td>最高</td><td>无视一般优先级</td></tr></tbody></table><p>按选择器 + 来源 + specificity + 是否 important 区分不同规则  , 浏览器会将匹配到的多条规则收集到一个集合，然后根据这些因素合并：<br>多个 CSS 规则可能匹配同一个元素时，浏览器必须选出“赢家”，这个过程称为层叠（cascading）。</p><h3 id="💡-合并规则优先级判断标准："><a href="#💡-合并规则优先级判断标准：" class="headerlink" title="💡 合并规则优先级判断标准："></a>💡 合并规则优先级判断标准：</h3><ol><li><code>!important</code> 有无</li><li>来源（user &#x2F; author &#x2F; user-agent）</li><li>specificity（选择器的具体程度）</li><li>声明的先后顺序</li></ol><hr><h2 id="📚-举个合并例子"><a href="#📚-举个合并例子" class="headerlink" title="📚 举个合并例子"></a>📚 举个合并例子</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* style1.css */</span></span><br><span class="line"><span class="selector-tag">p</span> &#123; <span class="attribute">color</span>: red; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* style2.css */</span></span><br><span class="line"><span class="selector-tag">p</span> &#123; <span class="attribute">color</span>: green <span class="meta">!important</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 页面上： */</span></span><br><span class="line">&lt;<span class="selector-tag">p</span> style=&quot;<span class="attribute">color</span>: blue;&quot;&gt;Hello&lt;/<span class="selector-tag">p</span>&gt;</span><br></pre></td></tr></table></figure><p>最终谁胜出？</p><ol><li><code>color: blue</code>（内联） specificity 高</li><li>但 <code>color: green !important</code> 是重要声明</li></ol><p>✅ <strong>最终显示颜色为绿色</strong>（因为 <code>!important</code> 胜出）。</p><hr><h2 id="🔍-浏览器内部：如何构造-Rule-Tree？"><a href="#🔍-浏览器内部：如何构造-Rule-Tree？" class="headerlink" title="🔍 浏览器内部：如何构造 Rule Tree？"></a>🔍 浏览器内部：如何构造 Rule Tree？</h2><p>浏览器内部通常会用如下数据结构：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CSSRule</span><br><span class="line"> └─ Selector (p)</span><br><span class="line"> └─ Declarations (color: red)</span><br><span class="line"> └─ Specificity (0,0,1)</span><br><span class="line"> └─ Origin (author)</span><br><span class="line"> └─ Important (false)</span><br></pre></td></tr></table></figure><p>Rule Tree 并不是对 DOM 树的映射，而是对<strong>选择器规则集合</strong>的映射，它将这些规则组合、排序、归类以便查找和比较。</p><hr><h2 id="🛠️-现代浏览器优化：Rule-Tree-Style-Sharing"><a href="#🛠️-现代浏览器优化：Rule-Tree-Style-Sharing" class="headerlink" title="🛠️ 现代浏览器优化：Rule Tree + Style Sharing"></a>🛠️ 现代浏览器优化：Rule Tree + Style Sharing</h2><p>像 Firefox 的 Gecko 和 Chrome 的 Blink 引擎，会：</p><ul><li>使用“Rule Tree”缓存共享规则，避免重复样式计算</li><li>使用“Computed Style”缓存结果，优化性能</li></ul><hr><h2 id="✅-总结：Rule-Tree-如何区分和合并规则？"><a href="#✅-总结：Rule-Tree-如何区分和合并规则？" class="headerlink" title="✅ 总结：Rule Tree 如何区分和合并规则？"></a>✅ 总结：Rule Tree 如何区分和合并规则？</h2><table><thead><tr><th>步骤</th><th>说明</th></tr></thead><tbody><tr><td>区分</td><td>按选择器 + 来源 + specificity + 是否 important 区分不同规则</td></tr><tr><td>合并</td><td>把所有匹配同一元素的规则，按层叠规则合并</td></tr><tr><td>输出</td><td>得出一个元素的最终“计算样式”（Computed Style）</td></tr></tbody></table><hr><p><strong>具体拆解</strong>你提到的这四个关键维度：<strong>选择器 + 来源 + specificity + 是否 <code>!important</code></strong> 是如何让浏览器区分并决定“哪条 CSS 规则最终生效”的。</p><hr><h2 id="🧠-背景：多个-CSS-规则可能匹配同一个元素时，浏览器必须选出“赢家”，这个过程称为层叠（cascading）。"><a href="#🧠-背景：多个-CSS-规则可能匹配同一个元素时，浏览器必须选出“赢家”，这个过程称为层叠（cascading）。" class="headerlink" title="🧠 背景：多个 CSS 规则可能匹配同一个元素时，浏览器必须选出“赢家”，这个过程称为层叠（cascading）。"></a>🧠 背景：多个 CSS 规则可能匹配同一个元素时，浏览器必须选出“赢家”，这个过程称为<strong>层叠（cascading）</strong>。</h2><hr><h2 id="✅-四大决策因子详解"><a href="#✅-四大决策因子详解" class="headerlink" title="✅ 四大决策因子详解"></a>✅ 四大决策因子详解</h2><h3 id="①-选择器（Selector）"><a href="#①-选择器（Selector）" class="headerlink" title="① 选择器（Selector）"></a>① <strong>选择器（Selector）</strong></h3><p>哪个选择器能匹配当前元素？可能匹配上多个，例如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123; <span class="attribute">color</span>: red; &#125;</span><br><span class="line"><span class="selector-id">#main</span> &#123; <span class="attribute">color</span>: green; &#125;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-id">#main</span> &#123; <span class="attribute">color</span>: blue; &#125;</span><br></pre></td></tr></table></figure><p>这些都会匹配 <code>&lt;div id=&quot;main&quot;&gt;</code>，但最终只能取其中一个。</p><hr><h3 id="②-来源（Origin）"><a href="#②-来源（Origin）" class="headerlink" title="② 来源（Origin）"></a>② <strong>来源（Origin）</strong></h3><p>CSS 有三种来源，优先级不同：</p><table><thead><tr><th>来源</th><th>权重（从低到高）</th></tr></thead><tbody><tr><td>User agent（浏览器默认）</td><td>最低</td></tr><tr><td>用户样式（用户设置）</td><td>中（通常可被覆盖）</td></tr><tr><td>作者样式（网站写的）</td><td>高（一般我们写的 CSS）</td></tr><tr><td><code>!important</code> 版本</td><td>会覆盖上面所有</td></tr></tbody></table><p>例如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 浏览器默认 */</span></span><br><span class="line"><span class="selector-tag">body</span> &#123; <span class="attribute">font-size</span>: <span class="number">16px</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 作者样式 */</span></span><br><span class="line"><span class="selector-tag">body</span> &#123; <span class="attribute">font-size</span>: <span class="number">20px</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 用户设置 */</span></span><br><span class="line"><span class="selector-tag">body</span> &#123; <span class="attribute">font-size</span>: <span class="number">18px</span> <span class="meta">!important</span>; &#125;  &lt;-- 覆盖作者样式</span><br></pre></td></tr></table></figure><hr><h3 id="③-Specificity（选择器优先级）"><a href="#③-Specificity（选择器优先级）" class="headerlink" title="③ Specificity（选择器优先级）"></a>③ <strong>Specificity（选择器优先级）</strong></h3><p>浏览器给选择器打“分”，越具体，分越高，越容易胜出：</p><table><thead><tr><th>选择器类型</th><th>分值表示形式（a,b,c,d）</th><th>举例</th><th>说明</th></tr></thead><tbody><tr><td><code>!important</code></td><td>特殊处理，最高</td><td></td><td>特例，详见下一项</td></tr><tr><td>行内样式（style）</td><td>1,0,0,0</td><td><code>style=&quot;...&quot;</code></td><td>优先级高于任何选择器</td></tr><tr><td>ID 选择器（#id）</td><td>0,1,0,0</td><td><code>#header</code></td><td>高优先级</td></tr><tr><td>类、属性、伪类选择器</td><td>0,0,1,0</td><td><code>.box</code>, <code>[type=]</code></td><td>常见</td></tr><tr><td>元素、伪元素选择器</td><td>0,0,0,1</td><td><code>div</code>, <code>p</code>, <code>::after</code></td><td>优先级最低</td></tr></tbody></table><p><strong>示例</strong>：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* specificity: (0,0,0,1) */</span></span><br><span class="line"><span class="selector-tag">p</span> &#123; <span class="attribute">color</span>: red; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* specificity: (0,0,1,0) */</span></span><br><span class="line"><span class="selector-class">.text</span> &#123; <span class="attribute">color</span>: green; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* specificity: (0,1,0,0) */</span></span><br><span class="line"><span class="selector-id">#main</span> &#123; <span class="attribute">color</span>: blue; &#125;</span><br></pre></td></tr></table></figure><p>优先级从高到低：<code>#main</code> &gt; <code>.text</code> &gt; <code>p</code></p><hr><h3 id="④-是否有-important"><a href="#④-是否有-important" class="headerlink" title="④ 是否有 !important"></a>④ <strong>是否有 <code>!important</code></strong></h3><p>这相当于“加特权”：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>即使 <code>.box</code> 的 specificity 低于其他规则，它也会胜出。</p><p>但是：<strong>多个 <code>!important</code> 要比 specificity！</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red <span class="meta">!important</span>;       <span class="comment">/* specificity: 0,0,1,0 */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#main</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: blue <span class="meta">!important</span>;      <span class="comment">/* specificity: 0,1,0,0 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>✅ <code>#main</code> 的规则胜出，因为 <code>!important</code> 且 specificity 更高。</p><hr><h2 id="🎯-决策流程图（简化文字版）"><a href="#🎯-决策流程图（简化文字版）" class="headerlink" title="🎯 决策流程图（简化文字版）"></a>🎯 决策流程图（简化文字版）</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">是否有 !important？</span><br><span class="line">├── 是 → specificity 高者胜出</span><br><span class="line">├── 否 → 来源高者胜出（作者 &gt; 用户 &gt; 浏览器）</span><br><span class="line">        └── 若来源相同 → specificity 高者胜</span><br><span class="line">               └── 若 specificity 相同 → 后写的覆盖前写的</span><br></pre></td></tr></table></figure><hr><h2 id="🧪-实战举例分析"><a href="#🧪-实战举例分析" class="headerlink" title="🧪 实战举例分析"></a>🧪 实战举例分析</h2><p>HTML：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;main&quot;</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span> <span class="attr">style</span>=<span class="string">&quot;color: orange;&quot;</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>CSS：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* specificity: 0,0,1,0 */</span></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* specificity: 0,1,0,0 */</span></span><br><span class="line"><span class="selector-id">#main</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* inline style, specificity: 1,0,0,0 */</span></span><br></pre></td></tr></table></figure><h3 id="→-谁胜出？"><a href="#→-谁胜出？" class="headerlink" title="→ 谁胜出？"></a>→ 谁胜出？</h3><p>最终颜色是：<strong>橙色</strong>（来自 inline <code>style</code>）</p><hr><p>加一条：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: purple <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>→ 此时颜色是：<strong>紫色</strong>（因为 <code>!important</code> 胜出，即使 specificity 低）</p><hr>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> html </tag>
            
            <tag> css3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css原理</title>
      <link href="/2025/05/01/front_skills/css3/css%E5%8E%9F%E7%90%86/"/>
      <url>/2025/05/01/front_skills/css3/css%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>CSS（层叠样式表，Cascading Style Sheets）是用于控制网页外观和格式的语言。它与HTML结构内容分离，使开发者可以更灵活地控制网页的展示方式。下面是CSS的核心原理系统介绍：</p><hr><h2 id="一、CSS-的基本作用"><a href="#一、CSS-的基本作用" class="headerlink" title="一、CSS 的基本作用"></a>一、CSS 的基本作用</h2><p>CSS的主要目标是<strong>控制网页中 HTML 元素的样式和布局</strong>，包括颜色、字体、大小、边距、位置、动画等。</p><hr><h2 id="二、CSS-工作原理概述"><a href="#二、CSS-工作原理概述" class="headerlink" title="二、CSS 工作原理概述"></a>二、CSS 工作原理概述</h2><h3 id="1-选择器匹配"><a href="#1-选择器匹配" class="headerlink" title="1. 选择器匹配"></a>1. <strong>选择器匹配</strong></h3><p>浏览器首先会根据 HTML 文档结构构建 DOM 树（文档对象模型），然后根据 CSS 构建 CSSOM（CSS 对象模型）。CSS 选择器用于匹配 DOM 树中的元素，比如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123; <span class="attribute">color</span>: red; &#125;</span><br></pre></td></tr></table></figure><p>这个选择器会把所有 <code>&lt;h1&gt;</code> 元素匹配出来。</p><h3 id="2-样式应用"><a href="#2-样式应用" class="headerlink" title="2. 样式应用"></a>2. <strong>样式应用</strong></h3><p>浏览器将 DOM 和 CSSOM 合并，生成 <strong>渲染树（Render Tree）</strong>，这棵树中包含了所有需要显示的元素和它们的样式信息。</p><h3 id="3-层叠（Cascading）"><a href="#3-层叠（Cascading）" class="headerlink" title="3. 层叠（Cascading）"></a>3. <strong>层叠（Cascading）</strong></h3><p>多个规则可能作用于同一个元素。CSS 通过“层叠规则”决定使用哪个样式。主要遵循以下原则：</p><ul><li><strong>优先级</strong>（specificity）：更具体的选择器优先级更高。</li><li><strong>来源</strong>（author、user、browser）：作者样式通常高于用户代理样式。</li><li><strong>重要性</strong>（important）：<code>!important</code> 的规则将覆盖普通规则。</li><li><strong>顺序</strong>：相同优先级的规则按出现顺序后写的覆盖前写的。</li></ul><h3 id="4-继承"><a href="#4-继承" class="headerlink" title="4. 继承"></a>4. <strong>继承</strong></h3><p>某些属性（如字体、颜色）可以从父元素继承而来；而有些（如边框、宽度）不会自动继承。</p><h3 id="5-计算样式（Computed-Style）"><a href="#5-计算样式（Computed-Style）" class="headerlink" title="5. 计算样式（Computed Style）"></a>5. <strong>计算样式（Computed Style）</strong></h3><p>浏览器根据选择器和层叠规则，计算出每个元素的最终样式。</p><hr><h2 id="三、CSS-样式的表现形式"><a href="#三、CSS-样式的表现形式" class="headerlink" title="三、CSS 样式的表现形式"></a>三、CSS 样式的表现形式</h2><ul><li><strong>内联样式</strong>：<code>&lt;div style=&quot;color: red;&quot;&gt;</code></li><li><strong>内部样式表</strong>：在 HTML 文件的 <code>&lt;style&gt;</code> 标签中</li><li><strong>外部样式表</strong>：通过 <code>&lt;link rel=&quot;stylesheet&quot; href=&quot;style.css&quot;&gt;</code> 引入外部 <code>.css</code> 文件</li></ul><p>CSS 被解析为 CSSOM（CSS Object Model）树的过程，和 HTML 解析为 DOM 类似，都是<strong>自顶向下逐层处理</strong>的结构解析过程。下面是一个系统化的解释：</p><hr><p>CSSOM（CSS Object Model）是浏览器将 CSS 样式规则解析后的<strong>对象表示形式</strong>。它以树状结构组织，描述了页面上所有 CSS 样式的规则和属性，供后续渲染和计算使用。</p><hr><h3 id="CSSOM-解析流程详解"><a href="#CSSOM-解析流程详解" class="headerlink" title="CSSOM 解析流程详解"></a>CSSOM 解析流程详解</h3><p>CSSOM 的解析过程大致分为以下几个步骤：</p><hr><h4 id="1-读取样式表"><a href="#1-读取样式表" class="headerlink" title="1. 读取样式表"></a>1. <strong>读取样式表</strong></h4><p>浏览器会收集所有的样式来源：</p><ul><li><code>&lt;style&gt;</code> 标签中的内部样式</li><li><code>&lt;link&gt;</code> 引入的外部样式表</li><li>HTML 元素上的 <code>style</code> 属性（虽然它不属于 CSSOM，但影响最终样式）</li><li>浏览器默认样式（user agent stylesheet）</li></ul><hr><h4 id="2-词法分析（Lexing）"><a href="#2-词法分析（Lexing）" class="headerlink" title="2. 词法分析（Lexing）"></a>2. <strong>词法分析（Lexing）</strong></h4><p>将 CSS 文本拆解为一个个“<strong>词元（token）</strong>”，类似于：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>被分解为 token 流：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IDENT(h1), &#123;, IDENT(color), :, IDENT(red), ;, IDENT(font-size), :, DIMENSION(20px), ;, &#125;</span><br></pre></td></tr></table></figure><p>这一步类似将句子分解为单词。</p><hr><h4 id="3-语法分析（Parsing）"><a href="#3-语法分析（Parsing）" class="headerlink" title="3. 语法分析（Parsing）"></a>3. <strong>语法分析（Parsing）</strong></h4><p>接下来，浏览器使用这些 token 构建一个结构化的数据结构（语法树），也称为<strong>规则树（Rule Tree）</strong>。这一步会生成对应的<strong>样式规则节点</strong>，如：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  selector<span class="punctuation">:</span> <span class="string">&quot;h1&quot;</span><span class="punctuation">,</span></span><br><span class="line">  declarations<span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span> property<span class="punctuation">:</span> <span class="string">&quot;color&quot;</span><span class="punctuation">,</span> value<span class="punctuation">:</span> <span class="string">&quot;red&quot;</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span> property<span class="punctuation">:</span> <span class="string">&quot;font-size&quot;</span><span class="punctuation">,</span> value<span class="punctuation">:</span> <span class="string">&quot;20px&quot;</span> <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>这就是 CSSOM 树中的一个节点。</p><hr><h4 id="4-构建-CSSOM-树"><a href="#4-构建-CSSOM-树" class="headerlink" title="4. 构建 CSSOM 树"></a>4. <strong>构建 CSSOM 树</strong></h4><p>每个解析出的规则都会作为 CSSOM 树的一个节点，按照样式表结构组织。多个样式表合并后，浏览器形成完整的 CSSOM 树，用于后续样式计算。</p><p>CSSOM 树不会包含每个 HTML 元素，只表示样式规则和选择器。</p><hr><h3 id="CSSOM-示例结构（可视化）"><a href="#CSSOM-示例结构（可视化）" class="headerlink" title="CSSOM 示例结构（可视化）"></a>CSSOM 示例结构（可视化）</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* style.css */</span></span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">24px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解析后的 CSSOM 可以简化为如下结构（伪代码）：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;selector&quot;</span><span class="punctuation">:</span> <span class="string">&quot;h1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;declarations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span><span class="attr">&quot;property&quot;</span><span class="punctuation">:</span> <span class="string">&quot;color&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;red&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span><span class="attr">&quot;property&quot;</span><span class="punctuation">:</span> <span class="string">&quot;font-size&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;24px&quot;</span><span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;selector&quot;</span><span class="punctuation">:</span> <span class="string">&quot;p&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;declarations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span><span class="attr">&quot;property&quot;</span><span class="punctuation">:</span> <span class="string">&quot;color&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;blue&quot;</span><span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><hr><h3 id="CSSOM-与-DOM-结合"><a href="#CSSOM-与-DOM-结合" class="headerlink" title="CSSOM 与 DOM 结合"></a>CSSOM 与 DOM 结合</h3><p>CSSOM 不直接作用于页面，而是与 DOM 一起构成 <strong>渲染树（Render Tree）</strong>。浏览器通过选择器匹配规则，查找哪些 DOM 元素匹配哪些 CSSOM 规则，然后将样式附加到 DOM 元素上，生成渲染树用于布局和绘制。</p><hr><h3 id="总结-CSSOM-构建流程图（文字简版）"><a href="#总结-CSSOM-构建流程图（文字简版）" class="headerlink" title="总结 CSSOM 构建流程图（文字简版）"></a>总结 CSSOM 构建流程图（文字简版）</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CSS 源码 → 词法分析（Tokens） → 语法分析（Rules） → CSSOM 树</span><br></pre></td></tr></table></figure><hr><p>CSS 被解析为 CSSOM（CSS Object Model）树的过程，和 HTML 解析为 DOM 类似，都是<strong>自顶向下逐层处理</strong>的结构解析过程。下面是一个系统化的解释：</p><hr><h2 id="四、CSS-常用特性分类"><a href="#四、CSS-常用特性分类" class="headerlink" title="四、CSS 常用特性分类"></a>四、CSS 常用特性分类</h2><table><thead><tr><th>分类</th><th>示例</th></tr></thead><tbody><tr><td>布局</td><td><code>display</code>, <code>position</code>, <code>flex</code>, <code>grid</code></td></tr><tr><td>尺寸</td><td><code>width</code>, <code>height</code>, <code>margin</code>, <code>padding</code></td></tr><tr><td>文字与字体</td><td><code>font-size</code>, <code>color</code>, <code>line-height</code></td></tr><tr><td>背景与边框</td><td><code>background-color</code>, <code>border</code></td></tr><tr><td>动画与过渡</td><td><code>transition</code>, <code>animation</code></td></tr><tr><td>响应式设计</td><td><code>media queries</code>, <code>vw</code>, <code>vh</code></td></tr></tbody></table><hr><h2 id="五、CSS-渲染流程总结图（文字版）"><a href="#五、CSS-渲染流程总结图（文字版）" class="headerlink" title="五、CSS 渲染流程总结图（文字版）"></a>五、CSS 渲染流程总结图（文字版）</h2><ol><li>HTML -&gt; 解析为 DOM 树</li><li>CSS -&gt; 解析为 CSSOM 树</li><li>DOM + CSSOM -&gt; 合并成 Render Tree</li><li>Render Tree -&gt; 布局（Layout）</li><li>Layout -&gt; 绘制（Paint）</li><li>Paint -&gt; 显示在屏幕上（Composite）</li></ol><hr>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> html </tag>
            
            <tag> css3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Prometheus+grafana数据 Ui同步验证</title>
      <link href="/2025/04/22/automatically_test_skills/Prometheus+grafana%E6%95%B0%E6%8D%AE%20Ui%E5%90%8C%E6%AD%A5%E9%AA%8C%E8%AF%81/"/>
      <url>/2025/04/22/automatically_test_skills/Prometheus+grafana%E6%95%B0%E6%8D%AE%20Ui%E5%90%8C%E6%AD%A5%E9%AA%8C%E8%AF%81/</url>
      
        <content type="html"><![CDATA[<p>使用 <strong>Prometheus</strong> 和 <strong>Grafana</strong> 进行 <strong>UI 数据同步验证</strong> 的目的是通过监控和验证用户界面的数据同步状态，确保在不同的系统或数据中心之间的数据一致性。这种方案通常应用于分布式系统或多数据中心环境，其中数据需要保持同步，以避免出现数据不一致的情况。</p><p>以下是如何使用 Prometheus 和 Grafana 来实现 UI 数据同步验证的步骤：</p><h3 id="1-监控-UI-数据同步状态"><a href="#1-监控-UI-数据同步状态" class="headerlink" title="1. 监控 UI 数据同步状态"></a>1. <strong>监控 UI 数据同步状态</strong></h3><p>首先，必须通过 Prometheus 采集 UI 数据同步的相关指标。这些指标可以是：</p><ul><li><strong>同步延迟</strong>：UI 数据同步所需的时间。</li><li><strong>同步成功率</strong>：同步操作是否成功。</li><li><strong>数据一致性状态</strong>：UI 数据是否一致，是否有任何不一致或冲突。</li><li><strong>API 响应时间</strong>：用于同步数据的 API 是否响应及时。</li><li><strong>错误日志</strong>：任何与数据同步相关的错误或异常。</li></ul><h4 id="收集同步状态的指标"><a href="#收集同步状态的指标" class="headerlink" title="收集同步状态的指标"></a><strong>收集同步状态的指标</strong></h4><p>为了实现数据同步验证，可以使用自定义 <strong>exporters</strong> 或 <strong>Prometheus client libraries</strong> 采集应用程序的数据同步状态。你需要在你的应用程序中设置相关的监控指标，如下所示：</p><ul><li><p><strong>同步延迟</strong>（以毫秒为单位，记录从发起同步到接收同步完成的时间）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sync_duration_seconds</span><br></pre></td></tr></table></figure></li><li><p><strong>同步成功率</strong>（记录同步操作是否成功）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sync_success_total</span><br></pre></td></tr></table></figure></li><li><p><strong>数据一致性检查</strong>（标记数据是否一致，1 为一致，0 为不一致）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data_consistency_status</span><br></pre></td></tr></table></figure></li><li><p><strong>API 响应时间</strong>（记录同步数据时 API 响应时间）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">api_response_time_seconds</span><br></pre></td></tr></table></figure></li></ul><p>通过在系统中暴露这些指标，Prometheus 可以定期拉取这些数据，并存储在时序数据库中。</p><h3 id="2-设置-Prometheus-来监控数据同步"><a href="#2-设置-Prometheus-来监控数据同步" class="headerlink" title="2. 设置 Prometheus 来监控数据同步"></a>2. <strong>设置 Prometheus 来监控数据同步</strong></h3><p>在 Prometheus 中配置这些自定义指标。例如，在 <code>prometheus.yml</code> 中配置目标：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">scrape_configs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">&#x27;ui_sync_monitoring&#x27;</span></span><br><span class="line">    <span class="attr">static_configs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">targets:</span> [<span class="string">&#x27;localhost:8080&#x27;</span>]  <span class="comment"># 指向暴露这些同步数据指标的服务</span></span><br></pre></td></tr></table></figure><h3 id="3-创建-Grafana-仪表板进行数据可视化"><a href="#3-创建-Grafana-仪表板进行数据可视化" class="headerlink" title="3. 创建 Grafana 仪表板进行数据可视化"></a>3. <strong>创建 Grafana 仪表板进行数据可视化</strong></h3><p>一旦 Prometheus 开始收集同步相关的指标，你可以在 <strong>Grafana</strong> 中创建一个仪表板来可视化这些数据。</p><h4 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a><strong>步骤</strong>：</h4><ol><li><p><strong>添加 Prometheus 数据源到 Grafana</strong>：</p><ul><li>登录到 Grafana，点击 <strong>Configuration</strong> -&gt; <strong>Data Sources</strong>。</li><li>选择 <strong>Prometheus</strong>，并配置连接到你的 Prometheus 实例。</li></ul></li><li><p><strong>创建一个新仪表板</strong>：</p><ul><li>在 Grafana 中，点击 <strong>+</strong> -&gt; <strong>Dashboard</strong>。</li><li>创建多个面板来展示不同的同步验证指标。</li></ul></li></ol><h4 id="可视化面板："><a href="#可视化面板：" class="headerlink" title="可视化面板："></a><strong>可视化面板</strong>：</h4><ul><li><p><strong>同步延迟面板</strong>：<br>显示数据同步所需的平均时间，可以用一个 <strong>时间序列图</strong> 展示。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">avg(sync_duration_seconds) by (instance)</span><br></pre></td></tr></table></figure></li><li><p><strong>同步成功率面板</strong>：<br>显示成功的同步次数和失败的同步次数，或者同步操作的成功率。可以用 <strong>饼图</strong> 或 <strong>单个数字面板</strong> 来显示。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rate(sync_success_total[1m])</span><br></pre></td></tr></table></figure></li><li><p><strong>数据一致性面板</strong>：<br>使用 <strong>状态面板</strong> 来显示数据是否一致。根据同步是否成功来设置不同的颜色（如绿色表示一致，红色表示不一致）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data_consistency_status</span><br></pre></td></tr></table></figure></li><li><p><strong>API 响应时间面板</strong>：<br>显示与 UI 数据同步相关的 API 响应时间。可以用 <strong>折线图</strong> 或 <strong>柱状图</strong> 展示。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">avg(api_response_time_seconds) by (instance)</span><br></pre></td></tr></table></figure></li><li><p><strong>错误日志面板</strong>：<br>如果你有与同步相关的错误日志数据，可以使用 <strong>日志面板</strong> 显示任何与同步操作相关的错误。</p></li></ul><h4 id="示例-Grafana-面板查询："><a href="#示例-Grafana-面板查询：" class="headerlink" title="示例 Grafana 面板查询："></a>示例 Grafana 面板查询：</h4><ol><li><p><strong>同步延迟</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">avg(sync_duration_seconds) by (instance)</span><br></pre></td></tr></table></figure></li><li><p><strong>同步成功率</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rate(sync_success_total[1m])</span><br></pre></td></tr></table></figure></li><li><p><strong>数据一致性</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">avg(data_consistency_status) by (instance)</span><br></pre></td></tr></table></figure></li></ol><h3 id="4-设置报警规则"><a href="#4-设置报警规则" class="headerlink" title="4. 设置报警规则"></a>4. <strong>设置报警规则</strong></h3><p>在 <strong>Grafana</strong> 中，你还可以为一些关键指标设置报警规则。例如，如果同步失败超过一定次数或同步延迟超过某个阈值时，可以触发警报。</p><h4 id="设置报警规则："><a href="#设置报警规则：" class="headerlink" title="设置报警规则："></a><strong>设置报警规则</strong>：</h4><ol><li>在 Grafana 面板的编辑模式下，选择 <strong>Alert</strong>。</li><li>设置条件，例如：<ul><li>当 <strong>同步延迟</strong> 大于 2 秒时触发警报。</li><li>当 <strong>数据一致性</strong> 为 0 时触发警报（表示数据不一致）。</li></ul></li><li>配置通知渠道，例如邮件、Slack 或 Webhook，确保团队能够收到警报。</li></ol><h3 id="5-UI-数据同步验证的具体应用场景"><a href="#5-UI-数据同步验证的具体应用场景" class="headerlink" title="5. UI 数据同步验证的具体应用场景"></a>5. <strong>UI 数据同步验证的具体应用场景</strong></h3><ul><li><p><strong>多数据中心同步</strong>：在分布式系统或多数据中心环境中，UI 数据同步的验证尤为重要。通过 Prometheus 和 Grafana，可以实时监控数据同步的状态，确保不同数据中心之间的数据一致性。</p></li><li><p><strong>微服务架构</strong>：在微服务架构中，多个服务之间可能存在同步问题。通过监控 API 调用、同步成功率和延迟，确保各个微服务间的数据一致性。</p></li><li><p><strong>大规模系统</strong>：对于大规模分布式系统，UI 的数据同步可能面临挑战。通过结合 Prometheus 和 Grafana，你可以实现高效的同步验证和实时报警，确保系统的稳定运行。</p></li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>使用 <strong>Prometheus</strong> 和 <strong>Grafana</strong> 进行 <strong>UI 数据同步验证</strong> 是一个强大的方案，可以帮助监控和验证分布式系统中不同数据中心、微服务或 UI 系统之间的数据一致性。通过 Prometheus 收集和存储同步相关的指标，再通过 Grafana 可视化这些指标，你可以清晰地看到同步过程中的延迟、成功率、数据一致性等信息，并通过报警机制及时响应潜在问题。这种集成不仅提升了数据同步的透明度，还能提高系统的稳定性和可靠性。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 自动化测试 </tag>
            
            <tag> cypress </tag>
            
            <tag> selenium </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cypress+Playwright数据UI同步验证</title>
      <link href="/2025/04/21/automatically_test_skills/Cypress+Playwright%E6%95%B0%E6%8D%AEUI%E5%90%8C%E6%AD%A5%E9%AA%8C%E8%AF%81/"/>
      <url>/2025/04/21/automatically_test_skills/Cypress+Playwright%E6%95%B0%E6%8D%AEUI%E5%90%8C%E6%AD%A5%E9%AA%8C%E8%AF%81/</url>
      
        <content type="html"><![CDATA[<p><strong>UI 数据同步验证</strong> 是确保两个或多个数据中心（DC）在展示给用户的界面数据上一致性的重要过程。UI 层的数据通常包括页面上展示的文本、表单字段、按钮状态、图片等，而这类数据会受到前端与后端交互的影响，因此在不同数据中心之间确保 UI 数据一致性需要经过仔细的验证。</p><p>以下是实现 <strong>UI 数据同步验证</strong> 和 <strong>确保两个数据中心的数据一致性</strong> 的几个关键步骤：</p><h3 id="1-定义同步验证标准"><a href="#1-定义同步验证标准" class="headerlink" title="1. 定义同步验证标准"></a>1. <strong>定义同步验证标准</strong></h3><p>首先，需要明确在 UI 层面，哪些数据需要同步。通常包括：</p><ul><li><strong>页面内容</strong>：包括文本、标题、按钮标签、表单内容等。</li><li><strong>数据表格和列表</strong>：例如用户列表、产品列表等。</li><li><strong>日期和时间戳</strong>：尤其是在时区不同的情况下，时间相关数据可能需要特别处理。</li><li><strong>用户交互元素状态</strong>：如按钮的启用&#x2F;禁用状态、复选框的选中状态等。</li></ul><p>定义好验证标准后，可以为每个 UI 元素确定预期值，进而进行对比。</p><h3 id="2-选择测试工具与框架"><a href="#2-选择测试工具与框架" class="headerlink" title="2. 选择测试工具与框架"></a>2. <strong>选择测试工具与框架</strong></h3><p>选择合适的自动化测试工具来执行 UI 数据同步验证。<strong>Cypress</strong> 和 <strong>Playwright</strong> 都是常用的前端自动化测试工具，可以帮助进行 UI 层的验证：</p><ul><li><strong>Cypress</strong>：侧重于易用性和集成，适合进行功能性 UI 测试和快速验证。</li><li><strong>Playwright</strong>：支持更广泛的浏览器和设备，适合进行更复杂的 UI 测试，支持多浏览器的并行执行。</li></ul><h3 id="3-通过-UI-层面抓取数据"><a href="#3-通过-UI-层面抓取数据" class="headerlink" title="3. 通过 UI 层面抓取数据"></a>3. <strong>通过 UI 层面抓取数据</strong></h3><p>你可以使用 Cypress 或 Playwright 来抓取两个数据中心的 UI 元素数据，并进行对比。</p><h4 id="Cypress-示例：抓取数据并对比-UI-数据"><a href="#Cypress-示例：抓取数据并对比-UI-数据" class="headerlink" title="Cypress 示例：抓取数据并对比 UI 数据"></a>Cypress 示例：抓取数据并对比 UI 数据</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">describe</span>(<span class="string">&#x27;Data Center UI Sync Comparison&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;should compare UI data between DC1 and DC2&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 访问数据中心1</span></span><br><span class="line">    cy.<span class="title function_">visit</span>(<span class="string">&#x27;https://dc1.your-app.com&#x27;</span>);</span><br><span class="line">    cy.<span class="title function_">get</span>(<span class="string">&#x27;.user-list&#x27;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">$dc1List</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> dc1Data = $dc1List.<span class="title function_">map</span>(<span class="function">(<span class="params">index, element</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Cypress</span>.$(element).<span class="title function_">text</span>(); <span class="comment">// 提取文本内容</span></span><br><span class="line">      &#125;).<span class="title function_">get</span>();</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 访问数据中心2</span></span><br><span class="line">      cy.<span class="title function_">visit</span>(<span class="string">&#x27;https://dc2.your-app.com&#x27;</span>);</span><br><span class="line">      cy.<span class="title function_">get</span>(<span class="string">&#x27;.user-list&#x27;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">$dc2List</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> dc2Data = $dc2List.<span class="title function_">map</span>(<span class="function">(<span class="params">index, element</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="title class_">Cypress</span>.$(element).<span class="title function_">text</span>();</span><br><span class="line">        &#125;).<span class="title function_">get</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 对比两个数据中心的 UI 数据</span></span><br><span class="line">        <span class="title function_">expect</span>(dc1Data).<span class="property">to</span>.<span class="property">deep</span>.<span class="title function_">equal</span>(dc2Data);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在上述示例中，我们访问了两个数据中心的相同页面，并抓取了 <code>.user-list</code> 这个 UI 元素的文本内容，最后进行了深度比较。</p><h4 id="Playwright-示例：抓取数据并对比-UI-数据"><a href="#Playwright-示例：抓取数据并对比-UI-数据" class="headerlink" title="Playwright 示例：抓取数据并对比 UI 数据"></a>Playwright 示例：抓取数据并对比 UI 数据</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; test, expect &#125; = <span class="built_in">require</span>(<span class="string">&#x27;@playwright/test&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;Compare UI data between DC1 and DC2&#x27;</span>, <span class="keyword">async</span> (&#123; page &#125;) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 访问数据中心1</span></span><br><span class="line">  <span class="keyword">await</span> page.<span class="title function_">goto</span>(<span class="string">&#x27;https://dc1.your-app.com&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> dc1Data = <span class="keyword">await</span> page.<span class="title function_">locator</span>(<span class="string">&#x27;.user-list&#x27;</span>).<span class="title function_">allTextContents</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 访问数据中心2</span></span><br><span class="line">  <span class="keyword">await</span> page.<span class="title function_">goto</span>(<span class="string">&#x27;https://dc2.your-app.com&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> dc2Data = <span class="keyword">await</span> page.<span class="title function_">locator</span>(<span class="string">&#x27;.user-list&#x27;</span>).<span class="title function_">allTextContents</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 对比两个数据中心的 UI 数据</span></span><br><span class="line">  <span class="title function_">expect</span>(dc1Data).<span class="title function_">toEqual</span>(dc2Data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这个 Playwright 示例展示了如何抓取 UI 数据并进行对比。我们使用 <code>locator</code> 来选择页面中的 UI 元素并提取它们的文本内容。</p><h3 id="4-处理异步数据加载"><a href="#4-处理异步数据加载" class="headerlink" title="4. 处理异步数据加载"></a>4. <strong>处理异步数据加载</strong></h3><p>UI 数据通常是异步加载的，特别是在现代单页应用（SPA）中。因此，需要确保在执行 UI 数据抓取时，数据已完全加载并渲染。</p><p>在 <strong>Cypress</strong> 中，可以通过 <code>cy.wait()</code> 或监听网络请求来确保数据加载完成：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cy.<span class="title function_">intercept</span>(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;/api/user-data&#x27;</span>).<span class="title function_">as</span>(<span class="string">&#x27;getUserData&#x27;</span>);</span><br><span class="line">cy.<span class="title function_">visit</span>(<span class="string">&#x27;https://dc1.your-app.com&#x27;</span>);</span><br><span class="line">cy.<span class="title function_">wait</span>(<span class="string">&#x27;@getUserData&#x27;</span>);  <span class="comment">// 等待 API 请求完成</span></span><br><span class="line">cy.<span class="title function_">get</span>(<span class="string">&#x27;.user-list&#x27;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">$list</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> dc1Data = $list.<span class="title function_">text</span>();</span><br><span class="line">  <span class="comment">// 比较数据...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在 <strong>Playwright</strong> 中，你可以使用 <code>page.waitForResponse()</code> 或 <code>page.waitForSelector()</code> 来等待数据加载完成：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">await</span> page.<span class="title function_">goto</span>(<span class="string">&#x27;https://dc1.your-app.com&#x27;</span>);</span><br><span class="line"><span class="keyword">await</span> page.<span class="title function_">waitForResponse</span>(<span class="function"><span class="params">response</span> =&gt;</span> response.<span class="title function_">url</span>().<span class="title function_">includes</span>(<span class="string">&#x27;/api/user-data&#x27;</span>) &amp;&amp; response.<span class="title function_">status</span>() === <span class="number">200</span>);</span><br><span class="line"><span class="keyword">const</span> dc1Data = <span class="keyword">await</span> page.<span class="title function_">locator</span>(<span class="string">&#x27;.user-list&#x27;</span>).<span class="title function_">allTextContents</span>();</span><br><span class="line"><span class="comment">// 比较数据...</span></span><br></pre></td></tr></table></figure><h3 id="5-处理数据格式和时间差异"><a href="#5-处理数据格式和时间差异" class="headerlink" title="5. 处理数据格式和时间差异"></a>5. <strong>处理数据格式和时间差异</strong></h3><p>如果 UI 数据包括时间戳、日期等需要按时区处理的内容，确保两个数据中心的时区一致，或者在验证时加入合理的时间容忍度。对于不同地区的用户，日期和时间可能不同，因此需要在验证时排除时区和时间差的影响。</p><p>例如，比较两个数据中心中的 <strong>日期</strong> 字段时，可以使用以下策略：</p><ul><li><strong>统一时区</strong>：转换为 UTC 或统一时区后再进行比较。</li><li><strong>时间容忍度</strong>：如果时间差异较小（如几秒钟或几分钟），可以设定时间容忍度来允许这些轻微差异。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> dc1Date = <span class="keyword">new</span> <span class="title class_">Date</span>(dc1Data.<span class="property">date</span>); <span class="comment">// 假设我们获取到的时间是字符串格式</span></span><br><span class="line"><span class="keyword">const</span> dc2Date = <span class="keyword">new</span> <span class="title class_">Date</span>(dc2Data.<span class="property">date</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_">expect</span>(<span class="title class_">Math</span>.<span class="title function_">abs</span>(dc1Date - dc2Date)).<span class="title function_">toBeLessThan</span>(<span class="number">60000</span>); <span class="comment">// 容忍差异不超过1分钟</span></span><br></pre></td></tr></table></figure><h3 id="6-报告和异常处理"><a href="#6-报告和异常处理" class="headerlink" title="6. 报告和异常处理"></a>6. <strong>报告和异常处理</strong></h3><p>最后，生成比较报告并处理异常。你可以在测试失败时记录详细信息，例如：</p><ul><li><strong>数据不一致的元素</strong>：记录哪些 UI 元素的数据不一致。</li><li><strong>错误日志</strong>：生成错误日志，包括请求响应时间、状态码等，以便进一步调查。</li></ul><p>在 <strong>Cypress</strong> 中，你可以使用 <code>cy.screenshot()</code> 截图，或者使用 <code>cy.task()</code> 将错误信息发送到外部日志系统：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cy.<span class="title function_">screenshot</span>(<span class="string">&#x27;data-mismatch-screenshot&#x27;</span>);</span><br><span class="line">cy.<span class="title function_">task</span>(<span class="string">&#x27;logError&#x27;</span>, &#123; <span class="attr">message</span>: <span class="string">&#x27;UI data mismatch&#x27;</span>, dc1Data, dc2Data &#125;);</span><br></pre></td></tr></table></figure><p>在 <strong>Playwright</strong> 中，你可以通过 <code>page.screenshot()</code> 截图并输出详细的错误日志：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">await</span> page.<span class="title function_">screenshot</span>(&#123; <span class="attr">path</span>: <span class="string">&#x27;data-mismatch-screenshot.png&#x27;</span> &#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Data mismatch between DC1 and DC2&#x27;</span>, &#123; dc1Data, dc2Data &#125;);</span><br></pre></td></tr></table></figure><h3 id="7-自动化与定期验证"><a href="#7-自动化与定期验证" class="headerlink" title="7. 自动化与定期验证"></a>7. <strong>自动化与定期验证</strong></h3><p>由于数据中心的 UI 数据可能随时发生变化，建议设置定期的自动化测试，确保数据同步性。在 CI&#x2F;CD 流程中加入这类测试，能够在每次部署后及时发现数据差异，保障用户体验。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>要进行 <strong>UI 数据同步验证</strong> 并确保两个数据中心的数据一致性，关键步骤包括：</p><ol><li><strong>抓取 UI 数据</strong>：使用 Cypress 或 Playwright 抓取 UI 元素并提取数据。</li><li><strong>确保数据加载完毕</strong>：通过等待异步加载数据，确保数据完全渲染。</li><li><strong>处理时区和数据格式差异</strong>：合理处理时间和格式差异，避免误判。</li><li><strong>生成报告和异常处理</strong>：记录并报告数据不一致的情况，便于快速修复。</li><li><strong>定期验证</strong>：将此类测试集成到 CI&#x2F;CD 流程中，确保持续的 UI 数据一致性。</li></ol><p>通过上述方法，你可以确保不同数据中心的 UI 数据在用户界面上的一致性，保障跨地域用户的良好体验。 但是这种方式，仅限于不同url，同时可获取到。如果url中数据，不可同时获取，该如何？</p><p> 如果 URL 中的数据不可同时获取（即无法在同一时刻从两个数据中心获取数据进行对比），可以采取 <strong>异步获取和比对的策略</strong>。这种情况通常出现在以下几种场景中：</p><ol><li><strong>数据延迟加载</strong>：页面中的某些数据依赖于后台请求或异步操作，需要等待一定时间才能加载完成。</li><li><strong>动态数据生成</strong>：不同数据中心可能有不同的处理方式，导致同一请求返回的数据顺序或格式不同。</li><li><strong>不对等数据访问</strong>：由于网络延迟、API 请求限制或数据隐私，不能直接在同一时刻获取两个数据中心的数据。</li></ol><p>为了处理这种情况，可以采取以下几种方法：</p><h3 id="1-分阶段获取数据并保存"><a href="#1-分阶段获取数据并保存" class="headerlink" title="1. 分阶段获取数据并保存"></a>1. <strong>分阶段获取数据并保存</strong></h3><p>可以在 <strong>Cypress</strong> 或 <strong>Playwright</strong> 中通过多次请求、分别抓取数据，并在后续步骤中比较。这种方法适用于通过异步请求或不同步骤加载的数据。</p><h4 id="方案：步骤化请求和比对"><a href="#方案：步骤化请求和比对" class="headerlink" title="方案：步骤化请求和比对"></a>方案：步骤化请求和比对</h4><ol><li><strong>分别请求两个数据中心</strong>：首先分别访问两个数据中心，获取它们的UI或API数据。</li><li><strong>缓存数据</strong>：在获取数据时，先将每个数据中心的数据缓存下来（例如在本地变量或文件中），然后再执行比较。</li><li><strong>比较存储的数据</strong>：等待所有数据加载完毕后再进行对比。</li></ol><h5 id="Cypress-示例："><a href="#Cypress-示例：" class="headerlink" title="Cypress 示例："></a>Cypress 示例：</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">describe</span>(<span class="string">&#x27;UI Data Comparison between DC1 and DC2&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;should compare data from two different data centers&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 获取数据中心1的UI数据</span></span><br><span class="line">    cy.<span class="title function_">visit</span>(<span class="string">&#x27;https://dc1.your-app.com&#x27;</span>);</span><br><span class="line">    cy.<span class="title function_">get</span>(<span class="string">&#x27;.data-container&#x27;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">$dc1Data</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> dc1Text = $dc1Data.<span class="title function_">text</span>();</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 获取数据中心2的UI数据</span></span><br><span class="line">      cy.<span class="title function_">visit</span>(<span class="string">&#x27;https://dc2.your-app.com&#x27;</span>);</span><br><span class="line">      cy.<span class="title function_">get</span>(<span class="string">&#x27;.data-container&#x27;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">$dc2Data</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> dc2Text = $dc2Data.<span class="title function_">text</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 比较两个数据中心的数据</span></span><br><span class="line">        <span class="title function_">expect</span>(dc1Text).<span class="property">to</span>.<span class="title function_">equal</span>(dc2Text);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="Playwright-示例："><a href="#Playwright-示例：" class="headerlink" title="Playwright 示例："></a>Playwright 示例：</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; test, expect &#125; = <span class="built_in">require</span>(<span class="string">&#x27;@playwright/test&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;Compare data between two data centers asynchronously&#x27;</span>, <span class="keyword">async</span> (&#123; page &#125;) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 获取数据中心1的UI数据</span></span><br><span class="line">  <span class="keyword">await</span> page.<span class="title function_">goto</span>(<span class="string">&#x27;https://dc1.your-app.com&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> dc1Data = <span class="keyword">await</span> page.<span class="title function_">locator</span>(<span class="string">&#x27;.data-container&#x27;</span>).<span class="title function_">textContent</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取数据中心2的UI数据</span></span><br><span class="line">  <span class="keyword">await</span> page.<span class="title function_">goto</span>(<span class="string">&#x27;https://dc2.your-app.com&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> dc2Data = <span class="keyword">await</span> page.<span class="title function_">locator</span>(<span class="string">&#x27;.data-container&#x27;</span>).<span class="title function_">textContent</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 比较两个数据中心的数据</span></span><br><span class="line">  <span class="title function_">expect</span>(dc1Data).<span class="title function_">toBe</span>(dc2Data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="2-延迟等待和超时处理"><a href="#2-延迟等待和超时处理" class="headerlink" title="2. 延迟等待和超时处理"></a>2. <strong>延迟等待和超时处理</strong></h3><p>有时数据加载可能需要额外的时间，尤其是在处理动态加载的内容时。你可以为每个数据中心设置 <strong>延迟等待机制</strong>，确保数据完全加载后再进行比较。</p><h4 id="Cypress-延迟等待："><a href="#Cypress-延迟等待：" class="headerlink" title="Cypress 延迟等待："></a>Cypress 延迟等待：</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">cy.<span class="title function_">visit</span>(<span class="string">&#x27;https://dc1.your-app.com&#x27;</span>);</span><br><span class="line">cy.<span class="title function_">wait</span>(<span class="number">5000</span>); <span class="comment">// 等待5秒，确保数据加载完成</span></span><br><span class="line">cy.<span class="title function_">get</span>(<span class="string">&#x27;.data-container&#x27;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">$dc1Data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> dc1Text = $dc1Data.<span class="title function_">text</span>();</span><br><span class="line">  cy.<span class="title function_">visit</span>(<span class="string">&#x27;https://dc2.your-app.com&#x27;</span>);</span><br><span class="line">  cy.<span class="title function_">wait</span>(<span class="number">5000</span>); <span class="comment">// 等待5秒，确保数据加载完成</span></span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;.data-container&#x27;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">$dc2Data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> dc2Text = $dc2Data.<span class="title function_">text</span>();</span><br><span class="line">    <span class="title function_">expect</span>(dc1Text).<span class="property">to</span>.<span class="title function_">equal</span>(dc2Text);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="Playwright-延迟等待："><a href="#Playwright-延迟等待：" class="headerlink" title="Playwright 延迟等待："></a>Playwright 延迟等待：</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">await</span> page.<span class="title function_">goto</span>(<span class="string">&#x27;https://dc1.your-app.com&#x27;</span>);</span><br><span class="line"><span class="keyword">await</span> page.<span class="title function_">waitForTimeout</span>(<span class="number">5000</span>);  <span class="comment">// 等待5秒</span></span><br><span class="line"><span class="keyword">const</span> dc1Data = <span class="keyword">await</span> page.<span class="title function_">locator</span>(<span class="string">&#x27;.data-container&#x27;</span>).<span class="title function_">textContent</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">await</span> page.<span class="title function_">goto</span>(<span class="string">&#x27;https://dc2.your-app.com&#x27;</span>);</span><br><span class="line"><span class="keyword">await</span> page.<span class="title function_">waitForTimeout</span>(<span class="number">5000</span>);  <span class="comment">// 等待5秒</span></span><br><span class="line"><span class="keyword">const</span> dc2Data = <span class="keyword">await</span> page.<span class="title function_">locator</span>(<span class="string">&#x27;.data-container&#x27;</span>).<span class="title function_">textContent</span>();</span><br><span class="line"></span><br><span class="line"><span class="title function_">expect</span>(dc1Data).<span class="title function_">toBe</span>(dc2Data);</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>：尽管延迟等待可作为解决方案之一，但使用 <code>waitForTimeout()</code> 不是最佳实践，应该尽可能依赖于更精确的等待条件（例如：<code>cy.get()</code>、<code>page.locator().waitFor()</code> 等），避免长时间的静态等待。</p></blockquote><h3 id="3-API-数据同步"><a href="#3-API-数据同步" class="headerlink" title="3. API 数据同步"></a>3. <strong>API 数据同步</strong></h3><p>如果两个数据中心的数据是通过 <strong>API</strong> 获取的，你可以并行请求 API，等待两边的请求完成后再进行数据比较。比如，可以通过 <code>Promise.all</code>（Playwright）或 <code>cy.request()</code>（Cypress）并行发起两个请求，获取并比较返回的数据。</p><h4 id="Cypress-API-同步请求："><a href="#Cypress-API-同步请求：" class="headerlink" title="Cypress API 同步请求："></a>Cypress API 同步请求：</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">describe</span>(<span class="string">&#x27;API Data Comparison between DC1 and DC2&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;should compare API responses between DC1 and DC2&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 请求数据中心1的API</span></span><br><span class="line">    cy.<span class="title function_">request</span>(<span class="string">&#x27;https://dc1.your-app.com/api/data&#x27;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">response1</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> dc1Data = response1.<span class="property">body</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 请求数据中心2的API</span></span><br><span class="line">      cy.<span class="title function_">request</span>(<span class="string">&#x27;https://dc2.your-app.com/api/data&#x27;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">response2</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> dc2Data = response2.<span class="property">body</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 比较两个数据中心的API返回数据</span></span><br><span class="line">        <span class="title function_">expect</span>(dc1Data).<span class="property">to</span>.<span class="property">deep</span>.<span class="title function_">equal</span>(dc2Data);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="Playwright-API-同步请求："><a href="#Playwright-API-同步请求：" class="headerlink" title="Playwright API 同步请求："></a>Playwright API 同步请求：</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; test, expect &#125; = <span class="built_in">require</span>(<span class="string">&#x27;@playwright/test&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;Compare API data between two data centers&#x27;</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="comment">// 请求数据中心1的API</span></span><br><span class="line">  <span class="keyword">const</span> response1 = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;https://dc1.your-app.com/api/data&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> dc1Data = <span class="keyword">await</span> response1.<span class="title function_">json</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 请求数据中心2的API</span></span><br><span class="line">  <span class="keyword">const</span> response2 = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;https://dc2.your-app.com/api/data&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> dc2Data = <span class="keyword">await</span> response2.<span class="title function_">json</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 比较两个数据中心的API返回数据</span></span><br><span class="line">  <span class="title function_">expect</span>(dc1Data).<span class="title function_">toEqual</span>(dc2Data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="4-数据分批次同步"><a href="#4-数据分批次同步" class="headerlink" title="4. 数据分批次同步"></a>4. <strong>数据分批次同步</strong></h3><p>在某些情况下，UI 数据可能是分批加载的（例如分页或无限滚动）。你可以在测试中模拟分页操作或滚动操作，分别获取每一批次的数据，然后进行对比。一般来说，这种情况下需要使用 <strong>递归</strong> 或 <strong>循环</strong> 来加载所有数据，确保在对比之前所有数据都已经获取。</p><h4 id="Cypress-分批加载数据（模拟分页）："><a href="#Cypress-分批加载数据（模拟分页）：" class="headerlink" title="Cypress 分批加载数据（模拟分页）："></a>Cypress 分批加载数据（模拟分页）：</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">describe</span>(<span class="string">&#x27;Paginated UI Data Comparison between DC1 and DC2&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;should compare paginated data between DC1 and DC2&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 获取第1页数据中心1的数据</span></span><br><span class="line">    cy.<span class="title function_">visit</span>(<span class="string">&#x27;https://dc1.your-app.com?page=1&#x27;</span>);</span><br><span class="line">    cy.<span class="title function_">get</span>(<span class="string">&#x27;.data-container&#x27;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">$dc1DataPage1</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> dc1Page1Data = $dc1DataPage1.<span class="title function_">text</span>();</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 获取第1页数据中心2的数据</span></span><br><span class="line">      cy.<span class="title function_">visit</span>(<span class="string">&#x27;https://dc2.your-app.com?page=1&#x27;</span>);</span><br><span class="line">      cy.<span class="title function_">get</span>(<span class="string">&#x27;.data-container&#x27;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">$dc2DataPage1</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> dc2Page1Data = $dc2DataPage1.<span class="title function_">text</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对比第1页数据</span></span><br><span class="line">        <span class="title function_">expect</span>(dc1Page1Data).<span class="property">to</span>.<span class="title function_">equal</span>(dc2Page1Data);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 如果有更多页，继续分页对比</span></span><br><span class="line">        cy.<span class="title function_">visit</span>(<span class="string">&#x27;https://dc1.your-app.com?page=2&#x27;</span>);</span><br><span class="line">        cy.<span class="title function_">get</span>(<span class="string">&#x27;.data-container&#x27;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">$dc1DataPage2</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> dc1Page2Data = $dc1DataPage2.<span class="title function_">text</span>();</span><br><span class="line">          cy.<span class="title function_">visit</span>(<span class="string">&#x27;https://dc2.your-app.com?page=2&#x27;</span>);</span><br><span class="line">          cy.<span class="title function_">get</span>(<span class="string">&#x27;.data-container&#x27;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">$dc2DataPage2</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> dc2Page2Data = $dc2DataPage2.<span class="title function_">text</span>();</span><br><span class="line">            <span class="title function_">expect</span>(dc1Page2Data).<span class="property">to</span>.<span class="title function_">equal</span>(dc2Page2Data);</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="5-断言和容忍度"><a href="#5-断言和容忍度" class="headerlink" title="5. 断言和容忍度"></a>5. <strong>断言和容忍度</strong></h3><p>在比较数据时，可能存在轻微的差异（例如，响应时间不同或数据同步的延迟）。在这种情况下，你可以使用 <strong>容忍度（tolerance）</strong> 来容忍某些差异，避免错误判断。</p><p>例如，对于数字数据，你可以设定一个最大容忍误差：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">expect</span>(<span class="title class_">Math</span>.<span class="title function_">abs</span>(dc1Data - dc2Data)).<span class="title function_">toBeLessThan</span>(<span class="number">10</span>);  <span class="comment">// 允许的误差为10</span></span><br></pre></td></tr></table></figure><p>对于时间数据，可以允许一定的时差：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> dc1Date = <span class="keyword">new</span> <span class="title class_">Date</span>(dc1Data);</span><br><span class="line"><span class="keyword">const</span> dc2Date = <span class="keyword">new</span> <span class="title class_">Date</span>(dc2Data);</span><br><span class="line"><span class="title function_">expect</span>(<span class="title class_">Math</span>.<span class="title function_">abs</span>(dc1Date - dc2Date)).<span class="title function_">toBeLessThan</span>(<span class="number">60000</span>);  <span class="comment">// 允许误差不超过1分钟</span></span><br></pre></td></tr></table></figure><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p>当 <strong>URL 中数据不可同时获取</strong> 时，你可以通过以下策略进行数据比较：</p><ol><li><strong>分阶段获取数据</strong>：分别访问不同的数据中心，抓取数据后再进行对比。</li><li><strong>延迟等待和超时处理</strong>：确保数据完全加载后再进行验证，避免因数据加载延迟导致比较失败。</li><li>**</li></ol><p>这样也不一定最优？ 你有什么更好的建议吗？欢迎在评论区分享你的想法和经验。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 自动化测试 </tag>
            
            <tag> cypress </tag>
            
            <tag> selenium </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cypress升级路线</title>
      <link href="/2025/04/19/automatically_test_skills/cypress%20AI%E4%BC%98%E5%8C%96/"/>
      <url>/2025/04/19/automatically_test_skills/cypress%20AI%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<p>Cypress 和 Playwright 是现代 Web 自动化测试工具，它们各自提供了强大的功能来模拟用户行为、执行端到端测试。将这类工具与 AI 整合，能够在测试过程中实现更多智能化和自动化的处理，提升测试效率和覆盖面。以下是如何将 Cypress 和 Playwright 与 AI 技术整合的几种方式：</p><h3 id="1-自动化测试数据生成与输入优化"><a href="#1-自动化测试数据生成与输入优化" class="headerlink" title="1. 自动化测试数据生成与输入优化"></a>1. <strong>自动化测试数据生成与输入优化</strong></h3><p>AI 可以帮助生成智能化的测试数据或模拟用户的交互行为，使得测试能够更为智能和高效：</p><ul><li><p><strong>测试数据生成</strong>：AI 模型（如 GPT、生成对抗网络 GAN）可以帮助生成高质量的测试数据，尤其是在需要处理大量数据输入的表单、复杂的 UI 元素时。比如，AI 可以根据给定的上下文和用户行为模式生成随机、真实的用户数据进行测试。</p></li><li><p><strong>输入优化</strong>：通过机器学习算法分析历史的用户行为数据，AI 可以智能化地选择最有可能的输入，模拟最常见的用户操作（如选择菜单、填写表单），减少手动编写输入的时间。</p></li></ul><p><strong>示例</strong>：<br>在 Playwright 或 Cypress 测试中，集成 GPT-3 或其他 AI 模型生成模拟的表单填写数据，然后通过自动化脚本完成表单提交，进行回归测试。</p><h3 id="2-AI-驱动的视觉回归测试"><a href="#2-AI-驱动的视觉回归测试" class="headerlink" title="2. AI 驱动的视觉回归测试"></a>2. <strong>AI 驱动的视觉回归测试</strong></h3><p>AI 在图像识别中的应用越来越广泛，可以在自动化测试中进行视觉回归测试：</p><ul><li><p><strong>视觉验证</strong>：AI 可以分析截图，自动识别页面元素的变化，比较 UI 渲染差异。例如，Playwright 和 Cypress 都有截图和录屏功能，可以将 AI 图像识别模型集成进来，通过深度学习模型来判断页面的渲染结果是否符合预期。</p></li><li><p><strong>智能比较</strong>：AI 可以不仅仅通过像素对比来判断差异，还可以通过更复杂的图像分析技术（如图像处理算法）来检测布局、颜色、字体等细节的改变，提升视觉回归的智能性。</p></li></ul><p><strong>示例</strong>：<br>利用 Playwright 或 Cypress 捕捉页面快照，并通过 TensorFlow 或 OpenCV 这样的 AI 图像处理工具进行深度分析，自动识别页面中可能的 UI 渲染错误。</p><h3 id="3-AI-驱动的异常检测与故障预测"><a href="#3-AI-驱动的异常检测与故障预测" class="headerlink" title="3. AI 驱动的异常检测与故障预测"></a>3. <strong>AI 驱动的异常检测与故障预测</strong></h3><p>AI 可以用来在自动化测试过程中预测可能出现的错误和异常，特别是当测试脚本不容易预见某些边界情况时：</p><ul><li><p><strong>异常检测</strong>：通过机器学习模型（如分类模型），AI 可以识别潜在的应用故障。例如，AI 可以通过分析测试日志中的异常模式来检测出 UI 加载失败、后端接口异常等问题。</p></li><li><p><strong>故障预测</strong>：结合 AI 的预测模型，基于历史的测试数据，预测系统可能在某些条件下出现故障的概率。这可以帮助测试人员提前准备，避免遗漏某些边缘场景。</p></li></ul><p><strong>示例</strong>：<br>集成 AI 监控工具（例如 TensorFlow 或 PyTorch 中的深度学习模型）来分析 Playwright 或 Cypress 测试中的日志输出，自动检测不常见的错误模式，或者预测特定 UI 元素是否会出现未预见的崩溃或错误。</p><h3 id="4-AI-驱动的行为预测与脚本生成"><a href="#4-AI-驱动的行为预测与脚本生成" class="headerlink" title="4. AI 驱动的行为预测与脚本生成"></a>4. <strong>AI 驱动的行为预测与脚本生成</strong></h3><p>AI 可以通过对用户行为的分析，自动生成或优化测试脚本。这有助于节省测试人员的时间，尤其是在大规模的 Web 应用中：</p><ul><li><p><strong>智能脚本生成</strong>：利用 AI 技术（如自然语言处理和强化学习），可以通过描述功能需求生成自动化测试脚本。例如，测试人员只需用自然语言描述要测试的场景，AI 系统就能够基于需求生成对应的 Cypress 或 Playwright 测试脚本。</p></li><li><p><strong>行为模拟</strong>：AI 可以分析和学习用户的行为路径，自动化生成测试用例，特别是在页面上复杂的动态交互场景中。AI 可以通过模拟人类行为来创建更为真实和动态的测试脚本。</p></li></ul><p><strong>示例</strong>：<br>在 Cypress 或 Playwright 中，通过将 GPT 或 BERT 等自然语言处理模型与测试框架结合，测试人员可以只需要描述测试目标，AI 就能够自动生成复杂的自动化测试脚本。</p><h3 id="5-自动化测试结果分析与智能报告生成"><a href="#5-自动化测试结果分析与智能报告生成" class="headerlink" title="5. 自动化测试结果分析与智能报告生成"></a>5. <strong>自动化测试结果分析与智能报告生成</strong></h3><p>AI 可以优化测试结果的分析过程，自动检测失败原因并生成智能报告，帮助开发人员更快定位问题：</p><ul><li><p><strong>结果分析</strong>：AI 可以通过数据挖掘和分析技术自动识别哪些测试失败，并进一步分析失败的原因。AI 还可以将测试日志中的有用信息提取出来，提供更加智能的诊断。</p></li><li><p><strong>智能报告</strong>：AI 可以生成基于测试结果的报告，并自动总结哪些功能可能存在风险，哪些部分的代码或功能频繁出现问题，从而帮助开发人员优先解决最重要的 bug。</p></li></ul><p><strong>示例</strong>：<br>集成 AI 日志分析工具，在 Playwright 或 Cypress 测试过程中，自动收集测试结果、分析失败原因，并生成具有预测性质的报告，提示潜在的风险区域。</p><h3 id="6-AI-训练与持续改进"><a href="#6-AI-训练与持续改进" class="headerlink" title="6. AI 训练与持续改进"></a>6. <strong>AI 训练与持续改进</strong></h3><p>随着测试的进行，AI 可以逐渐根据反馈和历史数据来优化自动化测试过程：</p><ul><li><p><strong>强化学习</strong>：AI 可以采用强化学习的方式，不断优化测试策略。例如，通过试错过程，AI 学习哪些测试用例最可能发现缺陷，从而优先执行这些测试，提升测试覆盖率和效果。</p></li><li><p><strong>自适应调整</strong>：AI 可以根据测试结果自动调整测试策略，识别出哪些部分的测试重复性过高，哪些测试用例更能有效地发现 bug，从而动态调整测试计划。</p></li></ul><p><strong>示例</strong>：<br>通过使用机器学习模型来优化 Playwright 或 Cypress 测试用例的执行顺序，以提高测试效率，或者通过强化学习的方式，帮助 AI 系统逐步优化生成的测试脚本。</p><hr><h3 id="实现方案总结："><a href="#实现方案总结：" class="headerlink" title="实现方案总结："></a>实现方案总结：</h3><ol><li><strong>集成 NLP 和 AI 模型</strong>：通过 NLP（如 GPT-3）生成测试数据、测试脚本。</li><li><strong>图像处理与视觉验证</strong>：通过 AI 图像识别技术来进行 UI 验证。</li><li><strong>异常检测与日志分析</strong>：通过机器学习模型分析测试日志，识别异常或故障模式。</li><li><strong>自动生成和优化测试脚本</strong>：利用 AI 学习用户行为，生成动态测试用例和脚本。</li><li><strong>结果分析与智能报告</strong>：利用 AI 技术生成自动化测试报告，并分析失败原因。</li></ol><h3 id="工具与技术支持："><a href="#工具与技术支持：" class="headerlink" title="工具与技术支持："></a>工具与技术支持：</h3><ul><li><strong>TensorFlow</strong>、<strong>PyTorch</strong>、<strong>OpenCV</strong>（用于图像识别和处理）</li><li><strong>GPT</strong> 或 <strong>BERT</strong>（用于自然语言处理和脚本生成）</li><li><strong>强化学习</strong>（用于动态优化测试过程）</li></ul><p>将 AI 与自动化测试工具如 Cypress 和 Playwright 整合，可以让测试流程更加智能、高效，尤其是在数据生成、故障预测、脚本生成等方面发挥出色的作用。</p><p>在考虑将 AI 与 Cypress 或 Playwright 整合时，哪种整合方式的价值最高，主要取决于你的测试需求、项目的复杂度以及团队的工作流程。不过，从整体角度来看，以下几种整合方式可能会带来 <strong>最高的价值</strong>：</p><h3 id="1-自动化测试结果分析与智能报告生成"><a href="#1-自动化测试结果分析与智能报告生成" class="headerlink" title="1. 自动化测试结果分析与智能报告生成"></a>1. <strong>自动化测试结果分析与智能报告生成</strong></h3><p><strong>价值最高的理由</strong>：</p><ul><li><strong>效率提升</strong>：手动分析测试结果、排查问题是开发和测试团队的时间和精力消耗大户。AI 自动化分析测试结果，并生成智能报告，能够显著提高测试过程的效率。</li><li><strong>智能诊断</strong>：AI 可以从大量测试数据中提取关键问题，自动生成诊断报告，帮助开发人员快速定位问题。它可以识别失败模式，甚至预测可能的错误，减少人工干预。</li><li><strong>持续改进</strong>：随着测试结果的积累，AI 会逐步优化其分析能力，不断改进报告的质量，长远来看，它能够更有效地引导开发和测试过程，提升代码质量。</li></ul><h4 id="实施方式："><a href="#实施方式：" class="headerlink" title="实施方式："></a><strong>实施方式</strong>：</h4><ul><li>在 Cypress 或 Playwright 中集成 AI 日志分析工具，分析测试执行日志，并结合机器学习算法来自动识别错误和失败模式。</li><li>使用 AI 生成的报告不仅可以提供常见的错误信息，还能帮助开发者发现潜在的性能瓶颈和 UI 问题。</li></ul><h4 id="核心价值："><a href="#核心价值：" class="headerlink" title="核心价值："></a><strong>核心价值</strong>：</h4><ul><li>减少人工测试分析和诊断的时间，提升测试团队的效率。</li><li>使得测试报告更加智能化，有助于优化开发周期和代码质量。</li><li>在大型应用中，AI 自动化报告能极大提高问题定位的速度，避免冗余测试。</li></ul><hr><h3 id="2-AI-驱动的视觉回归测试-1"><a href="#2-AI-驱动的视觉回归测试-1" class="headerlink" title="2. AI 驱动的视觉回归测试"></a>2. <strong>AI 驱动的视觉回归测试</strong></h3><p><strong>价值最高的理由</strong>：</p><ul><li><strong>减少手动测试负担</strong>：视觉回归测试对于前端开发至关重要，尤其是在 UI 频繁变化的情况下。AI 通过图像识别能够更精确地识别 UI 渲染的细微差异，而不依赖传统的像素对比技术，这样可以大幅减少人工检查的工作量。</li><li><strong>适应多种浏览器和设备</strong>：AI 通过图像分析能够更灵活地适应不同的浏览器渲染和设备适配问题，从而减少了对多设备、多环境测试的依赖，提升了测试覆盖率。</li><li><strong>深度视觉分析</strong>：传统的视觉回归只关注像素级差异，而 AI 图像处理能够通过深度学习算法更深入地识别页面的布局、样式、颜色、字体等视觉变化，提供更高层次的智能回归。</li></ul><h4 id="实施方式：-1"><a href="#实施方式：-1" class="headerlink" title="实施方式："></a><strong>实施方式</strong>：</h4><ul><li>利用 Playwright 或 Cypress 的截图和录屏功能，与 AI 图像识别工具（如 TensorFlow、OpenCV）结合，进行智能化的视觉回归测试。</li><li>使用 AI 模型自动识别页面布局和样式的变化，并与基准图像进行对比，自动判断渲染的偏差。</li></ul><h4 id="核心价值：-1"><a href="#核心价值：-1" class="headerlink" title="核心价值："></a><strong>核心价值</strong>：</h4><ul><li>提高 UI 回归测试的准确性，特别是复杂页面和动态内容。</li><li>能自动适应各种屏幕、设备和浏览器的差异，提升跨平台的测试能力。</li><li>节省大量人工回归测试的时间和成本。</li></ul><hr><h3 id="3-AI-驱动的异常检测与故障预测-1"><a href="#3-AI-驱动的异常检测与故障预测-1" class="headerlink" title="3. AI 驱动的异常检测与故障预测"></a>3. <strong>AI 驱动的异常检测与故障预测</strong></h3><p><strong>价值最高的理由</strong>：</p><ul><li><strong>预测和预防</strong>：AI 可以分析历史的测试数据，识别出系统中的潜在缺陷和故障模式，并提前做出预测。这样可以避免某些潜在的重大故障，及时发现并修复问题。</li><li><strong>智能化故障定位</strong>：在测试失败时，AI 能够更准确地帮助定位故障源，特别是在复杂的 Web 应用中，自动化测试日志分析可以大大提高故障排查的速度。</li><li><strong>减少漏测风险</strong>：AI 通过异常模式检测，能够自动标记出可能被忽略的边缘情况和潜在风险，提升测试的全面性和覆盖面。</li></ul><h4 id="实施方式：-2"><a href="#实施方式：-2" class="headerlink" title="实施方式："></a><strong>实施方式</strong>：</h4><ul><li>将机器学习算法（如分类模型）与 Cypress 或 Playwright 测试日志系统结合，实时监控和分析系统行为。</li><li>AI 可以根据历史数据预测某些模块是否可能出现问题，并提供预警。</li></ul><h4 id="核心价值：-2"><a href="#核心价值：-2" class="headerlink" title="核心价值："></a><strong>核心价值</strong>：</h4><ul><li>在测试中提前识别潜在故障并进行修复，避免漏测关键问题。</li><li>增强测试用例的质量和覆盖率，减少人工干预，提升产品质量。</li></ul><hr><h3 id="4-AI-驱动的测试脚本生成与优化"><a href="#4-AI-驱动的测试脚本生成与优化" class="headerlink" title="4. AI 驱动的测试脚本生成与优化"></a>4. <strong>AI 驱动的测试脚本生成与优化</strong></h3><p><strong>价值较高的理由</strong>：</p><ul><li><strong>减少人工编写脚本的时间</strong>：AI 可以通过自然语言处理（NLP）理解测试需求，并自动生成 Cypress 或 Playwright 的测试脚本。这能够大幅度减少开发人员编写冗长脚本的时间。</li><li><strong>脚本优化</strong>：AI 还可以基于历史的测试数据优化测试脚本，自动选择最优的测试路径和输入数据，提升测试的覆盖面和效率。</li><li><strong>降低新手门槛</strong>：AI 的自动化脚本生成能力降低了新手入门的门槛，使得团队中的非专业测试人员也能编写和管理自动化脚本。</li></ul><h4 id="实施方式：-3"><a href="#实施方式：-3" class="headerlink" title="实施方式："></a><strong>实施方式</strong>：</h4><ul><li>使用 GPT 或 BERT 等模型，通过自然语言输入生成测试脚本，并直接与 Playwright 或 Cypress 的 API 交互。</li><li>基于已有的测试数据，AI 还可以优化已有的脚本，调整测试策略。</li></ul><h4 id="核心价值：-3"><a href="#核心价值：-3" class="headerlink" title="核心价值："></a><strong>核心价值</strong>：</h4><ul><li>降低测试人员的技术门槛，快速生成高质量的自动化测试脚本。</li><li>节省手动编写和维护测试脚本的时间，提升开发效率。</li></ul><hr><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p><strong>最具价值的整合方式</strong>应该是 <strong>自动化测试结果分析与智能报告生成</strong>，这是因为：</p><ol><li>它能显著提高开发人员和测试人员的效率，减少大量重复性劳动。</li><li>在大型项目中，它能快速识别出复杂问题并生成有价值的反馈，从而大大加速故障修复和优化周期。</li><li>随着测试的进行，AI 可以逐步改善报告和诊断的精度，长远来看能够持续提高项目质量。</li></ol><p>不过，具体选择哪种整合方式，还是要看项目的需求。如果项目中 UI 或视觉效果的稳定性至关重要，那么视觉回归测试可能是更为优先的方向；如果你的项目中存在大量的边缘测试场景，异常检测与故障预测可能更为关键。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 自动化测试 </tag>
            
            <tag> cypress </tag>
            
            <tag> selenium </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cypress自动化测试-性能测试</title>
      <link href="/2025/04/08/automatically_test_skills/cypress%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95-%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
      <url>/2025/04/08/automatically_test_skills/cypress%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95-%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h1 id="Cypress-如何进行-API-性能测试"><a href="#Cypress-如何进行-API-性能测试" class="headerlink" title="Cypress 如何进行 API 性能测试"></a>Cypress 如何进行 API 性能测试</h1><p>在现代 Web 开发中，API 性能是确保用户体验的关键因素之一。通过性能测试，可以发现并解决 API 在高负载情况下的瓶颈，从而提升系统的稳定性和响应速度。本文将介绍如何使用 Cypress 进行 API 性能测试，并提供一些实用的示例和最佳实践。</p><h2 id="为什么进行-API-性能测试"><a href="#为什么进行-API-性能测试" class="headerlink" title="为什么进行 API 性能测试"></a>为什么进行 API 性能测试</h2><p>在进行功能测试之后，性能测试是必不可少的。它能够确保 API 在实际使用中的<strong>高效性和稳定性</strong>，特别是在<strong>高并发场景</strong>下。通过性能测试，可以预防因性能问题导致的<strong>用户体验下降</strong>。</p><h2 id="如何使用-Cypress-进行-API-性能测试"><a href="#如何使用-Cypress-进行-API-性能测试" class="headerlink" title="如何使用 Cypress 进行 API 性能测试"></a>如何使用 Cypress 进行 API 性能测试</h2><h3 id="安装和配置-Cypress"><a href="#安装和配置-Cypress" class="headerlink" title="安装和配置 Cypress"></a>安装和配置 Cypress</h3><p>首先，确保你已经安装了 Node.js 和 npm。然后，通过以下命令安装 Cypress：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install cypress --save-dev</span><br></pre></td></tr></table></figure><p>安装完成后，可以通过以下命令初始化 Cypress 并生成示例测试文件, 此处命令是基于UX 界面操作的，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx cypress run</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx cypress open ---xxx/**/*.spec.ts</span><br></pre></td></tr></table></figure><h3 id="使用-Cypress-进行-API-性能测试"><a href="#使用-Cypress-进行-API-性能测试" class="headerlink" title="使用 Cypress 进行 API 性能测试"></a>使用 Cypress 进行 API 性能测试</h3><h4 id="1-并发测试-—-待验证-todo"><a href="#1-并发测试-—-待验证-todo" class="headerlink" title="1. 并发测试,— 待验证 todo"></a>1. 并发测试,— 待验证 todo</h4><p>Cypress 提供了强大的并发测试功能，可以模拟大量用户同时对 API 进行操作。可以使用专门的插件如 <code>cypress-concurrent</code> 来实现这一功能。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install cypress-concurrent --save-dev</span><br></pre></td></tr></table></figure><p>在 <code>cypress.json</code> 中配置并发测试参数：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;env&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;concurrent&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;maxConcurrency&quot;</span><span class="punctuation">:</span> <span class="number">5</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="2-测量网络请求"><a href="#2-测量网络请求" class="headerlink" title="2. 测量网络请求"></a>2. 测量网络请求</h4><p>Cypress 提供了 <code>cy.request()</code> 命令来测量网络请求的时间。以下是一个示例，展示如何使用 <code>cy.request()</code> 来测试 API 的响应时间：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">describe</span>(<span class="string">&#x27;API Performance Test&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;should measure response time of the API&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.<span class="title function_">request</span>(&#123;</span><br><span class="line">      <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">      <span class="attr">url</span>: <span class="string">&#x27;https://api.example.com/data&#x27;</span>,</span><br><span class="line">      <span class="attr">timeout</span>: <span class="number">5000</span></span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> responseTime = response.<span class="property">duration</span>;  <span class="comment">//此处有点问题，duration有时候拿不到的？？ </span></span><br><span class="line">      cy.<span class="title function_">log</span>(<span class="string">`Response time: <span class="subst">$&#123;responseTime&#125;</span>ms`</span>);</span><br><span class="line">      <span class="comment">// 断言响应时间是否在合理范围内</span></span><br><span class="line">      <span class="title function_">expect</span>(responseTime).<span class="property">to</span>.<span class="property">be</span>.<span class="title function_">below</span>(<span class="number">3000</span>);  <span class="comment">// 此处的标准，如何定义？？ </span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在 Cypress 中，<code>response.duration</code> 可能在某些情况下无法获取，这通常是因为网络请求没有按预期完成或响应时间过长。为了确保能够准确测量 API 的响应时间，可以采取：</p><h3 id="使用-cy-request-的-timeout-选项"><a href="#使用-cy-request-的-timeout-选项" class="headerlink" title="使用 cy.request 的 timeout 选项"></a>使用 <code>cy.request</code> 的 <code>timeout</code> 选项</h3><p>在 <code>cy.request</code> 中设置一个合理的超时时间，以确保在网络状况不佳时测试不会无限期地等待。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">describe</span>(<span class="string">&#x27;API Performance Test&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;should measure response time of the API&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.<span class="title function_">request</span>(&#123;</span><br><span class="line">      <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">      <span class="attr">url</span>: <span class="string">&#x27;https://api.example.com/data&#x27;</span>,</span><br><span class="line">      <span class="attr">timeout</span>: <span class="number">10000</span> <span class="comment">// 设置超时时间为 10 秒</span></span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> responseTime = response.<span class="property">duration</span>;</span><br><span class="line">      cy.<span class="title function_">log</span>(<span class="string">`Response time: <span class="subst">$&#123;responseTime&#125;</span>ms`</span>);</span><br><span class="line">      <span class="comment">// 断言响应时间是否在合理范围内</span></span><br><span class="line">      <span class="title function_">expect</span>(responseTime).<span class="property">to</span>.<span class="property">be</span>.<span class="title function_">below</span>(<span class="number">15000</span>); <span class="comment">// 假设 15 秒为合理范围</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="3-使用插件进行性能监控"><a href="#3-使用插件进行性能监控" class="headerlink" title="3. 使用插件进行性能监控"></a>3. 使用插件进行性能监控</h4><p>Cypress 插件 <code>cypress-performance</code> 可以帮助开发者捕获和分析 Web 性能指标。以下是如何使用该插件进行性能测试的示例：</p><p><code>cypress-performance</code> 插件可以在 Cypress 测试中直接测量和断言 Web 性能指标。它提供了更灵活的性能测试方式，并且可以捕获和分析性能数据。</p><p> <strong>安装插件</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install cypress-performance --save-dev</span><br></pre></td></tr></table></figure><p> <strong>在测试中使用插件</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; performance &#125; <span class="keyword">from</span> <span class="string">&#x27;cypress-performance&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">describe</span>(<span class="string">&#x27;API Performance Test with Cypress Performance Plugin&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;should measure core web vitals&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.<span class="title function_">visit</span>(<span class="string">&#x27;/api-endpoint&#x27;</span>);</span><br><span class="line">    cy.<span class="title function_">wrap</span>(performance.<span class="title function_">measure</span>(<span class="string">&#x27;myMetric&#x27;</span>, &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;myMetric&#x27;</span>,</span><br><span class="line">      <span class="attr">start</span>: <span class="string">&#x27;start&#x27;</span>,</span><br><span class="line">      <span class="attr">end</span>: <span class="string">&#x27;end&#x27;</span></span><br><span class="line">    &#125;)).<span class="title function_">then</span>(<span class="function">(<span class="params">metric</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(metric);</span><br><span class="line">      <span class="comment">// 断言性能指标是否在合理范围内</span></span><br><span class="line">      <span class="title function_">expect</span>(metric.<span class="property">duration</span>).<span class="property">to</span>.<span class="property">be</span>.<span class="title function_">below</span>(<span class="number">1000</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="结合-Lighthouse-进行性能评估"><a href="#结合-Lighthouse-进行性能评估" class="headerlink" title="结合 Lighthouse 进行性能评估"></a>结合 Lighthouse 进行性能评估</h3><p>Lighthouse 是一个强大的工具，可以用于评估 Web 应用的性能、可访问性、渐进式 Web 应用能力等。通过 <code>cypress-audit</code> 插件，可以在 Cypress 测试中集成 Lighthouse 的功能。</p><ol><li><strong>安装 <code>cypress-audit</code> 插件</strong>：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install cypress-audit --save-dev</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>在测试中使用 Lighthouse</strong>：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">describe</span>(<span class="string">&#x27;API Performance Test with Cypress Audit&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;should run Lighthouse audits&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.<span class="title function_">request</span>(&#123;</span><br><span class="line">      <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">      <span class="attr">url</span>: <span class="string">&#x27;https://api.example.com/data&#x27;</span>,</span><br><span class="line">      <span class="attr">timeout</span>: <span class="number">10000</span></span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 使用 Lighthouse 进行性能评估</span></span><br><span class="line">      cy.<span class="title function_">lighthouse</span>(&#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/api-endpoint&#x27;</span>,</span><br><span class="line">        <span class="attr">flags</span>: &#123;</span><br><span class="line">          <span class="attr">onlyCategory</span>: <span class="string">&#x27;performance&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="性能测试的最佳实践"><a href="#性能测试的最佳实践" class="headerlink" title="性能测试的最佳实践"></a>性能测试的最佳实践</h3><ol><li><strong>设置合理的性能阈值</strong>：根据业务需求设置合理的性能阈值，并在测试中验证这些阈值。</li><li><strong>使用自定义标记</strong>：使用 <code>cy.now()</code> 和 <code>cy.wrap()</code> 来标记性能测量的起始和结束时间。</li><li><strong>考虑不同环境的差异</strong>：在本地开发和 CI 环境中分别进行性能测试，以确保测试结果的一致性。</li><li><strong>与其他工具结合使用</strong>：可以将 <code>cypress-performance</code> 与其他工具如 Lighthouse 结合使用，以获得更全面的性能评估。</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> cypress </tag>
            
            <tag> 性能测试 </tag>
            
            <tag> api测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何快速的迁移功能代码到其他系统</title>
      <link href="/2025/04/02/do_at_workspace/%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E7%9A%84%E8%BF%81%E7%A7%BB%E5%8A%9F%E8%83%BD%E4%BB%A3%E7%A0%81%E5%88%B0%E5%85%B6%E4%BB%96%E7%B3%BB%E7%BB%9F/"/>
      <url>/2025/04/02/do_at_workspace/%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E7%9A%84%E8%BF%81%E7%A7%BB%E5%8A%9F%E8%83%BD%E4%BB%A3%E7%A0%81%E5%88%B0%E5%85%B6%E4%BB%96%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h2 id="常见迁移办法，就Angular项目举例，"><a href="#常见迁移办法，就Angular项目举例，" class="headerlink" title="常见迁移办法，就Angular项目举例，"></a>常见迁移办法，就Angular项目举例，</h2><h1 id="Angular-如何快速迁移功能代码到其他系统"><a href="#Angular-如何快速迁移功能代码到其他系统" class="headerlink" title="Angular 如何快速迁移功能代码到其他系统"></a>Angular 如何快速迁移功能代码到其他系统</h1><h2 id="迁移前的准备工作"><a href="#迁移前的准备工作" class="headerlink" title="迁移前的准备工作"></a>迁移前的准备工作</h2><ol><li><p><strong>分析现有代码结构</strong></p><ul><li>检查当前 Angular 项目的版本和依赖</li><li>识别需要迁移的模块、组件、服务等</li><li>记录项目特有的配置和自定义设置</li></ul></li><li><p><strong>评估目标系统</strong></p><ul><li>确认目标系统是否支持 Angular</li><li>检查目标系统的 Angular 版本兼容性</li><li>了解目标系统的构建和部署流程</li></ul></li></ol><h2 id="AI得到的迁移步骤"><a href="#AI得到的迁移步骤" class="headerlink" title="AI得到的迁移步骤"></a>AI得到的迁移步骤</h2><h3 id="1-创建新的-Angular-项目"><a href="#1-创建新的-Angular-项目" class="headerlink" title="1. 创建新的 Angular 项目"></a>1. 创建新的 Angular 项目</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ng new target-project-name</span><br><span class="line"><span class="built_in">cd</span> target-project-name</span><br></pre></td></tr></table></figure><h3 id="2-迁移核心功能代码"><a href="#2-迁移核心功能代码" class="headerlink" title="2. 迁移核心功能代码"></a>2. 迁移核心功能代码</h3><p><strong>迁移组件</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从源项目复制组件文件</span></span><br><span class="line"><span class="built_in">cp</span> -r ../source-project/src/app/feature-module ./src/app/</span><br></pre></td></tr></table></figure><p><strong>迁移服务</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 复制服务文件</span></span><br><span class="line"><span class="built_in">cp</span> ../source-project/src/app/services/*.service.ts ./src/app/services/</span><br></pre></td></tr></table></figure><h3 id="3-处理依赖关系"><a href="#3-处理依赖关系" class="headerlink" title="3. 处理依赖关系"></a>3. 处理依赖关系</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 检查源项目的package.json</span></span><br><span class="line"><span class="built_in">cat</span> ../source-project/package.json | grep -E <span class="string">&#x27;&quot;@angular|&quot;rxjs|其他关键依赖&quot;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装必要依赖</span></span><br><span class="line">npm install 依赖包1 依赖包2 --save</span><br></pre></td></tr></table></figure><h3 id="4-更新模块配置"><a href="#4-更新模块配置" class="headerlink" title="4. 更新模块配置"></a>4. 更新模块配置</h3><p>在目标项目的 <code>app.module.ts</code> 中：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">MigratedComponent</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./feature-module/migrated.component&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">MigratedService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./services/migrated.service&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  <span class="attr">declarations</span>: [</span><br><span class="line">    <span class="comment">// ...其他组件</span></span><br><span class="line">    <span class="title class_">MigratedComponent</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">providers</span>: [</span><br><span class="line">    <span class="comment">// ...其他服务</span></span><br><span class="line">    <span class="title class_">MigratedService</span></span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="5-迁移路由配置（如适用）"><a href="#5-迁移路由配置（如适用）" class="headerlink" title="5. 迁移路由配置（如适用）"></a>5. 迁移路由配置（如适用）</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app-routing.module.ts</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">routes</span>: <span class="title class_">Routes</span> = [</span><br><span class="line">  <span class="comment">// ...现有路由</span></span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&#x27;migrated-path&#x27;</span>, <span class="attr">component</span>: <span class="title class_">MigratedComponent</span> &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h2 id="迁移后的验证"><a href="#迁移后的验证" class="headerlink" title="迁移后的验证"></a>迁移后的验证</h2><ol><li><p><strong>构建测试</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng build --prod</span><br></pre></td></tr></table></figure></li><li><p><strong>单元测试</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng <span class="built_in">test</span></span><br></pre></td></tr></table></figure></li><li><p><strong>端到端测试</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng e2e</span><br></pre></td></tr></table></figure></li></ol><h2 id="优化迁移流程的技巧"><a href="#优化迁移流程的技巧" class="headerlink" title="优化迁移流程的技巧"></a>优化迁移流程的技巧</h2><ol><li><p><strong>使用 Angular CLI 的生成命令</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng generate component path/to/component --flat</span><br></pre></td></tr></table></figure></li><li><p><strong>创建迁移脚本</strong>（适用于大型项目）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// migrate.js</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="comment">// 自动化复制文件和更新配置的脚本</span></span><br></pre></td></tr></table></figure></li><li><p><strong>使用 Git 进行版本控制</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;Initial migration commit&quot;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="常见问题解决方案"><a href="#常见问题解决方案" class="headerlink" title="常见问题解决方案"></a>常见问题解决方案</h2><ol><li><p><strong>版本不兼容问题</strong>：</p><ul><li>使用 <code>ng update</code> 命令逐步升级</li><li>对于重大版本变更，参考 Angular 升级指南</li></ul></li><li><p><strong>样式丢失问题</strong>：</p><ul><li>检查组件样式引用方式（CSS&#x2F;SCSS）</li><li>确保全局样式文件正确迁移</li></ul></li><li><p><strong>第三方库兼容性问题</strong>：</p><ul><li>检查库的版本说明</li><li>考虑使用替代库或自定义实现</li></ul></li></ol><h2 id="个人实践总结："><a href="#个人实践总结：" class="headerlink" title="个人实践总结："></a>个人实践总结：</h2><ul><li><ol><li>一定要弄清楚需求，到底是什么？ 有必要吗？ 第一步都不清楚，极有可能推倒重来，返工 ！！！</li></ol></li><li><ol start="2"><li>确定需要迁移，那么需要先评估以后系统的服务情况： 譬如，界面布局、风格、功能，api返回的数据格式。</li></ol></li><li><ol start="3"><li>跟后端开发人员，sync 新的api返回格式，是否跟已有功能一致，如果一致，直接copy，走下一步部署咨询。不一样，变动大的话，要考虑重构、适配，乃至代码调试修改。</li></ol></li><li><ol start="4"><li>最最满意的是，copy过去，之间调试，很快就好；最最坏的，就是一步步调试，适配新的api返回。其他就是结余之间的。</li></ol></li><li><ol start="5"><li>沟通很重要，先沟通，在动手！！！。</li></ol></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 编程原则 </tag>
            
            <tag> code迁移 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多机独立Docker Compose到K8s集群动态调度</title>
      <link href="/2025/04/01/devops_skills/docker-compose%E8%BF%81%E7%A7%BB%E5%88%B0k8s%E9%9B%86%E7%BE%A4/"/>
      <url>/2025/04/01/devops_skills/docker-compose%E8%BF%81%E7%A7%BB%E5%88%B0k8s%E9%9B%86%E7%BE%A4/</url>
      
        <content type="html"><![CDATA[<p>以下是实现从多机独立Docker Compose到K8s集群动态调度的Cypress自动化测试的完整方案：</p><hr><h3 id="架构转型路线图"><a href="#架构转型路线图" class="headerlink" title="架构转型路线图"></a><strong>架构转型路线图</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">    A[分散式] --&gt;|解耦| B[集中式]</span><br><span class="line">    B --&gt;|扩展| C[动态调度]</span><br><span class="line">    </span><br><span class="line">    subgraph 初始状态</span><br><span class="line">    A1[主机1: docker-compose]</span><br><span class="line">    A2[主机2: docker-compose]</span><br><span class="line">    A3[...]</span><br><span class="line">    end</span><br><span class="line">    </span><br><span class="line">    subgraph 目标架构</span><br><span class="line">    B1[K8s Master]</span><br><span class="line">    B2[Worker Node Pool]</span><br><span class="line">    B3[分布式存储]</span><br><span class="line">    end</span><br></pre></td></tr></table></figure><hr><h3 id="具体实施步骤"><a href="#具体实施步骤" class="headerlink" title="具体实施步骤"></a><strong>具体实施步骤</strong></h3><h4 id="1-容器化改造（基础层）"><a href="#1-容器化改造（基础层）" class="headerlink" title="1. 容器化改造（基础层）"></a><strong>1. 容器化改造（基础层）</strong></h4><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 改造后的Cypress Dockerfile</span><br><span class="line">FROM cypress/included:12.0.0</span><br><span class="line"><span class="addition">+ ARG TEST_ENV</span></span><br><span class="line"><span class="addition">+ ENV CYPRESS_ENV=$&#123;TEST_ENV&#125;</span></span><br><span class="line"><span class="addition">+ COPY --from=opencv-python /usr/local/lib/python3.9/site-packages/cv2 /usr/local/lib/python3.9/site-packages/cv2</span></span><br><span class="line">VOLUME /e2e</span><br><span class="line">WORKDIR /e2e</span><br></pre></td></tr></table></figure><h4 id="2-K8s集群部署（控制层）"><a href="#2-K8s集群部署（控制层）" class="headerlink" title="2. K8s集群部署（控制层）"></a><strong>2. K8s集群部署（控制层）</strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用k3sup快速搭建集群（5节点示例）</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;1..5&#125;; <span class="keyword">do</span></span><br><span class="line">  k3sup <span class="built_in">join</span> --ip 192.168.1.<span class="variable">$i</span> \</span><br><span class="line">    --server-ip 192.168.1.1 \</span><br><span class="line">    --user ubuntu</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h4 id="3-动态调度系统（核心逻辑）"><a href="#3-动态调度系统（核心逻辑）" class="headerlink" title="3. 动态调度系统（核心逻辑）"></a><strong>3. 动态调度系统（核心逻辑）</strong></h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cypress-dispatcher.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">batch/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Job</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">cypress-&#123;&#123;.TestID&#125;&#125;</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ttlSecondsAfterFinished:</span> <span class="number">3600</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">runner</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">your-registry/cypress-ai:latest</span></span><br><span class="line">        <span class="attr">envFrom:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">configMapRef:</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">test-env-&#123;&#123;.EnvType&#125;&#125;</span></span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">testcases</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/e2e</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">testcases</span></span><br><span class="line">        <span class="attr">persistentVolumeClaim:</span></span><br><span class="line">          <span class="attr">claimName:</span> <span class="string">cypress-pvc</span></span><br><span class="line">      <span class="attr">restartPolicy:</span> <span class="string">Never</span></span><br></pre></td></tr></table></figure><h4 id="4-测试任务编排（调度层）"><a href="#4-测试任务编排（调度层）" class="headerlink" title="4. 测试任务编排（调度层）"></a><strong>4. 测试任务编排（调度层）</strong></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># task_scheduler.py</span></span><br><span class="line"><span class="keyword">from</span> kubernetes <span class="keyword">import</span> client, config</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dispatch_test</span>(<span class="params">env: <span class="built_in">str</span>, test_case: <span class="built_in">str</span></span>):</span><br><span class="line">    config.load_kube_config()</span><br><span class="line">    api = client.BatchV1Api()</span><br><span class="line">    </span><br><span class="line">    body = client.V1Job(</span><br><span class="line">        metadata=client.V1ObjectMeta(</span><br><span class="line">            generate_name=<span class="string">&quot;cypress-&quot;</span>),</span><br><span class="line">        spec=client.V1JobSpec(</span><br><span class="line">            template=client.V1PodTemplateSpec(</span><br><span class="line">                spec=client.V1PodSpec(</span><br><span class="line">                    containers=[</span><br><span class="line">                        client.V1Container(</span><br><span class="line">                            name=<span class="string">&quot;cypress&quot;</span>,</span><br><span class="line">                            image=<span class="string">&quot;your-registry/cypress-ai&quot;</span>,</span><br><span class="line">                            env=[&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;TEST_CASE&quot;</span>, <span class="string">&quot;value&quot;</span>: test_case&#125;]</span><br><span class="line">                        )]</span><br><span class="line">                )))</span><br><span class="line">    )</span><br><span class="line">    api.create_namespaced_job(namespace=<span class="string">&quot;test&quot;</span>, body=body)</span><br></pre></td></tr></table></figure><h4 id="5-资源监控与回收"><a href="#5-资源监控与回收" class="headerlink" title="5. 资源监控与回收"></a><strong>5. 资源监控与回收</strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 自动清理完成的任务</span></span><br><span class="line">kubectl get <span class="built_in">jobs</span> --field-selector=status.successful=1 -o name | xargs kubectl delete</span><br></pre></td></tr></table></figure><hr><h3 id="关键优化点"><a href="#关键优化点" class="headerlink" title="关键优化点"></a><strong>关键优化点</strong></h3><h4 id="1-测试资源动态分配"><a href="#1-测试资源动态分配" class="headerlink" title="1. 测试资源动态分配"></a><strong>1. 测试资源动态分配</strong></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">graph TB</span><br><span class="line">    A[测试队列] --&gt; B&#123;资源检查&#125;</span><br><span class="line">    B --&gt;|CPU充足| C[立即执行]</span><br><span class="line">    B --&gt;|资源不足| D[加入Pending队列]</span><br><span class="line">    C --&gt; E[NodeSelector定向调度]</span><br></pre></td></tr></table></figure><h4 id="2-跨节点存储方案"><a href="#2-跨节点存储方案" class="headerlink" title="2. 跨节点存储方案"></a><strong>2. 跨节点存储方案</strong></h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> <span class="strong">**MinIO对象存储**</span>：</span><br><span class="line">   <span class="code">```bash</span></span><br><span class="line"><span class="code">   helm install minio minio/minio \</span></span><br><span class="line"><span class="code">     --set persistence.size=100Gi \</span></span><br><span class="line"><span class="code">     --set mode=distributed</span></span><br></pre></td></tr></table></figure><ol start="2"><li><strong>测试结果收集</strong>：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// cypress/plugins/index.js</span></span><br><span class="line"><span class="attr">afterRun</span>: <span class="keyword">async</span> (results) =&gt; &#123;</span><br><span class="line">  <span class="keyword">await</span> s3.<span class="title function_">putObject</span>(&#123;</span><br><span class="line">    <span class="title class_">Bucket</span>: <span class="string">&#x27;cypress-results&#x27;</span>,</span><br><span class="line">    <span class="title class_">Key</span>: <span class="string">`<span class="subst">$&#123;<span class="built_in">Date</span>.now()&#125;</span>.json`</span>,</span><br><span class="line">    <span class="title class_">Body</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(results)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### **3. 智能调度策略**</span><br><span class="line">```yaml</span><br><span class="line"># Pod亲和性配置示例</span><br><span class="line">affinity:</span><br><span class="line">  podAntiAffinity:</span><br><span class="line">    requiredDuringSchedulingIgnoredDuringExecution:</span><br><span class="line">    - labelSelector:</span><br><span class="line">        matchExpressions:</span><br><span class="line">        - key: app</span><br><span class="line">          operator: In</span><br><span class="line">          values: [&quot;cypress&quot;]</span><br><span class="line">      topologyKey: &quot;kubernetes.io/hostname&quot;</span><br></pre></td></tr></table></figure></li></ol><hr><h3 id="性能对比指标"><a href="#性能对比指标" class="headerlink" title="性能对比指标"></a><strong>性能对比指标</strong></h3><table><thead><tr><th>指标</th><th>Docker Compose方案</th><th>K8s动态调度方案</th></tr></thead><tbody><tr><td>测试任务启动时间</td><td>15-30s&#x2F;节点</td><td>3-8s&#x2F;Pod</td></tr><tr><td>资源利用率</td><td>30%-45%</td><td>65%-80%</td></tr><tr><td>最大并发测试数</td><td>5（固定节点数）</td><td>50+（自动扩展）</td></tr><tr><td>失败任务自动恢复</td><td>需手动干预</td><td>内置重试机制</td></tr></tbody></table><hr><h3 id="迁移实施-checklist"><a href="#迁移实施-checklist" class="headerlink" title="迁移实施 checklist"></a><strong>迁移实施 checklist</strong></h3><ol><li><input disabled="" type="checkbox"> 所有测试容器镜像推送到私有Registry</li><li><input disabled="" type="checkbox"> 持久化存储方案部署完成（MinIO&#x2F;NFS）</li><li><input disabled="" type="checkbox"> K8s节点打标区分性能等级（如：gpu&#x3D;true）</li><li><input disabled="" type="checkbox"> 编写Helm Chart或Kustomize模板</li><li><input disabled="" type="checkbox"> CI&#x2F;CD流水线适配K8s调度API</li><li><input disabled="" type="checkbox"> 监控告警系统集成（Prometheus+Alertmanager）</li></ol><hr><h3 id="常见问题解决方案"><a href="#常见问题解决方案" class="headerlink" title="常见问题解决方案"></a><strong>常见问题解决方案</strong></h3><p><strong>Q: 如何保持测试环境一致性？</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="addition">+ 方案：</span></span><br><span class="line">  - 使用K8s ConfigMap统一管理环境变量</span><br><span class="line">  - 通过PodPreset注入公共配置</span><br><span class="line">  ```yaml</span><br><span class="line">  apiVersion: settings.k8s.io/v1alpha1</span><br><span class="line">  kind: PodPreset</span><br><span class="line">  metadata:</span><br><span class="line">    name: cypress-env</span><br><span class="line">  spec:</span><br><span class="line">    env:</span><br><span class="line">    - name: CYPRESS_BASE_URL</span><br><span class="line">      value: &quot;https://test.example.com&quot;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">**Q: 测试任务如何优先调度到空闲节点？**</span><br><span class="line">```bash</span><br><span class="line"># 给空闲节点添加标签</span><br><span class="line">kubectl label node &lt;node-name&gt; workload=idle</span><br><span class="line"></span><br><span class="line"># 在Job中配置节点选择</span><br><span class="line">nodeSelector:</span><br><span class="line">  workload: idle</span><br></pre></td></tr></table></figure><p>通过以上方案，您可以将分散的测试能力转化为弹性可扩展的云原生测试平台，实现资源利用率提升和运维成本降低的双重收益。建议先在一个节点上进行试点迁移，验证稳定后再全量切换。</p>]]></content>
      
      
      <categories>
          
          <category> 自动化测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自动化测试 </tag>
            
            <tag> 容器化 </tag>
            
            <tag> 动态调度 </tag>
            
            <tag> 多机 </tag>
            
            <tag> Cypress </tag>
            
            <tag> K8s </tag>
            
            <tag> Docker Compose </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>wasm - 从go开始还是从rust开始</title>
      <link href="/2024/10/19/performace_detect_skills/wasm/wasm%20-%20%E4%BB%8Ego%E5%BC%80%E5%A7%8B%E8%BF%98%E6%98%AF%E4%BB%8Erust%E5%BC%80%E5%A7%8B/"/>
      <url>/2024/10/19/performace_detect_skills/wasm/wasm%20-%20%E4%BB%8Ego%E5%BC%80%E5%A7%8B%E8%BF%98%E6%98%AF%E4%BB%8Erust%E5%BC%80%E5%A7%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="以下是针对前端开发者选择WASM入门语言的详细建议，结合技术特性和学习曲线分析："><a href="#以下是针对前端开发者选择WASM入门语言的详细建议，结合技术特性和学习曲线分析：" class="headerlink" title="以下是针对前端开发者选择WASM入门语言的详细建议，结合技术特性和学习曲线分析："></a>以下是针对前端开发者选择WASM入门语言的详细建议，结合技术特性和学习曲线分析：</h2><h3 id="前端开发者选择WASM入门语言的详细建议"><a href="#前端开发者选择WASM入门语言的详细建议" class="headerlink" title="前端开发者选择WASM入门语言的详细建议"></a><strong>前端开发者选择WASM入门语言的详细建议</strong></h3><hr><h3 id="决策矩阵：Go-vs-Rust-for-WASM前端开发"><a href="#决策矩阵：Go-vs-Rust-for-WASM前端开发" class="headerlink" title="决策矩阵：Go vs Rust for WASM前端开发"></a><strong>决策矩阵：Go vs Rust for WASM前端开发</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">graph TD</span><br><span class="line">    A[前端开发者] --&gt; B&#123;选择标准&#125;</span><br><span class="line">    B --&gt; C[开发效率]</span><br><span class="line">    B --&gt; D[性能需求]</span><br><span class="line">    B --&gt; E[生态整合]</span><br><span class="line">    </span><br><span class="line">    C --&gt;|快速产出| C1(Go)</span><br><span class="line">    D --&gt;|极致性能| D1(Rust)</span><br><span class="line">    E --&gt;|JS互操作| E1(Rust)</span><br></pre></td></tr></table></figure><hr><h3 id="分阶段建议"><a href="#分阶段建议" class="headerlink" title="分阶段建议"></a><strong>分阶段建议</strong></h3><h4 id="1-快速原型阶段（推荐Go）"><a href="#1-快速原型阶段（推荐Go）" class="headerlink" title="1. 快速原型阶段（推荐Go）"></a><strong>1. 快速原型阶段（推荐Go）</strong></h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// go.mod</span></span><br><span class="line">require github.com/tinygo-org/tinygo v0<span class="number">.25</span><span class="number">.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// main.go</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;syscall/js&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">greet</span><span class="params">(this js.Value, args []js.Value)</span></span> <span class="keyword">interface</span>&#123;&#125; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Hello from Go WASM!&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    js.Global().Set(<span class="string">&quot;goGreet&quot;</span>, js.FuncOf(greet))</span><br><span class="line">    &lt;-<span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">bool</span>) <span class="comment">// 保持运行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>优势：</strong></p><ul><li>类似JavaScript的事件循环模型</li><li>内置GC减少内存管理负担</li><li>编译速度极快（TinyGo仅2-3秒）</li></ul><h4 id="2-性能关键阶段（必须Rust）"><a href="#2-性能关键阶段（必须Rust）" class="headerlink" title="2. 性能关键阶段（必须Rust）"></a><strong>2. 性能关键阶段（必须Rust）</strong></h4><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Cargo.toml</span></span><br><span class="line">[package]</span><br><span class="line">name = <span class="string">&quot;wasm-demo&quot;</span></span><br><span class="line">version = <span class="string">&quot;0.1.0&quot;</span></span><br><span class="line">edition = <span class="string">&quot;2021&quot;</span></span><br><span class="line"></span><br><span class="line">[lib]</span><br><span class="line"><span class="keyword">crate</span>-<span class="keyword">type</span> = [<span class="string">&quot;cdylib&quot;</span>]</span><br><span class="line"></span><br><span class="line">[dependencies]</span><br><span class="line">wasm-bindgen = <span class="string">&quot;0.2&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// lib.rs</span></span><br><span class="line"><span class="keyword">use</span> wasm_bindgen::prelude::*;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[wasm_bindgen]</span></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">fibonacci</span>(n: <span class="type">i32</span>) <span class="punctuation">-&gt;</span> <span class="type">i32</span> &#123;</span><br><span class="line">    <span class="keyword">match</span> n &#123;</span><br><span class="line">        <span class="number">0</span> | <span class="number">1</span> =&gt; n,</span><br><span class="line">        _ =&gt; <span class="title function_ invoke__">fibonacci</span>(n-<span class="number">1</span>) + <span class="title function_ invoke__">fibonacci</span>(n-<span class="number">2</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>优势：</strong></p><ul><li>零成本抽象（性能接近原生）</li><li>wasm-bindgen提供顶级JS互操作</li><li>完善的WASI支持</li></ul><hr><h3 id="关键对比维度"><a href="#关键对比维度" class="headerlink" title="关键对比维度"></a><strong>关键对比维度</strong></h3><table><thead><tr><th>维度</th><th>Go（TinyGo）</th><th>Rust</th></tr></thead><tbody><tr><td><strong>编译产物大小</strong></td><td>1MB~2MB</td><td>100KB~500KB</td></tr><tr><td><strong>JS互操作复杂度</strong></td><td>需手动类型转换</td><td>wasm-bindgen自动生成胶水代码</td></tr><tr><td><strong>线程支持</strong></td><td>实验性</td><td>稳定(Worker + SharedArrayBuffer)</td></tr><tr><td><strong>典型应用场景</strong></td><td>业务逻辑封装</td><td>图形计算&#x2F;密码学等高性能领域</td></tr></tbody></table><hr><h3 id="前端友好度专项评估"><a href="#前端友好度专项评估" class="headerlink" title="前端友好度专项评估"></a><strong>前端友好度专项评估</strong></h3><h4 id="1-工具链体验"><a href="#1-工具链体验" class="headerlink" title="1. 工具链体验"></a><strong>1. 工具链体验</strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Go流程</span></span><br><span class="line">tinygo build -o main.wasm -target wasm ./main.go</span><br><span class="line"></span><br><span class="line"><span class="comment"># Rust流程</span></span><br><span class="line">wasm-pack build --target web</span><br></pre></td></tr></table></figure><p><strong>胜出：Rust</strong>  </p><ul><li>wasm-pack自动生成：<ul><li>可直接import的JS包装</li><li>TypeScript类型定义</li><li>优化的Webpack集成</li></ul></li></ul><h4 id="2-调试支持"><a href="#2-调试支持" class="headerlink" title="2. 调试支持"></a><strong>2. 调试支持</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Chrome DevTools可直接调试Rust源码</span></span><br><span class="line"><span class="keyword">import</span> init, &#123;fibonacci&#125; <span class="keyword">from</span> <span class="string">&#x27;./pkg/wasm_demo.js&#x27;</span>;</span><br><span class="line"><span class="keyword">await</span> <span class="title function_">init</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fibonacci</span>(<span class="number">10</span>)); <span class="comment">// 可断点进入Rust代码</span></span><br></pre></td></tr></table></figure><p><strong>胜出：Rust</strong>  </p><ul><li>完整的sourcemap支持</li><li>更好的panic错误信息</li></ul><h4 id="3-学习曲线"><a href="#3-学习曲线" class="headerlink" title="3. 学习曲线"></a><strong>3. 学习曲线</strong></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pie</span><br><span class="line">    title 概念掌握难度</span><br><span class="line">    &quot;Go&quot; : 35</span><br><span class="line">    &quot;Rust&quot; : 65</span><br></pre></td></tr></table></figure><p><strong>胜出：Go</strong>  </p><ul><li>无需理解所有权&#x2F;生命周期</li><li>更接近动态语言的写法</li></ul><hr><h3 id="渐进式学习路径建议"><a href="#渐进式学习路径建议" class="headerlink" title="渐进式学习路径建议"></a><strong>渐进式学习路径建议</strong></h3><h4 id="阶段1：Go快速入门（1-2周）"><a href="#阶段1：Go快速入门（1-2周）" class="headerlink" title="阶段1：Go快速入门（1-2周）"></a><strong>阶段1：Go快速入门（1-2周）</strong></h4><ol><li>用TinyGo编译简单函数到WASM</li><li>实践DOM操作（通过js.Value类型）</li><li>集成到现有Webpack项目</li></ol><h4 id="阶段2：Rust深度掌握（4-8周）"><a href="#阶段2：Rust深度掌握（4-8周）" class="headerlink" title="阶段2：Rust深度掌握（4-8周）"></a><strong>阶段2：Rust深度掌握（4-8周）</strong></h4><ol><li>学习所有权基础</li><li>掌握wasm-bindgen高级特性：<figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#[wasm_bindgen]</span></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">struct</span> <span class="title class_">CanvasRenderer</span> &#123;</span><br><span class="line">    ctx: web_sys::CanvasRenderingContext2d</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>优化WASM内存管理：<figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#[global_allocator]</span></span><br><span class="line"><span class="keyword">static</span> ALLOC: wee_alloc::WeeAlloc = wee_alloc::WeeAlloc::INIT;</span><br></pre></td></tr></table></figure></li></ol><h4 id="阶段3：混合开发（长期）"><a href="#阶段3：混合开发（长期）" class="headerlink" title="阶段3：混合开发（长期）"></a><strong>阶段3：混合开发（长期）</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 动态加载不同语言的WASM模块</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">loadWasm</span> = <span class="keyword">async</span> (<span class="params">lang</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span>(lang === <span class="string">&#x27;go&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> go = <span class="keyword">new</span> <span class="title class_">Go</span>();</span><br><span class="line">    <span class="keyword">const</span> &#123; instance &#125; = <span class="keyword">await</span> <span class="title class_">WebAssembly</span>.<span class="title function_">instantiateStreaming</span>(</span><br><span class="line">      <span class="title function_">fetch</span>(<span class="string">&#x27;go.wasm&#x27;</span>), go.<span class="property">importObject</span></span><br><span class="line">    );</span><br><span class="line">    go.<span class="title function_">run</span>(instance);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> rust = <span class="keyword">await</span> <span class="keyword">import</span>(<span class="string">&#x27;./pkg/rust_module.js&#x27;</span>);</span><br><span class="line">    <span class="keyword">await</span> rust.<span class="title function_">default</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="决策流程图"><a href="#决策流程图" class="headerlink" title="决策流程图"></a><strong>决策流程图</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">    A[项目需求] --&gt; B&#123;需要高性能?&#125;</span><br><span class="line">    B --&gt;|Yes| C[选择Rust]</span><br><span class="line">    B --&gt;|No| D&#123;快速上线?&#125;</span><br><span class="line">    D --&gt;|Yes| E[选择Go]</span><br><span class="line">    D --&gt;|No| F[从Go过渡到Rust]</span><br></pre></td></tr></table></figure><p><strong>最终建议：</strong>  </p><ul><li>如果是<strong>可视化&#x2F;游戏等重计算场景</strong>，直接学习Rust</li><li>如果是<strong>普通业务逻辑封装</strong>，先用Go验证再逐步迁移</li><li>推荐优先掌握Rust，虽然学习曲线陡峭但长期收益更高</li></ul><p>前端开发者可先用Go体验WASM开发模式，再通过<a href="https://github.com/rust-lang/rustlings">Rustlings</a>小练习系统学习Rust，最终形成完整的WASM开发生态认知。</p>]]></content>
      
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> wasm </tag>
            
            <tag> rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《GitHub》-git分支master rename</title>
      <link href="/2024/06/21/dev_tool_skills/git/git%E5%88%86%E6%94%AFmaster%20rename/"/>
      <url>/2024/06/21/dev_tool_skills/git/git%E5%88%86%E6%94%AFmaster%20rename/</url>
      
        <content type="html"><![CDATA[<h2 id="操作如下"><a href="#操作如下" class="headerlink" title="操作如下"></a>操作如下</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git branch -m master main</span><br><span class="line">git fetch origin</span><br><span class="line">git branch -u origin/main main</span><br><span class="line">git remote set-head origin -a</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> GitHub </tag>
            
            <tag> 自定义域名 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python概念思考总结</title>
      <link href="/2024/06/21/python_skills/python%E6%80%9D%E8%80%83%E6%80%BB%E7%BB%9324.06/"/>
      <url>/2024/06/21/python_skills/python%E6%80%9D%E8%80%83%E6%80%BB%E7%BB%9324.06/</url>
      
        <content type="html"><![CDATA[<h2 id="python推导"><a href="#python推导" class="headerlink" title="python推导"></a>python推导</h2><h3 id="列表推导式、字典推导式、集合推导式以及其他迭代器"><a href="#列表推导式、字典推导式、集合推导式以及其他迭代器" class="headerlink" title="列表推导式、字典推导式、集合推导式以及其他迭代器"></a>列表推导式、字典推导式、集合推导式以及其他迭代器</h3><h3 id="为何元组、True-False-String等没有推导式？"><a href="#为何元组、True-False-String等没有推导式？" class="headerlink" title="为何元组、True|False, String等没有推导式？"></a>为何元组、True|False, String等没有推导式？</h3><h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web 3D开发技术了解</title>
      <link href="/2023/08/20/front_skills/3d/web%203d%20%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/"/>
      <url>/2023/08/20/front_skills/3d/web%203d%20%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="Web3D"><a href="#Web3D" class="headerlink" title="Web3D"></a>Web3D</h1><ul><li><p>在浏览器的环境下，使用3D相关交互效果：</p></li><li><p>（Web 3D refers to interactive 3D technology that one can use through a web browser.） – from <a href="https://edutechwiki.unige.ch/en/Web_3D_technology">Wikipedia web_3D_technology</a></p></li></ul><h2 id="VRML-and-X3D"><a href="#VRML-and-X3D" class="headerlink" title="VRML and X3D"></a>VRML and X3D</h2><blockquote><p> the Virtual Reality Modeling Language</p></blockquote><h3 id="HTML5"><a href="#HTML5" class="headerlink" title="HTML5"></a>HTML5</h3><ul><li><p>Google promotes O3D. “O3D is an open source (BSD license) JavaScript API[</p></li><li><p>The Web|3D consortium launched X3DOM in 2010</p></li></ul><h3 id="CSS3"><a href="#CSS3" class="headerlink" title="CSS3"></a>CSS3</h3><h3 id="Canvas2D"><a href="#Canvas2D" class="headerlink" title="Canvas2D"></a>Canvas2D</h3><h3 id="WebGL-–-OpengGL"><a href="#WebGL-–-OpengGL" class="headerlink" title="WebGL – OpengGL"></a>WebGL – OpengGL</h3><blockquote><p>复杂的 3D 效果开发优选</p></blockquote><ul><li>is an API for JavaScript</li><li>is based on OpenGL, which is built into iOS and Android</li><li>works together with other web page elements, inside any div element</li><li>was made for creating dynamic Web applications</li><li>is cross-platform</li><li>is free to use</li></ul><h3 id="Three-js"><a href="#Three-js" class="headerlink" title="Three.js"></a>Three.js</h3><ul><li>built on the top of WebGL</li><li>is simple to use, fast, powerful, open source and well maintained by several developers</li><li>hides WebGL details from us and does the math behind the scene</li></ul><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><h3 id="Three-js-1"><a href="#Three-js-1" class="headerlink" title="Three.js"></a><a href="https://medium.com/@varvara.munday/introduction-to-web-3d-technologies-a26b1dc68454">Three.js</a></h3>]]></content>
      
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> 3D </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ansible学习笔记一</title>
      <link href="/2022/10/14/devops_skills/deploy/ansible%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80/"/>
      <url>/2022/10/14/devops_skills/deploy/ansible%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<h2 id="学习笔记"><a href="#学习笔记" class="headerlink" title="学习笔记"></a>学习笔记</h2><h3 id="何为ansible"><a href="#何为ansible" class="headerlink" title="何为ansible"></a>何为ansible</h3><blockquote><p>ansible 基于ssh协议，进行服务器管理的</p></blockquote><h4 id="ansible架构"><a href="#ansible架构" class="headerlink" title="ansible架构"></a>ansible架构</h4><p><img src="https://thumbnail0.baidupcs.com/thumbnail/16fd53d9fgebf8da928a8b1359055778?fid=4187117130-250528-251908943264949&time=1665705600&rt=sh&sign=FDTAER-DCb740ccc5511e5e8fedcff06b081203-MWobFzaCaxpw07PYgEzfIEzO9zw=&expires=8h&chkv=0&chkbd=0&chkpc=&dp-logid=8947298835928430522&dp-callid=0&file_type=0&size=c710_u400&quality=100&vuk=-&ft=video" alt="ansible架构图"><br>链接:<a href="https://pan.baidu.com/s/1ZJwx4e-NxveCqmEcwnEJMA">https://pan.baidu.com/s/1ZJwx4e-NxveCqmEcwnEJMA</a><br>密码:l2f3</p><h4 id="ansible-工作原理"><a href="#ansible-工作原理" class="headerlink" title="ansible 工作原理"></a>ansible 工作原理</h4><p><img src="https://thumbnail0.baidupcs.com/thumbnail/54d48caf1m1ea95b001730f219882aea?fid=4187117130-250528-918939076845783&time=1665705600&rt=sh&sign=FDTAER-DCb740ccc5511e5e8fedcff06b081203-Rj+bCvbPq9PEgBX2N7/37/hdwpQ=&expires=8h&chkv=0&chkbd=0&chkpc=&dp-logid=8947369956470090636&dp-callid=0&file_type=0&size=c710_u400&quality=100&vuk=-&ft=video"><br>链接:<a href="https://pan.baidu.com/s/1309JEwSJdPyBLTQnzfN6ow">https://pan.baidu.com/s/1309JEwSJdPyBLTQnzfN6ow</a>  密码:25op</p><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><blockquote><p>执行ansible的主机一般称为主控端，中控，master或堡垒机。<br>主控端Python版本需要2.6或以上。<br>被控端Python版本小于2.4需要安装python-simple json。<br>被控端如开启SELinux需要安装 libselinux -python。<br>windows不能做为主控端。</p></blockquote><h3 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h3><h4 id="管理节点"><a href="#管理节点" class="headerlink" title="管理节点"></a>管理节点</h4><blockquote><p>管理远程机子的节点</p></blockquote><h4 id="主机目录"><a href="#主机目录" class="headerlink" title="主机目录"></a>主机目录</h4><blockquote><p>远程机子列表，可以分类标识</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[web]</span><br><span class="line">foo.example.com</span><br><span class="line">bar.example.com</span><br><span class="line"></span><br><span class="line">[db]</span><br><span class="line">one.example.com</span><br><span class="line">two.example.com</span><br></pre></td></tr></table></figure><h4 id="远程机子"><a href="#远程机子" class="headerlink" title="远程机子"></a>远程机子</h4><blockquote><p>需要操作的</p></blockquote><h4 id="Playbook"><a href="#Playbook" class="headerlink" title="Playbook"></a>Playbook</h4><blockquote><p>把命令文件yml化，减少错误</p></blockquote><h3 id="如何管理机子"><a href="#如何管理机子" class="headerlink" title="如何管理机子"></a>如何管理机子</h3><h4 id="命令行方式"><a href="#命令行方式" class="headerlink" title="命令行方式"></a>命令行方式</h4><blockquote><p>-m 指定模块或者说使用什么命令 ； -a指定模块执行，需要的参数</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> // 在web机组上，使用yum执行httpd包安装</span><br><span class="line">ansible web -m yum -a &quot;name=httpd state=present&quot;</span><br></pre></td></tr></table></figure><h4 id="playbook方式"><a href="#playbook方式" class="headerlink" title="playbook方式"></a>playbook方式</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible-playbook xxx.yml</span><br></pre></td></tr></table></figure><h3 id="playbook-模块"><a href="#playbook-模块" class="headerlink" title="playbook 模块"></a>playbook 模块</h3><blockquote><p>ansible-doc [module]  or refer to the <a href="https://docs.ansible.com/">official documentation</a>. 常用模块如下：</p></blockquote><h4 id="调试、测试类"><a href="#调试、测试类" class="headerlink" title="调试、测试类"></a>调试、测试类</h4><ul><li>ping： ping远程机子，ssh ok &amp;&amp; python版本2.4+ ok，返回pong</li><li>debug : 简单打印一些消息, 类似linux echo</li></ul><h4 id="文件类模块"><a href="#文件类模块" class="headerlink" title="文件类模块"></a>文件类模块</h4><ul><li>copy - 从本地复制到远程节点</li><li>template  - 从本地复制到远程节点，并进行变量替换</li><li>file  - 设置文件属性</li></ul><h4 id="Linux上的常用操作"><a href="#Linux上的常用操作" class="headerlink" title="Linux上的常用操作"></a>Linux上的常用操作</h4><ul><li>user - 管理用户账号</li><li>yum - 包管理</li><li>service - 管理服务</li><li>firewalld - 管理防火墙中的服务和端口</li></ul><h4 id="执行shell命令"><a href="#执行shell命令" class="headerlink" title="执行shell命令"></a>执行shell命令</h4><ul><li>shell - 在节点上执行shell命令, 支持$HOME ,&lt;,&gt; |, &amp; </li><li>command - 在远程节点上执行shell， 不支持$HOME这些</li></ul><h3 id="ansible怎么安装"><a href="#ansible怎么安装" class="headerlink" title="ansible怎么安装"></a>ansible怎么安装</h3><h4 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># sudo yum install epel-release </span><br><span class="line"># sudo yum install ansible -y </span><br></pre></td></tr></table></figure><h3 id="ansible配置项怎么看"><a href="#ansible配置项怎么看" class="headerlink" title="ansible配置项怎么看"></a>ansible配置项怎么看</h3><blockquote><p>具体的可以在安装好ansible, &#x2F;etc&#x2F;ansible&#x2F;ansible.cfg文件中查看， 常见的配置如下：</p></blockquote><ul><li>inventory 主机目录文件</li><li>library extra模块放置路径</li><li>remote_temp 远程主机临时文件位置</li><li>local_temp  管理节点上临时文件位置</li><li>accelerate_port 配置连接端口</li><li>accelerate_timeout 超时时间</li><li>accelerate_connect_timeout 连接超时时间</li></ul><h2 id="推荐学习"><a href="#推荐学习" class="headerlink" title="推荐学习"></a>推荐学习</h2><p> <a href="https://docs.ansible.com/ansible-core/devel/getting_started/index.html">#get-started</a></p><p> <a href="https://www.redhat.com/zh/topics/automation/learning-ansible-tutorial">#red-hat-ansible</a></p><p> <a href="https://opensource.com/article/19/9/must-know-ansible-modules">#ansible-module</a> </p>]]></content>
      
      
      
        <tags>
            
            <tag> ansible </tag>
            
            <tag> 配置管理 </tag>
            
            <tag> 滚动更新 </tag>
            
            <tag> devops </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>powershell数据类型</title>
      <link href="/2022/09/12/dev_tool_skills/powershell/powershell%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>/2022/09/12/dev_tool_skills/powershell/powershell%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h2><p>  最近在学习Powershell，提升下windows下前端开发效率。记录下powershell要点。PowerShell中，一切皆对象。</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><h3 id="查看所有支持的快捷输入"><a href="#查看所有支持的快捷输入" class="headerlink" title="查看所有支持的快捷输入"></a>查看所有支持的快捷输入</h3><blockquote><p>支持Tab进行命令补充</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; get-alias </span><br></pre></td></tr></table></figure><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/23940387e0b64e33a2eb4d38adfb3bbf~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h3 id="powershell命令分类"><a href="#powershell命令分类" class="headerlink" title="powershell命令分类"></a>powershell命令分类</h3><ul><li>cmdlet: 通常使用C#等其他语言编写, cmdlet一般留给PowerShell软件的开发者来写<ul><li>Get、Set、Update和Remove 开头的对应增改删</li><li>具体可以Get-Command查看</li></ul></li><li>函数 : 使用PowerShell编写的命令,为了完成手头的任务，我们编写的往往就是函数</li><li>别名</li><li>外部脚本</li></ul><h3 id="帮助"><a href="#帮助" class="headerlink" title="帮助"></a>帮助</h3><blockquote><p>help命令和Get-Help </p></blockquote><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/57406074b3cd4de9a333b63c58af5c99~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h3 id="文档更新"><a href="#文档更新" class="headerlink" title="文档更新"></a>文档更新</h3><blockquote><p>需要admin权限运行Update-Help</p></blockquote><h2 id="cmdlet"><a href="#cmdlet" class="headerlink" title="cmdlet"></a>cmdlet</h2><blockquote><p>Get-Command就有一些参数，用以指定只返回特定的命令，而不显示全部命令</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Get-Command -Name Get-Alias</span><br></pre></td></tr></table></figure><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0743fe941d47458195a2af0c456ee184~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><blockquote><p> -Verb 指定前缀， -Noun 指定内容</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Get-Command -Verb Get</span><br><span class="line">Get-Command -verb set</span><br><span class="line"></span><br><span class="line">Get-Command -Noun alias</span><br><span class="line">Get-Command -Noun Content </span><br><span class="line">#也可以组合</span><br><span class="line">Get-Command -Name Get-Alias </span><br></pre></td></tr></table></figure><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ae04cc6f47b143f5a4a5f673bd34cde6~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><ul><li>变量以美元符号（$）开头 ,获取更新类似于Linux 变量操作。</li><li>一是用户定义的变量，即由用户创建的变量；二是自动变量，即PowerShell自带的变量</li><li>$MaximumHistoryCount&#x3D;200 重置变量</li></ul><h3 id="用户变量"><a href="#用户变量" class="headerlink" title="用户变量"></a>用户变量</h3><blockquote><p>变量需要先申明，在使用，如果不报错，需要开启严格模式</p></blockquote><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/01cc4f0a22264394b1b7839fb9328da0~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><blockquote><p>PowerShell有多种数据类型，包括布尔值、字符串和整数，而且修改变量的数据类型不会报错,类似于js ，动态变化。</p></blockquote><h3 id="整数"><a href="#整数" class="headerlink" title="整数"></a>整数</h3><blockquote><p>整数数据类型只存储整数，小数部分会四舍五入为最近的整数。整数数据类型分为带符号和不带符号两种。带符号的整数数据类型既可以存储正数，也可以存储负数；不带符号的整数数据类型则只能存储没有正负号的值</p></blockquote><h3 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h3><blockquote><p>Float ,Double</p></blockquote><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3a12b622a6c84c15b9b864ca5074b741~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/830f936611e740de9641eae1561ac146~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><blockquote><p>字符串的合并，类似Linux shell ，双引号中使用</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> powershell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>健康码的背后</title>
      <link href="/2022/08/16/bigdata_for_analyze/%E5%81%A5%E5%BA%B7%E7%A0%81%E7%9A%84%E8%83%8C%E5%90%8E/"/>
      <url>/2022/08/16/bigdata_for_analyze/%E5%81%A5%E5%BA%B7%E7%A0%81%E7%9A%84%E8%83%8C%E5%90%8E/</url>
      
        <content type="html"><![CDATA[<h2 id="导语："><a href="#导语：" class="headerlink" title="导语："></a>导语：</h2><p>  防疫的背后，需要科技+协同的力量，更需要高精的算法、软硬件算力系统支持。</p><h2 id="颜色"><a href="#颜色" class="headerlink" title="颜色"></a>颜色</h2><p>会根据数据的不同，将居民判定为五种状态，在健康码展示中分为红、橙、绿三种颜色，其中红色需要集中隔离观察，橙色需要居家隔离，定期做核酸检测自我观察，绿色则为无风险</p><h2 id="内容介绍"><a href="#内容介绍" class="headerlink" title="内容介绍"></a>内容介绍</h2><ul><li>健康码的后台服务器是永不停歇的大脑，不断计算着每个人的健康状态</li><li>每个人的健康状态以字节的方式存储于健康码的服务器中，并随着防疫政策和疫情形式的改变不断刷新，当居民出示健康码时，只是从后台调取这个状态，并显示为不同颜色的二维码。</li><li>为了保护隐私数据安全。“健康码的小程序一般依靠微信或支付宝等第三方平台，只显示二维码可以保证隐私数据掌握在政府手上，不易泄露”</li></ul><h2 id="计算过程"><a href="#计算过程" class="headerlink" title="计算过程"></a>计算过程</h2><blockquote><p>健康状态经由哪些数据判定?</p></blockquote><ul><li>第一是公安部门的户籍信息</li><li>第二是自己申报的健康数据，比如体温及当前症状；</li><li>第三是行程数据，既包括通信管理部门协调运营商提供的手机信令位置，也包括铁路和航空交通出行数据，以判断是否到达过风险地带；</li><li>第四是由卫健疾控部门提供的就诊信息，及判断是否与确诊者有交集</li></ul><h2 id="计算精度改进"><a href="#计算精度改进" class="headerlink" title="计算精度改进"></a>计算精度改进</h2><ul><li><p>过去，中高风险区域往往以城市为单位，通信管理局将有过这些风险区轨迹的人员悉数推送来，人数众多。</p></li><li><p>现在提出了“时空伴随”概念，风险范围进一步缩小。</p></li><li><p>“时空伴随”主要靠手机信令来定位。它的规则是，在方圆800米的范围内，与风险人员的手机信令共同停留大约10分钟时间，就会判定可能会有接触，会被标记为风险人员的时空伴随人员。时空伴随人员的计算不属于地方，由国家工信部信管局牵头，几大运营商根据基站和信号进行综合定位，这需要更多的算力。最终的目的是减少了防疫扩大化，将方圆几十甚至几百公里的封锁范围缩小至几百米。</p></li><li><p>尽管目前各地数据已共享至全国统一平台，但仍是以省为单位在服务器后台分析数据。在重点区域，则不断通过刷新，更新每个人的最新动向与健康状态。刷新频率和当地是否存在疫情传播风险有关。“就像我们刷网页，刷新是耗流量的，就得花钱，所以如果没有疫情刷新就慢，如果在重点区域就会不断刷新，监控人员流动可能带来的风险。</p></li></ul><h2 id="为何要行程码"><a href="#为何要行程码" class="headerlink" title="为何要行程码"></a>为何要行程码</h2><ul><li><p>除了要亮健康码，还需要亮出行程卡。行程卡是由工信部推出，基于运营商的基站数据，判断人14天内的行程，如果有城市存在中高风险区，城市名称上会用星号来标识。</p></li><li><p>主要是因为健康码没办法展示近十四天的行程信息。</p></li></ul><h2 id="数据共享"><a href="#数据共享" class="headerlink" title="数据共享"></a>数据共享</h2><ul><li>国家设立了“全国一体化政务服务平台”，各省就将数据上传至国家的平台上，推送更新内容也是每日一次。</li><li>为实现各地的健康码信息互通互认，国家还制定了统一的数据采集标准，其中既包括数据采集的类型和维度，也包括数据字段的标识，以便数据互通</li></ul><h2 id="存在问题"><a href="#存在问题" class="headerlink" title="存在问题"></a>存在问题</h2><ul><li>各地数据已经打通，但在核酸检测方面，仍不能做到异地同时查询。其中一个原因，与国家信息平台数据更新速率有关。这意味着，当你到达新的地方，此前的核酸检测报告有可能无法同步在当地健康码上，仍要按照当地政策重新检测</li><li>国家要求不能以区县以上为单位赋码，要精准赋码，避免“一刀切”。如今，风险区的划分也越来越小，多以小区为主。</li><li>只要维持核心的数据状态，持续将各方面数据打通，就能实时监控每个人的疫情状态，如果没有疫情，这些新的机制和经验，也可用在其他应急事件上，“比如抢险救灾，再比如追踪资产和逃犯”</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.chinanews.com.cn/sh/2022/01-26/9662114.shtml">健康码</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 疫情 </tag>
            
            <tag> 健康码 </tag>
            
            <tag> 信令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python学习增强笔记</title>
      <link href="/2022/08/09/python_skills/python%E5%AD%A6%E4%B9%A0%E5%A2%9E%E5%BC%BA%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/08/09/python_skills/python%E5%AD%A6%E4%B9%A0%E5%A2%9E%E5%BC%BA%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h2><p> python 学了忘了，忘了学的过程。没有实战，终究会忘记。</p><h2 id="python-版本问题"><a href="#python-版本问题" class="headerlink" title="python 版本问题"></a>python 版本问题</h2><h3 id="如何快速的切换python-版本"><a href="#如何快速的切换python-版本" class="headerlink" title="如何快速的切换python 版本"></a>如何快速的切换python 版本</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 查看有哪些可用版本</span><br><span class="line">C:\Users\cheohu&gt;py --list</span><br><span class="line">Installed Pythons found by py Launcher for Windows</span><br><span class="line"> -3.8-64 *</span><br><span class="line"> -2.7-64</span><br><span class="line"> </span><br><span class="line">C:\Users\cheohu&gt;py -2</span><br><span class="line">Python 2.7.15 (v2.7.15:ca079a3ea3, Apr 30 2018, 16:30:26) [MSC v.1500 64 bit (AMD64)] on win32</span><br><span class="line">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</span><br><span class="line">&gt;&gt;&gt; exit()</span><br><span class="line"></span><br><span class="line">C:\Users\cheohu&gt;py -3</span><br></pre></td></tr></table></figure><h3 id="vscode-如何配置python"><a href="#vscode-如何配置python" class="headerlink" title="vscode 如何配置python"></a>vscode 如何配置python</h3><blockquote><p>写代码之前，要先安装 Python 拓展。在侧边栏的拓展栏里搜索 Python，安装有星标的拓展; 安装完毕后，左侧配置选择Command Palette ，选择Python interceptor ，设置即可。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 格式化</span><br><span class="line">pip install flake8</span><br><span class="line">pip install yapf</span><br></pre></td></tr></table></figure><h2 id="python书写规范"><a href="#python书写规范" class="headerlink" title="python书写规范"></a>python书写规范</h2><blockquote><p>&#x3D;&#x3D;、&gt;&#x3D;和&lt;&#x3D;等比较运算符两边各添加一个空格 ,更易读。</p></blockquote><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><h3 id="列表-可修改，相当于数组"><a href="#列表-可修改，相当于数组" class="headerlink" title="列表 - 可修改，相当于数组"></a>列表 - 可修改，相当于数组</h3><ul><li>len，max,min,sum 等全局通用函数</li><li>if,elif,else </li><li>&#x3D;&#x3D; ，!&#x3D; ,</li><li>list &#x3D; []; if list ，python自动判断，<strong>没有元素返回false,存在元素返回true</strong>。这个跟js 不同。</li></ul><h3 id="元组-不可修改，相当于坐标"><a href="#元组-不可修改，相当于坐标" class="headerlink" title="元组 - 不可修改，相当于坐标"></a>元组 - 不可修改，相当于坐标</h3><h3 id="Number类型"><a href="#Number类型" class="headerlink" title="Number类型"></a>Number类型</h3><ul><li>int, float ,comple </li><li>为何没有double，因为float使用双精度，可以表达double范围</li></ul><h3 id="Set-去重、唯一元素处理"><a href="#Set-去重、唯一元素处理" class="headerlink" title="Set - 去重、唯一元素处理"></a>Set - 去重、唯一元素处理</h3><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><h3 id="True-False"><a href="#True-False" class="headerlink" title="True | False"></a>True | False</h3>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux 学习笔记一</title>
      <link href="/2022/08/09/devops_skills/linux/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9A%E5%8F%98%E9%87%8F%E3%80%81%E5%BC%95%E7%94%A8/"/>
      <url>/2022/08/09/devops_skills/linux/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9A%E5%8F%98%E9%87%8F%E3%80%81%E5%BC%95%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h2><p> Linux命令，前端是反复的学习，通过不停的使用，才能掌握的。</p><h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><h3 id="正则"><a href="#正则" class="headerlink" title="正则"></a>正则</h3><table><thead><tr><th>符号</th><th>描述</th></tr></thead><tbody><tr><td>*</td><td>标识0个或者多个字符</td></tr><tr><td>?</td><td>标识可有可无</td></tr><tr><td>+</td><td>1个或者多个</td></tr><tr><td>^</td><td>表示以什么开头</td></tr><tr><td>&amp;</td><td>表示以什么结尾</td></tr><tr><td>\</td><td>用来转义特殊字符</td></tr><tr><td>&lt;&gt;</td><td>用来做精确匹配</td></tr><tr><td>[]</td><td>选项中的</td></tr><tr><td>（）</td><td>类似[],表示一组可选范围，常与|或联用</td></tr></tbody></table><h3 id="grep-全局搜索正则表达式并打印"><a href="#grep-全局搜索正则表达式并打印" class="headerlink" title="grep(全局搜索正则表达式并打印)"></a>grep(全局搜索正则表达式并打印)</h3><blockquote><p>global search by regular express and print out the line </p></blockquote><p> <strong>注意点，搜索的内容中如果有空格，需要使用””括起来</strong></p><p> 命令格式：<br> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep [选项][模式][文件数组]</span><br></pre></td></tr></table></figure></p><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><h4 id="变量赋值"><a href="#变量赋值" class="headerlink" title="变量赋值"></a>变量赋值</h4> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">one=1</span><br><span class="line">two = &quot;hello $one&quot;</span><br><span class="line">echo $one</span><br><span class="line"></span><br><span class="line">#已经赋值的，重设</span><br><span class="line">one+1</span><br></pre></td></tr></table></figure><h4 id="特殊赋值"><a href="#特殊赋值" class="headerlink" title="特殊赋值"></a>特殊赋值</h4> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#变量定义，均无效 </span><br><span class="line">cheohu@CHEOHU-C1MPM:~$ color=black</span><br><span class="line">cheohu@CHEOHU-C1MPM:~$ echo &quot;this color is $&#123;color:=red&#125;&quot;</span><br><span class="line">this color is black</span><br><span class="line">cheohu@CHEOHU-C1MPM:~$ echo &quot;this color is $&#123;color:-red&#125;&quot;</span><br><span class="line">this color is black</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#变量未定义</span><br><span class="line">cheohu@CHEOHU-C1MPM:~$ echo &quot;this is undefined $&#123;val:=123&#125;&quot;</span><br><span class="line">this is undefined 123</span><br><span class="line">#:=会对变量进行赋值；:-不会进行赋值操作，也就是说不会污染</span><br><span class="line">cheohu@CHEOHU-C1MPM:~$ echo $val </span><br><span class="line">123</span><br><span class="line">cheohu@CHEOHU-C1MPM:~$ echo &quot;this is undefined $&#123;val:-123&#125;&quot;</span><br><span class="line">this is undefined 123</span><br><span class="line">cheohu@CHEOHU-C1MPM:~$ echo $val</span><br></pre></td></tr></table></figure><p> <strong>“:?”和“?”可用于测试变量是否被赋值，若变量未赋值，Shell提示错误信息</strong></p><blockquote><p>:&#x3D;”和“:-”都不对colour进行重新赋值。注意，使用以上两种符号时，都需要用花括号将赋值式子括起来，否则，Shell将colour:&#x3D;blue整个字符串当做变量名进行处理。</p></blockquote><h4 id="变量清空"><a href="#变量清空" class="headerlink" title="变量清空"></a>变量清空</h4><blockquote><p>unset one </p></blockquote><h4 id="readonly"><a href="#readonly" class="headerlink" title="readonly"></a>readonly</h4><blockquote><p>declare命令与typeset命令一样，用于定义和限制变量的属性，declare -r可将变量设置为只读，等价于readonly命令</p></blockquote><ul><li>可以使用readonly关键字，设置只读</li><li>如果要查看系统中所有的只读变量，只需执行readonly命令即可</li><li>用readonly设置变量为只读只是其中的一种方法，我们还可以利用declare和typeset命令实现同样的功能</li></ul><h3 id="无类型"><a href="#无类型" class="headerlink" title="无类型"></a>无类型</h3><blockquote><p>Shell脚本变量却是无类型的，这与awk变量是一样的。bash Shell不支持浮点型，只支持整型和字符型，默认情况下，Shell脚本变量是字符型的，同时，字符型的变量还具有一个整型值，为0，尽管如此，bash Shell并不要求在定义一个变量时声明其类型。但是，Shell会根据上下文判断出数值型的变量，并进行变量的算术运算和比较等数值操作。判断标准是变量中是否只包含数字，<strong>如果变量只包含数字</strong>，则Shell认定该变量是数值型的，反之，Shell认定该变量是字符串</p></blockquote><h4 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a=2009</span><br><span class="line">#let命令用于在变量上执行算术运算</span><br><span class="line">let &quot;a+=1&quot;</span><br><span class="line">echo $a</span><br></pre></td></tr></table></figure><h4 id=""><a href="#" class="headerlink" title=""></a></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">b=xx09</span><br><span class="line"># 强制转换为整型</span><br><span class="line">declare -i b </span><br></pre></td></tr></table></figure><h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><blockquote><p>在给环境变量赋值后，用export命令声明一下，就说明此变量为环境变量，环境变量的名称一般由大写字母组成.如果要列出系统中所有的环境变量，可使用env命令</p></blockquote><h4 id="PATH"><a href="#PATH" class="headerlink" title="PATH"></a>PATH</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export PATH=&quot;dir&quot;:$PATH</span><br><span class="line">命令中的new directory就是新加上去的目录，后面用冒号加$PATH，表示new directory加上旧的PATH变量值，得到新的PATH变量值。</span><br></pre></td></tr></table></figure><h4 id="USER-UID"><a href="#USER-UID" class="headerlink" title="USER ,UID"></a>USER ,UID</h4><blockquote><p>USER表示已登录用户的名字，UID则表示已登录用户的ID。PPID是创建当前进程的进程号，即当前进程的父进程号</p></blockquote><h4 id="PS1-PS2"><a href="#PS1-PS2" class="headerlink" title="PS1,PS2"></a>PS1,PS2</h4><blockquote><p>PS1和PS2称为提示符变量，用于设置提示符格式，比如，例6-17中的Shell提示符指的是[root @jselab ～]#这段文字，中括号里包含了当前用户名、主机名和当前目录等信息，这些信息并非固定不变，它可以通过PS1和PS2的设置而改变。</p></blockquote><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><blockquote><p>系统管理员通常不会利用export逐个设置环境变量，而是将export命令放置在特殊的配置文件之中，Shell能够在特定时刻执行这些配置文件，从而自动完成环境变量的配置工作。本节介绍.bash_profile、.bashrc和.bash_logout三个配置文件，这三个文件存在于用户根目录，即$HOME目录，Linux中以“.”开头的文件为隐藏文件</p></blockquote><ul><li>$HOME&#x2F;.bash_profile是最重要的配置文件，当某Linux用户登录时，Shell会自动执行.bash_profile文件，如果.bash_profile文件不存在，则自动执行系统默认的配置文件&#x2F;etc&#x2F;profile</li><li>即句点符号“.”和source命令是等价的，source命令通常用于重新执行刚修改的初始化文件，使之立即生效，而不必注销并重新登录</li><li>.bash_logout文件在用户注销时执行，用户可以在该文件中写入清除某些环境变量或记录登录时间等命令，.bash_logout文件也可以不存在，此时，用户注销时将不再执行任何额外的命令。</li><li>打印其进程号，$$表示执行该脚本的进程号</li></ul><h4 id="位置参数"><a href="#位置参数" class="headerlink" title="位置参数"></a>位置参数</h4><blockquote><p>位置参数（positional parameters）是一种特殊的Shell变量，用于从命令行向Shell脚本传递参数，$1表示第1个参数、$2表示第2个参数等，$0为脚本的名字，从${10}开始，参数号需要用花括号括起来，如${10}、${11}、${100}、…。$*和$@一样，表示从$1开始的全部参数</p></blockquote><p><strong>特殊位置参数</strong></p><ul><li>$#   - 传递到脚本参数个数</li><li>$*,$@  - 传递到脚本所有参数</li><li>$$  - 进程号</li><li>$?  - 是否执行有误， 0 无误； 非0，有误</li></ul><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><blockquote><p>引用是屏蔽特殊字符的特殊意义，而将其解释为字面意义。</p></blockquote><ul><li><p>“” , 除了&#96;&#96;,\ , $ 其余字符都可以操作</p><blockquote><p>双引号引用除美圆符号$, 反引号（’）和反斜线（\）之外的所有字符，即$、（’）和（\）在双引号中仍被解释为特殊意义.在双引号中保持$符号的特殊意义可以引用变量，如”$variable”表示以变量值替换变量名。 可以防止字符串分割、保留变量中的空格这一特性.</p></blockquote></li><li><p>‘’ 都可以</p><blockquote><p>单引号不再具备引用变量的功能。因此，我们通常将单引号的引用方式称为全引用，将双引号的引用方式称为部分引用, 除了自身外，其余都解释为字面意义。</p></blockquote></li><li><p>&#96;&#96; , shell执行命令</p></li><li><p>\ 转义字符</p></li></ul><h3 id="命令替换"><a href="#命令替换" class="headerlink" title="命令替换"></a>命令替换</h3><blockquote><p>命令替换，一种是使用反引号，另一种是利用$()</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 引用 </tag>
            
            <tag> 变量 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql学习笔记一</title>
      <link href="/2022/08/09/data_base_skills/mysql/mysql%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80/"/>
      <url>/2022/08/09/data_base_skills/mysql/mysql%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<h2 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h2><h3 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h3><ul><li>进程都有一个唯一的编号，称为<code>进程ID</code>，英文名叫<code>PID</code>，进程名称可以自定义</li><li>PID, 是与OS进行分配，并保证唯一性。那么OS分配算法是怎样的呢？</li></ul> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//TODO </span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="常用的进程"><a href="#常用的进程" class="headerlink" title="常用的进程"></a>常用的进程</h3><ul><li>mysqld  - 会直接启动一个服务器进程</li><li>mysqld_safe - 提供一个针对mysqld进程的监控，把出错信息记录下来、重启进程, 同时也调用mysqld</li><li>mysqld.server - 调用mysql_safe, 通过start\stop 参数，启停服务</li><li>mysqld_multi - 可以启动多个服务器进程</li></ul><h3 id="把进程注册成随机启动"><a href="#把进程注册成随机启动" class="headerlink" title="把进程注册成随机启动"></a>把进程注册成随机启动</h3><h4 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h4><blockquote><p>[mysqld绝对路径] –install [服务名称]</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">net start mysql</span><br><span class="line">net stop mysql </span><br></pre></td></tr></table></figure><h4 id="Linux-？？"><a href="#Linux-？？" class="headerlink" title="Linux ？？"></a>Linux ？？</h4><h4 id="Mac"><a href="#Mac" class="headerlink" title="Mac ??"></a>Mac ??</h4><h3 id="Client-有哪些"><a href="#Client-有哪些" class="headerlink" title="Client 有哪些"></a>Client 有哪些</h3><blockquote><p><code>mysqladmin</code>、<code>mysqldump</code>、<code>mysqlcheck</code></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -h主机名  -u用户名 -p密码</span><br></pre></td></tr></table></figure><p>各个参数的意义如下：</p><table><thead><tr><th align="center">参数名</th><th align="left">含义</th></tr></thead><tbody><tr><td align="center"><code>-h</code></td><td align="left">表示服务器进程所在计算机的域名或者IP地址，如果服务器进程就运行在本机的话，可以省略这个参数，或者填<code>localhost</code>或者<code>127.0.0.1</code>。也可以写作 <code>--host=主机名</code>的形式。</td></tr><tr><td align="center"><code>-u</code></td><td align="left">表示用户名。也可以写作 <code>--user=用户名</code>的形式。</td></tr><tr><td align="center"><code>-p</code></td><td align="left">表示密码。也可以写作 <code>--password=密码</code>的形式。</td></tr></tbody></table><h3 id="进程和服务器进程的通信方式"><a href="#进程和服务器进程的通信方式" class="headerlink" title="进程和服务器进程的通信方式"></a>进程和服务器进程的通信方式</h3><h4 id="TCP-IP"><a href="#TCP-IP" class="headerlink" title="TCP&#x2F;IP"></a>TCP&#x2F;IP</h4><h4 id="命名管道和共享内存"><a href="#命名管道和共享内存" class="headerlink" title="命名管道和共享内存"></a>命名管道和共享内存</h4><h4 id="Unix域套接字文件"><a href="#Unix域套接字文件" class="headerlink" title="Unix域套接字文件"></a>Unix域套接字文件</h4><h3 id="读写分离"><a href="#读写分离" class="headerlink" title="读写分离"></a>读写分离</h3><blockquote><p><code>INSERT</code>、 <code>UPDATE</code>、<code>DELETE</code>、<code>TRUNCATE TABLE</code>、<code>ALTER TABLE</code>、<code>DROP TABLE</code>或 <code>DROP DATABASE</code>语句，那使用该表的所有高速缓存查询都将变为无效并从高速缓存中删除！那么就存在了读写分离机制，加速读取缓存有效性。</p></blockquote><ul><li>虽然查询缓存有时可以提升系统性能，但也不得不因维护这块缓存而造成一些开销，比如每次都要去查询缓存中检索，查询请求处理完需要更新查询缓存，维护该查询缓存对应的内存区域。从MySQL 5.7.20开始，不推荐使用查询缓存，并在MySQL 8.0中删除。</li><li>缓存要合理利用。</li></ul><h3 id="mysql语句执行"><a href="#mysql语句执行" class="headerlink" title="mysql语句执行"></a>mysql语句执行</h3><h4 id="1-5-7-20之前版本先查缓存，"><a href="#1-5-7-20之前版本先查缓存，" class="headerlink" title="1.5.7.20之前版本先查缓存，"></a>1.5.7.20之前版本先查缓存，</h4><h4 id="2-没有命中，对查询语句进行优化，"><a href="#2-没有命中，对查询语句进行优化，" class="headerlink" title="2.没有命中，对查询语句进行优化，"></a>2.没有命中，对查询语句进行优化，</h4><h4 id="3-执行查询优化后的句子。"><a href="#3-执行查询优化后的句子。" class="headerlink" title="3.执行查询优化后的句子。"></a>3.执行查询优化后的句子。</h4><blockquote><p><code>MySQL</code>服务器把数据的存储和提取操作都封装到了一个叫<code>存储引擎</code>的模块里。人们把<code>连接管理</code>、<code>查询缓存</code>、<code>语法解析</code>、<code>查询优化</code>这些并不涉及真实数据存储的功能划分为<code>MySQL server</code>的功能，把真实存取数据的功能划分为<code>存储引擎</code>的功能。各种不同的存储引擎向上边的<code>MySQL server</code>层提供统一的调用接口（也就是存储引擎API），包含了几十个底层函数，像”读取索引第一条内容”、”读取索引下一条内容”、”插入记录”等等。<br>所以在<code>MySQL server</code>完成了查询优化后，只需按照生成的执行计划调用底层存储引擎提供的API，获取到数据后返回给客户端就好了。</p></blockquote><h3 id="启动选项"><a href="#启动选项" class="headerlink" title="启动选项"></a>启动选项</h3><blockquote><p>启动时候，设置的参数配置, 选项名、&#x3D;、选项值之间不可以有空白字符. 用短形式指定启动选项时，选项名和选项值之间可以没有间隙，或者用空白字符隔开。 只不过-p密码不能空白间隔。</p></blockquote><h4 id="network"><a href="#network" class="headerlink" title="network"></a>network</h4><blockquote><p>禁止各客户端使用<code>TCP/IP</code>网络进行通信，可以在启动服务器程序的命令行里添加<code>skip-networking</code>启动选项 。 多个单词构成的，它们之间可以由短划线<code>-</code>连接起来，也可以使用下划线<code>_</code>连接起来，</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysqld --skip_networking</span><br><span class="line">mysqld --skip-networking</span><br></pre></td></tr></table></figure><h4 id="default-storage-engine"><a href="#default-storage-engine" class="headerlink" title="default-storage-engine"></a>default-storage-engine</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqld --default-storage-engine=MyISAM</span><br></pre></td></tr></table></figure><h4 id="搜索路径"><a href="#搜索路径" class="headerlink" title="搜索路径"></a>搜索路径</h4><blockquote><p>mysql启动会按照默认的搜索顺序进行找配置项；也可以指定特定的配置文件进行搜索，没有则报错</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqld --defaults-file=/tmp/myconfig.txt</span><br></pre></td></tr></table></figure><ul><li>搜索顺序进行覆盖</li><li>同一个文件，在后面的覆盖签名的</li><li>如果同一个启动选项既出现在命令行中，又出现在配置文件中，那么以命令行中的启动选项为准</li></ul><h4 id="系统变量"><a href="#系统变量" class="headerlink" title="系统变量"></a>系统变量</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SHOW VARIABLES [LIKE 匹配的模式];</span><br><span class="line">SHOW VARIABLES LIKE &#x27;default_storage_engine&#x27;;</span><br><span class="line">SHOW VARIABLES like &#x27;max_connections&#x27;;</span><br><span class="line">SHOW VARIABLES LIKE &#x27;default%&#x27;;</span><br></pre></td></tr></table></figure><h4 id="作用范围"><a href="#作用范围" class="headerlink" title="作用范围"></a>作用范围</h4><blockquote><p>设计<code>MySQL</code>的大叔提出了系统变量的<code>作用范围</code>的概念，具体来说<code>作用范围</code>分为这两种：</p></blockquote><ul><li><code>GLOBAL</code>：全局变量，影响服务器的整体操作。</li><li><code>SESSION</code>：会话变量，影响某个客户端连接的操作。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">语句一：SET GLOBAL default_storage_engine = MyISAM;</span><br><span class="line">语句二：SET @@GLOBAL.default_storage_engine = MyISAM;</span><br></pre></td></tr></table></figure></li></ul><p>如果只想对本客户端生效，也可以选择下边三条语句中的任意一条来进行设置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">语句一：SET SESSION default_storage_engine = MyISAM;</span><br><span class="line">语句二：SET @@SESSION.default_storage_engine = MyISAM;</span><br><span class="line">语句三：SET default_storage_engine = MyISAM;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SHOW SESSION VARIABLES LIKE &#x27;default_storage_engine&#x27;;</span><br><span class="line">SHOW GLOBAL VARIABLES LIKE &#x27;default_storage_engine&#x27;;</span><br></pre></td></tr></table></figure><h4 id="状态变量"><a href="#状态变量" class="headerlink" title="状态变量"></a>状态变量</h4><blockquote><p>由于<code>状态变量</code>是用来显示服务器程序运行状况的，所以它们的值只能由服务器程序自己来设置，我们程序员是不能设置的。与<code>系统变量</code>类似，<code>状态变量</code>也有<code>GLOBAL</code>和<code>SESSION</code>两个作用范围的，所以查看<code>状态变量</code>的语句可以这么写</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW STATUS LIKE &#x27;thread%&#x27;;</span><br></pre></td></tr></table></figure><h2 id="存储引擎-InnoDB"><a href="#存储引擎-InnoDB" class="headerlink" title="存储引擎-InnoDB"></a>存储引擎-InnoDB</h2><blockquote><p>默认以页(16k)为单位，进行磁盘和内存数据交换。<br>是以记录为单位来向表中插入数据的，这些记录在磁盘上的存放方式也被称为<code>行格式</code>或者<code>记录格式</code>。设计<code>InnoDB</code>存储引擎的大叔们到现在为止设计了4种不同类型的<code>行格式</code>，分别是<code>Compact</code>、<code>Redundant</code>、<code>Dynamic</code>和<code>Compressed</code>行格式</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE 表名 (列的信息) ROW_FORMAT=行格式名称 </span><br><span class="line"></span><br><span class="line">ALTER TABLE 表名 ROW_FORMAT=行格式名称</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Node的Devops</title>
      <link href="/2022/08/04/devops_skills/deploy/%E5%9F%BA%E4%BA%8ENode%E7%9A%84Devops/"/>
      <url>/2022/08/04/devops_skills/deploy/%E5%9F%BA%E4%BA%8ENode%E7%9A%84Devops/</url>
      
        <content type="html"><![CDATA[<h2 id="导语："><a href="#导语：" class="headerlink" title="导语："></a>导语：</h2><p>  基于node的Devops</p><h3 id="工具环境"><a href="#工具环境" class="headerlink" title="工具环境"></a>工具环境</h3><table><thead><tr><th>工具</th><th>框架作用</th></tr></thead><tbody><tr><td><a href="https://www.centos.org/download/">CentOS DVD版本</a></td><td>构建服务器系统</td></tr><tr><td>Egg</td><td>后台开发框架</td></tr><tr><td>React + Ant Design + UmiJS</td><td>前端管理界面开发</td></tr><tr><td>Mysql</td><td>数据库</td></tr><tr><td>Jenkins &amp;&amp; GitLab</td><td>CI构建工具</td></tr><tr><td>GitLab</td><td>项目管理仓库</td></tr><tr><td>Docker</td><td>应用容器</td></tr><tr><td>Postman</td><td>接口测试工具</td></tr><tr><td>Sonar</td><td>代码检测工具</td></tr><tr><td>Sentry</td><td>前端线上预警工具</td></tr></tbody></table><h3 id="虚拟机"><a href="#虚拟机" class="headerlink" title="虚拟机"></a>虚拟机</h3><blockquote><p>VMware Workstation 作为商业版本虚拟机，性能与稳定性都有一定的保障，但是如后面介绍来看，配置会过于繁琐，有兴趣的同学可以使用 VirtualBox 来替代。当然 Mac 也有更好的 Parallels 虚拟机来使用，这里只是以 VMware 作为列子来介绍。创建centos虚拟机，请配置 1核4G 以上的内存，才可以正常带动Gitlab.</p></blockquote><ul><li>查看防火墙状态 <code>systemctl status firewalld.service</code></li><li>开启防火墙 <code>systemctl start firewalld.service</code></li><li>关闭防火墙<code>systemctl stop firewalld.service</code></li><li>禁用防火墙 <code>systemctl disable firewalld.service</code></li></ul><h3 id="GitLab"><a href="#GitLab" class="headerlink" title="GitLab"></a>GitLab</h3><p>GitLab 是一个用于仓库管理系统的开源项目，使用 Git 作为代码管理工具，并在此基础上搭建起来的 web 服务。所以大部分公司都会选择使用 Gitlab 作为私有仓库管理</p><p>启动后，502 错误 ， 输入 <code>vim /etc/gitlab/gitlab.rb</code>，修改如下几项内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">external_url &#x27;http://192.168.160.88:8888&#x27; // 这里应该在安装的时候就已经修改过了</span><br><span class="line">unicorn[&#x27;port&#x27;] = 8888</span><br><span class="line">postgresql[&#x27;shared_buffers&#x27;] = &quot;256MB&quot;</span><br><span class="line">postgresql[&#x27;max_connections&#x27;] = 200</span><br></pre></td></tr></table></figure><p>上述配置很多，分别在不同的地方，请参考 vim 的使用文档，用搜索来查找，效率更高</p><p>更新配置：<code>gitlab-ctl reconfigure</code></p><p>重启：<code>gitlab-ctl restart</code></p><p><strong>重启不会马上生效，需要等待 1 分钟左右</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> ansible </tag>
            
            <tag> 配置管理 </tag>
            
            <tag> 滚动更新 </tag>
            
            <tag> devops </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go学习笔记二</title>
      <link href="/2022/08/02/backend_skills/go/go%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%8C/"/>
      <url>/2022/08/02/backend_skills/go/go%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%8C/</url>
      
        <content type="html"><![CDATA[<h2 id="语言简介"><a href="#语言简介" class="headerlink" title="语言简介"></a>语言简介</h2><p>1.Go语言即具备python等动态语言的开发速度，又拥有C&#x2F;C++等编译型语言的性能与安全性。又被称作21世纪的C语言，不但能够访问底层操作系统还提供了强大的网络编程和并发编程，分布式编程。</p><h2 id="为何创建GO"><a href="#为何创建GO" class="headerlink" title="为何创建GO"></a>为何创建GO</h2><h4 id="C语言，却难以开发，编译速度依赖性、运行时错误都非常多"><a href="#C语言，却难以开发，编译速度依赖性、运行时错误都非常多" class="headerlink" title="C语言，却难以开发，编译速度依赖性、运行时错误都非常多"></a>C语言，却难以开发，编译速度依赖性、运行时错误都非常多</h4><h4 id="java语言需要虚拟机才能运行代码"><a href="#java语言需要虚拟机才能运行代码" class="headerlink" title="java语言需要虚拟机才能运行代码"></a>java语言需要虚拟机才能运行代码</h4><h4 id="javascript和node-js-回调多，类型混乱，依赖性包查找也挺麻烦，更重包管理器"><a href="#javascript和node-js-回调多，类型混乱，依赖性包查找也挺麻烦，更重包管理器" class="headerlink" title="javascript和node.js 回调多，类型混乱，依赖性包查找也挺麻烦，更重包管理器"></a>javascript和node.js 回调多，类型混乱，依赖性包查找也挺麻烦，更重包管理器</h4><h2 id="需要什么样的语言呢？"><a href="#需要什么样的语言呢？" class="headerlink" title="需要什么样的语言呢？"></a>需要什么样的语言呢？</h2><ul><li>需要快编译，类似解释性语言， 那么就只有参考Python，js 了</li><li>不能类型混乱，可以参考Java ,C </li><li>不能依赖混乱，可以参考java</li><li>不能虚拟机，编译为字节码，装载为机器码；而是直接变为机器码</li><li>但是内存问题，不能学C，只能学Java，自带内存管理</li><li>响应大数据时代，突破线程限制，改用协程。协程很微型，不会占用电脑资源。一台电脑可以轻松开启成千上万个协程。</li></ul><blockquote><p>最终集合到的就是解释型的、强类型支持的，自带依赖包、内存管理 、直接机器码的</p></blockquote><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><ul><li>在go的官方网址上下载go最新版本<a href="https://link.juejin.cn/?target=https://golang.google.cn/" title="https://golang.google.cn/">golang.google.cn&#x2F;</a>。</li><li>或者 Go 的中文网上下载 <a href="https://link.juejin.cn/?target=https://studygolang.com/dl" title="https://studygolang.com/dl">studygolang.com&#x2F;dl</a></li></ul><h3 id="环境变量配置"><a href="#环境变量配置" class="headerlink" title="环境变量配置"></a>环境变量配置</h3><blockquote><p>安装成功与否，go version 进行check</p></blockquote><h4 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h4><blockquote><p>配置 GOPATH， 可以自定义目录</p></blockquote><h4 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h4><blockquote><p>压缩文件解压到指定目录 </p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo tar -xzf go1.13.4.linux-amd64.tar.gz -C /usr/local</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vim .bashrc</span><br><span class="line">export GOROOT=/usr/local/go        # 安装目录。</span><br><span class="line">export GOPATH=$HOME/go             # 工作环境</span><br><span class="line">export GOBIN=$GOPATH/bin           # 可执行文件存放</span><br><span class="line">export PATH=$GOPATH:$GOBIN:$GOROOT/bin:$PATH       # 添加PATH路径</span><br></pre></td></tr></table></figure><p>添加环境变量到 .profile 这个配置文件中 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#?? 为何</span><br><span class="line">export GOROOT=&quot;/usr/local/go&quot;</span><br></pre></td></tr></table></figure><h2 id="导入包"><a href="#导入包" class="headerlink" title="导入包"></a>导入包</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import ( &quot;fmt&quot; &quot;os&quot; )</span><br></pre></td></tr></table></figure><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><blockquote><p>变量定义使用var  </p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var name string ;</span><br><span class="line"></span><br><span class="line">age := 12;</span><br></pre></td></tr></table></figure><h3 id="变量互换"><a href="#变量互换" class="headerlink" title="变量互换"></a>变量互换</h3><blockquote><p>不是从地址角度，从人角度，直接互换就行</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var a, b int = 100,200;</span><br><span class="line">a,b = b,a;</span><br></pre></td></tr></table></figure><h3 id="匿名变量"><a href="#匿名变量" class="headerlink" title="匿名变量"></a>匿名变量</h3><blockquote><p>_ 下划线表示”_” 也称为空白标识符，任何类型都可以使用它进行赋值,而且任何类型赋值后都将直接被抛弃，所以在使用匿名变量时，表示后续代码不需要再用此变量</p></blockquote><h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><ul><li>常量数值不能修改。</li><li>常量定义后可以不使用。</li><li>常量定义不能使用简短定义方式。</li><li>常量中使用的数据类型只能是 整型、布尔、浮点、复数类型、字符串类型</li></ul><h3 id="iota常量"><a href="#iota常量" class="headerlink" title="iota常量"></a>iota常量</h3><blockquote><p>iota是常量里面的计数器，初始值默认值是0，可以被编译器自动修改，每const定义一组常量时，iota逐行自增1。常被用作枚举值</p></blockquote><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><blockquote><p>基本数据类型和复合数据类型, 数据类型要兼容才能转换，否则容易丢失数据精度；Type(x)是强制转换。</p></blockquote><h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><h4 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h4><blockquote><p>byte uint8 的别称 rune int32 的别称</p></blockquote><table><thead><tr><th>数据类型</th><th>说明</th><th>取值范围</th></tr></thead><tbody><tr><td>有符号整数</td><td></td><td></td></tr><tr><td>int8</td><td>有符号 8位整数</td><td>-128到 127</td></tr><tr><td>int16</td><td>有符号 16位整数</td><td>-32768 到32767</td></tr><tr><td>int32</td><td>有符号 32位整数</td><td>-2147483648到2147483647</td></tr><tr><td>int64</td><td>有符号 64位整数</td><td>-9223372036854775808到9223372036854775807</td></tr><tr><td>无符号整数</td><td></td><td></td></tr><tr><td>uint8</td><td>无符号 8位整数</td><td>0到255</td></tr><tr><td>uint16</td><td>无符号 16位整数</td><td>0到65535</td></tr><tr><td>uint32</td><td>无符号 32位整数</td><td>0到4294967295</td></tr><tr><td>uint64</td><td>无符号 64位整数</td><td>0到18446744073709551615</td></tr></tbody></table><h4 id="浮点"><a href="#浮点" class="headerlink" title="浮点"></a>浮点</h4><blockquote><p>float32 和 float64</p></blockquote><h5 id="在内存中占有的字节数不同"><a href="#在内存中占有的字节数不同" class="headerlink" title="在内存中占有的字节数不同"></a>在内存中占有的字节数不同</h5><ul><li>单精度浮点数在机内占4个字节。</li><li>双精度浮点数在机内占8个字节。</li></ul><h5 id="有效数字位数不同"><a href="#有效数字位数不同" class="headerlink" title="有效数字位数不同"></a>有效数字位数不同</h5><ul><li>单精度浮点数 有效数字7位。</li><li>双精度浮点数 有效数字16位。</li></ul><h5 id="使用情况区别"><a href="#使用情况区别" class="headerlink" title="使用情况区别"></a>使用情况区别</h5><ul><li>一般用来表示美元和分的时候用单精度类型。</li><li>超出人类经验的数字函数，例如 sin() cos() tan() sqrt() 都使用双精度值。</li></ul><h4 id="布尔"><a href="#布尔" class="headerlink" title="布尔"></a>布尔</h4><blockquote><p>true 、false</p></blockquote><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><h4 id="字符"><a href="#字符" class="headerlink" title="字符"></a>字符</h4><h4 id="位操作赋"><a href="#位操作赋" class="headerlink" title="位操作赋"></a>位操作赋</h4><ul><li>^ 异或 - 同为0 ，不同1</li><li>&amp;^ 位清空 - a&amp;^b , b为0去a；b为1，取0；</li><li>&lt;&lt; , &gt;&gt;</li></ul><h4 id="error"><a href="#error" class="headerlink" title="error"></a>error</h4><h3 id="复合数据类型"><a href="#复合数据类型" class="headerlink" title="复合数据类型"></a>复合数据类型</h3><h3 id="类型输出"><a href="#类型输出" class="headerlink" title="类型输出"></a>类型输出</h3><table><thead><tr><th>占位符</th><th>说明</th><th>举例</th><th>输出</th></tr></thead><tbody><tr><td>%d</td><td>十进制的数字</td><td>fmt.Printf(“%d”,10)</td><td>10</td></tr><tr><td>%b</td><td>二进制的数字</td><td>fmt.Printf(“%b”,5)</td><td>101</td></tr><tr><td>%T</td><td>取类型</td><td>b :&#x3D;true fmt.Printf(“%T”,b)</td><td>bool</td></tr><tr><td>%s</td><td>取字符串</td><td>s :&#x3D;”123” fmt.Printf(“%s”,s)</td><td>123</td></tr><tr><td>%t</td><td>取bool类型的值</td><td>b:&#x3D;true fmt.Printf(“%t”,b)</td><td>true</td></tr><tr><td>%p</td><td>取内存地址</td><td>p :&#x3D;”123” fmt.Printf(“%p”, &amp;p)</td><td>0xc0000461f0</td></tr></tbody></table><h3 id="标记"><a href="#标记" class="headerlink" title="标记"></a>标记</h3><blockquote><p>Go语言中有四类标记：标识符（identifiers）、关键字（keywords）、运算符（operators）标点符号（punctuation）以及字面量（literals）</p></blockquote><h3 id="逻辑控制"><a href="#逻辑控制" class="headerlink" title="逻辑控制"></a>逻辑控制</h3><blockquote><p>{} 代码块不可省略，但是() ,可以省略；</p></blockquote><h4 id="if"><a href="#if" class="headerlink" title="if"></a>if</h4><blockquote><p>if条件判断语句中，可以插入一段执行赋值</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if err:= function(); err == nil &#123;&#125;</span><br></pre></td></tr></table></figure><h4 id="for"><a href="#for" class="headerlink" title="for"></a>for</h4><blockquote><p>简式声明可能常常出现在函数内部</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">for i:= 0 ; i &lt; 100;i ++ &#123;</span><br><span class="line">    if i == 5 &#123;</span><br><span class="line">        break; // 只能结束当前一层循环 </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h3><blockquote><p>可以不用特意添加break，结束语句； fallthrought ,会强制执行下一条case, 不论真假条件</p></blockquote><h3 id="return"><a href="#return" class="headerlink" title="return"></a>return</h3><h2 id="内置的包"><a href="#内置的包" class="headerlink" title="内置的包"></a>内置的包</h2><h3 id="strings-字符串处理"><a href="#strings-字符串处理" class="headerlink" title="strings - 字符串处理"></a>strings - 字符串处理</h3><h3 id="strconv-字符转基本类型"><a href="#strconv-字符转基本类型" class="headerlink" title="strconv - 字符转基本类型"></a>strconv - 字符转基本类型</h3><h3 id="time-时间日期处理"><a href="#time-时间日期处理" class="headerlink" title="time - 时间日期处理"></a>time - 时间日期处理</h3><h2 id="包管理"><a href="#包管理" class="headerlink" title="包管理"></a>包管理</h2><blockquote><p><code>dep</code>和<code>glide</code>在项目中加入了<code>vender</code>目录来存储所有项目中需要引入的包。dep init 生成gopkg.lock（清单文件）,gopkg.toml(描述文件) </p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">MacOS `brew install dep`</span><br><span class="line"></span><br><span class="line">Linux `curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh`</span><br><span class="line"></span><br><span class="line">Windows `go get -u github.com/golang/dep/cmd/dep`</span><br></pre></td></tr></table></figure><h2 id="mod"><a href="#mod" class="headerlink" title="mod"></a>mod</h2><p>使用<code>go mod</code> 管理项目，不需要非得把项目放到GOPATH指定目录下，可以在电脑上任何位置新建一个项目。</p><h3 id="mod初始化"><a href="#mod初始化" class="headerlink" title="mod初始化"></a>mod初始化</h3><p>使用mod需要注意的是：</p><ul><li>如果Go的版本太低不能使用，建议将Go的版本升级到最新。</li><li>环境变量中可以增加<code>GOPROXY=https://goproxy.io</code> 这样没有梯子的情况下可以正确的加载相应的包文件。</li><li>环境变量<code>GO111MODULE</code>不要设置，如果已经增加了这个变量请务必设置为<code>GO111MODULE=auto</code>。</li><li>在项目的根目录下使用命令<code>go mod init projectName</code></li></ul><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><blockquote><p>func 关键字， 如果是小写的，表示私有的函数，仅能够在本包中调用，相当于其他语言中的private。大写，等于public。<code>_</code> 空白标识符，舍弃返回的数据。</p></blockquote><p>函数也是一种类型，所以可以将一个函数作为另一个函数的参数传递func1()和func2()是两个函数，将func1函数作为func2这个函数的参数，func2函数就叫做高阶函数，因为他接收了一个函数作为参数。所以func1叫做回调函数，他作为另一个函数的参数</p><h3 id="多个返回值"><a href="#多个返回值" class="headerlink" title="多个返回值"></a>多个返回值</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">func Test(age,tel int) (int, string)&#123;</span><br><span class="line"> return 12,&#x27;a&#x27;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">x,name = Test(1);</span><br></pre></td></tr></table></figure><h3 id="defer"><a href="#defer" class="headerlink" title="defer"></a>defer</h3><blockquote><p>defer 表示延时推迟的意思，在go语言中用来延时一个函数或者方法的执行。如果一个函数或者方法添加了defer关键字，表示则暂时不执行，等到主函数的所有方法都执行完后才开始执行.当多个函数被defer的时候他们被添加到一个堆栈中，并且根据先进后出的原则执行。 即 <code>Last In First Out（LIFO）</code></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《react》- 再次回顾</title>
      <link href="/2022/02/16/front_skills/react/%E3%80%8Areact%E3%80%8B-%20%E5%86%8D%E6%AC%A1%E5%9B%9E%E9%A1%BE/"/>
      <url>/2022/02/16/front_skills/react/%E3%80%8Areact%E3%80%8B-%20%E5%86%8D%E6%AC%A1%E5%9B%9E%E9%A1%BE/</url>
      
        <content type="html"><![CDATA[<ol><li>react 组件创建形式：</li></ol><ul><li>函数组件  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function Welcome(props) &#123;</span><br><span class="line"> return &lt;h1&gt;Hello, &#123;props.name&#125;&lt;/h1&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>class形式  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">class Welcome extends React.Component &#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">      return &lt;h1&gt;Hello, &#123;this.props.name&#125;&lt;/h1&gt;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> reactjs </tag>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《职场人》- 职场进阶总结</title>
      <link href="/2021/11/30/do_at_workspace/%E3%80%8A%E8%81%8C%E5%9C%BA%E4%BA%BA%E3%80%8B-%20%E8%81%8C%E5%9C%BA%E8%BF%9B%E9%98%B6%E6%80%BB%E7%BB%93/"/>
      <url>/2021/11/30/do_at_workspace/%E3%80%8A%E8%81%8C%E5%9C%BA%E4%BA%BA%E3%80%8B-%20%E8%81%8C%E5%9C%BA%E8%BF%9B%E9%98%B6%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h3 id="何为聪明？"><a href="#何为聪明？" class="headerlink" title="何为聪明？"></a>何为聪明？</h3><blockquote><p>通过特定任务，进行特定某种能力重复练习，可达到的</p></blockquote><ul><li>1.思考、创造力</li><li>2.计算的速度、正确率</li><li>3.学习能力、对应的考证、学历证明</li><li>4.词汇水平、杂学知识、知识广度</li><li>5.对事态的掌控力(工作无私心、踏实专注) - 成为最好的自己，才能改变环境，影响别人，乃至改造世界</li><li>6.说话技巧、采访能力、倾听能力 — 能力是自下向上，逐步积累提升的；</li></ul><h3 id="职场人MVP"><a href="#职场人MVP" class="headerlink" title="职场人MVP"></a>职场人MVP</h3><blockquote><p>公司需要的是两类人： 掌握业务，提升业务价值，俗称开源的人;另一类：开发工具，提升效率，俗称节流的人；</p></blockquote><blockquote><p>思考公司不足地方，然后掌握与之匹配的知识和技能，进而成为不可替代的那位</p></blockquote><h3 id="职场人要处理的四维"><a href="#职场人要处理的四维" class="headerlink" title="职场人要处理的四维"></a>职场人要处理的四维</h3><ul><li>对工作： 学习基础知识，明白公司、岗位需求、工作流程、抓重点、提工效</li><li>对客户： 累积客户信息，了解客户诉求，完成客户诉求，急客户所急</li><li>对上级： 及时、高质高量完成上级布置任务、目标</li><li>对同事： 熟悉彼此个性、优势，互相学习，为同一个目标努力</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 职场人 </tag>
            
            <tag> 进阶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《react》-reactjs进阶答疑</title>
      <link href="/2021/08/11/front_skills/react/%E3%80%8Areact%E3%80%8B-reactjs%E8%BF%9B%E9%98%B6%E7%AD%94%E7%96%91/"/>
      <url>/2021/08/11/front_skills/react/%E3%80%8Areact%E3%80%8B-reactjs%E8%BF%9B%E9%98%B6%E7%AD%94%E7%96%91/</url>
      
        <content type="html"><![CDATA[<h4 id="react是什么？"><a href="#react是什么？" class="headerlink" title="react是什么？"></a>react是什么？</h4><blockquote><p>定位于声明UI层的一个数据绑定框架，不如angular那样开箱即用的很多功能<br> angular内置如下大概功能： </p></blockquote><ul><li>HTTP调用；</li><li>表单构建和验证；</li><li>路由；</li><li>字符串和数字格式化；</li><li>国际化；</li><li>依赖注入；</li><li>基本数据建模原语；</li><li>自定义测试框架（尽管这并不像其他领域那样是什么重要的区别）；</li><li>默认包含的服务worker（一种用worker形式来执行JavaScript的方法）。</li></ul><h4 id="为何会选择使用react-而不是angular？"><a href="#为何会选择使用react-而不是angular？" class="headerlink" title="为何会选择使用react,而不是angular？"></a>为何会选择使用react,而不是angular？</h4><blockquote><p>大多数团队都想要React的灵活性以及它带来的思维模型和直观API, angular深度集成后，迁移成本会很大。</p></blockquote><ul><li>选择React时需要做出的另一个权衡是，它主要由Facebook开发和构建并且是为了满足Facebook的UI需求.</li></ul><h4 id="react-可以write-once-run-anyway"><a href="#react-可以write-once-run-anyway" class="headerlink" title="react 可以write once,run anyway?"></a>react 可以write once,run anyway?</h4><blockquote><p>就是声明ui层的code， 然后编译到不同环境中执行。</p></blockquote><h4 id="react-成功使用，需要引入哪些库？"><a href="#react-成功使用，需要引入哪些库？" class="headerlink" title="react 成功使用，需要引入哪些库？"></a>react 成功使用，需要引入哪些库？</h4><blockquote><p>react.js(核心部分，控制如何展示UI) 和react.dom (渲染与浏览器端)</p></blockquote><h4 id="react-render为何传递dom元素，而不是id选择器"><a href="#react-render为何传递dom元素，而不是id选择器" class="headerlink" title="react render为何传递dom元素，而不是id选择器"></a>react render为何传递dom元素，而不是id选择器</h4><blockquote><p>dom元素选择器单一，使用范围受限，支持传递dom元素，扩大了元素选择范围，复用了css选择器</p></blockquote><h4 id="react-为何编写html-不会编译报错？"><a href="#react-为何编写html-不会编译报错？" class="headerlink" title="react 为何编写html 不会编译报错？"></a>react 为何编写html 不会编译报错？</h4><blockquote><p>这就需要了解javascript 支持的type类型。</p></blockquote><ul><li>type 属性规定脚本的 MIME 类型</li><li>MIME 类型由两部分组成：媒介类型和子类型</li></ul><h4 id="何为JSX？"><a href="#何为JSX？" class="headerlink" title="何为JSX？"></a>何为JSX？</h4><blockquote><p>一种js的扩展，封装了原本js 创建dom元素的语法糖。重复的代码createElement，效率低下。语法糖。</p></blockquote><h4 id="既然ui和数据定义可以分离，譬如for循环，可以展示10个createElement，那么事件响应式如何实现的？"><a href="#既然ui和数据定义可以分离，譬如for循环，可以展示10个createElement，那么事件响应式如何实现的？" class="headerlink" title="既然ui和数据定义可以分离，譬如for循环，可以展示10个createElement，那么事件响应式如何实现的？"></a>既然ui和数据定义可以分离，譬如for循环，可以展示10个createElement，那么事件响应式如何实现的？</h4><blockquote></blockquote><h4 id="支持自定义元素，为什么浏览器会认尼？"><a href="#支持自定义元素，为什么浏览器会认尼？" class="headerlink" title="支持自定义元素，为什么浏览器会认尼？"></a>支持自定义元素，为什么浏览器会认尼？</h4><blockquote><p> 利用底层CustomRegiester webapi </p></blockquote><ul><li>浏览器中的Web API让我们可以使用JavaScript通过DOM与Web文档进行交互</li></ul><h4 id="web-api可以直接操作dom，为何还要react-的虚拟dom？"><a href="#web-api可以直接操作dom，为何还要react-的虚拟dom？" class="headerlink" title="web api可以直接操作dom，为何还要react 的虚拟dom？"></a>web api可以直接操作dom，为何还要react 的虚拟dom？</h4><blockquote><p>虚拟dom，有一部分是把dom操作集中化，然后一次性的操作，减少重绘重排，提升性能</p></blockquote><h4 id="什么是虚拟dom"><a href="#什么是虚拟dom" class="headerlink" title="什么是虚拟dom?"></a>什么是虚拟dom?</h4><blockquote><p>驻留在内存中的js对象。会涉及diff ，patch算法，先计算哪些更新了，然后执行修改部分的更新。</p></blockquote><h4 id="自己编写createElement会如何实现封装js？"><a href="#自己编写createElement会如何实现封装js？" class="headerlink" title="自己编写createElement会如何实现封装js？"></a>自己编写createElement会如何实现封装js？</h4><blockquote><p>type ，props, 然后判定数组，字符，迭代循环展示</p></blockquote><h4 id="如何区分数组、字符类型的？"><a href="#如何区分数组、字符类型的？" class="headerlink" title="如何区分数组、字符类型的？"></a>如何区分数组、字符类型的？</h4><blockquote><p>通过instance of 。字符串属于基本类型，typeof即可。instanceof ，判定实例，是否由特定的constructor构函数而来的。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> reactjs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《angular11》 - angular组件样式</title>
      <link href="/2021/08/09/front_skills/angular/%E3%80%8Aangular11%E3%80%8B%20-%20angular%E7%BB%84%E4%BB%B6%E6%A0%B7%E5%BC%8F/"/>
      <url>/2021/08/09/front_skills/angular/%E3%80%8Aangular11%E3%80%8B%20-%20angular%E7%BB%84%E4%BB%B6%E6%A0%B7%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h4 id="angular样式，如何封装独立的？"><a href="#angular样式，如何封装独立的？" class="headerlink" title="angular样式，如何封装独立的？"></a>angular样式，如何封装独立的？</h4><blockquote><p>样式文件独立存在，采用styleUrl形式引入</p></blockquote><ul><li>一个组件标签，编译后，对应一个host</li><li>对应的html中元素，对应content部分。此时css文件中定义的样式，对应content部分。</li><li>要修改host样式，需采用:host {} </li><li>要修改其他组件标签的样式？<ul><li>通过js 操作</li></ul></li></ul><h4 id="上述的angular样式封装，依据是什么？"><a href="#上述的angular样式封装，依据是什么？" class="headerlink" title="上述的angular样式封装，依据是什么？"></a>上述的angular样式封装，依据是什么？</h4><blockquote><p>angular样式文件的应用，依赖于css属性选择器。div[attr],具有attr属性的元素div。<br>正是基于此处，angular才能把css样式文件独立开来。</p></blockquote><h4 id="为何angular也不推荐使用双向数据绑定那？"><a href="#为何angular也不推荐使用双向数据绑定那？" class="headerlink" title="为何angular也不推荐使用双向数据绑定那？"></a>为何angular也不推荐使用双向数据绑定那？</h4><blockquote><p>目前了解的是，推荐使用formControl,formControlName，替代ngModel</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> angular </tag>
            
            <tag> 样式问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Devops》 - devops背景</title>
      <link href="/2021/07/30/devops_skills/deploy/%E3%80%8ADevops%E3%80%8B%20-%20devops%E8%83%8C%E6%99%AF/"/>
      <url>/2021/07/30/devops_skills/deploy/%E3%80%8ADevops%E3%80%8B%20-%20devops%E8%83%8C%E6%99%AF/</url>
      
        <content type="html"><![CDATA[<h3 id="滚动更新"><a href="#滚动更新" class="headerlink" title="滚动更新"></a>滚动更新</h3><blockquote><p>系统由多个组件组成，在不停止服务的前提下，每次只更新部分组件</p></blockquote><h3 id="开发团队和运维团队如何共享信息？"><a href="#开发团队和运维团队如何共享信息？" class="headerlink" title="开发团队和运维团队如何共享信息？"></a>开发团队和运维团队如何共享信息？</h3><blockquote><p>常存在，开发团队，上线新功能，访问量陡增 或者出现大量异常，运维不知道，导致长时间服务不可用状态</p></blockquote><ul><li>因此开发和运维，需要了解工作内容，一起参与</li><li>敏捷开发 → 持续的运维问题 → 配置管理工具 → devops产生 → 配置工具和沟通工具结合，提升服务质量</li></ul><h3 id="康威定律"><a href="#康威定律" class="headerlink" title="康威定律"></a>康威定律</h3><blockquote><p>大意为： 系统架构,等同于组织沟通结构</p></blockquote><h3 id="devops"><a href="#devops" class="headerlink" title="devops"></a>devops</h3><ul><li>专业性越强团队，信息沟通，就会带来损耗，沟通越多，损耗就越大，</li><li>此时引入devops，和支撑devops的各种工具，是系统架构、组织结构同时发生变化，将会为组织带来很多积极影响</li><li>devops 不仅需要工具，还需要组织文化变动，实践devops可以消除对个人的依赖、减少团队损耗、提高产品质量。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> ansible </tag>
            
            <tag> 配置管理 </tag>
            
            <tag> 滚动更新 </tag>
            
            <tag> devops </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《D3》- html5元素属性</title>
      <link href="/2021/07/29/front_skills/d3/%E3%80%8AD3%E3%80%8B-%20html%E5%85%83%E7%B4%A0%E5%B1%9E%E6%80%A7/"/>
      <url>/2021/07/29/front_skills/d3/%E3%80%8AD3%E3%80%8B-%20html%E5%85%83%E7%B4%A0%E5%B1%9E%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<h3 id="html5-比xhtml-更简洁"><a href="#html5-比xhtml-更简洁" class="headerlink" title="html5 比xhtml 更简洁"></a>html5 比xhtml 更简洁</h3><p><img src="https://i.imgur.com/ZfP0cX5.png" alt="Imgur"></p><blockquote><p>async 属性规定一旦脚本可用，则会异步执行。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;demo_async.js&quot; async=&quot;async&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><blockquote><p>download修改下载文件名</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;/images/myw3schoolimage.jpg&quot; download=&quot;w3logo&quot;&gt;</span><br></pre></td></tr></table></figure><blockquote><p>当用户在 ismap 图像上单击了某处时，浏览器会自动把鼠标的 x、y 位置（相对于图像的左上角）发送到服务器端。特殊的服务器端软件（在本例中是 demo_form.asp 程序）可以根据这些坐标来做出响应。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;demo_form.asp&quot;&gt;</span><br><span class="line">&lt;img src=&quot;tulip.gif&quot; ismap /&gt;</span><br><span class="line">&lt;/a&gt;</span><br></pre></td></tr></table></figure><h3 id="html存在各种属性，是为何？"><a href="#html存在各种属性，是为何？" class="headerlink" title="html存在各种属性，是为何？"></a>html存在各种属性，是为何？</h3><blockquote><p>js 对象之间的继承关系<br><img src="https://i.imgur.com/yT4blYI.png" alt="Imgur"></p></blockquote><h3 id="HTML5新的6个语义化标签"><a href="#HTML5新的6个语义化标签" class="headerlink" title="HTML5新的6个语义化标签"></a>HTML5新的6个语义化标签</h3><blockquote><p>header , section ,article ,nav,aside,footer</p></blockquote><ul><li>section : 一块带有header标题的区域</li><li>article: 带有header和meta 等元数据的文章</li><li>nav : 导航模块</li><li>aside： 侧边栏</li><li>footer: 页面或者文章底部，常用于版权、友链、域名备案、上一篇&#x2F;下一篇等</li></ul><h3 id="HTML5-input-浏览器内置验证submit触发不完善，怎么破？"><a href="#HTML5-input-浏览器内置验证submit触发不完善，怎么破？" class="headerlink" title="HTML5 input 浏览器内置验证submit触发不完善，怎么破？"></a>HTML5 input 浏览器内置验证submit触发不完善，怎么破？</h3><blockquote><p>利用<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLInputElement">input pattern</a>属性，配置正则等，但是 text, search, tel, url, email, or password 支持，其余无效。</p></blockquote><h3 id="其余html5标签"><a href="#其余html5标签" class="headerlink" title="其余html5标签"></a>其余html5标签</h3><blockquote><p>标签</p></blockquote><ul><li>output，form内部的输出</li><li>progress,meter都展示进度，progress动态数据，meter静态数据</li><li>datalist，通过id，可以为input，添加下拉框列表</li><li>figture,figcaption，可以给图片，添加语义标注</li><li>fieldset ,legend ，常用于制作登录form界面书签效果</li></ul><h3 id="async-defer有何区别"><a href="#async-defer有何区别" class="headerlink" title="async ,defer有何区别"></a>async ,defer有何区别</h3><blockquote><p>defer异步加载js脚本，但是会等html文档加载完毕在执行</p></blockquote><ul><li>async,异步加载完毕，就立刻执行脚本</li><li>更偏向与defer</li></ul><h3 id="新增属性-hidden-draggable"><a href="#新增属性-hidden-draggable" class="headerlink" title="新增属性- hidden,draggable"></a>新增属性- hidden,draggable</h3><blockquote><p>hidden,隐藏元素, 只有hidden&#x3D;”hidden” 或者简写hidden </p></blockquote><ul><li>draggable，标记元素是否可以拖拽, true | false</li><li>contenteditable ,标记元素内部内容是否可以编辑， true | false</li></ul><h3 id="input-autocomplete-autofocus"><a href="#input-autocomplete-autofocus" class="headerlink" title="input - autocomplete,autofocus"></a>input - autocomplete,autofocus</h3><blockquote><p>autocomplete，自动提示，常结合datalist使用</p></blockquote><ul><li>设置input，autofocus实现自动聚焦</li></ul><h3 id="form表单覆盖默认验证"><a href="#form表单覆盖默认验证" class="headerlink" title="form表单覆盖默认验证"></a>form表单覆盖默认验证</h3><blockquote><p>email,url,tel，存在默认验证，不满足要求，如何覆盖？  </p></blockquote><ul><li>form novalidate禁用form元素所有文本框内的验证功能</li></ul><h3 id="draggable具备拖动，但不能元素位置"><a href="#draggable具备拖动，但不能元素位置" class="headerlink" title="draggable具备拖动，但不能元素位置"></a>draggable具备拖动，但不能元素位置</h3><blockquote><p>源元素： 被拖动的元素，有ondragstart,ondragend,ondrag</p></blockquote><ul><li>目标元素： 最终在哪里释放元素, ondragenter,ondragover,ondragleave,ondrop</li><li>ondragstart &gt; ondrag &gt; ondragenter &gt; ondragover &gt; ondrapleave &gt; ondrop &gt; ondragend</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> svg </tag>
            
            <tag> d3 </tag>
            
            <tag> html5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《angular10》- 日常概念FAQ</title>
      <link href="/2021/06/28/front_skills/angular/%E3%80%8Aangular10%E3%80%8B-%20%E6%97%A5%E5%B8%B8%E6%A6%82%E5%BF%B5FAQ/"/>
      <url>/2021/06/28/front_skills/angular/%E3%80%8Aangular10%E3%80%8B-%20%E6%97%A5%E5%B8%B8%E6%A6%82%E5%BF%B5FAQ/</url>
      
        <content type="html"><![CDATA[<h4 id="angular路由如何实现的？"><a href="#angular路由如何实现的？" class="headerlink" title="angular路由如何实现的？"></a>angular路由如何实现的？</h4><blockquote><p>两者实现模式： history,hash; hash的url携带#， history，会作为path部分。最终底层都是靠的js支持。</p></blockquote><h4 id="如何配置模块下子路由？"><a href="#如何配置模块下子路由？" class="headerlink" title="如何配置模块下子路由？"></a>如何配置模块下子路由？</h4><blockquote></blockquote><h4 id="为何自定义元素，浏览器能识别？"><a href="#为何自定义元素，浏览器能识别？" class="headerlink" title="为何自定义元素，浏览器能识别？"></a>为何自定义元素，浏览器能识别？</h4><blockquote><p>底层采用CustomeElementRegistry,支持四种方法：</p></blockquote><ul><li>define</li><li>get </li><li>upgrdate</li><li>whenDefined</li></ul><h4 id="如何实现input点击，下拉选项？"><a href="#如何实现input点击，下拉选项？" class="headerlink" title="如何实现input点击，下拉选项？"></a>如何实现input点击，下拉选项？</h4><blockquote><p>1.简单的可以用采用datalist 、option组合 + input实现 </p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;input list=&quot;ice-cream-flavors&quot; id=&quot;ice-cream-choice&quot; name=&quot;ice-cream-choice&quot; /&gt;</span><br><span class="line"></span><br><span class="line">&lt;datalist id=&quot;ice-cream-flavors&quot;&gt;</span><br><span class="line">    &lt;option value=&quot;Chocolate&quot;&gt;</span><br><span class="line">    &lt;option value=&quot;Coconut&quot;&gt;</span><br><span class="line">    &lt;option value=&quot;Mint&quot;&gt;</span><br><span class="line">    &lt;option value=&quot;Strawberry&quot;&gt;</span><br><span class="line">    &lt;option value=&quot;Vanilla&quot;&gt;</span><br><span class="line">&lt;/datalist&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="如何开发出详情展示？"><a href="#如何开发出详情展示？" class="headerlink" title="如何开发出详情展示？"></a>如何开发出详情展示？</h4><blockquote><p>html details标签支持</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> &lt;details&gt;</span><br><span class="line">    &lt;summary&gt;Details&lt;/summary&gt;</span><br><span class="line">    Something small enough to escape casual notice.</span><br><span class="line">&lt;/details&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> angular </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Linux》- shell 通配符</title>
      <link href="/2021/04/19/devops_skills/linux/%E3%80%8ALinux%E3%80%8B-%20shell%20%E9%80%9A%E9%85%8D%E7%AC%A6/"/>
      <url>/2021/04/19/devops_skills/linux/%E3%80%8ALinux%E3%80%8B-%20shell%20%E9%80%9A%E9%85%8D%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<h4 id="通配符有哪些？"><a href="#通配符有哪些？" class="headerlink" title="通配符有哪些？"></a>通配符有哪些？</h4><blockquote><ul><li>表示任意多字符<br>？ 任意单个字符<br>[xx] j集合中的<br>[!xx] 非集中的<br>[[:alpha:]]  字母<br> [:digiti:] 数字<br> [:upper:] 大写字母<br> [:lower:] 小写字母<br> [:alnum:] 字母数字</li></ul></blockquote><h4 id="软连接-vs-硬链接"><a href="#软连接-vs-硬链接" class="headerlink" title="软连接 vs 硬链接"></a>软连接 vs 硬链接</h4><blockquote><p>硬链接： </p></blockquote><ul><li>每个文件只有一个硬链接</li><li>ln file link </li><li>不能引用目录</li><li>不能引用其所在文件系统之外的文件</li></ul><blockquote><p>软连接：</p></blockquote><ul><li>为了克服硬链接的限制而出现的 </li><li>创建一种特殊类型的文件，内含一段指向被引用文件或目录的文本指针。就这方面而言，它和Windows的快捷方式非常类似，不过符号链接可是要比快捷方式早出现了很多年</li><li>ln -s file link</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> shell </tag>
            
            <tag> 脚本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Linux》- shell 日期相关命令</title>
      <link href="/2021/04/18/devops_skills/linux/%E3%80%8ALinux%E3%80%8B-%20shell%20%E6%97%A5%E6%9C%9F%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/"/>
      <url>/2021/04/18/devops_skills/linux/%E3%80%8ALinux%E3%80%8B-%20shell%20%E6%97%A5%E6%9C%9F%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h4 id="date-vs-cal"><a href="#date-vs-cal" class="headerlink" title="date vs cal ?"></a>date vs cal ?</h4><blockquote><p>date 日期，cal 日历</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> shell </tag>
            
            <tag> 脚本 </tag>
            
            <tag> date </tag>
            
            <tag> cal </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Linux》- shell 磁盘相关命令</title>
      <link href="/2021/04/18/devops_skills/linux/%E3%80%8ALinux%E3%80%8B-%20shell%20%E7%A3%81%E7%9B%98%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/"/>
      <url>/2021/04/18/devops_skills/linux/%E3%80%8ALinux%E3%80%8B-%20shell%20%E7%A3%81%E7%9B%98%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h4 id="df-vs-free"><a href="#df-vs-free" class="headerlink" title="df vs free ?"></a>df vs free ?</h4><blockquote><p>df 查看磁盘空间；free 查看内存情况</p></blockquote><h4 id="为何-Linux中的文件名与命令是区分大小写的-？"><a href="#为何-Linux中的文件名与命令是区分大小写的-？" class="headerlink" title="为何 Linux中的文件名与命令是区分大小写的 ？"></a>为何 Linux中的文件名与命令是区分大小写的 ？</h4><h4 id="Linux中存在扩展名吗？"><a href="#Linux中存在扩展名吗？" class="headerlink" title="Linux中存在扩展名吗？"></a>Linux中存在扩展名吗？</h4><blockquote><p>Linux并没有“文件扩展名”的概念。你想怎么命名文件都行。文件内容或用途是由其他方式来决定的</p></blockquote><h4 id="如何判定文件类型"><a href="#如何判定文件类型" class="headerlink" title="如何判定文件类型?"></a>如何判定文件类型?</h4><blockquote><p>file xx</p></blockquote><h4 id="查看文件内容的命令有哪些？"><a href="#查看文件内容的命令有哪些？" class="headerlink" title="查看文件内容的命令有哪些？"></a>查看文件内容的命令有哪些？</h4><blockquote></blockquote><ul><li>使用less命令可以查看文本文件</li><li>vim 也可以，但是会进行命令行模式</li><li>more 也可以 ， 需要翻页</li><li>cat 也可以，一次性的输出全部内容</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> shell </tag>
            
            <tag> 脚本 </tag>
            
            <tag> df </tag>
            
            <tag> free </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Linux》- 登录命令</title>
      <link href="/2021/04/15/devops_skills/linux/%E3%80%8ALinux%E3%80%8B-%20%E7%99%BB%E5%BD%95%E5%91%BD%E4%BB%A4/"/>
      <url>/2021/04/15/devops_skills/linux/%E3%80%8ALinux%E3%80%8B-%20%E7%99%BB%E5%BD%95%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h3 id="ssh-vs-rlogin-有何区别？"><a href="#ssh-vs-rlogin-有何区别？" class="headerlink" title="ssh vs rlogin 有何区别？"></a>ssh vs rlogin 有何区别？</h3><blockquote><p>ssh会对发送内容加密，比rlogin更安全；ssh支持自动化，rlogin不支持。</p></blockquote><h3 id="ssh如何实现自动化？"><a href="#ssh如何实现自动化？" class="headerlink" title="ssh如何实现自动化？"></a>ssh如何实现自动化？</h3><blockquote><p>ssh expect</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/expect</span><br><span class="line"></span><br><span class="line"> # 设置超时时间为 60 秒</span><br><span class="line"> set timeout  60</span><br><span class="line"> # 设置要登录的主机 IP 地址</span><br><span class="line"> set host 192.168.1.46</span><br><span class="line"> # 设置以什么名字的用户登录</span><br><span class="line"> set name root</span><br><span class="line"> # 设置用户名的登录密码</span><br><span class="line"> set password 123456</span><br><span class="line"></span><br><span class="line"> #spawn 一个 ssh 登录进程</span><br><span class="line"> spawn  ssh $host -l $name</span><br><span class="line"> # 等待响应，第一次登录往往会提示是否永久保存 RSA 到本机的 know hosts 列表中；等到回答后，在提示输出密码；之后就直接提示输入密码</span><br><span class="line"> expect &#123;</span><br><span class="line">    &quot;(yes/no)?&quot; &#123;</span><br><span class="line">        send &quot;yes\n&quot;</span><br><span class="line">        expect &quot;assword:&quot;</span><br><span class="line">        send &quot;$pasword\n&quot;</span><br><span class="line">    &#125;</span><br><span class="line">        &quot;assword:&quot; &#123;</span><br><span class="line">        send &quot;$password\n&quot;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> expect &quot;#&quot;</span><br><span class="line"> # 下面测试是否登录到 $host</span><br><span class="line"> send &quot;uname\n&quot;</span><br><span class="line"> expect &quot;Linux&quot;</span><br><span class="line"> send_user  &quot;Now you can do some operation on this terminal\n&quot;</span><br><span class="line"> # 这里使用了 interact 命令，使执行完程序后，用户可以在 $host 终端进行交互操作。</span><br><span class="line"> Interact</span><br></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><h4 id="巧用-SecureCRT-实现复杂的-ssh-登录过程自动化"><a href="#巧用-SecureCRT-实现复杂的-ssh-登录过程自动化" class="headerlink" title="巧用 SecureCRT 实现复杂的 ssh 登录过程自动化"></a><a href="https://my.oschina.net/leejun2005/blog/593675">巧用 SecureCRT 实现复杂的 ssh 登录过程自动化</a></h4>]]></content>
      
      
      
        <tags>
            
            <tag> shell </tag>
            
            <tag> 脚本 </tag>
            
            <tag> login </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Linux》- shell 关机重启</title>
      <link href="/2021/04/14/devops_skills/linux/%E3%80%8ALinux%E3%80%8B-%20shell%20%E5%85%B3%E6%9C%BA%E9%87%8D%E5%90%AF/"/>
      <url>/2021/04/14/devops_skills/linux/%E3%80%8ALinux%E3%80%8B-%20shell%20%E5%85%B3%E6%9C%BA%E9%87%8D%E5%90%AF/</url>
      
        <content type="html"><![CDATA[<h4 id="poweroff"><a href="#poweroff" class="headerlink" title="poweroff"></a>poweroff</h4><blockquote><p>关闭系统并切断电源。会发送一个 ACPI 信号来通知系统关机</p></blockquote><h4 id="halt"><a href="#halt" class="headerlink" title="halt"></a>halt</h4><blockquote><p>halt:只关闭系统，不切断电源。通知硬件来停止所有的 CPU 功能，但是仍然保持通电。你可以用它使系统处于低层维护状态</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">halt</span><br></pre></td></tr></table></figure><h4 id="shutdown"><a href="#shutdown" class="headerlink" title="shutdown"></a>shutdown</h4><blockquote><p>&#x2F;sbin&#x2F;shutdown 超级用户 , 关闭系统并切断电源。给系统计划一个时间关机。它可以被用于停止、关机、重启机器<br> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#立刻重启</span><br><span class="line">shutdown -r now</span><br><span class="line"></span><br><span class="line">#指定时间重启</span><br><span class="line">shutdown -r 5:30 &amp; </span><br><span class="line"></span><br><span class="line">#指定间隔，10分钟后</span><br><span class="line">shutdown -r +10</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="重启-reboot"><a href="#重启-reboot" class="headerlink" title="重启 - reboot"></a>重启 - reboot</h4><blockquote><p>通知系统重启</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">reboot </span><br><span class="line"></span><br><span class="line">#调用系统的6级别</span><br><span class="line">init 6 </span><br></pre></td></tr></table></figure><h4 id="init"><a href="#init" class="headerlink" title="init"></a>init</h4><blockquote><p>0是关闭系统，1是进入单用户模式，2～5是多用户运行级别，6是重新启动系统</p></blockquote><h4 id="runlevel"><a href="#runlevel" class="headerlink" title="runlevel"></a>runlevel</h4><blockquote><p>输出以前和当前的运行级别</p></blockquote><h4 id="telinit"><a href="#telinit" class="headerlink" title="telinit"></a>telinit</h4><blockquote><p>0是关闭系统，1是进入单用户模式，2～5是多用户运行级别，6是重新启动系统。s或S表示单用户模式 </p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> shell </tag>
            
            <tag> 脚本 </tag>
            
            <tag> shutdown </tag>
            
            <tag> halt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《云原生》- 读云原生模式笔记</title>
      <link href="/2021/04/13/devops_skills/deploy/%E3%80%8A%E4%BA%91%E5%8E%9F%E7%94%9F%E3%80%8B-%20%E8%AF%BB%E4%BA%91%E5%8E%9F%E7%94%9F%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0/"/>
      <url>/2021/04/13/devops_skills/deploy/%E3%80%8A%E4%BA%91%E5%8E%9F%E7%94%9F%E3%80%8B-%20%E8%AF%BB%E4%BA%91%E5%8E%9F%E7%94%9F%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="有了云服务，自己是否就不用管可用性了？"><a href="#有了云服务，自己是否就不用管可用性了？" class="headerlink" title="有了云服务，自己是否就不用管可用性了？"></a>有了云服务，自己是否就不用管可用性了？</h3><blockquote><p>基础设施服务商提供服务保障99.95%可用，但是应用系统的可用性，还是需要自己通过冗余保障的，</p></blockquote><ul><li>频繁发布代码的能力，组件模块化升级，彼此之间低耦合，0停机升级</li><li>适配多终端，动态伸缩以及持续提供服务</li><li>支持更多、数量波动更大的请求</li><li>庞大的分布式数据结构，需要新的存储和处理方法</li></ul><h3 id="云原生-vs-云计算-？"><a href="#云原生-vs-云计算-？" class="headerlink" title="云原生 vs 云计算 ？"></a>云原生 vs 云计算 ？</h3><blockquote><p>基于大数据处理、软件快速迭代需求，诞生 新软件架构风格 - 云原生软件 → 高度分布式和不断变化</p></blockquote><h3 id="如何实现云原生？"><a href="#如何实现云原生？" class="headerlink" title="如何实现云原生？"></a>如何实现云原生？</h3><blockquote><p>迁移到云上并不意味着你的软件就是云原生的，也不会具有云原生软件的价值</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 云 </tag>
            
            <tag> 云原生 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《ts》- ts 高级型问题解答</title>
      <link href="/2021/04/02/front_skills/ts/%E3%80%8Ats%E3%80%8B-%20ts%20%E9%AB%98%E7%BA%A7%E5%9E%8B%E9%97%AE%E9%A2%98%E8%A7%A3%E7%AD%94/"/>
      <url>/2021/04/02/front_skills/ts/%E3%80%8Ats%E3%80%8B-%20ts%20%E9%AB%98%E7%BA%A7%E5%9E%8B%E9%97%AE%E9%A2%98%E8%A7%A3%E7%AD%94/</url>
      
        <content type="html"><![CDATA[<h4 id="既然大家都说ts-类型声明好，为何java-强类型声明-还需要文档呢？"><a href="#既然大家都说ts-类型声明好，为何java-强类型声明-还需要文档呢？" class="headerlink" title="既然大家都说ts 类型声明好，为何java(强类型声明) 还需要文档呢？"></a>既然大家都说ts 类型声明好，为何java(强类型声明) 还需要文档呢？</h4><blockquote></blockquote><h4 id="纵观js，ts历史，js先诞生，ts后诞生，会存在ts定义不了js的情况吗？"><a href="#纵观js，ts历史，js先诞生，ts后诞生，会存在ts定义不了js的情况吗？" class="headerlink" title="纵观js，ts历史，js先诞生，ts后诞生，会存在ts定义不了js的情况吗？"></a>纵观js，ts历史，js先诞生，ts后诞生，会存在ts定义不了js的情况吗？</h4><blockquote></blockquote><h4 id="ts-中console没有定义，为何不报错？"><a href="#ts-中console没有定义，为何不报错？" class="headerlink" title="ts 中console没有定义，为何不报错？"></a>ts 中console没有定义，为何不报错？</h4><blockquote></blockquote><h4 id="ts中定义了类型-规避了隐式类型转换，那么编译通过后，js一定不会报错undefined吗？"><a href="#ts中定义了类型-规避了隐式类型转换，那么编译通过后，js一定不会报错undefined吗？" class="headerlink" title="ts中定义了类型, 规避了隐式类型转换，那么编译通过后，js一定不会报错undefined吗？"></a>ts中定义了类型, 规避了隐式类型转换，那么编译通过后，js一定不会报错undefined吗？</h4><blockquote></blockquote><h4 id="ts中如何比较null-undefined-null是不可用，undefined是未定义，如何选择使用？"><a href="#ts中如何比较null-undefined-null是不可用，undefined是未定义，如何选择使用？" class="headerlink" title="ts中如何比较null, undefined ? null是不可用，undefined是未定义，如何选择使用？"></a>ts中如何比较null, undefined ? null是不可用，undefined是未定义，如何选择使用？</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var ss = null;</span><br><span class="line">ss == null</span><br><span class="line">true</span><br><span class="line">ss == undefined</span><br><span class="line">true</span><br><span class="line">ss === undefined</span><br><span class="line">false</span><br><span class="line">ss === null</span><br><span class="line">true</span><br></pre></td></tr></table></figure><h4 id="为何json中null属性值存在，undefined属性值-stringfy后会被删除？"><a href="#为何json中null属性值存在，undefined属性值-stringfy后会被删除？" class="headerlink" title="为何json中null属性值存在，undefined属性值,stringfy后会被删除？"></a>为何json中null属性值存在，undefined属性值,stringfy后会被删除？</h4><h4 id="为何Number-MIN-VALUE计算得到如此结果？"><a href="#为何Number-MIN-VALUE计算得到如此结果？" class="headerlink" title="为何Number.MIN_VALUE计算得到如此结果？"></a>为何Number.MIN_VALUE计算得到如此结果？</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Number.MIN_VALUE</span><br><span class="line">5e-324</span><br><span class="line">Number.MIN_VALUE / 10</span><br><span class="line">0</span><br><span class="line">Number.MIN_VALUE / 2</span><br><span class="line">0</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> ts </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Mac》- brew下空文件夹、无效link清除</title>
      <link href="/2021/01/22/dev_tool_skills/mac/%E3%80%8AMac%E3%80%8B-%20brew%E4%B8%8B%E7%A9%BA%E6%96%87%E4%BB%B6%E5%A4%B9%E3%80%81%E6%97%A0%E6%95%88link%E6%B8%85%E9%99%A4/"/>
      <url>/2021/01/22/dev_tool_skills/mac/%E3%80%8AMac%E3%80%8B-%20brew%E4%B8%8B%E7%A9%BA%E6%96%87%E4%BB%B6%E5%A4%B9%E3%80%81%E6%97%A0%E6%95%88link%E6%B8%85%E9%99%A4/</url>
      
        <content type="html"><![CDATA[<h4 id="brew-卸载python"><a href="#brew-卸载python" class="headerlink" title="brew 卸载python"></a>brew 卸载python</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">brew uninstall python</span><br><span class="line"></span><br><span class="line">brew uninstall --ignore-dependencies python</span><br></pre></td></tr></table></figure><h4 id="brew查看可清除内容"><a href="#brew查看可清除内容" class="headerlink" title="brew查看可清除内容"></a>brew查看可清除内容</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew cleanup -n</span><br></pre></td></tr></table></figure><h4 id="执行命令删除"><a href="#执行命令删除" class="headerlink" title="执行命令删除"></a>执行命令删除</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">brew cleanup /Users/hu/Library/Caches/Homebrew/c-ares--1.16.1_1.catalina.bottle.tar.gz</span><br><span class="line">brew cleanup /Users/hu/Library/Caches/Homebrew/go--1.15.3.catalina.bottle.tar.gz</span><br><span class="line">brew cleanup /Users/hu/Library/Caches/Homebrew/openssl@1.1--1.1.1h.catalina.bottle.tar.gz</span><br><span class="line">brew cleanup /Users/hu/Library/Caches/Homebrew/python@3.9--3.9.0.catalina.bottle.1.tar.gz</span><br><span class="line">brew cleanup /Users/hu/Library/Caches/Homebrew/zstd--1.4.5.catalina.bottle.tar.gz</span><br><span class="line">brew cleanup /Users/hu/Library/Caches/Homebrew/curl-openssl--7.73.0.catalina.bottle.tar.gz</span><br><span class="line"></span><br><span class="line">brew cleanup /usr/local/Cellar/c-ares/1.16.1_1</span><br><span class="line">brew cleanup /usr/local/Cellar/gdbm/1.18.1</span><br><span class="line">brew cleanup /usr/local/Cellar/gettext/0.20.2_1</span><br><span class="line">brew cleanup /usr/local/Cellar/readline/8.0.4</span><br><span class="line">brew cleanup /usr/local/Cellar/xz/5.2.4</span><br><span class="line">brew cleanup /usr/local/Cellar/zstd/1.4.5</span><br><span class="line">brew cleanup /usr/local/Cellar/openssl@1.1/1.1.1h</span><br><span class="line">brew cleanup /usr/local/Frameworks/Python.framework/Headers</span><br><span class="line">brew cleanup /usr/local/Frameworks/Python.framework/Python</span><br><span class="line">brew cleanup /usr/local/Frameworks/Python.framework/Resources</span><br><span class="line">brew cleanup /usr/local/Frameworks/Python.framework/Versions/3.8</span><br><span class="line">brew cleanup /usr/local/Frameworks/Python.framework/Versions/Current</span><br><span class="line">brew cleanup /usr/local/bin/2to3-3.8</span><br><span class="line"></span><br><span class="line">brew cleanup /usr/local/bin/android</span><br><span class="line">brew cleanup /usr/local/bin/archquery</span><br><span class="line">brew cleanup /usr/local/bin/avdmanager</span><br><span class="line">brew cleanup /usr/local/bin/easy_install-3.8</span><br><span class="line">brew cleanup /usr/local/bin/emulator</span><br><span class="line">brew cleanup /usr/local/bin/emulator-check</span><br><span class="line">brew cleanup /usr/local/bin/idle3.8</span><br><span class="line">brew cleanup /usr/local/bin/jobb</span><br><span class="line">brew cleanup /usr/local/bin/lint</span><br><span class="line">brew cleanup /usr/local/bin/mksdcard</span><br><span class="line">brew cleanup /usr/local/bin/monitor</span><br><span class="line">brew cleanup /usr/local/bin/monkeyrunner</span><br><span class="line">brew cleanup /usr/local/bin/pydoc3.8</span><br><span class="line">brew cleanup /usr/local/bin/python3.8</span><br><span class="line">brew cleanup /usr/local/bin/python3.8-config</span><br><span class="line"></span><br><span class="line">brew cleanup /usr/local/bin/screenshot2</span><br><span class="line">brew cleanup /usr/local/bin/sdkmanager</span><br><span class="line">brew cleanup /usr/local/bin/uiautomatorviewer</span><br><span class="line">brew cleanup /usr/local/bin/wheel3</span><br><span class="line">brew cleanup /usr/local/lib/pkgconfig/python-3.8-embed.pc</span><br><span class="line">brew cleanup /usr/local/lib/pkgconfig/python-3.8.pc</span><br><span class="line">brew cleanup /usr/local/lib/pkgconfig/python3-embed.pc</span><br><span class="line">brew cleanup /usr/local/lib/pkgconfig/python3.pc</span><br><span class="line">brew cleanup /usr/local/opt/python</span><br><span class="line">brew cleanup /usr/local/opt/python@3</span><br><span class="line">brew cleanup /usr/local/share/android-sdk</span><br><span class="line">brew cleanup /usr/local/share/man/man1/python3.1</span><br><span class="line">brew cleanup /usr/local/share/man/man1/python3.8.1</span><br><span class="line">brew cleanup /usr/local/share/flutter/bin/cache/downloads</span><br><span class="line">brew cleanup /usr/local/share/flutter/.pub-cache/_temp</span><br><span class="line">brew cleanup /usr/local/share/flutter/.git/refs/tags</span><br><span class="line">brew cleanup /usr/local/share/flutter/.git/objects/info</span><br><span class="line">brew cleanup /usr/local/etc/openssl@1.1/private</span><br><span class="line">brew cleanup /usr/local/etc/openssl@1.1/certs</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> mac </tag>
            
            <tag> brew </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Angular》- 如何快速为angular文件批量添加spec.ts文件</title>
      <link href="/2021/01/22/front_skills/angular/%E3%80%8AAngular%E3%80%8B-%20%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E4%B8%BAangular%E6%96%87%E4%BB%B6%E6%89%B9%E9%87%8F%E6%B7%BB%E5%8A%A0spec.ts%E6%96%87%E4%BB%B6/"/>
      <url>/2021/01/22/front_skills/angular/%E3%80%8AAngular%E3%80%8B-%20%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E4%B8%BAangular%E6%96%87%E4%BB%B6%E6%89%B9%E9%87%8F%E6%B7%BB%E5%8A%A0spec.ts%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><blockquote><p>在重构代码时候，难免会忘记添加spec.ts测试用例文件，等想起来的时候，已经很多文件了，总不能一个个copy，修改吧，此时正是工具最佳上场时机</p></blockquote><h3 id="angular-spec-generator"><a href="#angular-spec-generator" class="headerlink" title="angular-spec-generator"></a>angular-spec-generator</h3><blockquote><p>通过cli 命令行，为已存在的Angular 文件批量添加测试用例文件</p></blockquote><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g angular-spec-generator</span><br></pre></td></tr></table></figure><h4 id="支持情况，type选填"><a href="#支持情况，type选填" class="headerlink" title="支持情况，type选填"></a>支持情况，type选填</h4><table><thead><tr><th>type</th><th>alias</th></tr></thead><tbody><tr><td>guard</td><td>g or guard</td></tr><tr><td>component</td><td>c or component</td></tr><tr><td>service</td><td>s or service</td></tr><tr><td>directive</td><td>d or directive</td></tr><tr><td>pipe</td><td>p or pipe</td></tr></tbody></table><h4 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h4><blockquote><p>–force ，覆盖已存在的spec文件，添加测试用例会自动根据文件识别</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">angular-spec-generator &#x27;path to component directory&#x27; </span><br></pre></td></tr></table></figure><h3 id="重量级vscode-plugin-SimonTest"><a href="#重量级vscode-plugin-SimonTest" class="headerlink" title="重量级vscode plugin - SimonTest"></a>重量级vscode plugin - SimonTest</h3><blockquote><p><a href="https://marketplace.visualstudio.com/items?itemName=SimonTest.simontest">SimonTest</a>自动根据文件生成对应的测试用例code,只需要人工核对是否正确即可，大大节省人力成本</p></blockquote><h4 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h4><blockquote><p>点击上述链接，vscode安装即可</p></blockquote><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><blockquote><p>安装完毕，直接右键点击即可</p></blockquote><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><ul><li>组件需要有Component,Directive等注释 </li><li>不一定能百分百把测试用例全部自动生成</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> angular </tag>
            
            <tag> spec.ts </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Linux》 - shell下mp4文件集中归档</title>
      <link href="/2021/01/12/devops_skills/linux/%E3%80%8ALinux%E3%80%8B%20-%20shell%E4%B8%8Bmp4%E6%96%87%E4%BB%B6%E9%9B%86%E4%B8%AD%E5%BD%92%E6%A1%A3/"/>
      <url>/2021/01/12/devops_skills/linux/%E3%80%8ALinux%E3%80%8B%20-%20shell%E4%B8%8Bmp4%E6%96%87%E4%BB%B6%E9%9B%86%E4%B8%AD%E5%BD%92%E6%A1%A3/</url>
      
        <content type="html"><![CDATA[<h3 id="背景："><a href="#背景：" class="headerlink" title="背景："></a>背景：</h3><blockquote><p>qq空间视频上传，支持500个视频上传，不过监控视频是分文件夹存储的。故利用shell把文件集中下，然后批量上传。</p></blockquote><h3 id="code"><a href="#code" class="headerlink" title="code"></a>code</h3> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">filelist=`ls /Users/hu/video/2020`</span><br><span class="line">for file in $filelist</span><br><span class="line">do </span><br><span class="line"> echo pwd</span><br><span class="line"> subList=`ls /Users/hu/video/2020/$file`</span><br><span class="line"> for subFile in $subList</span><br><span class="line"> do</span><br><span class="line">  if [[ $subFile == *.mp4 ]];then </span><br><span class="line">   mv &quot;/Users/hu/video/2020/$file/$subFile&quot; /Users/hu/video/finalVideo  </span><br><span class="line">  fi</span><br><span class="line"> done</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h4 id="文件夹下文件列表"><a href="#文件夹下文件列表" class="headerlink" title="文件夹下文件列表"></a>文件夹下文件列表</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">filelist=`ls /Users/hu/video/2020`</span><br></pre></td></tr></table></figure><h4 id="循环文件列表"><a href="#循环文件列表" class="headerlink" title="循环文件列表"></a>循环文件列表</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">for file in $filelist</span><br></pre></td></tr></table></figure><h4 id="正则判定mp4，必须"><a href="#正则判定mp4，必须" class="headerlink" title="正则判定mp4，必须[[]]"></a>正则判定mp4，必须[[]]</h4><blockquote><p>[]仅支持字符串比较</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if [[ $subFile == *.mp4 ]];then </span><br></pre></td></tr></table></figure><h4 id="文件移动，需要””-非"><a href="#文件移动，需要””-非" class="headerlink" title="文件移动，需要””,非&#96;&#96;"></a>文件移动，需要””,非&#96;&#96;</h4><blockquote><p>使用&#96;&#96;，会出现 cannot execute binary file 异常</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv &quot;/Users/hu/video/2020/$file/$subFile&quot; /Users/hu/video/finalVideo  </span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> shell </tag>
            
            <tag> 脚本 </tag>
            
            <tag> mp4 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Mac》- mac下移动硬盘写入不了</title>
      <link href="/2021/01/12/dev_tool_skills/mac/%E3%80%8AMac%E3%80%8B-%20mac%E4%B8%8B%E7%A7%BB%E5%8A%A8%E7%A1%AC%E7%9B%98%E5%86%99%E5%85%A5%E4%B8%8D%E4%BA%86/"/>
      <url>/2021/01/12/dev_tool_skills/mac/%E3%80%8AMac%E3%80%8B-%20mac%E4%B8%8B%E7%A7%BB%E5%8A%A8%E7%A1%AC%E7%9B%98%E5%86%99%E5%85%A5%E4%B8%8D%E4%BA%86/</url>
      
        <content type="html"><![CDATA[<p>mac系统天生支持NTFS，只不过挂载方式是read-only方式，需要手动把分区改成可写方式</p><h4 id="插入移动硬盘，查看挂载方式"><a href="#插入移动硬盘，查看挂载方式" class="headerlink" title="插入移动硬盘，查看挂载方式"></a>插入移动硬盘，查看挂载方式</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ mount | grep ntfs</span><br><span class="line">/dev/disk2s1 on /Volumes/Untitled (ntfs, local, nodev, nosuid, read-only, noowners)</span><br><span class="line">/dev/disk2s2 on /Volumes/Untitled 1 (ntfs, local, nodev, nosuid, read-only, noowners)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="手动卸载硬盘"><a href="#手动卸载硬盘" class="headerlink" title="手动卸载硬盘"></a>手动卸载硬盘</h4><blockquote><p>mac系统天生支持NTFS，只不过挂载方式是read-only方式，所以需要手动卸载一下。此处有两个分区：&#x2F;dev&#x2F;disk2s1、&#x2F;dev&#x2F;disk2s2，需要sudo权限。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo umount /dev/disk2s1</span><br><span class="line">$ sudo umount /dev/disk2s2</span><br></pre></td></tr></table></figure><h4 id="重新挂载分区"><a href="#重新挂载分区" class="headerlink" title="重新挂载分区"></a>重新挂载分区</h4><blockquote><p>挂载成功，桌面会出现对应的快捷方式</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir ~/Desktop/md1 ~/Desktop/md2</span><br><span class="line">$ sudo mount_ntfs -o rw,nobrowse /dev/disk2s1 ~/Desktop/md1</span><br><span class="line">$ sudo mount_ntfs -o rw,nobrowse /dev/disk2s2 ~/Desktop/md2</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Flutter》- flutter环境搭建</title>
      <link href="/2020/12/27/app_develop_skills/%E3%80%8AFlutter%E3%80%8B-%20flutter%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
      <url>/2020/12/27/app_develop_skills/%E3%80%8AFlutter%E3%80%8B-%20flutter%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h4 id="git-代码"><a href="#git-代码" class="headerlink" title="git 代码"></a>git 代码</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https://github.com/flutter/flutter.git -b stable</span><br></pre></td></tr></table></figure><h4 id="git-Doc"><a href="#git-Doc" class="headerlink" title="git Doc"></a>git Doc</h4><blockquote><p><a href="https://github.com/flutter/flutter/wiki/Using-Flutter-in-China">https://github.com/flutter/flutter/wiki/Using-Flutter-in-China </a></p></blockquote><h4 id="flutter-SDK"><a href="#flutter-SDK" class="headerlink" title="flutter SDK"></a>flutter SDK</h4><blockquote><p>git 下载地址:<br><a href="https://github.com/flutter/flutter/releases">https://github.com/flutter/flutter/releases</a></p></blockquote><h4 id="配置加速"><a href="#配置加速" class="headerlink" title="配置加速"></a>配置加速</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export PUB_HOSTED_URL=https://pub.flutter-io.cn //国内用户需要设置</span><br><span class="line">export FLUTTER_STORAGE_BASE_URL=https://storage.flutter-io.cn //国内用户需要设置</span><br></pre></td></tr></table></figure><h4 id="配置path"><a href="#配置path" class="headerlink" title="配置path"></a>配置path</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 仅仅当前window有效</span><br><span class="line">export PATH=&lt;path&gt;flutter/bin:$PATH </span><br><span class="line"></span><br><span class="line"># 长久有效,配置 $HOME/.bash_profile or $HOME/.bashrc</span><br><span class="line">192:~ hu$ flutter --version</span><br><span class="line">Flutter 1.12.13+hotfix.8 • channel stable •</span><br><span class="line">https://github.com/flutter/flutter.git</span><br><span class="line">Framework • revision 0b8abb4724 (6 weeks ago) • 2020-02-11 11:44:36 -0800</span><br><span class="line">Engine • revision e1e6ced81d</span><br><span class="line">Tools • Dart 2.7.0</span><br></pre></td></tr></table></figure><h4 id="检查"><a href="#检查" class="headerlink" title="检查"></a>检查</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ flutter doctor</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2020/03/24/8bwjeJ.md.png"></p><h4 id="xcode"><a href="#xcode" class="headerlink" title="xcode"></a>xcode</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ sudo xcode-select --switch /Applications/Xcode.app/Contents/Developer</span><br><span class="line">$ sudo xcodebuild -runFirstLaunch</span><br><span class="line">$ sudo xcodebuild -license </span><br><span class="line">....</span><br><span class="line">you can view the license agreements in Xcode&#x27;s About Box, or at /Applications/Xcode.app/Contents/Resources/English.lproj/License.rtf</span><br></pre></td></tr></table></figure><h4 id="模拟器"><a href="#模拟器" class="headerlink" title="模拟器"></a>模拟器</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ open -a Simulator</span><br></pre></td></tr></table></figure><p> <img src="https://s1.ax1x.com/2020/03/24/8brInU.md.png" width="180" height="330"></img></p><h4 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ flutter create my_app</span><br><span class="line">$ flutter pub get </span><br><span class="line">$ flutter run </span><br></pre></td></tr></table></figure><p> <img src="https://s1.ax1x.com/2020/03/24/8bs6KK.md.png" width="500" height="400"></img></p><h4 id="deploy-to-ios"><a href="#deploy-to-ios" class="headerlink" title="deploy to ios"></a>deploy to ios</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ sudo gem install cocoapods</span><br><span class="line"></span><br><span class="line">#打开xcode</span><br><span class="line">open ios/Runner.xcworkspace</span><br><span class="line"></span><br><span class="line">$ pod setup</span><br></pre></td></tr></table></figure><h4 id="查看模拟器列表"><a href="#查看模拟器列表" class="headerlink" title="查看模拟器列表"></a>查看模拟器列表</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">npm install ios-sim -g</span><br><span class="line"></span><br><span class="line"># 查看列表</span><br><span class="line">xcrun simctl list</span><br><span class="line"></span><br><span class="line">#关闭所有模拟器</span><br><span class="line">xcrun simctl shutdown all</span><br><span class="line"></span><br><span class="line">#启动特定模拟器</span><br><span class="line">xcrun simctl boot xuuid</span><br><span class="line"></span><br><span class="line">xcrun xctrace -l </span><br></pre></td></tr></table></figure><h3 id="如何选择Flutter-vs-Nativescript"><a href="#如何选择Flutter-vs-Nativescript" class="headerlink" title="如何选择Flutter vs Nativescript "></a><a href="https://www.simform.com/flutter-vs-nativescript/#performance">如何选择Flutter vs Nativescript </a></h3><blockquote><p>如果要执行以下操作，请选择Flutter： </p></blockquote><ul><li>开发具有前端和后端功能的单个代码。 </li><li>创造强大的物质主义和流畅的设计体验。 </li><li>使用实时数据库和现代云服务构建本机应用。 </li><li>使用反应性小部件和按需移动功能构建MVP。 </li><li>提供未来的UI更新和升级到可与Jellybean OS和iOS 8一起使用的平台。 </li><li>通过集成代码魔术来支持持续集成（CI），确保无缝开发过程。</li></ul><blockquote><p>如果要执行以下操作，请选择NativeScript： </p></blockquote><ul><li>利用您现有的开发团队的Angular，TypeScript或Vue技能来构建本机应用程序。 </li><li>以指数方式重用Android SDK和CocoaPods来创建可扩展的本机应用程序。 </li><li>从开发人员那里获得强大的社区支持，他们还支持NativeScript for NASDAQ。 </li><li>在Android和iOS平台之间共享单个代码库，以将应用程序扩展到Web平台。</li><li>借助MVP之类的功能并以更快的开发速度构建企业级移动应用程序。 </li><li>将Angular或基于Vue的Web应用程序过渡到移动平台。</li></ul><h4 id="extension"><a href="#extension" class="headerlink" title="extension"></a><a href="https://flutter.dev/docs/development/tools/devtools/vscode">extension</a></h4><p> <a href="https://marketplace.visualstudio.com/items?itemName=Dart-Code.dart-code">Dart</a><br> <a href="https://marketplace.visualstudio.com/items?itemName=Dart-Code.flutter">Flutter</a></p><h4 id="debug"><a href="#debug" class="headerlink" title="debug"></a>debug</h4><p> <a href="https://flutter.dev/docs/development/tools/devtools">devTool</a></p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p> <a href="https://flutter.dev/docs/get-started/install/macos#update-your-path">flutter</a><br> <a href="https://segmentfault.com/a/1190000019770176">flutter配置</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> flutter </tag>
            
            <tag> App </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《DNS》- DNS污染HomeBrew失败</title>
      <link href="/2020/12/25/app_develop_skills/%E3%80%8ADNS%E3%80%8B-%20DNS%E6%B1%A1%E6%9F%93HomeBrew%E5%A4%B1%E8%B4%A5/"/>
      <url>/2020/12/25/app_develop_skills/%E3%80%8ADNS%E3%80%8B-%20DNS%E6%B1%A1%E6%9F%93HomeBrew%E5%A4%B1%E8%B4%A5/</url>
      
        <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Installing Homebrew...</span><br><span class="line">curl: (7) Failed to connect to raw.githubusercontent.com port 443: Connection refused</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://zhuanlan.zhihu.com/p/101908711">DNS污染</a><br>Dns 解析ip失败</p></blockquote><h4 id="怎么验证是否遭遇DNS污染？"><a href="#怎么验证是否遭遇DNS污染？" class="headerlink" title="怎么验证是否遭遇DNS污染？"></a>怎么验证是否遭遇DNS污染？</h4><p>1.点“开始”-“运行”-输入CMD，再输入 ipconfig &#x2F;all ，在下“DNS SERVER”里找到你使用的DNS服务器地址。</p><p>2.再输入 nslookup <a href="http://idcbest.com(你的域名)/">http://idcbest.com（你的域名）</a> 你的DNS服务器IP ，来查看是否能解析。</p><p>3.再输入 nslookup <a href="http://idcbest.com/">http://idcbest.com</a> 8.8.8.8 使用Google的DNS服务器验证。</p><h4 id="域名遭遇DNS污染怎么解决？"><a href="#域名遭遇DNS污染怎么解决？" class="headerlink" title="域名遭遇DNS污染怎么解决？"></a>域名遭遇DNS污染怎么解决？</h4><p>1.更换DNS解析服务器。一般来说，域名注册商家都是提供免费的DNS解析服务的，以我所实用的新之洲数据为例，就提供了许多免费的DNS解析服务，而且解析速度很快，比之前实用的什么万网之流要快得多，不可能全部被污染，所以更换两个DNS服务器即可。</p><p>2.使用第三方DNS解析服务。目前有很多第三方网站提供DNS解析服务，不少都是免费的，国内也有免费提供DNS解析服务的，使用第三方DNS服务可以部分解决问题，比如新之洲数据正在使用的DNSpod服务，就是国内还算比较稳定的DNS解析服务。</p><p>注意事项一：在换用第三方解析服务的时候，应该先到DNSPOD之类的解析服务商那里将域名解析，过几个小时再到新之洲数据之类的域名注册商那里去修改DNS服务器，这样可以避免博客出现因解析时间造成的空白期。</p><p>注意事项二：Godaddy目前本身域名就被DNS污染了，即使挂VPN也访问不了，只有更改自己电脑的DNS（比如改成google的8.8.8.8）才能访问。</p><p>3.搭建自己的DNS服务器。这样子最保险，当然也最是费时废财，有条件的朋友可以尝试。</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><blockquote><p><a href="https://www.ipaddress.com/">https://www.ipaddress.com/</a> 查看ip</p></blockquote><h4 id="配置host"><a href="#配置host" class="headerlink" title="配置host"></a>配置host</h4><blockquote><p>在本机的 host 文件中添加，建议使用 <a href="https://github.com/oldj/SwitchHosts/releases">switchhosts</a> 方便 host 管理</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">199.232.68.133 raw.githubusercontent.com</span><br><span class="line">199.232.68.133 user-images.githubusercontent.com</span><br><span class="line">199.232.68.133 avatars2.githubusercontent.com</span><br><span class="line">199.232.68.133 avatars1.githubusercontent.com</span><br></pre></td></tr></table></figure><p>添加以上几条 host 配置，页面的图片展示就正常了，homebrew 也能装了，nvm 也行动灵活了。</p><h3 id="HomeBrew"><a href="#HomeBrew" class="headerlink" title="HomeBrew"></a>HomeBrew</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 安装 </span><br><span class="line">/bin/bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&quot;</span><br><span class="line"></span><br><span class="line"># 卸载</span><br><span class="line">/bin/bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/uninstall.sh)&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="shallow-Clone"><a href="#shallow-Clone" class="headerlink" title="shallow Clone"></a>shallow Clone</h4><blockquote><p>clone 仅仅拉取最新的commits，</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git -C /usr/local/Homebrew/Library/Taps/homebrew/homebrew-core fetch --unshallow</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git clone -–depth [depth] [remote-url]</span><br><span class="line"></span><br><span class="line">git clone [remote-url] --branch [name] --single-branch [folder]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="ssl问题"><a href="#ssl问题" class="headerlink" title="ssl问题"></a>ssl问题</h4><blockquote><p>解决方案</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#latest</span><br><span class="line">brew install curl-openssl</span><br><span class="line"></span><br><span class="line">#older</span><br><span class="line">brew reinstall curl --with-openssl</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">If you need to have python@3.9 first in your PATH run:</span><br><span class="line">  echo &#x27;export PATH=&quot;/usr/local/opt/python@3.9/bin:$PATH&quot;&#x27; &gt;&gt; ~/.zshrc</span><br><span class="line"></span><br><span class="line">For compilers to find python@3.9 you may need to set:</span><br><span class="line">  export LDFLAGS=&quot;-L/usr/local/opt/python@3.9/lib&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="mac-cli展示颜色"><a href="#mac-cli展示颜色" class="headerlink" title="mac cli展示颜色"></a>mac cli展示颜色</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.bash_profile</span><br><span class="line"></span><br><span class="line">export CLICOLOR=1</span><br><span class="line">export LSCOLORS=ExGxFxdaCxDaDahbadeche</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><h4 id="raw-githubusercontent-com"><a href="#raw-githubusercontent-com" class="headerlink" title="raw.githubusercontent.com"></a><a href="https://github.com/hawtim/blog/issues/10">raw.githubusercontent.com</a></h4>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> DNS污染 </tag>
            
            <tag> HomeBrew </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《NativeScript》- nativescript入门</title>
      <link href="/2020/12/25/app_develop_skills/%E3%80%8ANativeScript%E3%80%8B-%20nativescript%E5%85%A5%E9%97%A8/"/>
      <url>/2020/12/25/app_develop_skills/%E3%80%8ANativeScript%E3%80%8B-%20nativescript%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="快速入门Hello-world"><a href="#快速入门Hello-world" class="headerlink" title="快速入门Hello-world"></a>快速入门Hello-world</h3><blockquote><p>本文基于mac系统，采用HomeBrew安装</p></blockquote><h4 id="node-安装"><a href="#node-安装" class="headerlink" title="node 安装"></a>node 安装</h4><h4 id="nativescript-安装"><a href="#nativescript-安装" class="headerlink" title="nativescript 安装"></a>nativescript 安装</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -g nativescript  </span><br></pre></td></tr></table></figure><blockquote><p>校验版本安装(Telerik NativeScript)</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; tns</span><br></pre></td></tr></table></figure><h4 id="安装-NativeScript-Playground-到手机"><a href="#安装-NativeScript-Playground-到手机" class="headerlink" title="安装 NativeScript Playground 到手机"></a>安装 NativeScript Playground 到手机</h4><blockquote><p>app-store  or google play下载即可</p></blockquote><h4 id="项目创建"><a href="#项目创建" class="headerlink" title="项目创建"></a>项目创建</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; tns create HelloWorld --template tns-template-blank-ng</span><br></pre></td></tr></table></figure><h4 id="项目预览"><a href="#项目预览" class="headerlink" title="项目预览"></a>项目预览</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; cd HelloWorld</span><br><span class="line">&gt; tns preview </span><br></pre></td></tr></table></figure><h3 id="本地开发build"><a href="#本地开发build" class="headerlink" title="本地开发build"></a>本地开发build</h3><h4 id="For-iOS-development"><a href="#For-iOS-development" class="headerlink" title="For iOS development"></a>For iOS development</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Latest Xcode</span><br><span class="line">Command-line tools for Xcode</span><br><span class="line">xcodeproj ruby gem</span><br><span class="line">CocoaPods</span><br><span class="line">The six python package</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="For-Android-development"><a href="#For-Android-development" class="headerlink" title="For Android development"></a>For Android development</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">JDK 8 or later</span><br><span class="line">Latest official release of Android SDK</span><br><span class="line">Android Support Repository</span><br><span class="line">(Optional) Google Repository</span><br><span class="line">Android SDK Build-tools 28.0.3 or later</span><br></pre></td></tr></table></figure><h4 id="安装Xcode"><a href="#安装Xcode" class="headerlink" title="安装Xcode"></a><a href="https://docs.nativescript.org/angular/start/ns-setup-os-x">安装Xcode</a></h4><blockquote><p>APP-Store中可下载</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xcodebuild -version</span><br></pre></td></tr></table></figure><blockquote><p>mac系统一键安装依赖</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ruby -e &quot;$(curl -fsSL https://www.nativescript.org/setup/mac)&quot;</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/KI1tjXT.png"></p><blockquote><p>检测依赖是否安装完毕, No issues were detected 表示已安装完毕，关键在于前几步骤</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; tns doctor</span><br></pre></td></tr></table></figure><p><img src="/images/no-issue.png"></p><h4 id="Java"><a href="#Java" class="headerlink" title="Java"></a><a href="https://github.com/AdoptOpenJDK/homebrew-openjdk">Java</a></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">brew tap homebrew/cask-versions</span><br><span class="line">brew update</span><br><span class="line">brew tap homebrew/cask</span><br><span class="line"></span><br><span class="line">#更新库</span><br><span class="line">brew tap AdoptOpenJDK/openjdk</span><br><span class="line">#下载最新的</span><br><span class="line">brew install --cask adoptopenjdk</span><br><span class="line">brew install --cask adoptopenjdk8</span><br><span class="line">export JAVA_HOME=$(/usr/libexec/java_home -v 1.8)</span><br></pre></td></tr></table></figure><h4 id="SDK配置"><a href="#SDK配置" class="headerlink" title="SDK配置"></a>SDK配置</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#安装sdk</span><br><span class="line">brew tap caskroom/cask</span><br><span class="line">brew reinstall android-sdk</span><br><span class="line">brew install --cask android-sdk</span><br><span class="line">export ANDROID_HOME=/usr/local/share/android-sdk</span><br><span class="line">brew install --cask android-platform-tools</span><br></pre></td></tr></table></figure><p><img src="/images/repos.png"></p><blockquote><p>sdk 安装成功后，路径<br><img src="/images/android-sdk.png"></p></blockquote><h4 id="多库问题"><a href="#多库问题" class="headerlink" title="多库问题"></a>多库问题</h4><blockquote><p>Cask adoptopenjdk8 exists in multiple taps:<br>  homebrew&#x2F;cask-versions&#x2F;adoptopenjdk8<br>  adoptopenjdk&#x2F;openjdk&#x2F;adoptopenjdk8</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm /usr/local/Homebrew/Library/Taps/homebrew/homebrew-cask-versions/Casks/adoptopenjdk8.rb</span><br></pre></td></tr></table></figure><h4 id="Java-版本切换配置"><a href="#Java-版本切换配置" class="headerlink" title="Java 版本切换配置"></a>Java 版本切换配置</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Add the below function in your ~/.bashrc or ~/.zshrc</span><br><span class="line">jdk() &#123;</span><br><span class="line">        version=$1</span><br><span class="line">        export JAVA_HOME=$(/usr/libexec/java_home -v&quot;$version&quot;);</span><br><span class="line">        java -version</span><br><span class="line"> &#125;</span><br><span class="line">For Fish shell user, add the below function in your ~/.config/fish/functions</span><br><span class="line"></span><br><span class="line">function jdk</span><br><span class="line">set java_version $argv</span><br><span class="line">set -Ux JAVA_HOME (/usr/libexec/java_home -v $java_version)</span><br><span class="line">java -version</span><br><span class="line">end</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="iOS-8-Drop-at-Xcode-12"><a href="#iOS-8-Drop-at-Xcode-12" class="headerlink" title="iOS 8  Drop at Xcode 12"></a><a href="https://www.jessesquires.com/blog/2020/07/20/xcode-12-drops-support-for-ios-8-fix-for-cocoapods/">iOS 8  Drop at Xcode 12</a></h4><blockquote><p>iOS Simulator deployment target ‘IPHONEOS_DEPLOYMENT_TARGET’ is set to 8.0</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">post_install do |installer|</span><br><span class="line">  installer.pods_project.targets.each do |target|</span><br><span class="line">    target.build_configurations.each do |config|</span><br><span class="line">      config.build_settings.delete &#x27;IPHONEOS_DEPLOYMENT_TARGET&#x27;</span><br><span class="line">    end</span><br><span class="line">  end</span><br><span class="line">end</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Python版本"><a href="#Python版本" class="headerlink" title="Python版本"></a>Python版本</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">brew install pyenv</span><br><span class="line"></span><br><span class="line">pyenv install 3.7.3</span><br><span class="line"></span><br><span class="line">pyenv global 3.7.3</span><br><span class="line"></span><br><span class="line">echo -e &#x27;if command -v pyenv 1&gt;/dev/null 2&gt;&amp;1; then\n  eval &quot;$(pyenv init -)&quot;</span><br><span class="line"></span><br><span class="line">echo &quot;alias python=/usr/local/bin/python3.7&quot; &gt;&gt; ~/.bashrc</span><br><span class="line">brew list | grep python</span><br><span class="line">brew info python</span><br><span class="line"></span><br><span class="line">If you need to have python@3.8 first in your PATH run:</span><br><span class="line">  echo &#x27;export PATH=&quot;/usr/local/opt/python@3.8/bin:$PATH&quot;&#x27; &gt;&gt; ~/.zshrc</span><br><span class="line"></span><br><span class="line">For compilers to find python@3.8 you may need to set:</span><br><span class="line">  export LDFLAGS=&quot;-L/usr/local/opt/python@3.8/lib&quot;</span><br><span class="line"></span><br><span class="line">For pkg-config to find python@3.8 you may need to set:</span><br><span class="line">  export PKG_CONFIG_PATH=&quot;/usr/local/opt/python@3.8/lib/pkgconfig&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> App </tag>
            
            <tag> NativeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《npm》- npm常用命令详解</title>
      <link href="/2020/12/16/dev_tool_skills/npm/%E3%80%8Anpm%E3%80%8B-%20npm%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/"/>
      <url>/2020/12/16/dev_tool_skills/npm/%E3%80%8Anpm%E3%80%8B-%20npm%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h3 id="npm-常用命令列表"><a href="#npm-常用命令列表" class="headerlink" title="npm 常用命令列表"></a>npm 常用命令列表</h3><h3 id="npm-升级依赖包"><a href="#npm-升级依赖包" class="headerlink" title="npm 升级依赖包"></a>npm 升级依赖包</h3><blockquote><p>取决于npm版本，2.6.1以上可以</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g </span><br></pre></td></tr></table></figure><blockquote><p>2.6.1以下，可以通过npm-check，回车键进行选择升级</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">npm install -g npm-check</span><br><span class="line"></span><br><span class="line">#本地check </span><br><span class="line">npm-check -u</span><br><span class="line"></span><br><span class="line">#全局check</span><br><span class="line">#npm-check-u -g</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/fyKgNLa.png"></p><h3 id="scripts参数传递"><a href="#scripts参数传递" class="headerlink" title="scripts参数传递"></a>scripts参数传递</h3><h3 id="hexo-定制post创建"><a href="#hexo-定制post创建" class="headerlink" title="hexo 定制post创建"></a>hexo 定制post创建</h3><h3 id="npm-ci"><a href="#npm-ci" class="headerlink" title="npm ci"></a>npm ci</h3>]]></content>
      
      
      
        <tags>
            
            <tag> npm </tag>
            
            <tag> scripts </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《devTool》- code format&amp;lint插件与Git Hooks组合拳</title>
      <link href="/2020/12/16/dev_tool_skills/vscode/%E3%80%8AdevTool%E3%80%8B-%20Vscode%20format&amp;lint%E6%8F%92%E4%BB%B6%E4%B8%8EGit%20Hooks%E7%BB%84%E5%90%88%E6%8B%B3/"/>
      <url>/2020/12/16/dev_tool_skills/vscode/%E3%80%8AdevTool%E3%80%8B-%20Vscode%20format&amp;lint%E6%8F%92%E4%BB%B6%E4%B8%8EGit%20Hooks%E7%BB%84%E5%90%88%E6%8B%B3/</url>
      
        <content type="html"><![CDATA[<h3 id="vscode-Prettier-vs-Linter"><a href="#vscode-Prettier-vs-Linter" class="headerlink" title="vscode Prettier vs Linter"></a>vscode Prettier vs Linter</h3><h4 id="Prettier"><a href="#Prettier" class="headerlink" title="Prettier"></a><a href="https://prettier.io/docs/en/index.html">Prettier</a></h4><blockquote><p>code格式化插件，支持以下语言：</p></blockquote><ul><li>JavaScript (including experimental features)</li><li>JSX</li><li>Angular</li><li>Vue</li><li>Flow</li><li>TypeScript</li><li>CSS, Less, and SCSS</li><li>HTML</li><li>JSON</li><li>GraphQL</li><li>Markdown, including GFM and MDX</li><li>YAML</li></ul><h4 id="Linter"><a href="#Linter" class="headerlink" title="Linter"></a>Linter</h4><blockquote><p>检查code是否符合规范、是否存在潜在的bug</p></blockquote><blockquote><p>两者如何选择呢？引用官网的一段话：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Prettier for formatting and linters for catching bugs!</span><br></pre></td></tr></table></figure><h3 id="Git-Hooks"><a href="#Git-Hooks" class="headerlink" title="Git Hooks"></a><a href="https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks">Git Hooks</a></h3><blockquote><p>用于在Git特定的动作发生时，触发特定的脚本,譬如shell脚本、python脚本、Ruby脚本等。只管添加即可，不用管调用问题。</p></blockquote><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><blockquote><p>hooks分客户端和服务端两大类。<br>client：</p></blockquote><ul><li>git hooks code存放在.git&#x2F;hooks文件夹中</li><li>其中存放的都是一些示例脚本,以sample后缀。删除后缀后，即可激活。<br>server端，可以利用发送一些通知、构建等</li></ul><h4 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h4><blockquote><p>client</p></blockquote><ul><li><p>提交工作流 Hooks</p></li><li><p>pre-commit - 提交文件到暂存区触发，可用于code lint校验等</p></li><li><p>prepare-commit-msg - pre-commit之后，产生一些默认提交信息</p></li><li><p>commit-msg - 提交注释信息时候，可以用正则检测是否符合特定模板要求，譬如以feat|test等开头</p></li><li><p>post-commit - 提交完毕，可用于通知</p></li><li><p>邮件工作流 Hooks</p><ul><li>applypatch-msg - 检查提交信息是否符合格式，或者用于脚本修正格式错误</li><li>pre-applypatch -  用于检测暂存区是否还有遗漏</li><li>post-applypatch - 可用于通知</li></ul></li><li><p>其他 Hooks</p></li><li><p>pre-rebase - 运行于变基之前</p></li><li><p>post-rewrite - 重写命令调用后</p></li><li><p>post-checkout - checkout发生后触发</p></li><li><p>post-merge - merge后</p></li><li><p>pre-push - push之前触发</p></li></ul><blockquote><p>server</p></blockquote><ul><li>pre-receive - 最新调用，同时向多个分支推送，仅触发一次</li><li>update - 同时向多个分支推送，每个分支触发一次，</li><li>post-receive - 可用于通知</li></ul><h3 id="如何组合"><a href="#如何组合" class="headerlink" title="如何组合"></a>如何组合</h3><h4 id="pre-commit"><a href="#pre-commit" class="headerlink" title="pre-commit"></a>pre-commit</h4><ul><li><p>把lint、prettier命令，写入到shell脚本</p></li><li><p>然后对应的脚本放入.git&#x2F;hooks下</p></li></ul><h4 id="post-receive"><a href="#post-receive" class="headerlink" title="post-receive"></a>post-receive</h4><blockquote><p>用于触发自动构建</p></blockquote><h3 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h3><h4 id="vscode打开git工程，可是-git目录不展示，如何fix"><a href="#vscode打开git工程，可是-git目录不展示，如何fix" class="headerlink" title="vscode打开git工程，可是.git目录不展示，如何fix ?"></a>vscode打开git工程，可是.git目录不展示，如何fix ?</h4><blockquote><p>vscode 默认通过正则不展示.git, .svn等文件夹，可通过修改正则展示</p></blockquote><p> <img src="https://i.imgur.com/OmSilgf.png"></p><h3 id="存在问题"><a href="#存在问题" class="headerlink" title="存在问题"></a>存在问题</h3><blockquote><p>但是hooks不会跟随项目fork走，</p></blockquote><h4 id="如何解决"><a href="#如何解决" class="headerlink" title="如何解决"></a>如何解决</h4><blockquote><p>本文主要介绍方案二，原理大致相同</p></blockquote><ul><li>方案一： 另外新建项目.hooksDir用于管理,建立软连接  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd &lt;repo&gt;/.git/hooks</span><br><span class="line">ln -s ../../.githooks ./ </span><br></pre></td></tr></table></figure></li><li>方案二： 使用npm包git-hooks-plus</li><li>方案三： 使用已有方案<a href="https://github.com/typicode/husky">husky</a></li><li>方案四： 使用<a href="https://github.com/xsbailong/imlint">imlint</a></li></ul><h3 id="解决方案实践"><a href="#解决方案实践" class="headerlink" title="解决方案实践"></a>解决方案实践</h3><h4 id="git-hooks-plus"><a href="#git-hooks-plus" class="headerlink" title="git-hooks-plus"></a><a href="https://www.npmjs.com/package/git-hooks-plus">git-hooks-plus</a></h4><blockquote><p>npm包安装</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install git-hooks-plus --save-dev</span><br></pre></td></tr></table></figure><blockquote><p>code添加</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p .githooks/pre-commit</span><br><span class="line">echo -e &#x27;#!/usr/bin/env node&#x27; &quot;\nconsole.log(&#x27;hi!&#x27;);&quot; &gt; .githooks/pre-commit/hello.js</span><br><span class="line">chmod +x .githooks/pre-commit/hello.js  # This may not working in Windows, but don&#x27;t worry, hello.js will be executed</span><br></pre></td></tr></table></figure><blockquote><p>shell脚本 添加</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">echo &#x27;hello world run by pre-commit sh&#x27;</span><br></pre></td></tr></table></figure><blockquote><p>运行效果</p></blockquote><p><img src="https://i.imgur.com/IliFjq0.png"></p><blockquote><p>如何实现的呢？</p></blockquote><ul><li>修改.git&#x2F;hooks文件夹，重新创建一份</li><li>git commit事件触发前，调用.git&#x2F;hooks下pre-commit </li><li>调用对应的git-hooks-plus js run 方法<br> <img src="https://i.imgur.com/ljw8dv6.png"></li><li>git-hooks-plus 会依据hookName, 查找对应pre-commit目录中的可执行的js or sh文件，然后执行<br> <img src="https://i.imgur.com/uEapAVF.png"></li><li>执行，使用了node 异步子进程spawn方法<br> <img src="https://i.imgur.com/SUGinou.png"><blockquote><p>options.stdio 选项用于配置在父进程和子进程之间建立的管道。 默认情况下，子进程的 stdin、 stdout 和 stderr 会被重定向到 ChildProcess 对象上相应的 subprocess.stdin、subprocess.stdout 和 subprocess.stderr 流。 这相当于将 options.stdio 设置为 [‘pipe’, ‘pipe’, ‘pipe’]。<br> 为方便起见， options.stdio 可以是以下字符串之一：<br>‘pipe’ - 相当于 [‘pipe’, ‘pipe’, ‘pipe’]（默认值）。<br>‘ignore’ - 相当于 [‘ignore’, ‘ignore’, ‘ignore’]。<br>‘inherit’ - 相当于 [‘inherit’, ‘inherit’, ‘inherit’] 或 [0, 1, 2]。</p></blockquote></li></ul><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><h4 id="child-process"><a href="#child-process" class="headerlink" title="child_process"></a><a href="http://nodejs.cn/api/child_process.html#child_process_options_stdio">child_process</a></h4>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> vscode </tag>
            
            <tag> format </tag>
            
            <tag> lint </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Performance》-  web-worker 深入了解</title>
      <link href="/2020/12/09/performace_detect_skills/concepts/%E3%80%8APerformance%E3%80%8B-%20%20web-worker%20%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3/"/>
      <url>/2020/12/09/performace_detect_skills/concepts/%E3%80%8APerformance%E3%80%8B-%20%20web-worker%20%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h3 id="web-worker"><a href="#web-worker" class="headerlink" title="web-worker"></a>web-worker</h3><blockquote><p>通信过程<br> <img src="https://i.imgur.com/mMoxGvh.png" width="300" height="400"></p></blockquote><h4 id="web-api支持情况"><a href="#web-api支持情况" class="headerlink" title="web api支持情况"></a>web api<a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Functions_and_classes_available_to_workers">支持情况</a></h4><blockquote><p>不支持的web api</p></blockquote><ul><li>window</li><li>document</li></ul><blockquote><p>支持的</p></blockquote><ul><li><p>navigator</p></li><li><p>Console API</p></li><li><p>CustomEvent</p></li><li><p>Promise</p></li><li><p>websocket</p></li><li><p>ajax XMLHttpRequest</p></li><li><p>location(read-only)</p></li><li><p>setTimeout、clearTimeout、setInterval、clearInterval</p></li><li><p>atob()、btoa()</p></li><li><p>Cache对象(IE不支持)</p></li><li><p>IndexedDB</p></li></ul><p> <img src="https://i.imgur.com/VSpUwdO.png"></p><h4 id="webworker-会内存泄漏吗？"><a href="#webworker-会内存泄漏吗？" class="headerlink" title="webworker 会内存泄漏吗？"></a>webworker 会内存泄漏吗？</h4><blockquote><p>worker是new创建的，在angular destory中，webworker依旧处于监听状态，如果不销毁，会存在内存泄漏</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const worker = new Worker(&#x27;./hello.worker&#x27;, &#123; type: &#x27;module&#x27; &#125;);</span><br></pre></td></tr></table></figure><h4 id="postMessage可以传递哪些参数？"><a href="#postMessage可以传递哪些参数？" class="headerlink" title="postMessage可以传递哪些参数？"></a>postMessage可以传递哪些参数？</h4><ul><li>字符串</li><li>对象，但是对象方法会移除，</li><li>数组</li><li>函数，直接异常<br> <img src="https://i.imgur.com/K1VnxAc.png"></li></ul><h4 id="如何终止webWorker"><a href="#如何终止webWorker" class="headerlink" title="如何终止webWorker"></a>如何终止webWorker</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 调用即立刻终止</span><br><span class="line">worker.terminate()</span><br></pre></td></tr></table></figure><blockquote><p>在angular开发中，我们需要手动关闭worker</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ngDestory()&#123;</span><br><span class="line">    worker.terminate()</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="URL-创建webworker"><a href="#URL-创建webworker" class="headerlink" title="URL 创建webworker"></a>URL 创建webworker</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">private readonly worker: Worker;</span><br><span class="line">  private onMessage = new Subject&lt;MessageEvent&gt;();</span><br><span class="line">  private onError = new Subject&lt;ErrorEvent&gt;();</span><br><span class="line"></span><br><span class="line">  constructor(func) &#123;</span><br><span class="line"></span><br><span class="line">    const WORKER_ENABLED = !!(Worker);</span><br><span class="line"></span><br><span class="line">    if (WORKER_ENABLED) &#123;</span><br><span class="line">      const functionBody = func.toString().replace(/^[^&#123;]*&#123;\s*/, &#x27;&#x27;).replace(/\s*&#125;[^&#125;]*$/, &#x27;&#x27;);</span><br><span class="line"></span><br><span class="line">      this.worker = new Worker(URL.createObjectURL(</span><br><span class="line">        new Blob([ functionBody ], &#123; type: &#x27;text/javascript&#x27; &#125;)</span><br><span class="line">      ));</span><br><span class="line"></span><br><span class="line">      this.worker.onmessage = (data) =&gt; &#123;</span><br><span class="line">        this.onMessage.next(data);</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      this.worker.onerror = (data) =&gt; &#123;</span><br><span class="line">        this.onError.next(data);</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      throw new Error(&#x27;WebWorker is not enabled&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  postMessage(data) &#123;</span><br><span class="line">    this.worker.postMessage(data);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  onmessage(): Observable&lt;MessageEvent&gt; &#123;</span><br><span class="line">    return this.onMessage.asObservable();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  onerror(): Observable&lt;ErrorEvent&gt; &#123;</span><br><span class="line">    return this.onError.asObservable();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  terminate() &#123;</span><br><span class="line">    if (this.worker) &#123;</span><br><span class="line">      this.worker.terminate();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><blockquote><p>new worker</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"> const worker = new InlineWorker(() =&gt; &#123;</span><br><span class="line">  // START OF WORKER THREAD CODE</span><br><span class="line">  console.log(&#x27;Start worker thread, wait for postMessage: &#x27;);</span><br><span class="line"></span><br><span class="line">  const calculateCountOfPrimeNumbers = (limit) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">    const isPrime = num =&gt; &#123;</span><br><span class="line">      for (let i = 2; i &lt; num; i++) &#123;</span><br><span class="line">        if (num % i === 0) &#123; return false; &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      return num &gt; 1;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    let countPrimeNumbers = 0;</span><br><span class="line"></span><br><span class="line">    while (limit &gt;= 0) &#123;</span><br><span class="line">      if (isPrime(limit)) &#123; countPrimeNumbers += 1; &#125;</span><br><span class="line">      limit--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // this is from DedicatedWorkerGlobalScope ( because of that we have postMessage and onmessage methods )</span><br><span class="line">    // and it can&#x27;t see methods of this class</span><br><span class="line">    // @ts-ignore</span><br><span class="line">    this.postMessage(&#123;</span><br><span class="line">      primeNumbers: countPrimeNumbers</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  // @ts-ignore</span><br><span class="line">  this.onmessage = (evt) =&gt; &#123;</span><br><span class="line">    console.log(&#x27;Calculation started: &#x27; + new Date());</span><br><span class="line">    calculateCountOfPrimeNumbers(evt.data.limit);</span><br><span class="line">  &#125;;</span><br><span class="line">  // END OF WORKER THREAD CODE</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="webWorker可以无限制传递数据？"><a href="#webWorker可以无限制传递数据？" class="headerlink" title="webWorker可以无限制传递数据？"></a>webWorker可以无限制传递数据？</h4><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p> <a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers">Using_web_workers</a><br> <a href="https://blog.logrocket.com/whats-new-in-angular-8-web-worker-support-and-more/">whats-new-in-angular-8-web-worker-support-and-more</a><br> <a href="https://v8.angular.io/guide/deprecations">Angular Deprecations</a><br> <a href="https://web.dev/codelab-serve-modern-code/">JavaScript modules can improve performance </a></p>]]></content>
      
      
      
        <tags>
            
            <tag> webWorker </tag>
            
            <tag> angular8 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Performance》- PWA入门</title>
      <link href="/2020/12/07/performace_detect_skills/concepts/%E3%80%8APerformance%E3%80%8B%20-%20PWA%E5%85%A5%E9%97%A8/"/>
      <url>/2020/12/07/performace_detect_skills/concepts/%E3%80%8APerformance%E3%80%8B%20-%20PWA%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="PWA"><a href="#PWA" class="headerlink" title="PWA"></a>PWA</h3><h4 id="为何引入"><a href="#为何引入" class="headerlink" title="为何引入"></a>为何引入</h4><p><img src="https://i.imgur.com/zuMzZZB.png"></p><h4 id="特性了解"><a href="#特性了解" class="headerlink" title="特性了解"></a>特性了解</h4><p><img src="https://i.imgur.com/iVwLV8a.png"></p><h4 id="如何开发"><a href="#如何开发" class="headerlink" title="如何开发"></a>如何开发</h4>]]></content>
      
      
      
        <tags>
            
            <tag> 性能优化 </tag>
            
            <tag> performance </tag>
            
            <tag> lighthouse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《前端面试》- js 加减乘除总有NaN,Infinity出现</title>
      <link href="/2020/12/06/do_at_workspace/interview/%E3%80%8A%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E3%80%8B-%20js%20%E5%8A%A0%E5%87%8F%E4%B9%98%E9%99%A4%E6%80%BB%E6%9C%89NaN,Infinity%E5%87%BA%E7%8E%B0/"/>
      <url>/2020/12/06/do_at_workspace/interview/%E3%80%8A%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E3%80%8B-%20js%20%E5%8A%A0%E5%87%8F%E4%B9%98%E9%99%A4%E6%80%BB%E6%9C%89NaN,Infinity%E5%87%BA%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="数值转换"><a href="#数值转换" class="headerlink" title="数值转换"></a>数值转换</h3><h4 id="Number转换"><a href="#Number转换" class="headerlink" title="Number转换"></a>Number转换</h4><p><img src="https://i.imgur.com/PGaRtfL.png"></p><h4 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString"></a>toString</h4><p><img src="https://i.imgur.com/id8lJ7j.png"></p><h3 id="js-运算"><a href="#js-运算" class="headerlink" title="js 运算"></a>js 运算</h3><h4 id="位操作"><a href="#位操作" class="headerlink" title="位操作"></a>位操作</h4><p><img src="https://i.imgur.com/bDijkoB.png"></p><h4 id="布尔操作"><a href="#布尔操作" class="headerlink" title="布尔操作"></a>布尔操作</h4><p><img src="https://i.imgur.com/1PJMoi7.png"></p><h4 id="加法"><a href="#加法" class="headerlink" title="加法"></a>加法</h4><p><img src="https://i.imgur.com/QCdBf15.png"></p><h4 id="减法"><a href="#减法" class="headerlink" title="减法"></a>减法</h4><p><img src="https://i.imgur.com/Oi6w7d9.png"></p><h4 id="乘法"><a href="#乘法" class="headerlink" title="乘法"></a>乘法</h4><p><img src="https://i.imgur.com/6FnnCq4.png"></p><h4 id="除法"><a href="#除法" class="headerlink" title="除法"></a>除法</h4><p><img src="https://i.imgur.com/rHJ0sok.png"></p><h4 id="求模"><a href="#求模" class="headerlink" title="求模"></a>求模</h4><p><img src="https://i.imgur.com/lnK7pQi.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 前端 </tag>
            
            <tag> 面试 </tag>
            
            <tag> 位操作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Node》- package.json中的browserslist</title>
      <link href="/2020/12/04/front_skills/node/%E3%80%8ANode%E3%80%8B-%20package.json%E4%B8%AD%E7%9A%84browserslist/"/>
      <url>/2020/12/04/front_skills/node/%E3%80%8ANode%E3%80%8B-%20package.json%E4%B8%AD%E7%9A%84browserslist/</url>
      
        <content type="html"><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># package.json</span><br><span class="line"></span><br><span class="line"> &quot;browserslist&quot;: [</span><br><span class="line">   &quot;defaults&quot;,</span><br><span class="line">   &quot;not IE 11&quot;,</span><br><span class="line">   &quot;maintained node versions&quot;</span><br><span class="line"> ]</span><br></pre></td></tr></table></figure><blockquote><p>前端工具直接都支持的浏览器和node版本配置,原文如下：<br><img src="https://i.imgur.com/6uNZDVN.png"></p></blockquote><h3 id="本地查看"><a href="#本地查看" class="headerlink" title="本地查看"></a>本地查看</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ npx browserslist</span><br><span class="line">and_chr 61</span><br><span class="line">and_ff 56</span><br><span class="line">and_qq 1.2</span><br><span class="line">and_uc 11.4</span><br><span class="line">android 56</span><br><span class="line">baidu 7.12</span><br><span class="line">bb 10</span><br><span class="line">chrome 62</span><br><span class="line">edge 16</span><br><span class="line">firefox 56</span><br><span class="line">ios_saf 11</span><br><span class="line">opera 48</span><br><span class="line">safari 11</span><br><span class="line">samsung 5</span><br></pre></td></tr></table></figure><h3 id="概念解释"><a href="#概念解释" class="headerlink" title="概念解释"></a>概念解释</h3><h4 id="dead"><a href="#dead" class="headerlink" title="dead"></a>dead</h4><blockquote><p> 连续24个月不更新或者不在支持。譬如 IE 10, IE_Mob 11, BlackBerry 10, BlackBerry 7, Samsung 4 and OperaMobile 12.1</p></blockquote><h4 id="defaults"><a href="#defaults" class="headerlink" title="defaults"></a>defaults</h4><blockquote><p>&gt;0.5%, last 2 versions, Firefox ESR, not dead</p></blockquote><h3 id="最佳配置"><a href="#最佳配置" class="headerlink" title="最佳配置"></a>最佳配置</h3><blockquote><p>最省事</p></blockquote> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;browserslist&quot;: [</span><br><span class="line">   &quot;defaults&quot;</span><br><span class="line"> ]</span><br></pre></td></tr></table></figure><blockquote><p>指定版本</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;browserslist&quot;: [</span><br><span class="line">  &quot;&gt; 0.5%, last 2 versions, Firefox ESR, not dead&quot;</span><br><span class="line"> ]</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>指定浏览器</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">last 2 Chrome versions</span><br></pre></td></tr></table></figure><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><blockquote><p>不同大小前端资源文件加载。支持ES6语法的不用加载polyfills。支持ES5,加载type&#x3D;module，不支持的加载nomodule。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&quot;runtime-es2015.js&quot; type=&quot;module&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script src=&quot;runtime-es5.js&quot; nomodule&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script src=&quot;polyfills-es2015.js&quot; type=&quot;module&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script src=&quot;polyfills-es5.js&quot; nomodule&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script src=&quot;styles-es2015.js&quot; type=&quot;module&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script src=&quot;styles-es5.js&quot; nomodule&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script src=&quot;vendor-es2015.js&quot; type=&quot;module&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script src=&quot;vendor-es5.js&quot; nomodule&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script src=&quot;main-es2015.js&quot; type=&quot;module&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script src=&quot;main-es5.js&quot; nomodule&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="如何实现"><a href="#如何实现" class="headerlink" title="如何实现"></a>如何实现</h3><blockquote><p>还需要介个tsconfig.json文件中target</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;compileOnSave&quot;: false,</span><br><span class="line">  &quot;compilerOptions&quot;: &#123;</span><br><span class="line">    ...</span><br><span class="line">    &quot;target&quot;: &quot;es2015&quot;,</span><br><span class="line">    &quot;typeRoots&quot;: [</span><br><span class="line">      &quot;node_modules/@types&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;lib&quot;: [</span><br><span class="line">      &quot;es2018&quot;,</span><br><span class="line">      &quot;dom&quot;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><table><thead><tr><th>BROWSERSLIST</th><th>ES TARGET</th><th>BUILD RESULT</th></tr></thead><tbody><tr><td>ES5 support disabled</td><td>es2015</td><td>Single build, ES5 not required</td></tr><tr><td>ES5 support enabled</td><td>es5</td><td>Single build w&#x2F;conditional polyfills for ES5 only</td></tr><tr><td>ES5 support enabled</td><td>es2015</td><td>Differential loading (two builds w&#x2F;conditional polyfills)</td></tr></tbody></table><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://github.com/browserslist/browserslist">browserslist</a><br><a href="https://angular.io/guide/deployment#differential-loading">differential-loading</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Angular8》- angular  web-worker 实践</title>
      <link href="/2020/12/04/front_skills/angular/%E3%80%8AAngular8%E3%80%8B-%20angular%20%20web-worker%20%E5%AE%9E%E8%B7%B5/"/>
      <url>/2020/12/04/front_skills/angular/%E3%80%8AAngular8%E3%80%8B-%20angular%20%20web-worker%20%E5%AE%9E%E8%B7%B5/</url>
      
        <content type="html"><![CDATA[<h3 id="angular升级"><a href="#angular升级" class="headerlink" title="angular升级"></a>angular升级</h3><blockquote><p>选择不同版本升级，得到一些指引<br><a href="https://update.angular.io/?v=9.0-11.0">update.angular.io</a></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// Modern JS</span><br><span class="line">&lt;script type=&quot;module&quot; src=&quot;…&quot;&gt;</span><br><span class="line">// Legacy JS</span><br><span class="line">&lt;script nomodule src=&quot;…&quot;&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>模块懒加载,提升性能</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;path: `/admin`, loadChildren: () =&gt; import(`./admin/admin.module`).then(m =&gt; m.AdminModule)&#125;</span><br></pre></td></tr></table></figure><h3 id="Differential-Loading"><a href="#Differential-Loading" class="headerlink" title="Differential Loading"></a><a href="https://v8.angular.io/guide/deployment#differential-loading">Differential Loading</a></h3><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p> <a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers">Using_web_workers</a><br> <a href="https://blog.logrocket.com/whats-new-in-angular-8-web-worker-support-and-more/">whats-new-in-angular-8-web-worker-support-and-more</a><br> <a href="https://v8.angular.io/guide/deprecations">Angular Deprecations</a><br> <a href="https://web.dev/codelab-serve-modern-code/">JavaScript modules can improve performance </a></p>]]></content>
      
      
      
        <tags>
            
            <tag> angular </tag>
            
            <tag> webWorker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《前端面试》- 前端知识体系重点</title>
      <link href="/2020/11/25/do_at_workspace/interview/%E3%80%8A%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E3%80%8B-%20%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/"/>
      <url>/2020/11/25/do_at_workspace/interview/%E3%80%8A%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E3%80%8B-%20%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h2 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h2><img src="https://s3.jpg.cm/2020/11/23/rrm5z.png" alt="Javascript ES6" border="0"><h3 id="Event-Loop"><a href="#Event-Loop" class="headerlink" title="Event Loop"></a>Event Loop</h3><blockquote><p>执行异步，会创建微任务或者宏任务，添加到对应的队列中等待处理</p></blockquote><table><thead><tr><th>环境：从左到右执行</th><th>同步</th><th>微任务队列</th><th>宏任务</th></tr></thead><tbody><tr><td>浏览器</td><td>console之类的</td><td>promise.then 等</td><td>setTimeout,setInterval等逐个执行</td></tr><tr><td>node 11-</td><td>console之类的</td><td>nextTrick → promise.then其他的</td><td>先(Timer阶段)setTimout,setInterval全部执行完毕→ I&#x2F;o → Check → Close循环完毕</td></tr><tr><td>node（11） 11+</td><td>console之类的</td><td>nextTrick → promise.then其他的</td><td>先(Timer阶段)setTimout,setInterval逐个执行→  跳转微任务在继续下个宏任务</td></tr></tbody></table><blockquote><p>验证code, </p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">console.log(1);</span><br><span class="line">setTimeout(() =&gt; &#123;</span><br><span class="line">  console.log(2);</span><br><span class="line">  process.nextTick(() =&gt; &#123;</span><br><span class="line">    console.log(3);</span><br><span class="line">  &#125;);</span><br><span class="line">  new Promise((resolve) =&gt; &#123;</span><br><span class="line">    console.log(4);</span><br><span class="line">    resolve();</span><br><span class="line">  &#125;).then(() =&gt; &#123;</span><br><span class="line">    console.log(5);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">new Promise((resolve) =&gt; &#123;</span><br><span class="line">  console.log(7);</span><br><span class="line">  resolve();</span><br><span class="line">&#125;).then(() =&gt; &#123;</span><br><span class="line">  console.log(8);</span><br><span class="line">&#125;);</span><br><span class="line">process.nextTick(() =&gt; &#123;</span><br><span class="line">  console.log(6);</span><br><span class="line">&#125;);</span><br><span class="line">setTimeout(() =&gt; &#123;</span><br><span class="line">  console.log(9);</span><br><span class="line">  process.nextTick(() =&gt; &#123;</span><br><span class="line">    console.log(10);</span><br><span class="line">  &#125;);</span><br><span class="line">  new Promise((resolve) =&gt; &#123;</span><br><span class="line">    console.log(11);</span><br><span class="line">    resolve();</span><br><span class="line">  &#125;).then(() =&gt; &#123;</span><br><span class="line">    console.log(12);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">node &lt;11:1 7 6 8 2 4 9 11 3 10 5 12</span><br><span class="line">node&gt;=11:1 7 6 8 2 4 3 5 9 11 10 12</span><br></pre></td></tr></table></figure><h3 id="缓存策略"><a href="#缓存策略" class="headerlink" title="缓存策略"></a>缓存策略</h3><h4 id="强制缓存-http1-0"><a href="#强制缓存-http1-0" class="headerlink" title="强制缓存 http1.0"></a>强制缓存 http1.0</h4><blockquote><p>Expire – 绝对时间</p></blockquote><ul><li>缺点： 客户端、服务器时间不同，则无效</li></ul><blockquote><p>Cache-control – 相对时间</p></blockquote><ul><li>fix上述问题，根据客户端时间设置</li><li>但是，必须等缓存过期，不能提前知道服务端内容改变了，</li></ul><h4 id="协商缓存-http1-1"><a href="#协商缓存-http1-1" class="headerlink" title="协商缓存 http1.1"></a>协商缓存 http1.1</h4><blockquote><p>Last-modidied&#x2F;Last-modified-since</p></blockquote><ul><li>根据linux文件最后修改的时间，提前知道文件修改</li><li>但是如果文件都是动态生成，每次都是重新创建，那么久无效</li></ul><blockquote><p>Etag&#x2F;If-None-Match</p></blockquote><ul><li>fix上述问题，就根据文件内容hash是否修改</li></ul><h3 id="Http-code"><a href="#Http-code" class="headerlink" title="Http code"></a>Http code</h3><h4 id="200"><a href="#200" class="headerlink" title="200"></a>200</h4><blockquote><p>success </p></blockquote><h4 id="301"><a href="#301" class="headerlink" title="301"></a>301</h4><blockquote><p>Moved Permanently to the URL</p></blockquote><h4 id="302"><a href="#302" class="headerlink" title="302"></a>302</h4><blockquote><p>temporarily moved to the URL </p></blockquote><h4 id="304"><a href="#304" class="headerlink" title="304"></a>304</h4><blockquote><p>no modified </p></blockquote><h4 id="400"><a href="#400" class="headerlink" title="400"></a>400</h4><blockquote><p>Bad Request</p></blockquote><h4 id="401"><a href="#401" class="headerlink" title="401"></a>401</h4><blockquote><p> Unauthorized</p></blockquote><h4 id="403"><a href="#403" class="headerlink" title="403"></a>403</h4><blockquote><p>forbidden </p></blockquote><h4 id="404"><a href="#404" class="headerlink" title="404"></a>404</h4><blockquote><p>not found </p></blockquote><h4 id="500"><a href="#500" class="headerlink" title="500"></a>500</h4><blockquote><p>server error </p></blockquote><h4 id="502"><a href="#502" class="headerlink" title="502"></a>502</h4><blockquote><p>server gateway error </p></blockquote><h3 id="ES6-Proxy"><a href="#ES6-Proxy" class="headerlink" title="ES6 Proxy"></a>ES6 Proxy</h3><p><img src="https://i.imgur.com/NFuk4zz.png"></p><h3 id="防抖与节流"><a href="#防抖与节流" class="headerlink" title="防抖与节流"></a>防抖与节流</h3><h4 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h4><blockquote><p>避免多次点击，界面抖动，延迟，取最后一次动作</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function boundce(func,wait)&#123;</span><br><span class="line">    return function()&#123;</span><br><span class="line">        const ctx = this;</span><br><span class="line">        clearTimout(timer);</span><br><span class="line">        const timer = setTimeout(</span><br><span class="line">            func.apply(ctx,args)</span><br><span class="line">        ,wait)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h4><blockquote><p>固定的时间内，发生多次，只有一次成功<br>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function throttle(func,wait)&#123;</span><br><span class="line">    let previous ;</span><br><span class="line">    return function()&#123;</span><br><span class="line">        const ctx = this;</span><br><span class="line">        if(Date.now() - preview &gt; wait)&#123;</span><br><span class="line">            func.apply(ctx,args)</span><br><span class="line">            previous = Date.now();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="macro-Task-与microTask"><a href="#macro-Task-与microTask" class="headerlink" title="macro Task 与microTask"></a>macro Task 与microTask</h3><blockquote><p>事件循环中的异步队列有两种：macro（宏任务）队列和 micro（微任务）队列。宏任务队列可以有多个，微任务队列只有一个。</p></blockquote><p>常见的 macro-task 比如：setTimeout、setInterval、 setImmediate、script（整体代码）、 I&#x2F;O 操作、UI 渲染等。<br>常见的 micro-task 比如: process.nextTick、new Promise().then(回调)、MutationObserver(html5 新特性) 等。</p><blockquote><p>先执行<a href="https://zhuanlan.zhihu.com/p/54882306">宏任务</a>，一次一个，执行完毕，执行所有的microTask，没有则继续执行宏任务</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">for (const macroTask of macroTaskQueue) &#123;</span><br><span class="line">  //逐个处理</span><br><span class="line">  handleMacroTask();</span><br><span class="line">  //批次处理</span><br><span class="line">  for (const microTask of microTaskQueue) &#123;</span><br><span class="line">    handleMicroTask(microTask);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p> <img src="https://pic1.zhimg.com/80/v2-539cfb365f2646bd724da392d779476c_1440w.jpg"></p><h3 id="new-Person-执行过程"><a href="#new-Person-执行过程" class="headerlink" title="new Person 执行过程"></a>new Person 执行过程</h3><blockquote><p>先继承Person.prototype创建对象{}<br>设置this指向{}<br>设置属性，<br>没有特殊返回，直接返回this</p></blockquote><h3 id="拦截Person，只能new"><a href="#拦截Person，只能new" class="headerlink" title="拦截Person，只能new"></a>拦截Person，只能new</h3><blockquote><p>new.target</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 之前做法</span><br><span class="line">function Person(name)&#123;</span><br><span class="line">    if(this instance Of Person)&#123;</span><br><span class="line">        this.name = name</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        throw new Error(&#x27;&#x27;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//new.target</span><br><span class="line">function Person(name)&#123;</span><br><span class="line">    if(typeof new.target !== &#x27;undefined&#x27;)&#123;</span><br><span class="line">        // if(typeof new.target === Persion)&#123;&#125;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2> <img src="https://s3.jpg.cm/2020/11/23/rsxf4.png" alt="Css重点" border="0"><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p> <a href="https://github.com/lgwebdream/FE-Interview/issues/37">宏任务和微任务</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 前端 </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Js》- js 性能提升</title>
      <link href="/2020/11/24/front_skills/js/%E3%80%8AJs%E3%80%8B-%20js%20%E6%80%A7%E8%83%BD%E6%8F%90%E5%8D%87/"/>
      <url>/2020/11/24/front_skills/js/%E3%80%8AJs%E3%80%8B-%20js%20%E6%80%A7%E8%83%BD%E6%8F%90%E5%8D%87/</url>
      
        <content type="html"><![CDATA[<h3 id="js-code-优化提升性能"><a href="#js-code-优化提升性能" class="headerlink" title="js code 优化提升性能"></a>js code 优化提升性能</h3><p><img src="https://i.imgur.com/E80C8bN.png"></p><h3 id="Chrome-DevTool提升性能"><a href="#Chrome-DevTool提升性能" class="headerlink" title="Chrome DevTool提升性能"></a>Chrome DevTool提升性能</h3>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 性能 </tag>
            
            <tag> 原生 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《前端面试》- 算法耗时一览表</title>
      <link href="/2020/11/19/do_at_workspace/interview/%E3%80%8A%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E3%80%8B-%20%E7%AE%97%E6%B3%95%E8%80%97%E6%97%B6%E4%B8%80%E8%A7%88%E8%A1%A8/"/>
      <url>/2020/11/19/do_at_workspace/interview/%E3%80%8A%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E3%80%8B-%20%E7%AE%97%E6%B3%95%E8%80%97%E6%97%B6%E4%B8%80%E8%A7%88%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="排序算法时间复杂度"><a href="#排序算法时间复杂度" class="headerlink" title="排序算法时间复杂度"></a>排序算法时间复杂度</h3><img src="https://s3.jpg.cm/2020/11/19/rL0Rp.png" alt="Screen Shot 2020 11 19 at 08.53.22" border="0"><img src="https://s3.jpg.cm/2020/11/19/rL216.png" alt="Screen Shot 2020 11 19 at 08.53.41" border="0"><h3 id="算法提升"><a href="#算法提升" class="headerlink" title="算法提升"></a>算法提升</h3><blockquote><p>唯有多练习</p></blockquote><h3 id="常见站点"><a href="#常见站点" class="headerlink" title="常见站点"></a>常见站点</h3><blockquote><p><a href="http://uva.onlinejudge.org/">UVa Online Judge</a><br>  世界各大赛事的题目，包括由IBM赞助的ACM国际大学生程序竞赛</p></blockquote><blockquote><p><a href="http://www.spoj.com/">Sphere Online Judge</a><br>  支持用更多语言解题（包括JavaScript）</p></blockquote><blockquote><p><a href="http://coderbyte.com/">Coderbyte</a><br>  用JavaScript解答的题目（简单、中等难度和非常困难）</p></blockquote><blockquote><p><a href="https://projecteuler.net/">Project Euler</a><br>  一系列数学&#x2F;计算机的编程题目。你所要做的就是输入那些题目的答案，不过我们可以用算法来找到正确的解答。</p></blockquote><blockquote><p>[HackerRank](<a href="https://www.hackerrank.com/">https://www.hackerrank.com</a><br>  包含16个类别的挑战, 支持JavaScript和其他语言。</p></blockquote><blockquote><p>[CodeChef](<a href="http://www.codechef.com/">http://www.codechef.com/</a><br>  举办在线比赛</p></blockquote><blockquote><p><a href="http://www.topcoder.com/">Top Coder</a><br>  举办算法联赛，这些联赛通常由NASA、Google、Yahoo! 、Amazon和Facebook这样的公司赞助。参加其中一些赛事，你可以获得到赞助公司工作的机会，而参与另一些赛事会赢得奖金。这个网站也提供很棒的解题和算法教程。</p></blockquote><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p> <a href="https://www.bigocheatsheet.com/">复杂度</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 前端 </tag>
            
            <tag> 面试 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Js》-  js这些不得不了解的技巧，你使用过吗</title>
      <link href="/2020/11/12/front_skills/js/%E3%80%8AJs%E3%80%8B-%20js%20%E8%BF%99%E4%BA%9B%E4%B8%8D%E5%BE%97%E4%B8%8D%E4%BA%86%E8%A7%A3%E7%9A%84%E6%8A%80%E5%B7%A7%EF%BC%8C%E4%BD%A0%E4%BD%BF%E7%94%A8%E8%BF%87%E5%90%97/"/>
      <url>/2020/11/12/front_skills/js/%E3%80%8AJs%E3%80%8B-%20js%20%E8%BF%99%E4%BA%9B%E4%B8%8D%E5%BE%97%E4%B8%8D%E4%BA%86%E8%A7%A3%E7%9A%84%E6%8A%80%E5%B7%A7%EF%BC%8C%E4%BD%A0%E4%BD%BF%E7%94%A8%E8%BF%87%E5%90%97/</url>
      
        <content type="html"><![CDATA[<h3 id="Console"><a href="#Console" class="headerlink" title="Console"></a>Console</h3><h4 id="copy"><a href="#copy" class="headerlink" title="copy"></a>copy</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let x = &#123;a:1,b:2,test:() =&gt;&#123;&#125;&#125;</span><br><span class="line">copy(x) //copy 所有属性，方法不支持到文本编辑器ctrl+v</span><br></pre></td></tr></table></figure><h4 id="console-dir"><a href="#console-dir" class="headerlink" title="console.dir"></a>console.dir</h4><blockquote><p>查看所有对象的属性和方法</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.dir(x)</span><br></pre></td></tr></table></figure><h4 id="console-error"><a href="#console-error" class="headerlink" title="console.error"></a>console.error</h4><blockquote><p>提供栈追踪</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.error()</span><br></pre></td></tr></table></figure><h4 id="console-timeEnd"><a href="#console-timeEnd" class="headerlink" title="console.timeEnd"></a>console.timeEnd</h4><blockquote><p>code耗时</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">console.time()</span><br><span class="line">//code </span><br><span class="line">console.timeEnd()</span><br></pre></td></tr></table></figure><h4 id="console-log"><a href="#console-log" class="headerlink" title="console.log"></a>console.log</h4><blockquote><p>所有obj 继承object toString </p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 作为对象或字符串进行打印</span><br><span class="line">console.log(x);</span><br></pre></td></tr></table></figure><h3 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h3><h4 id="of"><a href="#of" class="headerlink" title="of"></a>of</h4> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># Array.of(element0[, element1[, ...[, elementN]]])</span><br><span class="line"></span><br><span class="line"> Array.of(undefined); // [undefined]</span><br><span class="line"> Array.of(7);       // [7] </span><br><span class="line"> Array.of(1, 2, 3); // [1, 2, 3]</span><br><span class="line"></span><br><span class="line"> Array(7);          // [ , , , , , , ]</span><br><span class="line"> Array(1, 2, 3);    // [1, 2, 3]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="from"><a href="#from" class="headerlink" title="from"></a><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from">from</a></h4><blockquote><p>Array.from() lets you create Arrays from:</p></blockquote><blockquote><p>array-like objects (objects with a length property and indexed elements); or<br>iterable objects (objects such as Map and Set).</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># Array.from(arrayLike [, mapFn [, thisArg]])</span><br><span class="line"></span><br><span class="line">console.log(Array.from(&#x27;foo&#x27;));</span><br><span class="line">// expected output: Array [&quot;f&quot;, &quot;o&quot;, &quot;o&quot;]</span><br><span class="line"></span><br><span class="line">console.log(Array.from([1, 2, 3], x =&gt; x + x));</span><br><span class="line">// expected output: Array [2, 4, 6]</span><br></pre></td></tr></table></figure><h4 id="concat"><a href="#concat" class="headerlink" title="concat"></a>concat</h4><blockquote><p>不仅限于数组，还可以是任何值。<br>基本类型，copy value，修改不会对原数组产生影响；对象类型，copy reference，修改会对原对象产生影响。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"># const new_array = old_array.concat([value1[, value2[, ...[, valueN]]]])</span><br><span class="line"></span><br><span class="line">const array1 = [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;];</span><br><span class="line">const array2 = [&#x27;d&#x27;, &#x27;e&#x27;, &#x27;f&#x27;];</span><br><span class="line"># 切记，需要赋值给数组哦，</span><br><span class="line">const array3 = array1.concat(array2);</span><br><span class="line"></span><br><span class="line">console.log(array1);</span><br><span class="line">console.log(array2);</span><br><span class="line">console.log(array3);</span><br><span class="line"></span><br><span class="line">//output </span><br><span class="line">[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]</span><br><span class="line">[&quot;d&quot;, &quot;e&quot;, &quot;f&quot;]</span><br><span class="line">[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">const array1 = [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;];</span><br><span class="line"># 切记，需要赋值给数组哦，</span><br><span class="line">const array3 = array1.concat(array1,2,3,&#123;a:&#x27;b&#x27;&#125;);</span><br><span class="line"></span><br><span class="line">console.log(array1);</span><br><span class="line">console.log(array3);</span><br><span class="line"></span><br><span class="line">//output</span><br><span class="line">[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]</span><br><span class="line">[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, 2, 3, &#123;…&#125;]</span><br></pre></td></tr></table></figure><h4 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h4><blockquote><p>callback is invoked only for indexes of the array which have assigned values; it is not invoked for indexes which have been deleted or which have never been assigned values</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># let newArray = arr.filter(callback(element[, index, [array]])[, thisArg])</span><br><span class="line"></span><br><span class="line">const words = [&#x27;spray&#x27;, &#x27;limit&#x27;, &#x27;elite&#x27;, , &#x27;destruction&#x27;, &#x27;present&#x27;];</span><br><span class="line"></span><br><span class="line">const result = words.filter(</span><br><span class="line">  (word,index) =&gt; &#123; </span><br><span class="line">    console.log(word,index);</span><br><span class="line">    return word.length &gt; 6</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">console.log(result);</span><br><span class="line">// expected output: Array [&quot;exuberant&quot;, &quot;destruction&quot;, &quot;present&quot;]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="slice"><a href="#slice" class="headerlink" title="slice"></a>slice</h4><blockquote><p>切片，不影响原来数组</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># arr.slice([start[, end]])</span><br><span class="line"></span><br><span class="line">const animals = [&#x27;ant&#x27;, &#x27;bison&#x27;, &#x27;camel&#x27;, &#x27;duck&#x27;, &#x27;elephant&#x27;];</span><br><span class="line">console.log(animals.slice(2, 4));</span><br><span class="line">// expected output: Array [&quot;camel&quot;, &quot;duck&quot;]</span><br><span class="line">console.log(animals);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="isArray"><a href="#isArray" class="headerlink" title="isArray"></a>isArray</h4> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Array.isArray([1, 2, 3]);  // true</span><br><span class="line">Array.isArray([]); // true</span><br><span class="line">Array.isArray([1]); // true</span><br><span class="line">Array.isArray(new Array()); // true</span><br><span class="line">Array.isArray(new Array(&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;)); // true</span><br><span class="line">Array.isArray(new Array(3)); // true</span><br><span class="line"></span><br><span class="line">Array.isArray(&#123;foo: 123&#125;); // false</span><br><span class="line">Array.isArray(&quot;foobar&quot;);   // false</span><br><span class="line">Array.isArray(undefined);  // false</span><br><span class="line">Array.isArray(null); // false</span><br><span class="line">Array.isArray(new Uint8Array(32)); // false </span><br><span class="line">Array.isArray(&#123; __proto__: Array.prototype &#125;); // false </span><br><span class="line">Array.isArray(Array.prototype);  // true</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="every"><a href="#every" class="headerlink" title="every"></a>every</h4> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const isBelowThreshold = (currentValue) =&gt; currentValue &lt; 40;</span><br><span class="line"></span><br><span class="line">const array1 = [1, 30, 39, 29, 10, 13];</span><br><span class="line"></span><br><span class="line">console.log(array1.every(isBelowThreshold));</span><br><span class="line">// expected output: true</span><br></pre></td></tr></table></figure> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[12, 54, 18, 130, 44].every(x =&gt; x &gt;= 10); // true</span><br></pre></td></tr></table></figure><h4 id="some"><a href="#some" class="headerlink" title="some"></a>some</h4><blockquote><p>查找满足特定逻辑的元素，是否存在</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># arr.some(callback(element[, index[, array]])[, thisArg])</span><br><span class="line"></span><br><span class="line">const array = [1, 2, 3, 4, 5];</span><br><span class="line"></span><br><span class="line">// checks whether an element is even</span><br><span class="line">const even = (element) =&gt; element % 2 === 0;</span><br><span class="line"></span><br><span class="line">console.log(array.some(even));</span><br><span class="line">// expected output: true</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>修改元素，会立即生效</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">const array = [1, 2, 3, 4, 5];</span><br><span class="line"></span><br><span class="line">// checks whether an element is even</span><br><span class="line">const even = (item,index) =&gt; &#123; </span><br><span class="line">   console.log(&quot;item value is &quot;,item,index);</span><br><span class="line">   const res = item % 5 === 0;</span><br><span class="line">   const ix = index+1;</span><br><span class="line">   if(ix &lt; array.length - 1)&#123;</span><br><span class="line">     array[ix] = array[ix] * 2;</span><br><span class="line">     console.log(&quot;array...&quot;,array);</span><br><span class="line">   &#125;</span><br><span class="line">  return res;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">console.log(&quot;result....&quot;,array.some(even),array);</span><br><span class="line">// expected output: true , [1, 4, 6, 8, 5]</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="find"><a href="#find" class="headerlink" title="find"></a>find</h4><blockquote><p>返回满足条件的第一个元素。 即使元素没有初始化，也会参与过滤</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># arr.find(callback(element[, index[, array]])[, thisArg])</span><br><span class="line">const array1 = [5 , , 130, 44];</span><br><span class="line"></span><br><span class="line">const found = array1.find((element,ix) =&gt; &#123; console.log(element,ix); return element &gt; 10&#125; );</span><br><span class="line"></span><br><span class="line">console.log(found);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt; 5 0</span><br><span class="line">&gt; undefined 1</span><br><span class="line">&gt; 130 2</span><br><span class="line">&gt; 130</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="findIndex"><a href="#findIndex" class="headerlink" title="findIndex"></a>findIndex</h4><blockquote><p>返回满足条件的第一个元素下标。 即使元素没有初始化，也会参与过滤，且不会影响原来的</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># arr.findIndex(callback( element[, index[, array]] )[, thisArg])</span><br><span class="line"></span><br><span class="line">const array1 = [5 , , 130, 44];</span><br><span class="line"></span><br><span class="line">const found = array1.findIndex((element,ix) =&gt; &#123; console.log(element,ix); return element &gt; 10&#125; );</span><br><span class="line"></span><br><span class="line">console.log(array1);</span><br><span class="line">console.log(found);</span><br><span class="line"></span><br><span class="line">&gt; 5 0</span><br><span class="line">&gt; undefined 1</span><br><span class="line">&gt; 130 2</span><br><span class="line">&gt; Array [5, undefined, 130, 44]</span><br><span class="line">&gt; 2</span><br></pre></td></tr></table></figure><h4 id="entries"><a href="#entries" class="headerlink" title="entries"></a>entries</h4> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"> # 解构</span><br><span class="line"> const a = [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;];</span><br><span class="line"></span><br><span class="line">for (const [index, element] of a.entries())</span><br><span class="line">  console.log(index, element);</span><br><span class="line"></span><br><span class="line">// 0 &#x27;a&#x27; </span><br><span class="line">// 1 &#x27;b&#x27; </span><br><span class="line">// 2 &#x27;c&#x27;</span><br><span class="line"></span><br><span class="line"> var arr = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;];</span><br><span class="line">var iter = arr.entries();</span><br><span class="line">var a = [];</span><br><span class="line"></span><br><span class="line">// for(var i=0; i&lt; arr.length; i++)&#123;   // 实际使用的是这个 </span><br><span class="line">for(var i=0; i&lt; arr.length+1; i++)&#123;    // 注意，是length+1，比数组的长度大</span><br><span class="line">    var tem = iter.next();             // 每次迭代时更新next</span><br><span class="line">    console.log(tem.done);             // 这里可以看到更新后的done都是false</span><br><span class="line">    if(tem.done !== true)&#123;             // 遍历迭代器结束done才是true</span><br><span class="line">        console.log(tem.value);</span><br><span class="line">        a[i]=tem.value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;  </span><br><span class="line">console.log(a);</span><br></pre></td></tr></table></figure> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> #二位数组排序</span><br><span class="line"> function sortArr(arr) &#123;</span><br><span class="line">    var goNext = true;</span><br><span class="line">    var entries = arr.entries();</span><br><span class="line">    while (goNext) &#123;</span><br><span class="line">        var result = entries.next();</span><br><span class="line">        if (result.done !== true) &#123;</span><br><span class="line">            result.value[1].sort((a, b) =&gt; a - b);</span><br><span class="line">            goNext = true;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            goNext = false;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var arr = [[1,34],[456,2,3,44,234],[4567,1,4,5,6],[34,78,23,1]];</span><br><span class="line">sortArr(arr);</span><br></pre></td></tr></table></figure><h4 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h4><blockquote><p>callback is not invoked for index properties that have been deleted or are uninitialized</p></blockquote> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"> # arr.forEach(callback(currentValue [, index [, array]])[, thisArg])</span><br><span class="line"></span><br><span class="line">const arraySparse = [1,3,,7]</span><br><span class="line">let numCallbackRuns = 0</span><br><span class="line"></span><br><span class="line">arraySparse.forEach((element) =&gt; &#123;</span><br><span class="line">  console.log(element)</span><br><span class="line">  numCallbackRuns++</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">console.log(&quot;numCallbackRuns: &quot;, numCallbackRuns)</span><br><span class="line"></span><br><span class="line">// 1</span><br><span class="line">// 3</span><br><span class="line">// 7</span><br><span class="line"></span><br><span class="line">let words = [&#x27;one&#x27;, &#x27;two&#x27;, &#x27;three&#x27;, &#x27;four&#x27;]</span><br><span class="line">words.forEach((word) =&gt; &#123;</span><br><span class="line">  console.log(word)</span><br><span class="line">  if (word === &#x27;two&#x27;) &#123;</span><br><span class="line">    words.shift()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">// one</span><br><span class="line">// two</span><br><span class="line">// four</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="values"><a href="#values" class="headerlink" title="values"></a>values</h4><blockquote><p>values ，迭代value<br>keys， 迭代index</p></blockquote> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> # arr.values()</span><br><span class="line"></span><br><span class="line"> const array1 = [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;];</span><br><span class="line">const iterator = array1.values();</span><br><span class="line"></span><br><span class="line">for (const value of iterator) &#123;</span><br><span class="line">  console.log(value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// expected output: &quot;a&quot;</span><br><span class="line">// expected output: &quot;b&quot;</span><br><span class="line">// expected output: &quot;c&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="flat"><a href="#flat" class="headerlink" title="flat"></a>flat</h4><blockquote><p>抽取子元素，按原来顺序，组合后返回<br> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> # var newArray = arr.flat([depth]);，default 1</span><br><span class="line"></span><br><span class="line"> var arr1 = [1, 2, [3, 4]];</span><br><span class="line">arr1.flat();  // 默认1</span><br><span class="line">// [1, 2, 3, 4]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">var arr3 = [1, 2, [3, 4, [5, 6]]];</span><br><span class="line">arr3.flat(2);</span><br><span class="line">// [1, 2, 3, 4, 5, 6]</span><br><span class="line"></span><br><span class="line"># 剔除空元素</span><br><span class="line">const arr5 = [1, 2, , 4, 5];</span><br><span class="line">arr5.flat();</span><br><span class="line">// [1, 2, 4, 5]</span><br><span class="line"></span><br></pre></td></tr></table></figure></p></blockquote><h4 id="map-flat"><a href="#map-flat" class="headerlink" title="map+flat"></a>map+flat</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># var new_array = arr.flatMap(function callback(currentValue[, index[, array]]) &#123;</span><br><span class="line">    // return element for new_array</span><br><span class="line">&#125;[, thisArg])</span><br><span class="line"></span><br><span class="line">let arr1 = [&quot;it&#x27;s Sunny in&quot;, &quot;&quot;, &quot;California&quot;];</span><br><span class="line"></span><br><span class="line">arr1.map(x =&gt; x.split(&quot; &quot;));</span><br><span class="line">// [[&quot;it&#x27;s&quot;,&quot;Sunny&quot;,&quot;in&quot;],[&quot;&quot;],[&quot;California&quot;]]</span><br><span class="line"></span><br><span class="line">arr1.flatMap(x =&gt; x.split(&quot; &quot;));</span><br><span class="line">// [&quot;it&#x27;s&quot;,&quot;Sunny&quot;,&quot;in&quot;, &quot;&quot;, &quot;California&quot;]</span><br></pre></td></tr></table></figure><h4 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h4><blockquote><p>initialValue 是推荐提供的<br> If initialValue is not provided, reduce() will execute the callback function starting at index 1, skipping the first index. If initialValue is provided, it will start at index 0.</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># arr.reduce(callback( accumulator, currentValue[, index[, array]] )[, initialValue])</span><br><span class="line"></span><br><span class="line">let maxCallback = ( acc, cur ) =&gt; Math.max( acc.x, cur.x );</span><br><span class="line">[                                ].reduce( maxCallback ); // TypeError</span><br><span class="line"></span><br><span class="line">[0, 1, 2, 3, 4].reduce(function(accumulator, currentValue, currentIndex, array) &#123;</span><br><span class="line">  return accumulator + currentValue</span><br><span class="line">&#125;) // 10 </span><br><span class="line"></span><br><span class="line">[0, 1, 2, 3, 4].reduce(function(accumulator, currentValue, currentIndex, array) &#123;</span><br><span class="line">  return accumulator + currentValue</span><br><span class="line">&#125;,10) // 20 </span><br></pre></td></tr></table></figure><h4 id="reduceRight"><a href="#reduceRight" class="headerlink" title="reduceRight"></a>reduceRight</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># arr.reduceRight(callback(accumulator, currentValue[, index[, array]])[, initialValue])</span><br><span class="line"></span><br><span class="line">const array1 = [[0, 1], [2, 3], [4, 5]].reduceRight(</span><br><span class="line">  (accumulator, currentValue) =&gt; &#123; </span><br><span class="line">    console.log(accumulator);</span><br><span class="line">    return accumulator.concat(currentValue)</span><br><span class="line">  &#125;,[&#x27;a&#x27;] </span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">console.log(array1);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt; Array [&quot;a&quot;]</span><br><span class="line">&gt; Array [&quot;a&quot;, 4, 5]</span><br><span class="line">&gt; Array [&quot;a&quot;, 4, 5, 2, 3]</span><br><span class="line">&gt; Array [&quot;a&quot;, 4, 5, 2, 3, 0, 1]</span><br></pre></td></tr></table></figure><h4 id="fill"><a href="#fill" class="headerlink" title="fill"></a>fill</h4> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"> # arr.fill(value[, start[, end]]) </span><br><span class="line"></span><br><span class="line">const array1 = [1, 2, 3, 4];</span><br><span class="line"></span><br><span class="line">// 从下标2开始，到4结束，用0替换, 不包括终止索引</span><br><span class="line">console.log(array1.fill(0, 2, 4));</span><br><span class="line">console.log(array1); // 修改自身，而非copy</span><br><span class="line"></span><br><span class="line">// [1, 2, 0, 0]</span><br><span class="line">// [1, 2, 0, 0]</span><br><span class="line"></span><br><span class="line">//special </span><br><span class="line">const ss = [].fill.call(&#123; length: 3 &#125;, 4) </span><br><span class="line">console.log(ss);  </span><br><span class="line"></span><br><span class="line">// &#123;0: 4, 1: 4, 2: 4, length: 3&#125;</span><br><span class="line"></span><br><span class="line">// A single object, referenced by each slot of the array:</span><br><span class="line">let arr = Array(3).fill(&#123;&#125;) // [&#123;&#125;, &#123;&#125;, &#123;&#125;]</span><br><span class="line">arr[0].hi = &quot;hi&quot;            // [&#123; hi: &quot;hi&quot; &#125;, &#123; hi: &quot;hi&quot; &#125;, &#123; hi: &quot;hi&quot; &#125;]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="splice"><a href="#splice" class="headerlink" title="splice"></a>splice</h4><blockquote><p>替换或者添加元素，影响原数组</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># let arrDeletedItems = array.splice(start[, deleteCount[, item1[, item2[, ...]]]])</span><br><span class="line"></span><br><span class="line">const months = [&#x27;Jan&#x27;, &#x27;March&#x27;, &#x27;April&#x27;, &#x27;June&#x27;];</span><br><span class="line">months.splice(1, 0, &#x27;Feb&#x27;);</span><br><span class="line">// inserts at index 1</span><br><span class="line">console.log(months);</span><br><span class="line">// expected output: Array [&quot;Jan&quot;, &quot;Feb&quot;, &quot;March&quot;, &quot;April&quot;, &quot;June&quot;]</span><br><span class="line"></span><br><span class="line">months.splice(4, 1, &#x27;May&#x27;); # 长度不足，进行扩充</span><br><span class="line">// replaces 1 element at index 4</span><br><span class="line">console.log(months);</span><br><span class="line">// expected output: Array [&quot;Jan&quot;, &quot;Feb&quot;, &quot;March&quot;, &quot;April&quot;, &quot;May&quot;]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="copyWithin"><a href="#copyWithin" class="headerlink" title="copyWithin"></a>copyWithin</h4><blockquote><p>copy + part Change,不影响原来的</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># arr.copyWithin(target[, start[, end]])</span><br><span class="line"></span><br><span class="line">const array1 = [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27;];</span><br><span class="line">// copy to index 1 all elements from index 3 to the end</span><br><span class="line">console.log(array1);</span><br><span class="line">console.log(array1.copyWithin(1, 3));</span><br><span class="line"></span><br><span class="line">//output</span><br><span class="line">[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;]</span><br><span class="line">[&quot;a&quot;, &quot;d&quot;, &quot;e&quot;, &quot;d&quot;, &quot;e&quot;]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="shift"><a href="#shift" class="headerlink" title="shift"></a>shift</h4><blockquote><p>删除数组第一个元素，修改原数组<br>pop 删除的是数组，最后一个元素，也修改原数组</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># arr.shift()</span><br><span class="line"></span><br><span class="line">const array1 = [1, 2, 3];</span><br><span class="line"></span><br><span class="line">const firstElement = array1.shift();</span><br><span class="line"></span><br><span class="line">console.log(array1);</span><br><span class="line">// expected output: Array [2, 3]</span><br><span class="line"></span><br><span class="line">console.log(firstElement);</span><br><span class="line">// expected output: 1</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="unshift"><a href="#unshift" class="headerlink" title="unshift"></a>unshift</h4><blockquote><p>开始位置添加元素</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># arr.unshift(element1[, ...[, elementN]])</span><br><span class="line"></span><br><span class="line">const array1 = [1, 2, 3];</span><br><span class="line"></span><br><span class="line">console.log(array1.unshift(4, 5));</span><br><span class="line">// expected output: 5</span><br><span class="line"></span><br><span class="line">console.log(array1);</span><br><span class="line">// expected output: Array [4, 5, 1, 2, 3]</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h3> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Date.now()</span><br></pre></td></tr></table></figure><h4 id="2-时间字符串解析"><a href="#2-时间字符串解析" class="headerlink" title="2.时间字符串解析"></a>2.时间字符串解析</h4> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 推荐，还是手动解析，</span><br><span class="line">const unixTimeZero = Date.parse(&#x27;01 Jan 1970 00:00:00 GMT&#x27;);</span><br><span class="line">const javaScriptRelease = Date.parse(&#x27;04 Dec 1995 00:12:00 GMT&#x27;);</span><br><span class="line"></span><br><span class="line">console.log(unixTimeZero);</span><br><span class="line">// expected output: 0</span><br><span class="line"></span><br><span class="line">console.log(javaScriptRelease);</span><br><span class="line">// expected output: 818035920000</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3-时区偏差"><a href="#3-时区偏差" class="headerlink" title="3.时区偏差"></a>3.时区偏差</h4> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 如果本地时区先于协调世界时，则该差值为正值，如果后于协调世界时则为负值</span><br><span class="line">var x = new Date();</span><br><span class="line">var currentTimeZoneOffsetInHours = x.getTimezoneOffset() / 60;</span><br></pre></td></tr></table></figure><h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><h4 id="1-从-得到集合set"><a href="#1-从-得到集合set" class="headerlink" title="1.从[]得到集合set"></a>1.从[]得到集合set</h4> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 常用于数组出重</span><br><span class="line">const set1 = new Set([1, 2, 3, 4, 5]);</span><br></pre></td></tr></table></figure><h4 id="2-判断是否包含某一项-has"><a href="#2-判断是否包含某一项-has" class="headerlink" title="2.判断是否包含某一项-has"></a>2.判断是否包含某一项-has</h4> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> console.log(set1.has(5));</span><br><span class="line">// expected output: true</span><br></pre></td></tr></table></figure><h4 id="3-entries"><a href="#3-entries" class="headerlink" title="3.entries"></a>3.entries</h4> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var mySet = new Set();</span><br><span class="line">mySet.add(&quot;foobar&quot;);</span><br><span class="line">mySet.add(1);</span><br><span class="line">mySet.add(&quot;baz&quot;);</span><br><span class="line"></span><br><span class="line">var setIter = mySet.entries();</span><br><span class="line">console.log(setIter.next().value); // [&quot;foobar&quot;, &quot;foobar&quot;]</span><br><span class="line">console.log(setIter.next().value); // [1, 1]</span><br><span class="line">console.log(setIter.next().value); // [&quot;baz&quot;, &quot;baz&quot;]</span><br></pre></td></tr></table></figure><h4 id="4-values"><a href="#4-values" class="headerlink" title="4. values"></a>4. values</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var mySet = new Set();</span><br><span class="line">mySet.add(&quot;foo&quot;);</span><br><span class="line">mySet.add(&quot;bar&quot;);</span><br><span class="line">mySet.add(&quot;baz&quot;);</span><br><span class="line"></span><br><span class="line">var setIter = mySet.values();</span><br><span class="line"></span><br><span class="line">console.log(setIter.next().value); // &quot;foo&quot;</span><br><span class="line">console.log(setIter.next().value); // &quot;bar&quot;</span><br><span class="line">console.log(setIter.next().value); // &quot;baz&quot;</span><br></pre></td></tr></table></figure><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><h4 id="1-统计字符-charCodeAt"><a href="#1-统计字符-charCodeAt" class="headerlink" title="1.统计字符- charCodeAt"></a>1.统计字符- charCodeAt</h4> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var count = 0;</span><br><span class="line">var str = &quot;23ab2232322 k23ji2&quot;;</span><br><span class="line">for(var i = 0 ;i &lt; str.length; i++)&#123;</span><br><span class="line">  if(str.charCodeAt(i) === 69)&#123;</span><br><span class="line">    count++;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-校验是否存在匹配-match"><a href="#2-校验是否存在匹配-match" class="headerlink" title="2.校验是否存在匹配-match"></a>2.校验是否存在匹配-match</h4> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 未找到匹配则为null</span><br><span class="line"> var str = &#x27;For more information, see Chapter 3.4.5.1&#x27;;</span><br><span class="line"> var re = /see (chapter \d+(\.\d)*)/i;</span><br><span class="line"> var found = str.match(re);</span><br><span class="line"></span><br><span class="line"> console.log(found);</span><br></pre></td></tr></table></figure><h4 id="3-子字符搜索"><a href="#3-子字符搜索" class="headerlink" title="3.子字符搜索"></a>3.子字符搜索</h4> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var str = &#x27;To be, or not to be, that is the question.&#x27;;</span><br><span class="line"></span><br><span class="line">console.log(str.includes(&#x27;To be&#x27;));       // true</span><br><span class="line">console.log(str.includes(&#x27;question&#x27;));    // true</span><br><span class="line">console.log(str.includes(&#x27;nonexistent&#x27;)); // false</span><br></pre></td></tr></table></figure><h4 id="4-返回所有匹配-matchAll"><a href="#4-返回所有匹配-matchAll" class="headerlink" title="4. 返回所有匹配-matchAll"></a>4. 返回所有匹配-matchAll</h4> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let regexp = /t(e)(st(\d?))/g;</span><br><span class="line">let str = &#x27;test1test2&#x27;;</span><br><span class="line"></span><br><span class="line">let array = [...str.matchAll(regexp)];</span><br></pre></td></tr></table></figure><h4 id="5-截取子字符串，"><a href="#5-截取子字符串，" class="headerlink" title="5. 截取子字符串，"></a>5. 截取子字符串，</h4> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> # 不影响原有的</span><br><span class="line"> const str = &#x27;The quick brown fox jumps over the lazy dog.&#x27;;</span><br><span class="line"></span><br><span class="line"> console.log(str.slice(31));</span><br><span class="line"> // expected output: &quot;the lazy dog.&quot;</span><br><span class="line"></span><br><span class="line"> console.log(str.slice(-9, -5));</span><br><span class="line">// expected output: &quot;lazy&quot;</span><br><span class="line"></span><br><span class="line"># substr 将废弃</span><br><span class="line"></span><br><span class="line"># substring</span><br><span class="line"> var anyString = &quot;Mozilla&quot;;</span><br><span class="line"></span><br><span class="line"> // 输出 &quot;Moz&quot;</span><br><span class="line"> console.log(anyString.substring(0,3));</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="6-删除字符串两边空白-trim"><a href="#6-删除字符串两边空白-trim" class="headerlink" title="6.删除字符串两边空白- trim"></a>6.删除字符串两边空白- trim</h4> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">const greeting = &#x27;   Hello world!   &#x27;;</span><br><span class="line"></span><br><span class="line">console.log(greeting);</span><br><span class="line">// expected output: &quot;   Hello world!   &quot;;</span><br><span class="line"></span><br><span class="line">console.log(greeting.trim());</span><br><span class="line">// expected output: &quot;Hello world!&quot;;</span><br></pre></td></tr></table></figure><h2 id="proxy"><a href="#proxy" class="headerlink" title="proxy"></a>proxy</h2><h4 id="定制返回值"><a href="#定制返回值" class="headerlink" title="定制返回值"></a>定制返回值</h4> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"> let products = new Proxy(&#123;</span><br><span class="line">  browsers: [&#x27;Internet Explorer&#x27;, &#x27;Netscape&#x27;]</span><br><span class="line">&#125;, &#123;</span><br><span class="line">  get: function(obj, prop) &#123;</span><br><span class="line">    // 附加一个属性</span><br><span class="line">    if (prop === &#x27;latestBrowser&#x27;) &#123;</span><br><span class="line">      return obj.browsers[obj.browsers.length - 1];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 默认行为是返回属性值</span><br><span class="line">    return obj[prop];</span><br><span class="line">  &#125;,</span><br><span class="line">  set: function(obj, prop, value) &#123;</span><br><span class="line">    // 附加属性</span><br><span class="line">    if (prop === &#x27;latestBrowser&#x27;) &#123;</span><br><span class="line">      obj.browsers.push(value);</span><br><span class="line">      return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 如果不是数组，则进行转换</span><br><span class="line">    if (typeof value === &#x27;string&#x27;) &#123;</span><br><span class="line">      value = [value];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 默认行为是保存属性值</span><br><span class="line">    obj[prop] = value;</span><br><span class="line"></span><br><span class="line">    // 表示成功</span><br><span class="line">    return true;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">console.log(products.browsers); // [&#x27;Internet Explorer&#x27;, &#x27;Netscape&#x27;]</span><br><span class="line">products.browsers = &#x27;Firefox&#x27;;  // 如果不小心传入了一个字符串</span><br><span class="line">console.log(products.browsers); // [&#x27;Firefox&#x27;] &lt;- 也没问题, 得到的依旧是一个数组</span><br><span class="line"></span><br><span class="line">products.latestBrowser = &#x27;Chrome&#x27;;</span><br><span class="line">console.log(products.browsers);      // [&#x27;Firefox&#x27;, &#x27;Chrome&#x27;]</span><br><span class="line">console.log(products.latestBrowser); // &#x27;Chrome&#x27;</span><br></pre></td></tr></table></figure><h3 id="类型安全"><a href="#类型安全" class="headerlink" title="类型安全"></a>类型安全</h3><h4 id=""><a href="#" class="headerlink" title="||"></a>||</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = a || b </span><br></pre></td></tr></table></figure><h4 id="-1"><a href="#-1" class="headerlink" title="??"></a>??</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">const a = undefined;</span><br><span class="line">const b = 22;</span><br><span class="line">const c = a ?? b;</span><br><span class="line">const d = a || b;</span><br><span class="line">console.log(c);</span><br><span class="line">console.log(d);</span><br><span class="line"></span><br><span class="line">//output</span><br><span class="line">22</span><br><span class="line">22</span><br></pre></td></tr></table></figure><h2 id="更多推荐"><a href="#更多推荐" class="headerlink" title="更多推荐"></a>更多推荐</h2><h3 id="Angular开发利器"><a href="#Angular开发利器" class="headerlink" title="Angular开发利器"></a><a href="https://juejin.im/post/5db6561f51882501d7566003">Angular开发利器</a></h3><h3 id="Angular8深入了解Directive指令"><a href="#Angular8深入了解Directive指令" class="headerlink" title="Angular8深入了解Directive指令"></a><a href="https://juejin.im/post/5f09776b5188252e851c6032">Angular8深入了解Directive指令</a></h3><h3 id="Angular8-HttpClient-30分钟深入了解下"><a href="#Angular8-HttpClient-30分钟深入了解下" class="headerlink" title="Angular8 HttpClient 30分钟深入了解下"></a><a href="https://juejin.im/post/5ee344586fb9a0479673478e">Angular8 HttpClient 30分钟深入了解下</a></h3><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><h3 id="array"><a href="#array" class="headerlink" title="array"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce">array</a></h3><h3 id="https-developer-mozilla-org-en-US-docs-Web-JavaScript-Reference-Operators-Operator-Precedence-Table"><a href="#https-developer-mozilla-org-en-US-docs-Web-JavaScript-Reference-Operators-Operator-Precedence-Table" class="headerlink" title="????](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence#Table)"></a><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence#Table">??</a>??](<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence#Table">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence#Table</a>)</h3>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 性能 </tag>
            
            <tag> 原生 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《自动化测试》 - Cypress介绍</title>
      <link href="/2020/11/09/automatically_test_skills/%E3%80%8A%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E3%80%8B%20-%20Cypress%E4%BB%8B%E7%BB%8D/"/>
      <url>/2020/11/09/automatically_test_skills/%E3%80%8A%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E3%80%8B%20-%20Cypress%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<h2 id="Cypress介绍"><a href="#Cypress介绍" class="headerlink" title="Cypress介绍"></a>Cypress介绍</h2><p><img src="https://s3.jpg.cm/2020/11/09/Sg2fO.png"></p><h3 id="Cypress"><a href="#Cypress" class="headerlink" title="Cypress"></a>Cypress</h3><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul><li>1.随时可截屏 - Cypress captures snapshots at the time of test execution.</li><li>2.不需要编写等待命令 - One doesn’t need to add explicit or implicit wait commands in test scripts,</li><li>3.可以使用spy - Developers or QAs can use Spies, Stubs, and Clocks to verify and control the behavior of server responses, functions, or timers.</li><li>4.元素一定会先存着- The automatic scrolling operation ensures that an element is in view before performing any action (for example Clicking on a button)</li><li>5.在真实浏览器中运行，运行速度更快</li></ul><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ul><li>1.不能并发- cannot use Cypress to drive two browsers at the same time</li><li>2.不能多tab-  It doesn’t provide support for multi-tabs</li><li>3.仅支持js - only supports JavaScript for creating test cases</li><li>4.不支持chrome外浏览器 - doesn’t provide support for browsers like Safari and IE at the moment.</li><li><ol start="5"><li>Limited support for iFrames</li></ol></li></ul><h3 id="Selenium"><a href="#Selenium" class="headerlink" title="Selenium"></a>Selenium</h3><h4 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h4><ul><li>1.语言不限定,浏览器也不限定</li><li>2.Compatible with multiple OS like Windows, Linux, Unix, Mac</li><li><ol start="3"><li>browsers like Safari, Chrome, Firefox, etc.</li></ol></li><li>4.Provides Concise APIs</li></ul><h4 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h4><ul><li>1.没有内置命令，产生结果 - automatic generation of test results，</li><li>2.文档体验差</li><li>3.界面加载操作麻烦 - Handling page load or element load is difficult</li><li>4.Limited support for testing images</li><li>5.Creating test cases is time-consuming</li><li>6.环境配置麻烦 - Difficult to set up test environment as compared to Cypress</li></ul><h3 id="如何选择"><a href="#如何选择" class="headerlink" title="如何选择"></a>如何选择</h3><blockquote><p>1.需要在IE，Firefox，以及SauceLabs,BrowserStack运行，就需要选择Selenium<br>2.如果应用基于Angular，React,Vue开发，那么可以选择Cypress</p></blockquote><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 本地安装</span><br><span class="line">npm install cypress -D </span><br><span class="line"></span><br><span class="line"># 全局安装</span><br><span class="line">npm i -g cypress </span><br><span class="line"></span><br><span class="line"># yarn </span><br><span class="line">yarn add cypress --dev</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npx cypress open </span><br><span class="line"></span><br><span class="line">$(npm/.bin)/cypress open</span><br><span class="line"></span><br><span class="line">yarn run cypress open</span><br></pre></td></tr></table></figure><p><img src="https://s3.jpg.cm/2020/11/10/SCeN2.png"></p><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><blockquote><p>webpack打包管理所有测试代码到一个bundle<br>然后处于iframe中运行，进而操作dom</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 自动化测试 </tag>
            
            <tag> cypress </tag>
            
            <tag> selenium </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《angular9》-Angular9 web性能优化</title>
      <link href="/2020/11/06/front_skills/angular/%E3%80%8Aangular8%E3%80%8B-Angular8%20web%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
      <url>/2020/11/06/front_skills/angular/%E3%80%8Aangular8%E3%80%8B-Angular8%20web%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h2 id="angular-web性能优化"><a href="#angular-web性能优化" class="headerlink" title="angular web性能优化"></a>angular web性能优化</h2><img src="https://s3.jpg.cm/2020/11/06/SShmw.png" alt="Angular9 web 性能优化方案" border="0">]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> angular </tag>
            
            <tag> 性能优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Performance》- 前端性能从js code优化开始</title>
      <link href="/2020/11/06/performace_detect_skills/concepts/%E3%80%8APerformance%E3%80%8B-%20%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BB%8Ejs%20code%E4%BC%98%E5%8C%96%E5%BC%80%E5%A7%8B/"/>
      <url>/2020/11/06/performace_detect_skills/concepts/%E3%80%8APerformance%E3%80%8B-%20%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BB%8Ejs%20code%E4%BC%98%E5%8C%96%E5%BC%80%E5%A7%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="性能优化从js规范开始"><a href="#性能优化从js规范开始" class="headerlink" title="性能优化从js规范开始"></a>性能优化从js规范开始</h3><img src="https://s3.jpg.cm/2020/11/06/SSK8O.png" width="400" height="500"><h4 id="1-命名通俗易懂，知名达意"><a href="#1-命名通俗易懂，知名达意" class="headerlink" title="1.命名通俗易懂，知名达意"></a>1.命名通俗易懂，知名达意</h4><h4 id="2-结构不要过深"><a href="#2-结构不要过深" class="headerlink" title="2.结构不要过深"></a>2.结构不要过深</h4><blockquote><p>拆分代码，避免过多深入调用，函数结构化，相关代码存放一起，把逻辑和该逻辑处理的数据放在相近的位置，往往同时修改，不会遗漏</p></blockquote><h4 id="3-扩展性强"><a href="#3-扩展性强" class="headerlink" title="3.扩展性强"></a>3.扩展性强</h4><blockquote><p>代码随时可拓展，且 不影响相关调用代码，封装成接口便于调用</p></blockquote><h4 id="4-删除无用code"><a href="#4-删除无用code" class="headerlink" title="4.删除无用code"></a>4.删除无用code</h4><h4 id="5-代码集中、模块化管理"><a href="#5-代码集中、模块化管理" class="headerlink" title="5.代码集中、模块化管理"></a>5.代码集中、模块化管理</h4><h4 id="6-避免技术债务，及时优化"><a href="#6-避免技术债务，及时优化" class="headerlink" title="6.避免技术债务，及时优化"></a>6.避免技术债务，及时优化</h4><h4 id="7-工具的使用优化code"><a href="#7-工具的使用优化code" class="headerlink" title="7.工具的使用优化code"></a>7.工具的使用优化code</h4><p><img src="https://s3.jpg.cm/2020/11/06/SS9Qi.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 性能优化 </tag>
            
            <tag> performance </tag>
            
            <tag> lighthouse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《CDN》- cdn概要总结</title>
      <link href="/2020/11/03/devops_skills/%E3%80%8ACDN%E3%80%8B-%20cdn%E6%A6%82%E8%A6%81%E6%80%BB%E7%BB%93/"/>
      <url>/2020/11/03/devops_skills/%E3%80%8ACDN%E3%80%8B-%20cdn%E6%A6%82%E8%A6%81%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h3 id="CDN"><a href="#CDN" class="headerlink" title="CDN"></a>CDN</h3><blockquote><p>CDN(content Distribute Network) 内容分发网络。</p></blockquote><ul><li><p>互联网是铁路轨道和信号系统，万维网则是在铁路上运行的列车之一。而在铁路上，除了万维网这个高速列车以外，还有慢车、通勤列车、货运列车和专业维修列车等.不使用WWW的应用同样运行在互联网上，互联网的巨大远远超过运行在其上的任何东西</p></li><li><p>服务响应时间基本是由服务器响应时间和网络时延组成的。影响服务器响应时间的因素包括协议处理时间、程序性能优化、内容读取速度等方面，网络时延则是由数据报文在网络传送中被各个路由器、交换机转发产生的时延总和</p></li><li><p>在互联网领域有一个“8 秒定律”，用户访问一个网站时，如果等待网页打开的时间超过8 秒，会有超过30%的用户放弃等待</p></li><li><p>由于CDN将内容推送到网络边缘，大量的用户访问被分散在网络边缘，不再构成网站出口、互联互通点的资源挤占，也不再需要跨越长距离IP路由了</p></li></ul><h3 id="CDN解析过程"><a href="#CDN解析过程" class="headerlink" title="CDN解析过程"></a>CDN解析过程</h3><ul><li><p>①当用户点击网站页面上的内容URL，经过本地DNS系统解析，DNS系统会最终将域名的解析权交给CNAME指向的CDN专用DNS服务器。</p></li><li><p>②CDN的DNS服务器将CDN的全局负载均衡设备IP地址返回用户。</p></li><li><p>③用户向CDN的全局负载均衡设备发起内容URL访问请求。</p></li><li><p>④CDN全局负载均衡设备根据用户IP地址，以及用户请求的内容URL，选择一台用户所属区域的区域负载均衡设备，告诉用户向这台设备发起请求。</p></li><li><p>⑤区域负载均衡设备会为用户选择一台合适的缓存服务器提供服务，选择的依据包括：根据用户IP地址，判断哪一台服务器距用户最近；根据用户所请求的URL中携带的内容名称，判断哪一台服务器上有用户所需内容；查询各个服务器当前的负载情况，判断哪一台服务器尚有服务能力。基于以上这些条件的综合分析之后，区域负载均衡设备会向全局负载均衡设备返回一台缓存服务器的IP地址。</p></li><li><p>⑥全局负载均衡设备把服务器的IP地址返回给用户。⑦用户向缓存服务器发起请求，缓存服务器响应用户请求，将用户所需内容传送到用户终端。如果这台缓存服务器上并没有用户想要的内容，而区域均衡设备依然将它分配给了用户，那么这台服务器就要向它的上一级缓存服务器请求内容，直至追溯到网站的源服务器将内容拉到本地。</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> CDN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《typescript》- 精读typescript</title>
      <link href="/2020/11/03/front_skills/ts/%E3%80%8Atypescript%E3%80%8B-%20%E7%B2%BE%E8%AF%BBtypescript/"/>
      <url>/2020/11/03/front_skills/ts/%E3%80%8Atypescript%E3%80%8B-%20%E7%B2%BE%E8%AF%BBtypescript/</url>
      
        <content type="html"><![CDATA[<h3 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h3><h4 id="export-default-vs-export"><a href="#export-default-vs-export" class="headerlink" title="export default vs export"></a>export default vs export</h4><ul><li>export default 只能出现一次，export not</li><li>export default <xx>,xx 可以是{},function(){},and others </li><li>export <xx> ,xx可以是{}, const str  &#x3D; xx等形式</li></ul><h4 id="export"><a href="#export" class="headerlink" title="export"></a>export</h4><pre><code>* export 字符串<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># demo.js</span><br><span class="line">export default &#x27;hello world&#x27;</span><br></pre></td></tr></table></figure>* export default &#123;&#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#demo.js</span><br><span class="line">export default &#123;</span><br><span class="line">    hello:&#x27;hello&#x27;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>* export &#123;&#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const hello = &#x27;hello&#x27;</span><br><span class="line">export &#123;</span><br><span class="line">    hello,</span><br><span class="line">&#125;</span><br><span class="line">#or </span><br><span class="line">export const hello = &#x27;hello&#x27;</span><br></pre></td></tr></table></figure></code></pre><h4 id="import"><a href="#import" class="headerlink" title="import"></a><a href="https://rollupjs.org/guide/en/#importing">import</a></h4><pre><code>* import 字符串<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># foo = &#x27;hello world&#x27;</span><br><span class="line">import foo from demo.js</span><br></pre></td></tr></table></figure>* import from default <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># foo =  &#123;</span><br><span class="line">    hello:&#x27;hello&#x27;,</span><br><span class="line">&#125;</span><br><span class="line">import foo from demo.js</span><br></pre></td></tr></table></figure>* import &#123;&#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># hello = &#x27;hello&#x27;</span><br><span class="line">import &#123; hello &#125; from demo.js</span><br></pre></td></tr></table></figure></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> ts </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Css3》- CSS进阶之BFC</title>
      <link href="/2020/11/01/front_skills/css3/%E3%80%8ACss3%E3%80%8B-%20CSS%E8%BF%9B%E9%98%B6%E4%B9%8BBFC/"/>
      <url>/2020/11/01/front_skills/css3/%E3%80%8ACss3%E3%80%8B-%20CSS%E8%BF%9B%E9%98%B6%E4%B9%8BBFC/</url>
      
        <content type="html"><![CDATA[<h3 id="BFC"><a href="#BFC" class="headerlink" title="BFC"></a>BFC</h3><blockquote><p>Block Formatting Context (BFC)，内部自成布局，隔绝与外部</p></blockquote><h4 id="形成方式"><a href="#形成方式" class="headerlink" title="形成方式"></a>形成方式</h4><ul><li>1.float</li><li>2.position: absolute\fixed</li><li>3.html本身</li><li>4.display: inline-block</li><li>5.display: table-cell</li><li>6.display: table-caption,</li><li>7.display: table, table-row, table-row-group, table-header-group, table-footer-group or inline-table</li><li>8.block with overflow not  visible and clip</li><li>9.display: flow-root.</li><li>10.contain: layout, content, or paint.</li><li>11.grid item or flex item</li></ul><h3 id="带来的好处"><a href="#带来的好处" class="headerlink" title="带来的好处"></a>带来的好处</h3><h4 id="清除float"><a href="#清除float" class="headerlink" title="清除float"></a>清除float</h4><pre><code>    - 1.overflow:auto    - 2.display: flow-root    - 3.更好的方式，避免用float 改用grid,flex等</code></pre><h4 id="margin-合并"><a href="#margin-合并" class="headerlink" title="margin 合并"></a>margin 合并</h4><pre><code>- overflow: hidden - 尽可能新特性flew,grid，避免历史版本问题</code></pre><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><h3 id="BFC-1"><a href="#BFC-1" class="headerlink" title="BFC"></a><a href="https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Block_formatting_context">BFC</a></h3>]]></content>
      
      
      <categories>
          
          <category> Sports </category>
          
          <category> Baseball </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> html </tag>
            
            <tag> css3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《angular8》- angular本地json文件读取的2中方法</title>
      <link href="/2020/10/31/front_skills/angular/%E3%80%8Aangular8%E3%80%8B-%20angular%E6%9C%AC%E5%9C%B0json%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E7%9A%842%E4%B8%AD%E6%96%B9%E6%B3%95/"/>
      <url>/2020/10/31/front_skills/angular/%E3%80%8Aangular8%E3%80%8B-%20angular%E6%9C%AC%E5%9C%B0json%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E7%9A%842%E4%B8%AD%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>常有这样的需求，一个html，然后加载json文件，替代调用api,展示日志内容。<br>默认当前用户已安装angular-cli，就不具体的介绍环境安装了。</p><h3 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h3><h4 id="mac环境下"><a href="#mac环境下" class="headerlink" title="mac环境下"></a>mac环境下</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">brew install nvm </span><br><span class="line">nvm install v12.16.1</span><br><span class="line">npm i -g @angular/cli</span><br></pre></td></tr></table></figure><h4 id="项目创建"><a href="#项目创建" class="headerlink" title="项目创建"></a>项目创建</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng new angular-demo</span><br></pre></td></tr></table></figure><h4 id="json文件"><a href="#json文件" class="headerlink" title="json文件"></a>json文件</h4><blockquote><p>json文件，需要放置在assets目录中，否则解析不到，也不会随构建打包到dist中</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">// assets/data.json </span><br><span class="line">[</span><br><span class="line">&#123;</span><br><span class="line">&quot;letter&quot;: &quot;A&quot;,</span><br><span class="line">&quot;frequency&quot;: 0.08167</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">&quot;letter&quot;: &quot;B&quot;,</span><br><span class="line">&quot;frequency&quot;: 0.01492</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">&quot;letter&quot;: &quot;C&quot;,</span><br><span class="line">&quot;frequency&quot;: 0.02782</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">&quot;letter&quot;: &quot;D&quot;,</span><br><span class="line">&quot;frequency&quot;: 0.04253</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">&quot;letter&quot;: &quot;E&quot;,</span><br><span class="line">&quot;frequency&quot;: 0.12702</span><br><span class="line">&#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="import方式读取json"><a href="#import方式读取json" class="headerlink" title="import方式读取json"></a>import方式读取json</h3><h4 id="tsconfig-json配置文件中修改配置"><a href="#tsconfig-json配置文件中修改配置" class="headerlink" title="tsconfig.json配置文件中修改配置"></a>tsconfig.json配置文件中修改配置</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// tsconfig.json compilerOptions 配置 json ，否在json依赖编译失败</span><br><span class="line"> &quot;resolveJsonModule&quot;: true, </span><br></pre></td></tr></table></figure><h4 id="typescript2-9-import"><a href="#typescript2-9-import" class="headerlink" title="typescript2.9+ import"></a>typescript2.9+ import</h4><blockquote><p>需要放置code位于constructor中</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import &#123; HttpClient &#125; from &#x27;@angular/common/http&#x27;;</span><br><span class="line">import &#123; Component &#125; from &#x27;@angular/core&#x27;;</span><br><span class="line">import * as data from &#x27;../assets/data.json&#x27;;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">  selector: &#x27;app-root&#x27;,</span><br><span class="line">  templateUrl: &#x27;./app.component.html&#x27;,</span><br><span class="line">  styleUrls: [&#x27;./app.component.scss&#x27;]</span><br><span class="line">&#125;)</span><br><span class="line">export class AppComponent &#123;</span><br><span class="line">  products:any;</span><br><span class="line"></span><br><span class="line">  constructor(private http: HttpClient) &#123;</span><br><span class="line">    const res  = (data as any).default;</span><br><span class="line">    console.log(res);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Angular-HttpClient-读取json"><a href="#Angular-HttpClient-读取json" class="headerlink" title="Angular HttpClient 读取json"></a>Angular HttpClient 读取json</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">// app.module.ts 别忘了imports HttpClientModule </span><br><span class="line">import &#123; HttpClient &#125; from &#x27;@angular/common/http&#x27;;</span><br><span class="line">import &#123; Component &#125; from &#x27;@angular/core&#x27;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">  selector: &#x27;app-root&#x27;,</span><br><span class="line">  templateUrl: &#x27;./app.component.html&#x27;,</span><br><span class="line">  styleUrls: [&#x27;./app.component.scss&#x27;]</span><br><span class="line">&#125;)</span><br><span class="line">export class AppComponent &#123;</span><br><span class="line">  products:any;</span><br><span class="line"></span><br><span class="line">  constructor(private http: HttpClient) &#123;</span><br><span class="line">    this.http.get(&#x27;assets/data.json&#x27;).subscribe(data =&gt;&#123;</span><br><span class="line">      console.log(&#x27;data....&#x27;,data);</span><br><span class="line">      this.products = data;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编写完毕后，文件部署"><a href="#编写完毕后，文件部署" class="headerlink" title="编写完毕后，文件部署"></a>编写完毕后，文件部署</h3><h4 id="部署到静态服务器"><a href="#部署到静态服务器" class="headerlink" title="部署到静态服务器"></a>部署到静态服务器</h4><blockquote><p>譬如 <a href="https://www.npmjs.com/package/http-server">http-server</a><br> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install --global http-server</span><br><span class="line">http-server -c-1 -p 8080 . </span><br></pre></td></tr></table></figure></p></blockquote><h4 id="部署到tomcat"><a href="#部署到tomcat" class="headerlink" title="部署到tomcat"></a>部署到tomcat</h4><blockquote><p>tomcat项目部署，需要注意index.html中base,非&#x2F;<br> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;base href=&quot;./&quot; &gt; </span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> angular </tag>
            
            <tag> json </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《angular8》- angular8 graphQL实践</title>
      <link href="/2020/10/30/front_skills/angular/%E3%80%8Aangular8%E3%80%8B-%20angular8%20graphQL%E5%AE%9E%E8%B7%B5/"/>
      <url>/2020/10/30/front_skills/angular/%E3%80%8Aangular8%E3%80%8B-%20angular8%20graphQL%E5%AE%9E%E8%B7%B5/</url>
      
        <content type="html"><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><h4 id="1-with-angular-cli"><a href="#1-with-angular-cli" class="headerlink" title="1.with angular-cli"></a>1.with angular-cli</h4><blockquote><p>先创建angular项目，否则会出现如下错误：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The add command requires to be run in an Angular project, but a project definition could not be found.</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ng new graphGL-demo</span><br><span class="line"></span><br><span class="line">ng add apollo-angular</span><br></pre></td></tr></table></figure><blockquote><p>修改文件 src&#x2F;app&#x2F;graphql.module.ts<br>&#x2F;&#x2F;our test Graphql Server which returns rates</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const uri = &#x27;https://o5x5jzoo7z.sse.codesandbox.io/graphql&#x27;;</span><br></pre></td></tr></table></figure><blockquote><p>本文基于angular-cli已安装进行介绍</p></blockquote><h4 id="2-without-angular-cli"><a href="#2-without-angular-cli" class="headerlink" title="2.without angular-cli"></a>2.without angular-cli</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">npm install --save apollo-angular \</span><br><span class="line">  apollo-angular-link-http \</span><br><span class="line">  apollo-link \</span><br><span class="line">  apollo-client \</span><br><span class="line">  apollo-cache-inmemory \</span><br><span class="line">  graphql-tag \</span><br><span class="line">  graphql</span><br></pre></td></tr></table></figure><h3 id="hello-world"><a href="#hello-world" class="headerlink" title="hello-world"></a>hello-world</h3><h4 id="创建新组建"><a href="#创建新组建" class="headerlink" title="创建新组建"></a>创建新组建</h4>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng g component hello-world</span><br></pre></td></tr></table></figure><h4 id="添加graphql引用组件"><a href="#添加graphql引用组件" class="headerlink" title="添加graphql引用组件"></a>添加graphql引用组件</h4>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">rates: any[];</span><br><span class="line">  loading = true;</span><br><span class="line">  error: any;</span><br><span class="line"></span><br><span class="line">  constructor(private apollo: Apollo) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  ngOnInit() &#123;</span><br><span class="line">    this.apollo</span><br><span class="line">      .watchQuery(&#123;</span><br><span class="line">        query: gql`</span><br><span class="line">          &#123;</span><br><span class="line">            rates(currency: &quot;USD&quot;) &#123;</span><br><span class="line">              currency</span><br><span class="line">              rate</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        `,</span><br><span class="line">      &#125;)</span><br><span class="line">      .valueChanges.subscribe((result:any) =&gt; &#123;</span><br><span class="line">        this.rates = result.data &amp;&amp; result.data.rates;</span><br><span class="line">        this.loading = result.loading;</span><br><span class="line">        this.error = result.error;</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h4 id="添加graphql-html"><a href="#添加graphql-html" class="headerlink" title="添加graphql html"></a>添加graphql html</h4>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;div *ngIf=&quot;loading&quot;&gt;</span><br><span class="line">Loading...</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div *ngIf=&quot;error&quot;&gt;</span><br><span class="line">  Error :(</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div *ngIf=&quot;rates&quot;&gt;</span><br><span class="line">  &lt;div *ngFor=&quot;let rate of rates&quot;&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123;rate.currency&#125;&#125;: &#123;&#123;rate.rate&#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><h4 id="Angular"><a href="#Angular" class="headerlink" title="Angular"></a><a href="https://angular.io/guide/glossary#structural-directive">Angular</a></h4>]]></content>
      
      
      
        <tags>
            
            <tag> angular </tag>
            
            <tag> graphQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《wasm》- go入门</title>
      <link href="/2020/10/22/performace_detect_skills/wasm/%E3%80%8Awasm%E3%80%8B-%20go%E5%85%A5%E9%97%A8/"/>
      <url>/2020/10/22/performace_detect_skills/wasm/%E3%80%8Awasm%E3%80%8B-%20go%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="go-概览"><a href="#go-概览" class="headerlink" title="go 概览"></a>go 概览</h3><blockquote><p>go类似C，面向过程开发<br><img src="https://s1.ax1x.com/2020/10/23/Bkg6IJ.png"></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> wasm </tag>
            
            <tag> rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《wasm》- wasm原理</title>
      <link href="/2020/10/19/performace_detect_skills/wasm/%E3%80%8Awasm%E3%80%8B-%20wasm%E5%8E%9F%E7%90%86/"/>
      <url>/2020/10/19/performace_detect_skills/wasm/%E3%80%8Awasm%E3%80%8B-%20wasm%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h3 id="wasm-概览"><a href="#wasm-概览" class="headerlink" title="wasm 概览"></a>wasm 概览</h3><blockquote><p>开发效率角度来说，大多使用GO,Rust，编译为wasm<br><img src="https://s1.ax1x.com/2020/10/20/BSp7r9.png"></p></blockquote><h3 id="wasm-重要知识点"><a href="#wasm-重要知识点" class="headerlink" title="wasm 重要知识点"></a>wasm 重要知识点</h3>]]></content>
      
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> wasm </tag>
            
            <tag> rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《webpack》- webpack进阶指南</title>
      <link href="/2020/10/14/front_package_build_skills/webpack/%E3%80%8Awebpack%E3%80%8B-%20webpack%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97/"/>
      <url>/2020/10/14/front_package_build_skills/webpack/%E3%80%8Awebpack%E3%80%8B-%20webpack%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<h2 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h2>]]></content>
      
      
      
        <tags>
            
            <tag> webpack </tag>
            
            <tag> core concepts </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《vue》vue进阶指南</title>
      <link href="/2020/10/14/front_skills/vue/%E3%80%8Avue%E3%80%8Bvue%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97/"/>
      <url>/2020/10/14/front_skills/vue/%E3%80%8Avue%E3%80%8Bvue%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> vue-cli </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《D3》- d3 api结构速查手册</title>
      <link href="/2020/10/13/front_skills/d3/%E3%80%8AD3%E3%80%8B-%20d3%20api%E7%BB%93%E6%9E%84%E9%80%9F%E6%9F%A5%E6%89%8B%E5%86%8C/"/>
      <url>/2020/10/13/front_skills/d3/%E3%80%8AD3%E3%80%8B-%20d3%20api%E7%BB%93%E6%9E%84%E9%80%9F%E6%9F%A5%E6%89%8B%E5%86%8C/</url>
      
        <content type="html"><![CDATA[<h3 id="api-结构速查"><a href="#api-结构速查" class="headerlink" title="api 结构速查"></a>api 结构速查</h3><p><img src="https://s1.ax1x.com/2020/10/14/04RFpQ.png"></p><h3 id="api使用code"><a href="#api使用code" class="headerlink" title="api使用code"></a>api使用code</h3>]]></content>
      
      
      
        <tags>
            
            <tag> svg </tag>
            
            <tag> html </tag>
            
            <tag> d3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《技术素养》- Linux内核</title>
      <link href="/2020/10/08/do_at_workspace/%E3%80%8A%E6%8A%80%E6%9C%AF%E7%B4%A0%E5%85%BB%E3%80%8B-%20Linux%E5%86%85%E6%A0%B8/"/>
      <url>/2020/10/08/do_at_workspace/%E3%80%8A%E6%8A%80%E6%9C%AF%E7%B4%A0%E5%85%BB%E3%80%8B-%20Linux%E5%86%85%E6%A0%B8/</url>
      
        <content type="html"><![CDATA[<h3 id="Linux内核"><a href="#Linux内核" class="headerlink" title="Linux内核"></a>Linux内核</h3><blockquote><p>内核逐代升级，源码复杂，大多基于初始版本0.11核心思想。<br>启动分三步走：</p></blockquote><ul><li>加电，启动BIOS</li><li>加载操作系统到内存</li><li>为执行32位的main函数做过渡工作</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Linux内核 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Js》- js原生开发避坑指南</title>
      <link href="/2020/09/30/front_skills/js/%E3%80%8AJs%E3%80%8B-js%E5%8E%9F%E7%94%9F%E5%BC%80%E5%8F%91%E9%81%BF%E5%9D%91%E6%8C%87%E5%8D%97/"/>
      <url>/2020/09/30/front_skills/js/%E3%80%8AJs%E3%80%8B-js%E5%8E%9F%E7%94%9F%E5%BC%80%E5%8F%91%E9%81%BF%E5%9D%91%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<h3 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h3><h4 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a><a href="http://web.mit.edu/jwalden/www/isArray.html">instanceof</a></h4><blockquote><p>请问下，instanceof 一定能判断类型吗？</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var iframe = document.createElement(&#x27;iframe&#x27;);</span><br><span class="line">document.body.appendChild(iframe);</span><br><span class="line">xArray = window.frames[window.frames.length-1].Array;</span><br><span class="line">var arr = new xArray(1,2,3); // [1,2,3]</span><br><span class="line"></span><br><span class="line">arr instanceof Array; </span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2020/09/30/0uUMex.png"></p><blockquote><p>原因如下：<br>o instanceof Array works correctly only if o is an array created by that page’s original Array constructor（or, equivalently, by use of an array literal in that page）</p></blockquote><h4 id="isArray"><a href="#isArray" class="headerlink" title="isArray"></a>isArray</h4><blockquote><p>请问，如下结果是true? false? </p></blockquote> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Array.isArray(new Uint8Array(32)) </span><br></pre></td></tr></table></figure><p> <img src="https://s1.ax1x.com/2020/09/30/0uUSQs.png"></p><blockquote><p>原因如下：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># [object Uint8Array]</span><br><span class="line">Array.isArray = function(arg) &#123;</span><br><span class="line">   return Object.prototype.toString.call(arg) === &#x27;[object Array]&#x27;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 请问，你想到结果是什么吗？是否会发生异常？</span><br><span class="line"></span><br><span class="line">const arr = [1,undefined,2,undefined,4,undefined];</span><br><span class="line">arr.sort((a,b) =&gt; &#123;</span><br><span class="line">   return a.name &gt; b.name</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2020/09/30/0uUItU.png"></p><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort">原因如下</a>：</p></blockquote><blockquote><p>If compareFunction is supplied, all non-undefined array elements are sorted according to the return value of the compare function (all undefined elements are sorted to the end of the array, with no call to compareFunction)</p></blockquote><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><h4 id="substr"><a href="#substr" class="headerlink" title="substr"></a>substr</h4><p><img src="https://s1.ax1x.com/2020/09/30/0mcCZ9.png"></p><h3 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h3><h4 id="new-Date"><a href="#new-Date" class="headerlink" title="new Date"></a>new Date</h4><blockquote><p>1.Date存在浏览器兼容问题,尤其在涉及startTime，endTime等时间排序，Chrome兼容性强，FF，Safari兼容性存在不足。</p></blockquote><blockquote><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date">MDN web docs介绍</a>如下：<br>  <img src="https://s1.ax1x.com/2020/09/30/0mcpqJ.md.png"></p></blockquote><blockquote><p>code运行效果  </p></blockquote><ul><li><p>chrome - 空格、T一样效果<br>  <img src="https://s1.ax1x.com/2020/09/30/0m60gO.png"></p></li><li><p>firefox - 空格、T一样效果<br>  <img src="https://s1.ax1x.com/2020/09/30/0m6w8K.png"></p></li><li><p>Safari - 空格、T不一样效果<br> <img src="https://s1.ax1x.com/2020/09/30/0m6ybd.png"></p></li></ul><h4 id="Date字符串中的T"><a href="#Date字符串中的T" class="headerlink" title="Date字符串中的T"></a>Date字符串中的T</h4><blockquote><p>2.Date值中，我们常常看到T ，那么T是干嘛的呢？</p></blockquote><ul><li>针对chrome,ff而言，T跟空格都是一样的，标志着时间部分的开始的，但是在safari空格不能生效，上图即可表明。<br> <img src="https://s1.ax1x.com/2020/09/30/0m6U4x.png"></li></ul><h3 id="Boolean"><a href="#Boolean" class="headerlink" title="Boolean"></a>Boolean</h3><h4 id="new-Boolean"><a href="#new-Boolean" class="headerlink" title="new Boolean"></a>new Boolean</h4><blockquote><p>请问如下结果是true? 还是false ? </p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var myFalse = new Boolean(false);   </span><br><span class="line">var g = new Boolean(myFalse); </span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2020/09/30/0ud6Ln.png"></p><blockquote><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Boolean">原因如下</a>：</p></blockquote><ul><li>得到false值有如下方式： <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var bNoParam = new Boolean();</span><br><span class="line">var bZero = new Boolean(0);</span><br><span class="line">var bNull = new Boolean(null);</span><br><span class="line">var bEmptyString = new Boolean(&#x27;&#x27;);</span><br><span class="line">var bfalse = new Boolean(false);</span><br></pre></td></tr></table></figure></li><li>得到true，有如下方式： <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var btrue = new Boolean(true);</span><br><span class="line">var btrueString = new Boolean(&#x27;true&#x27;);</span><br><span class="line">var bfalseString = new Boolean(&#x27;false&#x27;);</span><br><span class="line">var bSuLin = new Boolean(&#x27;Su Lin&#x27;);</span><br><span class="line">var bArrayProto = new Boolean([]);</span><br><span class="line">var bObjProto = new Boolean(&#123;&#125;); </span><br></pre></td></tr></table></figure></li><li>从上，我们可以看出，myFalse是对象，那么我们得到的就是true.</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 避坑 </tag>
            
            <tag> 性能 </tag>
            
            <tag> 原生 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《技术素养》- 编程原则</title>
      <link href="/2020/09/28/do_at_workspace/%E3%80%8A%E6%8A%80%E6%9C%AF%E7%B4%A0%E5%85%BB%E3%80%8B-%20%E7%BC%96%E7%A8%8B%E5%8E%9F%E5%88%99/"/>
      <url>/2020/09/28/do_at_workspace/%E3%80%8A%E6%8A%80%E6%9C%AF%E7%B4%A0%E5%85%BB%E3%80%8B-%20%E7%BC%96%E7%A8%8B%E5%8E%9F%E5%88%99/</url>
      
        <content type="html"><![CDATA[<h4 id="1-新语言、新构建等工具提效"><a href="#1-新语言、新构建等工具提效" class="headerlink" title="1.新语言、新构建等工具提效"></a>1.新语言、新构建等工具提效</h4><blockquote><p>在软件非本质部分的改善中，成效最大的当属自动化。测试、构建、环境搭建等的自动化大幅改善了工作效率和工作质量。我们要对软件的非本质部分进行自动化处理，尽量多留些时间给软件的本质部分 </p></blockquote><h4 id="2-代码即设计文档"><a href="#2-代码即设计文档" class="headerlink" title="2.代码即设计文档"></a>2.代码即设计文档</h4><blockquote><p>敏捷开发只是不生成无用的文档，并没有主张“不生成文档”.代码能很好地表达“怎么做”和“是什么”，却不能表达“为什么”，也就是设计理由。将设计理由描述在文档中，能为维护负责人提供判断材料。这种做法能在很多情况下起到作用</p></blockquote><h4 id="3-编写经得起修改的代码"><a href="#3-编写经得起修改的代码" class="headerlink" title="3.编写经得起修改的代码"></a>3.编写经得起修改的代码</h4><blockquote><p>代码不是写完就结束了，它在日后必然会被修改。没有写完就扔的一次性代码。在编写代码的时候，我们应将“代码会被修改”这一点作为进行判断和选择时的优先考虑事项。<br>提高代码的可读性就显得尤为重要了.</p></blockquote><h4 id="4-保持代码简洁"><a href="#4-保持代码简洁" class="headerlink" title="4.保持代码简洁"></a>4.保持代码简洁</h4><blockquote><p>各要素职责明确，使得测试也变得简单易行. 尽可能将多余的、过剩的要素从代码中剔除.可以实现相同功能的情况下，不含多余内容的代码更能减轻阅读者的负担，可读性更高，也更易于改善。 </p></blockquote><blockquote><p>避免以下情况：</p></blockquote><ul><li>试图使用新学会的技术</li><li>以备将来之需</li><li>擅自增加需求</li></ul><h4 id="5-严禁粘贴复制代码"><a href="#5-严禁粘贴复制代码" class="headerlink" title="5.严禁粘贴复制代码"></a>5.严禁粘贴复制代码</h4><blockquote><p>代码一旦出现重复，故障修复、添加功能等，代码的改善措施就会变得难以实施.</p></blockquote><ul><li>代码的可读性下降</li><li>代码难以修改, 稍有不慎，修改就会出现遗漏</li><li>出现重复的代码大多是遗留代码，也就是说，这部分代码没有经过任何测试.</li></ul><blockquote><p>可以通过对代码执行抽象化操作来消除重复.</p></blockquote><ul><li>即便要花时间重构，即便要花时间消除代码不能正常运行的风险，即便操作起来有些麻烦，我们也要消除重复的代码</li><li>当遇到遗留代码时，我们首先要为其编写测试程序。如果没有测试程序，就无法得知代码到底是变好了还是变坏了</li></ul><h4 id="6-只写所需最低限度的代码"><a href="#6-只写所需最低限度的代码" class="headerlink" title="6. 只写所需最低限度的代码"></a>6. 只写所需最低限度的代码</h4><blockquote><p>不能以“可能会用到”为动机编写代码。我们要在需要的时候写需要的代码</p></blockquote><h4 id="7-代码是唯一线索"><a href="#7-代码是唯一线索" class="headerlink" title="7.代码是唯一线索"></a>7.代码是唯一线索</h4><blockquote><p>需求定义文档只描述了需要什么东西。基本设计文档只描述了用什么样的软件来实现需求。详细设计文档只描述了成品软件是什么样的结构。详细设计文档虽然与代码最接近，但代码是动态变更的，而详细设计文档往往做不到同步，更何况并非每个项目都有详细设计文档。所以说详细设计文档并不是百分之百存在且百分之百有用的。到头来，我们只能通过阅读代码来掌握软件的运行情况。因此，编写可读性高的代码，用代码表达意图是唯一可取的方法。</p></blockquote><blockquote><p>只有能够向读者准确传达意图的代码，才是能够帮我们达到目的的好代码。</p></blockquote><blockquote><p>理想的代码，是可读性高到没有注释也能读懂的代码<br>代码毕竟只能表达“做什么”和“怎么做”。要表达“为什么这样做”，还需要用到注释。</p></blockquote><h4 id="8-code-有归整性，而不是随意安置、添加"><a href="#8-code-有归整性，而不是随意安置、添加" class="headerlink" title="8.code 有归整性，而不是随意安置、添加"></a>8.code 有归整性，而不是随意安置、添加</h4><blockquote><p>统一各抽象级别之后，代码就可以像图书一样供人阅读了。高级到中级的处理相当于图书的目录，级别最低的处理相当于图书的正文。</p></blockquote><h4 id="9-具备扩展性"><a href="#9-具备扩展性" class="headerlink" title="9.具备扩展性"></a>9.具备扩展性</h4><blockquote><p>代码能够灵活应对变化，对扩展开放，对修改关闭。如果能够满足上述要求，就算需求发生变化，我们只要给代码添加新的行为，就能毫无风险地完成对软件的修改。可以使用接口包裹变化的部分。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 编程原则 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《angular》- webworker 、service worker、 PWA 区别</title>
      <link href="/2020/09/26/front_skills/angular/%E3%80%8AAngular%E3%80%8B-%20webwork%20servicework%20PWA%20%E5%8C%BA%E5%88%AB/"/>
      <url>/2020/09/26/front_skills/angular/%E3%80%8AAngular%E3%80%8B-%20webwork%20servicework%20PWA%20%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<h3 id="webworker"><a href="#webworker" class="headerlink" title="webworker"></a><a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API">webworker</a></h3><blockquote><p>开启子线程运行cpu计算任务，减轻主线程计算任务，提升用户交互体验<br>webworker 需要考虑兼容性,SSR端不支持</p></blockquote><ul><li><p>支持：</p></li><li><p>websocket</p></li><li><p>通过message，线程之间共享信息</p></li><li><p>不支持：</p></li><li><p>不支持dom操作，</p></li><li><p>部分windows方法不支持，</p></li><li><p>不支持内存变量共享，</p></li><li><p>ajax支持存在问题，待验证，axios如何？？</p></li></ul><blockquote><p>存在以下几种分类：</p></blockquote><ul><li>专门完成计算型任务的 “Computed Worders” </li><li>iframe等共享的 Shared workers</li><li>提升网络用户体验的 Service workers</li><li>支持度有限的 Chrome Workers</li></ul><h4 id="webworker-angular-创建"><a href="#webworker-angular-创建" class="headerlink" title="webworker angular 创建"></a>webworker angular 创建</h4> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ng generate web-worker &lt;location&gt; </span><br><span class="line"></span><br><span class="line">#相对于src/app路径</span><br><span class="line">ng g webWorker hello/hello --force --snippet</span><br></pre></td></tr></table></figure><blockquote><p>相对于angular项目root路径，angular.json中配置。</p></blockquote>  <img src="https://s1.ax1x.com/2020/09/28/0ArszR.png" width="500" height="400">  <blockquote><p>另外也可以通过vscode插件创建</p></blockquote><blockquote><p>文件命名路径层级使用&#x2F;表示</p></blockquote><p>  <img src="https://s1.ax1x.com/2020/09/28/0ArgL6.png"></p><blockquote><p>初次调用，会生成2个文件</p></blockquote><ul><li>tsconfig.worker.json</li><li>xx.worker.ts文件</li><li>更新angular.json文件</li></ul><blockquote><p>再次调用，</p></blockquote><ul><li>会更新对应组件</li><li>更新angular.json</li></ul><blockquote><p>angular小知识点 - 组件前缀控制<br>  <img src="https://s1.ax1x.com/2020/09/28/0ArXTS.md.png"></p></blockquote><h4 id="webworker-code编写"><a href="#webworker-code编写" class="headerlink" title="webworker code编写"></a>webworker code编写</h4><blockquote><p>webworker<br> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">/// &lt;reference lib=&quot;webworker&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">addEventListener</span>(<span class="string">&#x27;message&#x27;</span>, <span class="function">(<span class="params">&#123; data &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;get data ...&quot;</span>,data);</span><br><span class="line">  <span class="keyword">const</span> response = <span class="string">`Hi <span class="subst">$&#123;data&#125;</span>,good morning,`</span>;</span><br><span class="line">  <span class="title function_">postMessage</span>(response);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>主线程code<br> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="title class_">Worker</span> !== <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line">   <span class="comment">// Create a new</span></span><br><span class="line">   <span class="keyword">const</span> worker = <span class="keyword">new</span> <span class="title class_">Worker</span>(<span class="string">&#x27;./hello.worker&#x27;</span>, &#123; <span class="attr">type</span>: <span class="string">&#x27;module&#x27;</span> &#125;);</span><br><span class="line">   worker.<span class="property">onmessage</span> = <span class="function">(<span class="params">&#123; data &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`click hello and get response message: <span class="subst">$&#123;data&#125;</span>`</span>);</span><br><span class="line">   &#125;;</span><br><span class="line">   worker.<span class="title function_">postMessage</span>(<span class="string">&#x27;xiaoming&#x27;</span>);</span><br><span class="line"> &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;worker not support ...&quot;</span>);</span><br><span class="line">   <span class="comment">// Web Workers are not supported in this environment.</span></span><br><span class="line">   <span class="comment">// You should add a fallback so that your program still executes correctly.</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>效果<br> <img src="https://s1.ax1x.com/2020/09/28/0AsulR.gif"></p></blockquote><h3 id="servicework"><a href="#servicework" class="headerlink" title="servicework"></a><a href="https://angular.io/guide/service-worker-intro">servicework</a></h3><blockquote><p>是开启pwa关键一步,是运行在浏览器、web app与network之间的的代理服务，web app不直连网络，减少依赖<br>主要用于管理应用的缓存，是一种特殊的web worker</p></blockquote><ul><li>是脚本，可编码，不需要服务端header 参与缓存管理</li><li>不仅仅支持http请求，也支持js，css资源缓存</li><li>主要用于拦截请求，改变响应内容，资源只有修改了，才会重新请求</li></ul><h4 id="angular-service-worker"><a href="#angular-service-worker" class="headerlink" title="angular service worker "></a><a href="https://angular.io/guide/service-worker-intro">angular service worker </a></h4><blockquote><p>manifest文件， 从服务端获取，由cli配置文件 ngsw-config.json 文件生成</p></blockquote><ul><li>定义了缓存哪些文件，以及缓存文件内容的hash值</li><li>推荐使用最新版angular，angular-cli</li><li>本地不要求后端服务http，其他要求基于https协议</li><li>可以检查内容更新、进行更新推送通知，如果浏览器端不支持，则新特性不会发生。  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//可以使用此方法，检测，避免不支持，不停的抛出错误</span></span><br><span class="line"><span class="keyword">if</span>(<span class="title class_">SwUpdate</span>.<span class="title function_">isEnabled</span>())&#123;</span><br><span class="line">  <span class="title class_">SwUpdate</span>.<span class="title function_">checkForUpdate</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>没有使用service-worker,刷新界面，会出现页面不可用<br> <img src="https://s1.ax1x.com/2020/10/18/0O5ynI.png"></li></ul><h4 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h4><ul><li><p>添加angular service-worker支持</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng add @angular/pwa --project angular-demo</span><br></pre></td></tr></table></figure><p> <img src="https://s1.ax1x.com/2020/10/18/0O57Bq.png"></p></li><li><p>构建应用 –prod，为了资源压缩</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng build --prod </span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2020/10/18/0O5jCF.md.png"></p></li><li><p><a href="https://www.npmjs.com/package/http-server">http-server</a>支持service-worker加载静态资源</p><blockquote><p>需要留意是否全局安装，</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm i http-server  --global</span><br><span class="line"></span><br><span class="line">http-server -p 8080 -c-1 dist/angular-demo</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2020/10/18/0OIQVP.png"></p></li><li><p>刷新界面，查看效果<br><img src="https://s1.ax1x.com/2020/10/18/0OI158.png"></p></li></ul><h3 id="PWA"><a href="#PWA" class="headerlink" title="PWA"></a>PWA</h3><blockquote><p><a href="https://www.smashingmagazine.com/2018/09/pwa-angular-6/">Progressive Web App </a><br>表现类似于本地app，但是通过该网络url调用，那么版本更新就快了</p></blockquote><ul><li>Progressive<br>Work for every user, regardless of browser choice, because they are built with progressive enhancement as a core tenet.</li><li>Responsive<br>Fit any form factor, desktop, mobile, tablet, or whatever is next.</li><li>Connectivity independent<br>Enhanced with service workers to work offline or on low-quality networks.</li><li>App-like<br>Use the app-shell model to provide app-style navigation and interactions.</li><li>Fresh<br>Always up-to-date thanks to the service worker update process.</li><li>Safe<br>Served via HTTPS to prevent snooping and ensure content has not been tampered with.</li><li>Discoverable<br>Are identifiable as “applications” thanks to W3C manifests and service worker registration scope allowing search engines to find them.</li><li>Re-engageable<br>Make re-engagement easy through features like push notifications.</li><li>Installable<br>Allow users to “keep” apps they find most useful on their home screen without the hassle of an app store.</li><li>Linkable<br>Easily share via URL and not require complex installation.</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> angular </tag>
            
            <tag> webWorker </tag>
            
            <tag> webservice </tag>
            
            <tag> PWA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Linux》- shell rpm yum管理</title>
      <link href="/2020/09/25/devops_skills/linux/%E3%80%8ALinux%E3%80%8B-%20shell%20%20rpm%20yum%E7%AE%A1%E7%90%86/"/>
      <url>/2020/09/25/devops_skills/linux/%E3%80%8ALinux%E3%80%8B-%20shell%20%20rpm%20yum%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h3 id="linux-yum"><a href="#linux-yum" class="headerlink" title="linux yum"></a>linux yum</h3><blockquote><p>yum两种安装方式：</p></blockquote><ul><li>联网</li><li>本地光盘，不推荐</li></ul><h4 id="验证是否已安装"><a href="#验证是否已安装" class="headerlink" title="验证是否已安装"></a>验证是否已安装</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#如果没有，则需要手动安装</span><br><span class="line">rpm -qa | grep yum</span><br></pre></td></tr></table></figure><h4 id="源配置文件"><a href="#源配置文件" class="headerlink" title="源配置文件"></a>源配置文件</h4><blockquote><p>yum源配置文件保存在&#x2F;etc&#x2F;yum.repos.d&#x2F;,文件的扩展名一定是“*.repo”, 默认CentOS-Base.repo生效<br><img src="https://s1.ax1x.com/2020/09/26/0CxiGR.png"></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[base]</span><br><span class="line">name=CentOS-$releasever</span><br><span class="line">enabled=1</span><br><span class="line">failovermethod=priority</span><br><span class="line">baseurl=http://mirrors.cloud.aliyuncs.com/centos/$releasever/os/$basearch/</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=http://mirrors.cloud.aliyuncs.com/centos/RPM-GPG-KEY-CentOS-7</span><br><span class="line"></span><br><span class="line">[updates]</span><br><span class="line">name=CentOS-$releasever</span><br><span class="line">enabled=1</span><br><span class="line">failovermethod=priority</span><br><span class="line">baseurl=http://mirrors.cloud.aliyuncs.com/centos/$releasever/updates/$basearch/</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=http://mirrors.cloud.aliyuncs.com/centos/RPM-GPG-KEY-CentOS-7</span><br><span class="line"></span><br><span class="line">[extras]</span><br><span class="line">name=CentOS-$releasever</span><br><span class="line">enabled=1</span><br><span class="line">failovermethod=priority</span><br><span class="line">baseurl=http://mirrors.cloud.aliyuncs.com/centos/$releasever/extras/$basearch/</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=http://mirrors.cloud.aliyuncs.com/centos/RPM-GPG-KEY-CentOS-7</span><br><span class="line">~                                                                                                            </span><br></pre></td></tr></table></figure><p>[base]：容器名称，一定要放在[]中。</p><ul><li>name：容器说明，可以自己随便写。</li><li>mirrorlist：镜像站点，这个可以注释掉。</li><li>baseurl：我们的yum源服务器的地址。默认是CentOS官方的yum源服务器，是可以使用的。如果你觉得慢，则可以改成你喜欢的yum源地址。</li><li>enabled：此容器是否生效，如果不写或写成enable&#x3D;1则表示此容器生效，写成enable&#x3D;0则表示此容器不生效。</li><li>gpgcheck：如果为1则表示RPM的数字证书生效；如果为0则表示RPM的数字证书不生效。</li><li>gpgkey：数字证书的公钥文件保存位置。不用修改。</li></ul><h3 id="yum命令"><a href="#yum命令" class="headerlink" title="yum命令"></a>yum命令</h3><h4 id="查看所有"><a href="#查看所有" class="headerlink" title="查看所有"></a>查看所有</h4><blockquote><p>查询yum源服务器上所有可安装的软件包列表<br> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum list </span><br></pre></td></tr></table></figure></p></blockquote><h4 id="查看是否存在包"><a href="#查看是否存在包" class="headerlink" title="查看是否存在包"></a>查看是否存在包</h4><blockquote><p>查询yum源服务器中是否包含某个软件包</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum list samba</span><br></pre></td></tr></table></figure><h4 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum search samba </span><br></pre></td></tr></table></figure><h4 id="查看包信息"><a href="#查看包信息" class="headerlink" title="查看包信息"></a>查看包信息</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum info samba </span><br></pre></td></tr></table></figure><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><blockquote><p>手工使用RPM包安装太麻烦了，所以使用yum安装。yum安装可以自动解决依赖性，而且安装速度也比源码包快得多</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install httpd </span><br></pre></td></tr></table></figure><h4 id="升级"><a href="#升级" class="headerlink" title="升级"></a>升级</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y update 包名</span><br></pre></td></tr></table></figure><h4 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum remove 包名</span><br></pre></td></tr></table></figure><h3 id="yum-软件组"><a href="#yum-软件组" class="headerlink" title="yum 软件组"></a>yum 软件组</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#查看可以安装列表</span><br><span class="line">yum grouplist</span><br><span class="line">yum groupinfo 包名</span><br><span class="line">yum groupinstall 包名</span><br><span class="line">yum groupremove 包名</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="脚本安装"><a href="#脚本安装" class="headerlink" title="脚本安装"></a>脚本安装</h3><blockquote><p>安装一个叫作Webmin的工具软件，Webmin是一个基于Web的系统管理界面</p></blockquote><h3 id="安装包选择"><a href="#安装包选择" class="headerlink" title="安装包选择"></a>安装包选择</h3><blockquote><p>如果是Linux的底层模块和自带软件，则推荐使用RPM包安装，比如gcc、图形界面、开发库等。另外，不需要手工定制功能的软件，都推荐使用RPM包安装，毕竟安装简单。</p></blockquote><blockquote><p>如果是在服务器上应用的服务程序，则推荐使用源码包安装，比如apache、DNS、Mail等服务程序。这样它们更适合你的服务器系统，性能更加优化，功能完全由你自由定义。</p></blockquote><blockquote><p>如果要安装RPM包程序，那么既可以手工使用RPM包安装，也可以使用yum安装。但是如果要卸载程序，则最好不要使用yum卸载，因为容易在卸载某个软件依赖包的时候，把Linux系统依赖包也卸载掉，从而导致系统崩溃。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> shell </tag>
            
            <tag> 脚本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Linux》- shell RPM包管理</title>
      <link href="/2020/09/24/devops_skills/linux/%E3%80%8ALinux%E3%80%8B-%20shell%20%20RPM%E5%8C%85%E7%AE%A1%E7%90%86/"/>
      <url>/2020/09/24/devops_skills/linux/%E3%80%8ALinux%E3%80%8B-%20shell%20%20RPM%E5%8C%85%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h3 id="linux-源码包"><a href="#linux-源码包" class="headerlink" title="linux 源码包"></a>linux 源码包</h3><blockquote><p>编译源码包，安装速度很慢，尽可能采用二进制包，<br>编译源码包，需要gcc编译器二进制安装包；编译器是c c++编写的。<br>rpm包，安装速度快，但看不到源码，存在固定的依赖性</p></blockquote><ul><li>通过<a href="www.rpmfind.net">www.rpmfind.net</a> 查看依赖文件所在包名称</li></ul><h3 id="rpm包全名"><a href="#rpm包全名" class="headerlink" title="rpm包全名"></a>rpm包全名</h3><blockquote><p>httpd-2.2.15-15.el6.centos.1.i686.rpm</p></blockquote><ul><li>httpd 包名</li><li>2.2.15 版本号</li><li>15 发行次数</li><li>el6 发行商。代表red Hat</li><li>i686 适合的平台</li></ul><h3 id="rpm包安装"><a href="#rpm包安装" class="headerlink" title="rpm包安装"></a>rpm包安装</h3><blockquote><p>源码包和rpm包安装路径不同，同一个服务器可以安装，但是只能启动一个，服务占用的端口互斥<br>rpm采用系统默认安装路径；源码包，采用指定路径，默认&#x2F;usr&#x2F;local</p></blockquote><ul><li>rpm默认路径也可以指定，但是这样会影响启动，找默认路径，找不到，调用失败<br><img src="https://s1.ax1x.com/2020/09/25/09SW8I.md.png"></li></ul><blockquote><p>安装格式</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># install verbose hash# </span><br><span class="line">rpm -ivh [包全名1] [包全名2] ...</span><br></pre></td></tr></table></figure><ul><li>–nodeps：不检测依赖性安装。软件安装时会检测依赖性，确定所需的底层软件是否安装，如果没有安装则会报错。如果不管依赖性，想强制安装，则可以使用这个选项。注意：这样不检测依赖性安装的软件基本上是不能使用的，所以不建议这样做。</li><li>–replacefiles：替换文件安装。如果要安装软件包，但是包中的部分文件已经存在，那么在正常安装时会报“某个文件已经存在”的错误，从而导致软件无法安装。使用这个选项可以忽视这个报错而覆盖安装。</li><li>–replacepkgs：替换软件包安装。如果软件包已经安装，那么此选项可以把软件包重复安装一遍。</li><li>–force：强制安装。不管是否已经安装，都重新安装。也就是–replacefiles和–replacepkgs的综合。</li><li>–test：测试安装。不会实际安装，只是检测一下依赖性。</li><li>–prefix：指定安装路径。为安装软件指定安装路径，而不使用默认安装路径。注意：如果指定了安装路径，软件没有安装到系统默认路径中，那么系统会找不到这些安装的软件，需要进行手工配置才能被系统识别。所以，我们一般采用默认路径安装RPM包</li></ul><blockquote><p>升级更新</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#如果没有安装，则自动安装</span><br><span class="line">rpm -Uvh 包全名</span><br><span class="line"></span><br><span class="line">#必须先安装低版本，才能安装高版本</span><br><span class="line">rpm -Fvh 包全名</span><br></pre></td></tr></table></figure><h3 id="rpm命令"><a href="#rpm命令" class="headerlink" title="rpm命令"></a>rpm命令</h3><blockquote><p>rpm包搜索，搜索&#x2F;var&#x2F;lib&#x2F;rpm下二进制文件</p></blockquote><blockquote><p>rpm包文件校验, 已经安装的文件和&#x2F;var&#x2F;lib&#x2F;rpm&#x2F;目录下的数据库内容进行比较，以确定是否有文件被修改</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rpm -V httpd</span><br><span class="line"></span><br><span class="line">#校验所有已安装的</span><br><span class="line">rpm -Va</span><br></pre></td></tr></table></figure><ul><li>S：文件大小是否改变。</li><li>M ：文件的类型或文件的权限（rwx）是否改变。</li><li>5：文件MD5校验和是否改变（可以看成文件内容是否改变）。</li><li>D：设备的主从代码是否改变。* L：文件路径是否改变。</li><li>U：文件的属主（所有者）是否改变。</li><li>G：文件的属组是否改变。</li><li>T：文件的修改时间是否改变。apache配置文件的文件类型是c，那么，还有哪些文件类型呢？</li><li>c：配置文件（configuration file）。</li><li>d：普通文档（documentation）。</li><li>g:“鬼”文件（ghost file），很少见，就是该文件不应该被这个RPM包包含。</li><li>l：授权文件（license file）。</li><li>r：描述文件（read me）。</li></ul><h4 id="已安装包"><a href="#已安装包" class="headerlink" title="已安装包"></a>已安装包</h4><blockquote><p>是否安装包名</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -q httpd </span><br></pre></td></tr></table></figure><blockquote><p>查看所有已安装包</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa | grep httpd </span><br></pre></td></tr></table></figure><blockquote><p>查看包详情</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -qi httpd </span><br></pre></td></tr></table></figure><blockquote><p>查看包文件列表</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -ql httpd </span><br></pre></td></tr></table></figure><blockquote><p>查看系统文件属于哪个安装包</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -qf /bin/ls</span><br></pre></td></tr></table></figure><blockquote><p>查看系统中特定包的依赖关系</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -qR httpd</span><br></pre></td></tr></table></figure><blockquote><p>卸载, 必须按照依赖关系，逐个卸载，否在其他软件无法使用<br> –nodeps 忽略依赖，直接卸载</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -e（erase） httpd</span><br></pre></td></tr></table></figure><h4 id="未安装包"><a href="#未安装包" class="headerlink" title="未安装包"></a>未安装包</h4><blockquote><p>查看包信息</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -qip 包全名</span><br></pre></td></tr></table></figure><blockquote><p>查看包文件列表</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -qlp 包全名 </span><br></pre></td></tr></table></figure><blockquote><p>查看包的依赖关系</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -qRp httpd</span><br></pre></td></tr></table></figure><h3 id="cpio"><a href="#cpio" class="headerlink" title="cpio"></a>cpio</h3><h4 id="文件备份"><a href="#文件备份" class="headerlink" title="文件备份"></a>文件备份</h4> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 备份到文件库</span><br><span class="line">cpio -ocvB &gt; xxx.cpio</span><br><span class="line">-o 输出</span><br><span class="line">-c 新portable format格式 </span><br><span class="line">-v 显示详情</span><br><span class="line">-B 块形式</span><br><span class="line"></span><br><span class="line">find . -print | cpio -ocvB &gt; tt.cpio</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="文件提取"><a href="#文件提取" class="headerlink" title="文件提取"></a>文件提取</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cpio -icvdu &lt; tt.cpio</span><br><span class="line">-i 提取</span><br><span class="line">-c </span><br><span class="line">-d 自动创建文件夹</span><br><span class="line">-u 新的文件覆盖旧文件</span><br><span class="line">-v 显示过程</span><br></pre></td></tr></table></figure><h4 id="文件夹备份"><a href="#文件夹备份" class="headerlink" title="文件夹备份"></a>文件夹备份</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -print | cpio -p /temp/test </span><br></pre></td></tr></table></figure><blockquote><p>文件提取</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm2cpio 包全名 | cpio -ivduc 路径</span><br></pre></td></tr></table></figure><h3 id="服务启动"><a href="#服务启动" class="headerlink" title="服务启动"></a>服务启动</h3> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">service 服务名 start | restart | stop | status </span><br><span class="line"></span><br><span class="line">service httpd restart </span><br><span class="line"></span><br><span class="line">netstat -tlun | grep 80 </span><br></pre></td></tr></table></figure><h3 id="SRPM包"><a href="#SRPM包" class="headerlink" title="SRPM包"></a>SRPM包</h3><blockquote><p>源码形式封装成rpm包发布</p></blockquote><h4 id="安装方式"><a href="#安装方式" class="headerlink" title="安装方式"></a>安装方式</h4><ul><li><p>利用rpmbuild –需要手动安装</p><blockquote><p>rpmbuild命令就是先把SRPM包解开，得到源码包；然后进行编译，生成二进制文件；最后把二进制文件重新打包生成RPM包</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#--rebuild只编译，不安装 </span><br><span class="line">#--recompile编译且安装</span><br><span class="line">rpmbuild --rebuild xxx.src.rpm </span><br></pre></td></tr></table></figure></li><li><p>利用*.spec</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> shell </tag>
            
            <tag> 脚本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Linux》- shell vim</title>
      <link href="/2020/09/20/devops_skills/linux/%E3%80%8ALinux%E3%80%8B-%20shell%20vim/"/>
      <url>/2020/09/20/devops_skills/linux/%E3%80%8ALinux%E3%80%8B-%20shell%20vim/</url>
      
        <content type="html"><![CDATA[<h3 id="linux-vim"><a href="#linux-vim" class="headerlink" title="linux vim"></a>linux vim</h3><blockquote><p>vi早起版本的改进，vi improved, 支持高亮，自动缩进等<br>vim 存在三种模式： 命令模式，输入模式，编辑模式<br> <img src="https://s1.ax1x.com/2020/09/21/w7T2pF.png"> </p></blockquote><h3 id="vim操作"><a href="#vim操作" class="headerlink" title="vim操作"></a>vim操作</h3><h4 id="文件概览"><a href="#文件概览" class="headerlink" title="文件概览"></a>文件概览</h4><blockquote><p>vim编辑文件，初次打开，左下方显示,文件名、总行数、总字符数<br> <img src="https://s1.ax1x.com/2020/09/21/w7TRl4.png"> </p></blockquote><h4 id="直接定位到指定行"><a href="#直接定位到指定行" class="headerlink" title="直接定位到指定行"></a>直接定位到指定行</h4> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#定位行</span><br><span class="line">vim +20 test.v1</span><br><span class="line"></span><br><span class="line">#定位字符</span><br><span class="line">vim +/nobody test.v1 </span><br></pre></td></tr></table></figure><h4 id="进入输入模式"><a href="#进入输入模式" class="headerlink" title="进入输入模式"></a>进入输入模式</h4><blockquote><p>按下I、i、O、o、A、a等键来完成 </p></blockquote><ul><li>i   ——在当前光标所在位置插入随后输入的文本，光标后的文本相应向右移动￼   </li><li>I   ——在光标所在行的行首插入随后输入的文本，行首是该行的第一个非空白字符，相当于光标移动到行首再执行i命令￼    </li><li>a   ——在当前光标所在位置之后插入随后输入的文本￼    </li><li>A   ——在光标所在行的行尾插入随后输入的文本，相当于光标移动到行尾再执行a命令￼    </li><li>o   ——在光标所在行的下面插入新的一行。光标停在空行的行首，等待输入文本￼    </li><li>O   ——在光标所在行的上面插入新的一行。光标停在空行的行首，等待输入文本</li></ul><blockquote><p>在Linux纯字符界面中，默认是不支持中文输入的。如果想要输入中文，则有三种方法。<br> （1）安装中文语言支持和图形界面，在图形界面下输入中文，使用gVim（Vim的图形前端）。<br> （2）安装中文语言支持，使用远程连接工具（如PuTTY），在远程连接工具中调整中文编码，进行中文输入。<br> （3）倘若非要在Linux纯字符界面中输入中文，则可以安装中文插件，如zhcon</p></blockquote><h4 id="光标移动"><a href="#光标移动" class="headerlink" title="光标移动"></a>光标移动</h4><blockquote><p>字符级别移动 - 箭头，hjkl </p></blockquote><blockquote><p>单词级别移动 - w b e </p></blockquote><blockquote><p>行首、行尾级别移动 - 0 $</p></blockquote><h4 id="待验证"><a href="#待验证" class="headerlink" title="待验证"></a>待验证</h4><blockquote><p>移动到一行指定字符位置 fp</p></blockquote><blockquote><p>移动到匹配的括号处 %</p></blockquote><blockquote><p>移动到指定的行nG</p></blockquote><h4 id="查找指定字符"><a href="#查找指定字符" class="headerlink" title="查找指定字符"></a>查找指定字符</h4><blockquote><p>&#x2F; 向下查找</p></blockquote><blockquote><p>? 向上查找</p></blockquote><blockquote><p>:set ic 忽略大小写 </p></blockquote><blockquote><p>&#x2F;^root 开始， &#x2F;root$结尾的行</p></blockquote><h4 id="删除与copy"><a href="#删除与copy" class="headerlink" title="删除与copy"></a>删除与copy</h4><blockquote><p>命令行模式下</p></blockquote><ul><li><p>x 删除光标后，单个字符</p></li><li><p>3x ，删除光标后，3个字符</p></li><li><p>D ，删除光标后面的整行字符</p></li><li><p>dd 删除光标所在行</p></li><li><p>4dd, 删除光标所在行以及后面的3行</p></li><li><p>:1,5d 删除第一行~第五行 </p></li><li><p>dG, 删除光标后，所有内容</p></li><li><p>y，复制光标所在行，并下移</p></li><li><p>ny,复制光标所在行多次，</p></li><li><p>p，粘贴内容到光标所在位置后面</p></li><li><p>P，粘贴内容到光标所在位置前面</p></li><li><p>u 撤销所做内容，多次撤销操作多次即可</p></li><li><p>j 2行并在一行</p></li></ul><h4 id="文件保存"><a href="#文件保存" class="headerlink" title="文件保存"></a>文件保存</h4><blockquote><p>w 保存不退出<br>q 不保存退出<br>! 强制执行</p></blockquote><ul><li>wq 保存且退出</li><li>w &#x2F;tmp&#x2F;ss.txt 另存为</li><li>shift+z 两次，也会退出 ，q!强制退出</li></ul><h4 id="文件编辑"><a href="#文件编辑" class="headerlink" title="文件编辑"></a>文件编辑</h4><blockquote><p>:set nu ,显示行号<br>可以在当前登录用户目录下，添加配置~&#x2F;.vimrc，配置默认显示行号<br> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">set nu </span><br><span class="line"># 命令行模式，忽略大小写</span><br><span class="line">set ic </span><br></pre></td></tr></table></figure></p></blockquote><h4 id="条件判定"><a href="#条件判定" class="headerlink" title="条件判定"></a>条件判定</h4><blockquote><p>命令行取值</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./deploy_tar.sh xx.tar.gz </span><br><span class="line">$0 - 文件名</span><br><span class="line">$1 - 包名称</span><br></pre></td></tr></table></figure><blockquote><p>命令行默认值</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">distDir=$&#123;2:-&quot;build&quot;&#125;</span><br></pre></td></tr></table></figure><blockquote><p>服务器ip<br> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HOST_IP = $&#123;ip addr | grep &#x27;state UP&#x27; -A2 | tail -n1 | awk &#x27;&#123;print $2&#125; &#x27;| cut -f1 -d &#x27;/&#x27; &#125; </span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>时间格式化<br> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dateTime = $(date +%Y-%m-%d-%s)</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>正则判定<br> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">if [[ $packageName == *.tar ]];then</span><br><span class="line"> //do something</span><br><span class="line">elif [[$packageName == *.tar.gz ]];then </span><br><span class="line"> //</span><br><span class="line">elif [[$packageName == *.zip ]] ; then </span><br><span class="line"> //</span><br><span class="line">fi</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>获取curl结果</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">result = $(curl -X GET url)</span><br></pre></td></tr></table></figure><h4 id="多窗口编辑"><a href="#多窗口编辑" class="headerlink" title="多窗口编辑"></a>多窗口编辑</h4><blockquote><p>逐个打开<br> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#先打开</span><br><span class="line">vim test.sh</span><br><span class="line"> </span><br><span class="line">#命令模式输入,水平共享屏幕：</span><br><span class="line">sp ./demo.sh</span><br><span class="line">vp ./demo.sh </span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>同时打开,Ctrl+ww切换</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim -o demo.sh test.sh </span><br></pre></td></tr></table></figure><blockquote><p>编辑过程中，查看命令结果</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#命令行模式</span><br><span class="line">:! ls -a </span><br></pre></td></tr></table></figure><blockquote><p>编辑一个文件时，r命令导入另一个文件内容</p></blockquote><h4 id="连续行注释"><a href="#连续行注释" class="headerlink" title="连续行注释"></a>连续行注释</h4><blockquote><p>利用正则区域替换</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#命令行模式,开启注释</span><br><span class="line">:1，10s/^/#/g</span><br><span class="line"></span><br><span class="line">:1，10s/#//g</span><br></pre></td></tr></table></figure><blockquote><p>当然也可以map|unmap自定义快捷键，实现</p></blockquote><blockquote><p>宏命令处理,当然也可用与不连续行处理</p></blockquote><ul><li>命令行模式，输入q&lt;宏名称&gt;,开始recording</li><li>然后进入编辑模式，进行编辑，然后退出到命令行模式，按下q退出宏记录，</li><li>在其余的行，命令行模式，调用@&lt;宏&gt;即可</li></ul><h4 id="unix2dos-dos2unix"><a href="#unix2dos-dos2unix" class="headerlink" title="unix2dos | dos2unix"></a>unix2dos | dos2unix</h4><blockquote><p>需要手动安装 </p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dos2unix file.txt</span><br><span class="line"></span><br><span class="line">unix2dos test.sh </span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> shell </tag>
            
            <tag> 脚本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Linux》- shell 网络命令</title>
      <link href="/2020/09/19/devops_skills/linux/%E3%80%8ALinux%E3%80%8B-%20shell%20%E7%BD%91%E7%BB%9C%E5%91%BD%E4%BB%A4/"/>
      <url>/2020/09/19/devops_skills/linux/%E3%80%8ALinux%E3%80%8B-%20shell%20%E7%BD%91%E7%BB%9C%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h3 id="linux-setup"><a href="#linux-setup" class="headerlink" title="linux setup"></a>linux setup</h3><blockquote><p>&#x2F;usr&#x2F;bin&#x2F;setup 所有用户<br>setup命令会开启一个图形化的配置工具 ,只是云服务器，不能进行网络配置<br><img src="https://s1.ax1x.com/2020/09/20/wTkoxs.png"></p></blockquote><ul><li>eth0来表示第一块网卡 </li><li>ip配置完毕，输入service network restart <blockquote><p>在CentOS 6.x中，eth0网卡是默认没有开启的，需要修改网卡配置文件手工开启<br>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/sysconfig/network-scripts/ifcfg-etho</span><br><span class="line"></span><br><span class="line">service network restart </span><br></pre></td></tr></table></figure></p></blockquote></li></ul><h3 id="ifconfig"><a href="#ifconfig" class="headerlink" title="ifconfig"></a>ifconfig</h3><blockquote><p>Linux中查看和临时修改IP地址的命令<br>&#x2F;sbin&#x2F;ifconfig ,超级用户可执行</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig eth0 192.168.44.3 netmask 255.255.255.0 </span><br></pre></td></tr></table></figure><ul><li>ifup   启用网卡<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifup eth0</span><br></pre></td></tr></table></figure></li><li>ifdown 禁用网卡<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifdown eth0</span><br></pre></td></tr></table></figure></li></ul><h3 id="ping"><a href="#ping" class="headerlink" title="ping"></a>ping</h3><blockquote><p>主要通过ICMP协议进行网络探测，测试网络中主机的通信情况<br>&#x2F;bin&#x2F;ping 所有用户均可执行</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># linux默认一直ping，添加指定次数</span><br><span class="line">ping -c 3 192.168.2.30</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="netstat"><a href="#netstat" class="headerlink" title="netstat"></a>netstat</h3><blockquote><p>根据不同的端口，确定不同的服务<br>可以查看到本机开启的端口，也可以查看有哪些客户端连接<br>&#x2F;bin&#x2F;netstat ，所有用户均可执行</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">netstat -tulnp </span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="wall"><a href="#wall" class="headerlink" title="wall"></a>wall</h3><blockquote><p>write命令用于给指定用户发送信息，而wall命令用于给所有登录用户发送信息，包括你自己</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#ctrl+D保存数据 </span><br><span class="line">write user1 [pts/1]</span><br><span class="line"></span><br><span class="line"># wall 发送所有用户</span><br></pre></td></tr></table></figure><h3 id="mail"><a href="#mail" class="headerlink" title="mail"></a>mail</h3><blockquote><p>向特定用户发送邮件</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> shell </tag>
            
            <tag> 脚本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Linux》- shell 压缩命令</title>
      <link href="/2020/09/18/devops_skills/linux/%E3%80%8ALinux%E3%80%8B-%20shell%20%E5%8E%8B%E7%BC%A9%E5%91%BD%E4%BB%A4/"/>
      <url>/2020/09/18/devops_skills/linux/%E3%80%8ALinux%E3%80%8B-%20shell%20%E5%8E%8B%E7%BC%A9%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h3 id="linux-压缩"><a href="#linux-压缩" class="headerlink" title="linux 压缩"></a>linux 压缩</h3><blockquote><p>Linux不靠扩展名区分文件类型，而是靠权限<br>扩展名，了解正确的压缩格式，才能采用正确的解压缩命令</p></blockquote><h4 id="zip-vs-unzip"><a href="#zip-vs-unzip" class="headerlink" title="zip vs unzip"></a>zip vs unzip</h4><blockquote><p>&#x2F;usr&#x2F;bin&#x2F;zip 所有用户均可执行<br> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">zip [-options] [-b path] [-t mmddyyyy] [-n suffixes] [zipfile list] [-xi list]</span><br><span class="line"></span><br><span class="line"># 压缩文件</span><br><span class="line">zip test.zip file1 fil2</span><br><span class="line"></span><br><span class="line"># 压缩目录</span><br><span class="line">zip -r dist.zip dir1  </span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>&#x2F;usr&#x2F;bin&#x2F;unzip, 所有用户均可执行<br> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 解压到指定位置</span><br><span class="line">unzip -d /temp dir1.zip </span><br></pre></td></tr></table></figure></p></blockquote><h4 id="gz"><a href="#gz" class="headerlink" title=".gz"></a>.gz</h4><blockquote><p>&#x2F;bin&#x2F;gunzip ,所有用户均可，解压缩一体<br> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 添加-r， 处理目录文件</span><br><span class="line">gunzip -r dir1</span><br><span class="line"></span><br><span class="line"># -d，处理包含的打包文件</span><br><span class="line">gzip -d xxx.gz </span><br><span class="line"></span><br><span class="line">#查看内容</span><br><span class="line">zcat xx.gz </span><br></pre></td></tr></table></figure></p></blockquote><h4 id="bz2"><a href="#bz2" class="headerlink" title=".bz2"></a>.bz2</h4><blockquote><p>性能比gz更好<br>&#x2F;usr&#x2F;bin&#x2F;bzip2 所有用户均可, 但是不支持目录<br>&#x2F;usr&#x2F;bin&#x2F;bunzip2 解压<br> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">bzip2 -k xxx.cfg</span><br><span class="line"></span><br><span class="line">bunzip2 xxx.bz2</span><br><span class="line"></span><br><span class="line">bzcat xxx.bz2</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="linux-打包"><a href="#linux-打包" class="headerlink" title="linux 打包"></a>linux 打包</h3><h4 id="tar"><a href="#tar" class="headerlink" title=".tar"></a>.tar</h4><blockquote><p>&#x2F;bin&#x2F;tar<br> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">tar -cvf xxx.tar file1 file2 dir1/</span><br><span class="line"></span><br><span class="line"># 默认当前路径</span><br><span class="line">tar -xvf xxx.tar </span><br><span class="line"></span><br><span class="line"># 指定解压目录</span><br><span class="line">tar -xvf xxx.tar -C /temp </span><br><span class="line"></span><br><span class="line"># 查看目录包含哪些文件</span><br><span class="line">tar -tvf xxx.tar </span><br></pre></td></tr></table></figure></p></blockquote><h4 id="tar-gz"><a href="#tar-gz" class="headerlink" title=".tar.gz"></a>.tar.gz</h4><blockquote><p>打包并压缩<br> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tar -zcvf tmp.tar.gz /temp</span><br><span class="line"></span><br><span class="line"># 解压</span><br><span class="line">tar -zxvf temp.tar.gz </span><br></pre></td></tr></table></figure></p></blockquote><h4 id="tar-bz2"><a href="#tar-bz2" class="headerlink" title=".tar.bz2"></a>.tar.bz2</h4><blockquote><p>打包并压缩<br> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tar -jcvf temp.tar.bz2 ./temp </span><br><span class="line"></span><br><span class="line"># 解压</span><br><span class="line">tar -jxvf temp.tar.bz2 </span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> shell </tag>
            
            <tag> 脚本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《python》- python入门概念总结</title>
      <link href="/2020/09/18/python_skills/%E3%80%8Apython%E3%80%8B-%20python%E5%85%A5%E9%97%A8%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93/"/>
      <url>/2020/09/18/python_skills/%E3%80%8Apython%E3%80%8B-%20python%E5%85%A5%E9%97%A8%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h3 id="python-介绍"><a href="#python-介绍" class="headerlink" title="python 介绍"></a>python 介绍</h3><blockquote><p>2.x 与 3.x 版本不兼容, 存在以下主要不同，本问介绍基于Mac下Python3.x版本：</p></blockquote><h4 id="1-使用-future-模块"><a href="#1-使用-future-模块" class="headerlink" title="1. 使用__future__模块"></a>1. 使用__future__模块</h4><h4 id="2-print函数"><a href="#2-print函数" class="headerlink" title="2. print函数"></a>2. print函数</h4><h4 id="3-整数除法"><a href="#3-整数除法" class="headerlink" title="3. 整数除法"></a>3. 整数除法</h4><h4 id="4-Unicode"><a href="#4-Unicode" class="headerlink" title="4. Unicode"></a>4. Unicode</h4><h4 id="5-xrange"><a href="#5-xrange" class="headerlink" title="5. xrange"></a>5. xrange</h4><h4 id="6-触发异常"><a href="#6-触发异常" class="headerlink" title="6. 触发异常"></a>6. 触发异常</h4><h4 id="7-处理异常"><a href="#7-处理异常" class="headerlink" title="7. 处理异常"></a>7. 处理异常</h4><h4 id="8-next-函数和-next-方法"><a href="#8-next-函数和-next-方法" class="headerlink" title="8. next()函数和.next()方法"></a>8. next()函数和.next()方法</h4><h4 id="9-for循环变量与全局命名空间泄漏"><a href="#9-for循环变量与全局命名空间泄漏" class="headerlink" title="9. for循环变量与全局命名空间泄漏"></a>9. for循环变量与全局命名空间泄漏</h4><h4 id="10-比较无序类型"><a href="#10-比较无序类型" class="headerlink" title="10. 比较无序类型"></a>10. 比较无序类型</h4><h4 id="11-使用input-解析输入内容"><a href="#11-使用input-解析输入内容" class="headerlink" title="11. 使用input()解析输入内容"></a>11. 使用input()解析输入内容</h4><h4 id="12-返回可迭代对象，而不是列表"><a href="#12-返回可迭代对象，而不是列表" class="headerlink" title="12. 返回可迭代对象，而不是列表"></a>12. 返回可迭代对象，而不是列表</h4><h3 id="Python安装"><a href="#Python安装" class="headerlink" title="Python安装"></a>Python安装</h3><h4 id="官网下载安装包"><a href="#官网下载安装包" class="headerlink" title="官网下载安装包"></a><a href="https://www.python.org/downloads/release/python-385/">官网下载安装包</a></h4><h4 id="HomeBrew"><a href="#HomeBrew" class="headerlink" title="HomeBrew"></a>HomeBrew</h4><pre><code> # 安装brew 默认安装python 3.7  brew search python </code></pre><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><blockquote><p>6种标准对象类型：</p></blockquote><ul><li>Number（数字）</li><li>String（字符串）</li><li>List（列表）</li><li>Tuple（元组）</li><li>Sets（集合）</li><li>Dictionary（字典）</li></ul><h4 id="3种数值类型"><a href="#3种数值类型" class="headerlink" title="3种数值类型"></a>3种数值类型</h4><ul><li>int 整型  - 正、负整数，不带小数点<blockquote><p>Python3.7中，整除，需要使用&#x2F;&#x2F;， &#x2F;得到的是浮点数</p></blockquote></li><li>float 浮点型 - 整数部分与小数部</li><li>complex 复数 - 实数部分和虚数部分 <blockquote><p>a+bj或complex(a,b) 表示</p></blockquote></li><li>常量： PI</li></ul><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><blockquote><p>没有显示的var这类的声明，第一次默认就是变量，使用前，必须先赋值。<br>可以type(), 类似js typeof 判定类型 </p></blockquote><h4 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h4><blockquote><p>值 + 变量 + 操作符的组合， </p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Linux》- shell 搜索命令</title>
      <link href="/2020/09/17/devops_skills/linux/%E3%80%8ALinux%E3%80%8B-%20shell%20%E6%90%9C%E7%B4%A2%E5%91%BD%E4%BB%A4/"/>
      <url>/2020/09/17/devops_skills/linux/%E3%80%8ALinux%E3%80%8B-%20shell%20%E6%90%9C%E7%B4%A2%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h3 id="linux-命令"><a href="#linux-命令" class="headerlink" title="linux 命令"></a>linux 命令</h3><h4 id="查看命令帮助"><a href="#查看命令帮助" class="headerlink" title="查看命令帮助"></a>查看命令帮助</h4><blockquote><p>help info man or –help ，功能强度排序：<br>    help（只能内置命令） &lt; man &lt; info </p></blockquote><h4 id="内置命令"><a href="#内置命令" class="headerlink" title="内置命令"></a>内置命令</h4><blockquote><p>man help 查看内置命令列表</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">bash,  :,  .,  [,  alias,  bg, bind, break, builtin, caller, cd, command,</span><br><span class="line">compgen, complete, compopt, continue, declare,dirs, disown, echo, </span><br><span class="line">enable, eval, exec, exit, export, false, fc, fg, getopts, hash,  </span><br><span class="line">help,  history,  jobs,  kill,  let, local,  logout, </span><br><span class="line">mapfile,  popd,  printf,  pushd, pwd, read, readonly, return, set, shift, </span><br><span class="line">shopt, source, suspend, test,imes, trap, true, type,typeset, ulimit, umask, unalias, unset, wait</span><br></pre></td></tr></table></figure><h4 id="搜索命令-whereis"><a href="#搜索命令-whereis" class="headerlink" title="搜索命令 - whereis"></a>搜索命令 - whereis</h4><blockquote><p>whereis命令，只能搜索系统命令， 不能搜索普通文件<br>位于： &#x2F;usr&#x2F;bin&#x2F;whereis ， 所有用户均可执行</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">  whereis [options] file</span><br><span class="line">  optioins:</span><br><span class="line">  -b         search only for binaries</span><br><span class="line">  -m         search only for manuals</span><br><span class="line">  -s         search only for sources</span><br><span class="line"> </span><br><span class="line"># 查看到命令所在、帮助文档所在位置</span><br><span class="line">&gt;  whereis ls </span><br><span class="line">ls: /usr/bin/ls /usr/share/man/man1/ls.1.gz</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>如果需要查找普通文件的内容，则需要使用find命令</li></ul><h4 id="搜索命令-which"><a href="#搜索命令-which" class="headerlink" title="搜索命令 - which"></a>搜索命令 - which</h4><blockquote><p>定位二进制文件、以及对于的别名<br>位于： &#x2F;usr&#x2F;bin&#x2F;which， 所有用户均可执行<br> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> # 语法格式</span><br><span class="line"> which [options] [--] COMMAND [...]</span><br><span class="line"></span><br><span class="line">&gt; which ls </span><br><span class="line">alias ls=&#x27;ls --color=auto&#x27;</span><br><span class="line">        /usr/bin/ls</span><br><span class="line"></span><br></pre></td></tr></table></figure></p></blockquote><h4 id="文件搜索-locate、find"><a href="#文件搜索-locate、find" class="headerlink" title="文件搜索 - locate、find"></a>文件搜索 - locate、find</h4><blockquote><p>locate<br>位于： &#x2F;usr&#x2F;bin&#x2F;locate ，所有用户均可执行<br> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">locate [OPTION...] PATTERN</span><br><span class="line"></span><br></pre></td></tr></table></figure></p></blockquote><ul><li>locate命令才是可以按照文件名搜索普通文件的命令。</li><li>只能按照文件名来搜索文件，而不能执行更复杂的搜索，比如按照权限、大小、修改时间等搜索文件。</li><li>如果要按照复杂条件执行搜索，则只能求助于功能更加强大的find命令</li><li>因为locate命令不会直接搜索硬盘空间，而会搜索locate数据库,数据库在用户重新登录才更新。故新创建的文件，不会找到<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 手动更新数据库 更新物理机/var/lib/mlocate/mlocate.db</span><br><span class="line"># 云端服务器是不存在这个文件的</span><br><span class="line">$ updatedb </span><br></pre></td></tr></table></figure></li><li>如果执行updatdb还是搜索不到，就需要查看&#x2F;etc&#x2F;updatedb.conf配置文件，是否过滤了某些路径，文件</li></ul><blockquote><p>find<br>所在： &#x2F;bin&#x2F;find ，所有用户均可执行</p></blockquote><ul><li><p>直接在硬盘中搜索，不推荐搜索范围过大，影响服务器性能</p></li><li><p>搜索是精确匹配，非模糊匹配</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">find [-H] [-L] [-P] [-Olevel] [-D help|tree|search|stat|rates|opt|exec] [path...] [expression]</span><br><span class="line"></span><br><span class="line">find / -name test.conf</span><br></pre></td></tr></table></figure></li><li><p>文件大小搜索</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># ll -h</span><br><span class="line"># 超过1k</span><br><span class="line">find . -size +1k </span><br><span class="line"># 不超过1M</span><br><span class="line">find . -size -1M </span><br><span class="line"> # 按照字节搜索，默认512b</span><br><span class="line">find . -size 1027c</span><br></pre></td></tr></table></figure></li><li><p>文件按照时间搜索<br> <img src="https://s1.ax1x.com/2020/09/19/w5uUdP.jpg"></p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># n*24(2~3d)被访问的</span><br><span class="line">find . -atime 2 </span><br><span class="line"></span><br><span class="line"># n*24小时以上(3d以前)新创建的</span><br><span class="line">find . -ctime +2</span><br><span class="line"></span><br><span class="line"># 3d内修改的</span><br><span class="line">find . -mtime -3</span><br></pre></td></tr></table></figure></li><li><p>权限搜索</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 权限要求，逐渐减弱，一致→ 完全匹配 → 包含就行</span><br><span class="line">find . -perm 444</span><br><span class="line">find . -perm -444</span><br><span class="line">find . -perm +444  </span><br></pre></td></tr></table></figure></li><li><p>按照所有者、所属组查询</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">find . -user root </span><br><span class="line">find . -group root </span><br><span class="line">find . -uid ...</span><br><span class="line">find . -gid ...</span><br><span class="line">find . -nouser </span><br><span class="line">find . -nogroup </span><br></pre></td></tr></table></figure></li><li><p>按照文件类型</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">find . -type d </span><br><span class="line"></span><br><span class="line"> b      block (buffered) special</span><br><span class="line"> c      character (unbuffered) special</span><br><span class="line"> d      directory</span><br><span class="line"> p      named pipe (FIFO)</span><br><span class="line"> f      regular file</span><br><span class="line"> l      symbolic link; this is never true if the -L option or the -follow option is in effect, unless the symbolic</span><br><span class="line">         link is broken.  If you want to search for symbolic links when -L is in effect, use -xtype.</span><br><span class="line"> s      socket</span><br><span class="line"> D      door (Solaris)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>逻辑运算符多条件查询</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-a and </span><br><span class="line">-n not </span><br><span class="line">-o or </span><br><span class="line"></span><br><span class="line">find . -size +2k -a -type f </span><br><span class="line">find . -not -name test</span><br></pre></td></tr></table></figure></li><li><p>find 结果查询 版本不同，语法不同</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -perm +444 -exec ls -h</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> shell </tag>
            
            <tag> 脚本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Linux》- 别名管理</title>
      <link href="/2020/09/09/devops_skills/linux/%E3%80%8ALinux%E3%80%8B-%20%E5%88%AB%E5%90%8D%E7%AE%A1%E7%90%86/"/>
      <url>/2020/09/09/devops_skills/linux/%E3%80%8ALinux%E3%80%8B-%20%E5%88%AB%E5%90%8D%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h3 id="别名管理"><a href="#别名管理" class="headerlink" title="别名管理"></a>别名管理</h3><blockquote><p>别名使用，加快输入，不同命令解析，对应不同配置</p></blockquote><ul><li>Bash – ~&#x2F;.bashrc</li><li>ZSH – ~&#x2F;.zshrc</li><li>Fish – ~&#x2F;.config&#x2F;fish&#x2F;config.fish</li></ul><h4 id="查看别名"><a href="#查看别名" class="headerlink" title="查看别名"></a>查看别名</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alias </span><br></pre></td></tr></table></figure><h4 id="临时别名"><a href="#临时别名" class="headerlink" title="临时别名"></a>临时别名</h4> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># cli 命令行输入</span><br><span class="line">alias wr=”cd /var/www/html”</span><br><span class="line"></span><br><span class="line">#移除别名</span><br><span class="line">$ unalias alias_name</span><br><span class="line">$ unalias -a [remove all alias]</span><br></pre></td></tr></table></figure><h4 id="永久配置文件修改"><a href="#永久配置文件修改" class="headerlink" title="永久配置文件修改"></a>永久配置文件修改</h4> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> # 编辑配置文件</span><br><span class="line">  vim ~/.bashrc</span><br><span class="line">  </span><br><span class="line"># 添加别名</span><br><span class="line">alias home=”ssh -i ~/.ssh/mykep.pem tecmint@192.168.0.100”</span><br><span class="line">alias ll=&quot;ls -alF&quot;</span><br><span class="line"></span><br><span class="line">#编译生效</span><br><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> shell </tag>
            
            <tag> 脚本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《serverless》- serverless能做什么？</title>
      <link href="/2020/09/08/serverless_iot_skills/%E3%80%8Aserverless%E3%80%8B-%20serverless%E8%83%BD%E5%81%9A%E4%BB%80%E4%B9%88%EF%BC%9F/"/>
      <url>/2020/09/08/serverless_iot_skills/%E3%80%8Aserverless%E3%80%8B-%20serverless%E8%83%BD%E5%81%9A%E4%BB%80%E4%B9%88%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<h3 id="serverless安装"><a href="#serverless安装" class="headerlink" title="serverless安装"></a>serverless安装</h3><h4 id="Mac-Linux"><a href="#Mac-Linux" class="headerlink" title="Mac|Linux"></a>Mac|Linux</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -o- -L https://slss.io/install | bash</span><br></pre></td></tr></table></figure><h4 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">choco install serverless</span><br><span class="line">choco upgrade serverless</span><br></pre></td></tr></table></figure><h4 id="Npm方法"><a href="#Npm方法" class="headerlink" title="Npm方法"></a>Npm方法</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 安装 serverless cli</span><br><span class="line">npm i -g serverless</span><br><span class="line"></span><br><span class="line"># 或者更新 serverless cli 到最新版本</span><br><span class="line">npm update -g serverless</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2020/08/09/aoNnxK.md.png"></p><h3 id="serverless使用"><a href="#serverless使用" class="headerlink" title="serverless使用"></a>serverless使用</h3><h4 id="login"><a href="#login" class="headerlink" title="login"></a>login</h4><blockquote><p>输入login，会拉起浏览器登录，web界面登录成功，server push信息back，更新client登录信息</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ serverless login</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2020/08/09/aoNQqe.png"><br><img src="https://s1.ax1x.com/2020/08/09/aoNMrD.png"></p><h4 id="创建service"><a href="#创建service" class="headerlink" title="创建service"></a>创建service</h4><blockquote><p>本地创建，还需要修改serverless.yml文件中的service-name</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">serverless create --template hello-world</span><br></pre></td></tr></table></figure><blockquote><p>serverless.yml文件</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">service: serverless-demo</span><br><span class="line"></span><br><span class="line"># The `provider` block defines where your service will be deployed</span><br><span class="line">provider:</span><br><span class="line">  name: aws  # 云厂商默认aws</span><br><span class="line">  runtime: nodejs12.x</span><br><span class="line"></span><br><span class="line"># The `functions` block defines what code to deploy</span><br><span class="line">functions:</span><br><span class="line">  helloWorld:</span><br><span class="line">    handler: handler.helloWorld</span><br><span class="line">    # The `events` block defines how to trigger the handler.helloWorld code</span><br><span class="line">    events:</span><br><span class="line">      - http:</span><br><span class="line">          path: hello-world</span><br><span class="line">          method: get</span><br><span class="line">          cors: true</span><br></pre></td></tr></table></figure><blockquote><p>云厂商端创建</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ serverless --org chengzhanghu --app hello-world</span><br></pre></td></tr></table></figure><blockquote><p>上述命令，默认AWS,会要求登录账户，没有的可以先创建，再登录。登录过程需要输入Access key ID,Secret access key验证通过后，得到下方文字，</p></blockquote><blockquote><p>AWS credentials saved on your machine at ~&#x2F;.aws&#x2F;credentials. Go there to change them at any time<br><img src="https://s1.ax1x.com/2020/08/09/aoNWsU.md.png"></p></blockquote><h4 id="支持的云服务商"><a href="#支持的云服务商" class="headerlink" title="支持的云服务商"></a>支持的云服务商</h4><img src="https://s1.ax1x.com/2020/08/09/aoNfLF.png" width="300" height="400"><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><h4 id="serverless"><a href="#serverless" class="headerlink" title="serverless"></a><a href="https://www.serverless.com/framework/docs/providers/">serverless</a></h4>]]></content>
      
      
      
        <tags>
            
            <tag> serverless </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Linux》- shell for循环</title>
      <link href="/2020/09/07/devops_skills/linux/%E3%80%8ALinux%E3%80%8B-%20shell%20for%E5%BE%AA%E7%8E%AF/"/>
      <url>/2020/09/07/devops_skills/linux/%E3%80%8ALinux%E3%80%8B-%20shell%20for%E5%BE%AA%E7%8E%AF/</url>
      
        <content type="html"><![CDATA[<h3 id="for-循环结构"><a href="#for-循环结构" class="headerlink" title="for 循环结构"></a>for 循环结构</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for i [in &#123; &#125;] # 范围</span><br><span class="line">do</span><br><span class="line"> 循环执行logic</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h4 id="循环输出用户输入"><a href="#循环输出用户输入" class="headerlink" title="循环输出用户输入"></a>循环输出用户输入</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 默认去 $@,取所有位置变量值</span><br><span class="line">for i </span><br><span class="line">do </span><br><span class="line"> echo $i</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">$ ./for_test.sh 1,2,3,3,000,233</span><br><span class="line">1,2,3,3,000,233</span><br></pre></td></tr></table></figure><h4 id="自动生成序列"><a href="#自动生成序列" class="headerlink" title="自动生成序列"></a>自动生成序列</h4><h4 id="0-10-、-a-z-、-1-100-2"><a href="#0-10-、-a-z-、-1-100-2" class="headerlink" title="{0..10}、{a..z} 、{1..100..2}"></a>{0..10}、{a..z} 、{1..100..2}</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ echo &#123;0..10&#125;</span><br><span class="line">0 1 2 3 4 5 6 7 8 9 10</span><br><span class="line"></span><br><span class="line">$ echo &#123;a..z&#125;</span><br><span class="line">a b c d e f g h i j k l m n o p q r s t u v w x y z</span><br><span class="line"></span><br><span class="line">#此命令mac os系统不支持，直接原文输出</span><br><span class="line">$ echo &#123;1..10..2&#125;</span><br><span class="line">1 3 5 7 9</span><br><span class="line"></span><br><span class="line">#直接原文输出，不会生成序列，</span><br><span class="line">$ i=10</span><br><span class="line">$ echo &#123;1..$i&#125;</span><br><span class="line">$ &#123;1..10&#125;</span><br></pre></td></tr></table></figure><h4 id="seq"><a href="#seq" class="headerlink" title="seq"></a>seq</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># 默认\n连接输出,通过-s修改，支持上文中的变量,不必用echo</span><br><span class="line">$ i=5</span><br><span class="line">$ seq 1 $i</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line"></span><br><span class="line">$ seq -s &#x27;&#x27; 1 $i </span><br><span class="line">12345678910</span><br><span class="line"></span><br><span class="line">#指定步长,mac 输出后，会添加| ;linux不添加| </span><br><span class="line">$ seq -s &#x27;|&#x27; 2 2 10</span><br><span class="line">2|4|6|8|10| </span><br><span class="line"></span><br><span class="line">#不指定起始位置</span><br><span class="line">$ seq -s &#x27;|&#x27; 9</span><br><span class="line">1|2|3|4|5|6|7|8|9</span><br></pre></td></tr></table></figure><h4 id="闰年判定"><a href="#闰年判定" class="headerlink" title="闰年判定"></a>闰年判定</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">for i in &#123;1990..2200&#125;</span><br><span class="line">do</span><br><span class="line"> if [[ $[i%4] -eq 0 &amp;&amp; $[i%100] -ne 0 || $[i%400] -eq 0  ]];then</span><br><span class="line">   echo &quot;$i:是闰年&quot;</span><br><span class="line"> else</span><br><span class="line">  echo &quot;$i:不是闰年&quot;</span><br><span class="line"> fi</span><br><span class="line">done</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> shell </tag>
            
            <tag> 脚本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Linux》- windows安装虚拟机并配置ssh</title>
      <link href="/2020/08/27/devops_skills/linux/%E3%80%8ALinux%E3%80%8B-%20windows%E5%AE%89%E8%A3%85%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%B9%B6%E9%85%8D%E7%BD%AEssh/"/>
      <url>/2020/08/27/devops_skills/linux/%E3%80%8ALinux%E3%80%8B-%20windows%E5%AE%89%E8%A3%85%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%B9%B6%E9%85%8D%E7%BD%AEssh/</url>
      
        <content type="html"><![CDATA[<h3 id="虚拟机介绍"><a href="#虚拟机介绍" class="headerlink" title="虚拟机介绍"></a>虚拟机介绍</h3><h4 id="VMware-workstation-Pro"><a href="#VMware-workstation-Pro" class="headerlink" title="VMware workstation Pro"></a>VMware workstation Pro</h4><blockquote><p>场景：<br>   让Windows用户使用Linux系统</p></blockquote><blockquote><p>支持度</p></blockquote><ul><li>大多数64位Linux发行版</li><li>Win7+ （64bit）</li><li>Windows Server2008 R2+</li></ul><blockquote><p>优缺点</p></blockquote><table><thead><tr><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>不错的网络性能、可后台运行、先进3D解决方案</td><td>偶尔的错误、崩溃</td></tr><tr><td>支持定制，必然收费</td><td>尽管可以定制，但是选项较少</td></tr></tbody></table><h4 id="VMware-Fusion-Pro"><a href="#VMware-Fusion-Pro" class="headerlink" title="VMware Fusion Pro"></a>VMware Fusion Pro</h4><blockquote><p>场景：<br>   让Macos用户使用Windows系统</p></blockquote><blockquote><p>支持度</p></blockquote><ul><li>macos&#x2F;os X 10.9+</li></ul><blockquote><p>优缺点</p></blockquote><table><thead><tr><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>完美运行 Windows软件，且速度快</td><td>首次启动慢，存在偶尔兼容性问题</td></tr><tr><td>创建、恢复快照简单实用</td><td>非技术领域用户来说，关键解决方案不丰富</td></tr></tbody></table><h4 id="Parallels-Desktop"><a href="#Parallels-Desktop" class="headerlink" title="Parallels Desktop"></a>Parallels Desktop</h4><blockquote><p>macos&#x2F;os X 10.9+ </p></blockquote><h4 id="Oracle-VM-VirtualBox"><a href="#Oracle-VM-VirtualBox" class="headerlink" title="Oracle VM VirtualBox"></a>Oracle VM VirtualBox</h4><blockquote><p>支持度</p></blockquote><ul><li>大多数64位Linux发行版</li><li>macOS&#x2F;OS 10.9+ </li><li>Solaris 10+</li><li>Win7+ （64bit）</li><li>Windows Server2008 R2+</li></ul><blockquote><p>优缺点</p></blockquote><table><thead><tr><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>免费开源</td><td>缺乏竞争对手功能升级、操作体验改进慢</td></tr><tr><td>跨平台、兼容性好、定制选项多</td><td>内存使用率较高、全屏模式可能无法渲染虚拟机</td></tr></tbody></table><h4 id="QEMU"><a href="#QEMU" class="headerlink" title="QEMU"></a>QEMU</h4><blockquote><p>场景<br> 大多数用户将linux机器作为其主机</p></blockquote><blockquote><p>支持度</p></blockquote><ul><li>大多数64位Linux发行版</li><li>macOS</li><li>Windows(32 or 64)</li></ul><blockquote><p>优缺点</p></blockquote><table><thead><tr><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>免费开源、免费且强大的虚拟化技术</td><td>配置麻烦</td></tr></tbody></table><h4 id="Vps等云虚拟机"><a href="#Vps等云虚拟机" class="headerlink" title="Vps等云虚拟机"></a>Vps等云虚拟机</h4><h4 id="Ubunt-On-Windows-bash壳"><a href="#Ubunt-On-Windows-bash壳" class="headerlink" title="Ubunt On Windows bash壳"></a>Ubunt On Windows bash壳</h4><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><h4 id="虚拟机"><a href="#虚拟机" class="headerlink" title="虚拟机"></a><a href="https://www.10besty.com/best-virtual-machine-applications/">虚拟机</a></h4>]]></content>
      
      
      
        <tags>
            
            <tag> shell </tag>
            
            <tag> 脚本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Css3》- 如何成为一名前端开发者之Javascript高级</title>
      <link href="/2020/08/24/front_skills/css3/%E3%80%8ACss3%E3%80%8B-%20%E5%A6%82%E4%BD%95%E6%88%90%E4%B8%BA%E4%B8%80%E5%90%8D%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E8%80%85%E4%B9%8BJavascript%E9%AB%98%E7%BA%A7/"/>
      <url>/2020/08/24/front_skills/css3/%E3%80%8ACss3%E3%80%8B-%20%E5%A6%82%E4%BD%95%E6%88%90%E4%B8%BA%E4%B8%80%E5%90%8D%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E8%80%85%E4%B9%8BJavascript%E9%AB%98%E7%BA%A7/</url>
      
        <content type="html"><![CDATA[<h2 id="Javascript"><a href="#Javascript" class="headerlink" title="Javascript"></a>Javascript</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><h4 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h4><ul><li>js 使动态内容更新成为可能</li><li>web page js分： browser api, third api </li><li>js 存在执行顺序</li><li>js 属于解释性语言，逐句解释逐句执行，得到返回结果，返回结果可能参与下句执行。</li><li>js 字符串文本执行，采用just-in-time 编译改进运行时性能，依然是解释性语言。</li></ul><h4 id="async-defer"><a href="#async-defer" class="headerlink" title="async | defer"></a>async | defer</h4><ul><li>js 相关的dom操作，需要dom存在；或者为了提升性能，我们添加async and defer。<blockquote><p>相同点： 不阻塞dom解释，渲染<br>不同点： async： js彼此不能有依赖；defer，彼此之间按顺序加载，于依赖。</p></blockquote></li></ul><h3 id="使用注意事项"><a href="#使用注意事项" class="headerlink" title="使用注意事项"></a>使用注意事项</h3><h4 id="定义事项"><a href="#定义事项" class="headerlink" title="定义事项"></a>定义事项</h4><ul><li>尽可能使用let，避免var，减少重复变量定义，引起的逻辑错误</li><li>类定义了属性和方法<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">function Person(first, last, age, gender, interests) &#123;</span><br><span class="line">  this.name = &#123;</span><br><span class="line">     first : first,</span><br><span class="line">     last : last</span><br><span class="line">  &#125;;</span><br><span class="line">  this.age = age;</span><br><span class="line">  this.gender = gender;</span><br><span class="line">  this.interests = interests;</span><br><span class="line">  this.bio = function() &#123;</span><br><span class="line">    alert(this.name.first + &#x27; &#x27; + this.name.last + &#x27; is &#x27; + this.age + &#x27; years old. He likes &#x27; + this.interests[0] + &#x27; and &#x27; + this.interests[1] + &#x27;.&#x27;);</span><br><span class="line">  &#125;;</span><br><span class="line">  this.greeting = function() &#123;</span><br><span class="line">    alert(&#x27;Hi! I\&#x27;m &#x27; + this.name.first + &#x27;.&#x27;);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="对象创建方法"><a href="#对象创建方法" class="headerlink" title="对象创建方法"></a>对象创建方法</h4><ul><li>字面量 var obj &#x3D; {a:2,age:28}</li><li>function new 创建</li><li>new Object() <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">let person1 = new Object();</span><br><span class="line">person1.name = &#x27;Chris&#x27;;</span><br><span class="line">person1[&#x27;age&#x27;] = 38;</span><br><span class="line">person1.greeting = function() &#123;</span><br><span class="line"> alert(&#x27;Hi! I\&#x27;m &#x27; + this.name + &#x27;.&#x27;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">//or</span><br><span class="line">let person1 = new Object(&#123;</span><br><span class="line"> name: &#x27;Chris&#x27;,</span><br><span class="line"> age: 38,</span><br><span class="line"> greeting: function() &#123;</span><br><span class="line">   alert(&#x27;Hi! I\&#x27;m &#x27; + this.name + &#x27;.&#x27;);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li>Object.create(),但是ie8不支持 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#从已存在的对象中copy</span><br><span class="line">let person2 = Object.create(person1);</span><br></pre></td></tr></table></figure></li></ul><h3 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h3><h4 id="对象的原型"><a href="#对象的原型" class="headerlink" title="对象的原型"></a>对象的原型</h4><blockquote><p>Since ECMAScript 2015, you can access an object’s prototype object indirectly via Object.getPrototypeOf(obj).<br>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># __proto__ 已废弃</span><br><span class="line">Object.getPrototypeOf(p1)</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="构造函数的原型"><a href="#构造函数的原型" class="headerlink" title="构造函数的原型"></a>构造函数的原型</h4><blockquote><p>也是对象，也存在属性和方法<br>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Person.prototype;</span><br></pre></td></tr></table></figure><br>两者关系<br>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Object.getPrototypeOf(p1) === Person.prototype;</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><h4 id="构造"><a href="#构造" class="headerlink" title="构造"></a>构造</h4><blockquote><p>原型对象都有构造函数属性constructor，指向最开始的构造函数<br>也就是任何对象，都有构造函数属性<br> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Object.getPrototypeOf(p1) == Person.prototype</span><br><span class="line">p1.constructor() → Person.prototype.contructor() </span><br></pre></td></tr></table></figure></p></blockquote><h4 id="call-修改函数指向为当前上下文"><a href="#call-修改函数指向为当前上下文" class="headerlink" title="call,修改函数指向为当前上下文"></a>call,修改函数指向为当前上下文</h4> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> function Teacher(first, last, age, gender, interests, subject) &#123;</span><br><span class="line">  Person.call(this, first, last, age, gender, interests);</span><br><span class="line"></span><br><span class="line">  this.subject = subject;</span><br><span class="line">&#125;</span><br><span class="line">等效于</span><br><span class="line">function Teacher(first, last, age, gender, interests, subject) &#123;</span><br><span class="line">  this.name = &#123;</span><br><span class="line">    first,</span><br><span class="line">    last</span><br><span class="line">  &#125;;</span><br><span class="line">  this.age = age;</span><br><span class="line">  this.gender = gender;</span><br><span class="line">  this.interests = interests;</span><br><span class="line">  this.subject = subject;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="原型继承需要修改construcotr"><a href="#原型继承需要修改construcotr" class="headerlink" title="原型继承需要修改construcotr"></a>原型继承需要修改construcotr</h4><blockquote><p>Person.prototype.constructor指向Person，那么原型链上的Teacher.prototype与其实例constructor都会指向Person<br> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Teacher.prototype = Object.create(Person.prototype);</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>修改Tearch.prototype，<br> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Object.defineProperty(Teacher.prototype, &#x27;constructor&#x27;, &#123; </span><br><span class="line">   value: Teacher, </span><br><span class="line">   enumerable: false, // so that it does not appear in &#x27;for in&#x27; loop</span><br><span class="line">   writable: true &#125;);</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="Class-extends"><a href="#Class-extends" class="headerlink" title="Class | extends"></a>Class | extends</h4> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"> class Person &#123;</span><br><span class="line">  constructor(first, last, age, gender, interests) &#123;</span><br><span class="line">    this.name = &#123;</span><br><span class="line">      first,</span><br><span class="line">      last</span><br><span class="line">    &#125;;</span><br><span class="line">    this._age = age;</span><br><span class="line">    this.gender = gender;</span><br><span class="line">    this.interests = interests;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  greeting() &#123;</span><br><span class="line">    console.log(`Hi! I&#x27;m $&#123;this.name.first&#125;`);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  farewell() &#123;</span><br><span class="line">    console.log(`$&#123;this.name.first&#125; has left the building. Bye for now!`);</span><br><span class="line">  &#125;;</span><br><span class="line">  get age()&#123;</span><br><span class="line">      return this._age;</span><br><span class="line">  &#125;</span><br><span class="line">  set age(value)&#123;</span><br><span class="line">      this._age = value;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a><a href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps">JavaScript</a></h3><h3 id="Objects"><a href="#Objects" class="headerlink" title="Objects"></a><a href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects">Objects</a></h3>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> html </tag>
            
            <tag> css3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《node》- node api精读总结</title>
      <link href="/2020/08/19/front_skills/node/%E3%80%8ANode%E3%80%8B-%20node%20api%E7%B2%BE%E8%AF%BB%E6%80%BB%E7%BB%93/"/>
      <url>/2020/08/19/front_skills/node/%E3%80%8ANode%E3%80%8B-%20node%20api%E7%B2%BE%E8%AF%BB%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h3 id="NODE-DEBUG"><a href="#NODE-DEBUG" class="headerlink" title="NODE_DEBUG"></a>NODE_DEBUG</h3><blockquote><p>可以用来输出debug日志信息</p></blockquote><h4 id="node中内置的参数"><a href="#node中内置的参数" class="headerlink" title="node中内置的参数"></a>node中内置的参数</h4><blockquote><p>命令行，也会输出明显的错误</p></blockquote><ul><li>timer</li><li>http</li><li>net</li><li>fs</li><li>cluster</li><li>tls</li><li>stream</li><li>child_process</li><li>module</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ cat script.js</span><br><span class="line">function bad() &#123;</span><br><span class="line">  require(&#x27;fs&#x27;).readFile(&#x27;/&#x27;);</span><br><span class="line">&#125;</span><br><span class="line">bad();</span><br><span class="line"></span><br><span class="line">$ env NODE_DEBUG=fs node script.js</span><br><span class="line">fs.js:88</span><br><span class="line">        throw backtrace;</span><br><span class="line">        ^</span><br><span class="line">Error: EISDIR: illegal operation on a directory, read</span><br><span class="line">    &lt;stack trace.&gt;</span><br></pre></td></tr></table></figure><h4 id="util自定义输出debug信息"><a href="#util自定义输出debug信息" class="headerlink" title="util自定义输出debug信息"></a>util自定义输出debug信息</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># app.js</span><br><span class="line">const util = require(&quot;util&quot;);</span><br><span class="line">const debuglog = util.debuglog(&quot;app&quot;);</span><br><span class="line"></span><br><span class="line">debuglog(&quot;hello from my debugger [%d]&quot;, 123);</span><br><span class="line"></span><br><span class="line">$ NODE_DEBUG=app node app.js</span><br></pre></td></tr></table></figure><h4 id="util自定义正则匹配输出debug信息"><a href="#util自定义正则匹配输出debug信息" class="headerlink" title="util自定义正则匹配输出debug信息"></a>util自定义正则匹配输出debug信息</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">const util = require(&#x27;util&#x27;);</span><br><span class="line">const logGeneral = util.debuglog(&#x27;app-general&#x27;);</span><br><span class="line">const logTimer = util.debuglog(&#x27;app-timer&#x27;);</span><br><span class="line">const delay = 500;</span><br><span class="line"></span><br><span class="line">logGeneral(&#x27;Kicking off the app&#x27;);</span><br><span class="line"></span><br><span class="line">setTimeout(() =&gt; &#123;</span><br><span class="line">  logTimer(&#x27;timer fired after %d&#x27;, delay);</span><br><span class="line">&#125;, delay);</span><br><span class="line"></span><br><span class="line">$ NODE_DEBUG=app-* node index.js</span><br><span class="line">APP-GENERAL 86188: Kicking off the app</span><br><span class="line">APP-TIMER 86188: timer fired after 500</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="fs-open"><a href="#fs-open" class="headerlink" title="fs.open"></a>fs.open</h3><blockquote><p>接收的参数分为三种形式：</p></blockquote><ul><li>字符串<ul><li>绝对路径形式</li><li>相对路径形式</li></ul></li><li>Buffer</li><li>URL</li></ul><blockquote><p>绝对路径</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fs.open(&#x27;/open/some/file.txt&#x27;, &#x27;r&#x27;, (err, fd) =&gt; &#123;</span><br><span class="line">  if (err) throw err;</span><br><span class="line">  fs.close(fd, (err) =&gt; &#123;</span><br><span class="line">    if (err) throw err;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>相对路径，相对于process.cwd()</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fs.open(&#x27;file.txt&#x27;, &#x27;r&#x27;, (err, fd) =&gt; &#123;</span><br><span class="line">  if (err) throw err;</span><br><span class="line">  fs.close(fd, (err) =&gt; &#123;</span><br><span class="line">    if (err) throw err;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>同步读取文件，需要添加try-catch捕获异常</li></ul><blockquote><p>Buffer，相对或者绝对路径均可</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fs.open(Buffer.from(&#x27;/open/some/file.txt&#x27;), &#x27;r&#x27;, (err, fd) =&gt; &#123;</span><br><span class="line">  if (err) throw err;</span><br><span class="line">  fs.close(fd, (err) =&gt; &#123;</span><br><span class="line">    if (err) throw err;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="推荐"><a href="#推荐" class="headerlink" title="推荐"></a>推荐</h4><h4 id="node-debug"><a href="#node-debug" class="headerlink" title="node debug"></a><a href="https://www.datadoghq.com/">node debug</a></h4><h4 id="自定义node-debug"><a href="#自定义node-debug" class="headerlink" title="自定义node debug"></a><a href="https://www.alxolr.com/articles/debugging-tools-and-practices-in-node-js">自定义node debug</a></h4>]]></content>
      
      
      
        <tags>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《webpack》-  webpack从入门到精通</title>
      <link href="/2020/08/15/front_package_build_skills/webpack/%E3%80%8Awebpack%E3%80%8B-%20webpack%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/"/>
      <url>/2020/08/15/front_package_build_skills/webpack/%E3%80%8Awebpack%E3%80%8B-%20webpack%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/</url>
      
        <content type="html"><![CDATA[<h2 id="webpack从入门到精通"><a href="#webpack从入门到精通" class="headerlink" title="webpack从入门到精通"></a>webpack从入门到精通</h2><h3 id="工程搭建"><a href="#工程搭建" class="headerlink" title="工程搭建"></a>工程搭建</h3><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a><a href="https://webpack.js.org/guides/getting-started/">初始化</a></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir webpack-demo</span><br><span class="line">cd webpack-demo</span><br><span class="line">npm init -y</span><br><span class="line">npm install webpack webpack-cli --save-dev</span><br></pre></td></tr></table></figure><blockquote><p>避免代码意外发布</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># package.json </span><br><span class="line"> &quot;private&quot;: true,</span><br></pre></td></tr></table></figure><h3 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h3><blockquote><p>如果采用npm script执行，那么本地安装即可。如果命令行执行webpack ,那么就需要全局安装。<br>npm script查找，是先从node_modules开始。命令行，查找，是从path路径开始。</p></blockquote><h4 id="node"><a href="#node" class="headerlink" title="node"></a>node</h4><h4 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># local save</span><br><span class="line">npm install --save-dev webpack</span><br><span class="line"># or specific version</span><br><span class="line">npm install --save-dev webpack@&lt;version&gt;</span><br><span class="line"></span><br><span class="line"># global save</span><br><span class="line">npm install --global webpack</span><br><span class="line"></span><br><span class="line">npm install --save-dev webpack@next</span><br><span class="line"># or specific tag/branch</span><br><span class="line">npm install --save-dev webpack/webpack#&lt;tagname/branchname&gt;</span><br></pre></td></tr></table></figure><h4 id="webpack-cli"><a href="#webpack-cli" class="headerlink" title="webpack-cli"></a>webpack-cli</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#本地安装</span><br><span class="line">npm install --save-dev webpack-cli</span><br><span class="line"></span><br><span class="line"># 全局安装</span><br><span class="line">yarn add global webpack-cli </span><br></pre></td></tr></table></figure><blockquote><p>npm scripts 配置要求</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">&quot;build&quot;: &quot;webpack --mode=development --config webpack.config.js&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>npm v5.2.0 before</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node_modules/.bin/webpack </span><br></pre></td></tr></table></figure><blockquote><p>npm v5.2.0 or greater,<a href="https://webpack.js.org/configuration/mode/#mode-development">mode配置</a></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># npx webpack </span><br></pre></td></tr></table></figure><h4 id="版本校验"><a href="#版本校验" class="headerlink" title="版本校验"></a>版本校验</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ webpack --version</span><br><span class="line">4.43.0</span><br><span class="line"></span><br><span class="line">$ webpack-cli --version</span><br><span class="line">3.3.12</span><br></pre></td></tr></table></figure><h2 id="webpack配置实践"><a href="#webpack配置实践" class="headerlink" title="webpack配置实践"></a>webpack配置实践</h2><blockquote><p>默认入口文件，src&#x2F;index.js ；默认出口文件 ，dist&#x2F;main.js</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  entry: &#x27;./src/index.js&#x27;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">等效于:</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    main: &#x27;./src/index.js&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="单入口文件"><a href="#单入口文件" class="headerlink" title="单入口文件"></a>单入口文件</h3><h4 id="dist-index-html"><a href="#dist-index-html" class="headerlink" title="dist&#x2F;index.html"></a>dist&#x2F;index.html</h4><blockquote><p>index.html</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#dist 目录</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;Hello Webpack &lt;/title&gt;</span><br><span class="line">    </span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body id=&quot;body&quot;&gt;</span><br><span class="line">     this is hello webpack</span><br><span class="line">     &lt;script src=&quot;main.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><blockquote><p>index.js</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># src/index.js</span><br><span class="line">console.log(&quot;this is index.js&quot;);</span><br><span class="line"></span><br><span class="line">const app = document.getElementById(&#x27;body&#x27;);</span><br><span class="line">const div = document.createElement(&#x27;div&#x27;);</span><br><span class="line">div.innerText = &#x27;hello webpack&#x27;</span><br><span class="line">app.appendChild(div);</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>配置文件webpack.config.js</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const path = require(&#x27;path&#x27;);</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  entry: &#x27;./src/index.js&#x27;,</span><br><span class="line">  output: &#123;</span><br><span class="line">path: path.resolve(__dirname, &#x27;dist&#x27;),</span><br><span class="line">  filename: &#x27;main.js&#x27;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>打包结果<br><img src="https://s1.ax1x.com/2020/08/09/a73k5t.gif"></p></blockquote><h4 id="clean-webpack-plugin"><a href="#clean-webpack-plugin" class="headerlink" title="clean-webpack-plugin"></a>clean-webpack-plugin</h4><blockquote><p><a href="https://webpack.js.org/guides/output-management/#cleaning-up-the-dist-folder">清空dist文件夹</a></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev clean-webpack-plugin</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="html-webpack-plugin"><a href="#html-webpack-plugin" class="headerlink" title="html-webpack-plugin"></a>html-webpack-plugin</h4><blockquote><p>安装插件<a href="https://github.com/jantimon/html-webpack-plugin#options">html-webpack-plugin </a></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yarn add html-webpack-plugin --dev</span><br></pre></td></tr></table></figure><blockquote><p>不传递参数，默认生成dist&#x2F;index.html</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">new HtmlWebpackPlugin()</span><br></pre></td></tr></table></figure><ul><li><p>webpack.config.js文件中配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">const path = require(&#x27;path&#x27;);</span><br><span class="line">const DIST_PATH = path.resolve(__dirname,&#x27;./dist/&#x27;);</span><br><span class="line">const SRC_PATH = path.resolve(__dirname,&#x27;./src/&#x27;);</span><br><span class="line">const &#123; CleanWebpackPlugin &#125; = require(&#x27;clean-webpack-plugin&#x27;);</span><br><span class="line">const HtmlWebpackPlugin = require(&#x27;html-webpack-plugin&#x27;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">    //入口文件</span><br><span class="line">    entry:&#123;</span><br><span class="line">        main: &#x27;./src/index.js&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    output:&#123;</span><br><span class="line">        path: DIST_PATH,</span><br><span class="line">        filename: &#x27;[name].bundle.js&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    mode: &#x27;development&#x27;,</span><br><span class="line">    plugins: [</span><br><span class="line">        new CleanWebpackPlugin(),</span><br><span class="line">        new HtmlWebpackPlugin(),</span><br><span class="line">        new HtmlWebpackPlugin(&#123;</span><br><span class="line">            template: &#x27;./src/pages/index.html&#x27;, //模板文件，copy一份到dist,默认生成的文件名index.html</span><br><span class="line">            title: &quot;测试标题&quot;,</span><br><span class="line">            inject: &#x27;head&#x27;,  //默认注入到head</span><br><span class="line">            scriptLoading: &#x27;defer&#x27;, //文件延迟加载,</span><br><span class="line">            filename: &#x27;hello.html&#x27;</span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>对应的html template配置如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;&lt;%= htmlWebpackPlugin.options.title %&gt;&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body id=&quot;body&quot;&gt;</span><br><span class="line">    </span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li><li><p>生成hello.html</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;测试标题&lt;/title&gt;</span><br><span class="line">&lt;script defer src=&quot;main.bundle.js&quot;&gt;&lt;/script&gt;&lt;/head&gt;</span><br><span class="line">&lt;body id=&quot;body&quot;&gt;</span><br><span class="line">    </span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li></ul><h4 id="css-loader"><a href="#css-loader" class="headerlink" title="css-loader"></a>css-loader</h4><blockquote><p>安装<a href="https://webpack.js.org/loaders/css-loader/">css-loader</a>、style-loader</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># css-loader 处理css,转换为 webpack可以认识的js</span><br><span class="line"># style-loader 把转换后的css，写入到html中，以便css生效</span><br><span class="line"></span><br><span class="line"> npm install --save-dev css-loader style-loader</span><br></pre></td></tr></table></figure><blockquote><p>添加css文件</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#index.css</span><br><span class="line">div&#123;</span><br><span class="line">  font-size:20px;</span><br><span class="line">  color: #3199ee;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>js 文件中引入css</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">require(&#x27;./css/index.css);</span><br></pre></td></tr></table></figure><blockquote><p>运行构建，得到下方错误提示：<br><img src="https://s1.ax1x.com/2020/08/16/dEcDgI.png"></p></blockquote><blockquote><p>配置loader</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">module: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.css$/i,</span><br><span class="line">        </span><br><span class="line">        use: [&#x27;style-loader&#x27;, &#x27;css-loader&#x27;], //从右向左依次处理</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><ul><li>打包运行,刷新界面，得到如下：<br><img src="https://s1.ax1x.com/2020/08/16/dE2CSs.png"></li></ul><h4 id="webpack-dev-server"><a href="#webpack-dev-server" class="headerlink" title="webpack-dev-server"></a>webpack-dev-server</h4><blockquote><p>安装<a href="https://webpack.js.org/configuration/dev-server/">webpack-dev-server</a></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev webpack-dev-server</span><br></pre></td></tr></table></figure><blockquote><p>dev-server配置</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">devServer: &#123;</span><br><span class="line">    contentBase: &quot;./dist&quot;,</span><br><span class="line">    hot: true,</span><br><span class="line">    // open: true,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><blockquote><p>修改启动方式, 默认打开dist&#x2F;index.html </p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># package.json</span><br><span class="line">&quot;start&quot;: &quot;webpack-dev-server --config webpack.config.js --open&quot;</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2020/08/16/dE2IBV.md.png"></p><blockquote><p>修改启动端口</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">port: 9000</span><br></pre></td></tr></table></figure><blockquote><p>修改首页，</p></blockquote><ul><li>但是地址栏显示的，不是localhost:9000&#x2F;hello.html<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">devServer: &#123;</span><br><span class="line">    contentBase: &quot;./dist&quot;,</span><br><span class="line">    hot: true,</span><br><span class="line">    port: 9000,</span><br><span class="line">    index: &#x27;hello.html&#x27;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><img src="https://s1.ax1x.com/2020/08/16/dEfpfe.png"></li></ul><blockquote><p>本地ip启动</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useLocalIp: true</span><br></pre></td></tr></table></figure><h4 id="mini-css-extract-plugin"><a href="#mini-css-extract-plugin" class="headerlink" title="mini-css-extract-plugin"></a>mini-css-extract-plugin</h4><blockquote><p><a href="https://webpack.js.org/plugins/mini-css-extract-plugin/#root">安装mini-css-extract-plugin</a></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev mini-css-extract-plugin</span><br></pre></td></tr></table></figure><blockquote><p>引入配置</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const MiniCssExtractPlugin = require(&#x27;mini-css-extract-plugin&#x27;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>添加配置</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  plugins: [new MiniCssExtractPlugin()],</span><br><span class="line">  module: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.css$/i,</span><br><span class="line">        use: [MiniCssExtractPlugin.loader, &#x27;css-loader&#x27;],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>构建后，文件分离如下：<br>之所以main.css，文件是根据css所在的js bundle名命名的<br><img src="https://s1.ax1x.com/2020/08/16/dE72Z9.png"></p></blockquote><h4 id="file-loader"><a href="#file-loader" class="headerlink" title="file-loader"></a>file-loader</h4><p><img src="https://s1.ax1x.com/2020/08/19/d1qaDJ.png"></p><blockquote><p>图片和特殊字体webpack不认识</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -D file-loader</span><br></pre></td></tr></table></figure><blockquote><p>添加webpack配置，需要主要正则表达式</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  plugins: [new MiniCssExtractPlugin()],</span><br><span class="line">  module: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">         &#123;</span><br><span class="line">            test: /\.(jpg|png|gif|jpeg)$/gi,</span><br><span class="line">            use:[&#x27;file-loader&#x27;]</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="csv-loader-and-xml-loader"><a href="#csv-loader-and-xml-loader" class="headerlink" title="csv-loader and xml-loader"></a>csv-loader and xml-loader</h4><blockquote><p>安装</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev csv-loader xml-loader</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>webpack配置</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  test: /\.(csv|tsv)$/,</span><br><span class="line">  use: [</span><br><span class="line">    &#x27;csv-loader&#x27;,</span><br><span class="line">  ],</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">  test: /\.xml$/,</span><br><span class="line">  use: [</span><br><span class="line">    &#x27;xml-loader&#x27;,</span><br><span class="line">  ],</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h4 id="extract-loader"><a href="#extract-loader" class="headerlink" title="extract-loader"></a>extract-loader</h4><blockquote><p><a href="https://webpack.js.org/loaders/extract-loader/#root">安装</a></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install extract-loader file-loader --save-dev</span><br></pre></td></tr></table></figure><h4 id="optimize-css-assets-webpack-plugin"><a href="#optimize-css-assets-webpack-plugin" class="headerlink" title="optimize-css-assets-webpack-plugin"></a>optimize-css-assets-webpack-plugin</h4><blockquote><p>安装optimize-css-assets-webpack-plugin，压缩js，css</p></blockquote><h3 id="其他配置"><a href="#其他配置" class="headerlink" title="其他配置"></a>其他配置</h3><h4 id="mode"><a href="#mode" class="headerlink" title="mode"></a>mode</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  mode: &#x27;development&#x27;, //配置模式 development 开发模式；production，产线模式，会压缩code</span><br><span class="line">  ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="源码定位问题"><a href="#源码定位问题" class="headerlink" title="源码定位问题"></a>源码定位问题</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">devtool: &#x27;inline-source-map&#x27;,</span><br></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><h4 id="webpack-1"><a href="#webpack-1" class="headerlink" title="webpack"></a><a href="https://webpack.js.org/guides/installation/">webpack</a></h4><h4 id="webpack-优化"><a href="#webpack-优化" class="headerlink" title="webpack 优化"></a><a href="https://juejin.im/post/5f1657a3e51d45346d31063a?utm_source=gold_browser_extension#heading-35">webpack 优化</a></h4>]]></content>
      
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Linux》- Linux发展简史</title>
      <link href="/2020/08/14/devops_skills/linux/%E3%80%8ALinux%E3%80%8B-%20Linux%E5%8F%91%E5%B1%95%E7%AE%80%E5%8F%B2/"/>
      <url>/2020/08/14/devops_skills/linux/%E3%80%8ALinux%E3%80%8B-%20Linux%E5%8F%91%E5%B1%95%E7%AE%80%E5%8F%B2/</url>
      
        <content type="html"><![CDATA[<h3 id="Linux分类"><a href="#Linux分类" class="headerlink" title="Linux分类"></a>Linux分类</h3><h4 id="Linux版本关系"><a href="#Linux版本关系" class="headerlink" title="Linux版本关系"></a>Linux版本关系</h4><p><img src="https://s1.ax1x.com/2020/08/15/dizOpt.png"></p><h4 id="包管理方式"><a href="#包管理方式" class="headerlink" title="包管理方式"></a>包管理方式</h4><p><img src="https://s1.ax1x.com/2020/08/15/dFS191.jpg"></p><h3 id="Linux简介"><a href="#Linux简介" class="headerlink" title="Linux简介"></a>Linux简介</h3><h4 id="名字的由来"><a href="#名字的由来" class="headerlink" title="名字的由来"></a>名字的由来</h4><blockquote><p>Linus Torvalds本要把他的发时叫做Freax——“fread”，“free”和“x”（暗指Unix）的合成词。在开发系统的前半年里，他把文件以文件名“Freax”存储。Torvalds考虑过Linux这个名字，但是因为觉得它过于自我本位而放弃了使用它[6]。</p></blockquote><blockquote><p>为便于开发，在1991年9月，他把那些文件上传到了赫尔辛基工业大学（HUT）的FTP服务器（ftp.funet.fi)。Torvalds在HUT负责管理那个服务器的同事Ari Lemmke，觉得“Freax”这个名字不是很好，就在不咨询Torvalds的情况下，把项目的名字改成了“Linux”[6]。但是之后，Torvalds也同意“Linux”这个名字了：“经过多次讨论，他承认Linux这个名字更好。在0.01版本Linux的源代码的makefile里仍然使用‘Freax’这个名字，在之后‘Linux’这个名字才被使用。所以，Linux这个名字并不是预先想好的，只是它被广泛接受了而已”</p></blockquote><h4 id="历史"><a href="#历史" class="headerlink" title="历史"></a>历史</h4><blockquote><p>1983：Richard Stallman发起以创建一个自由的操作系统为目标的GNU计划。</p></blockquote><blockquote><p>1989：Richard Stallman撰写第一版的GNU GPL。</p></blockquote><blockquote><p>1991：Linux内核在8月25日由21岁的芬兰学生Linus Benedict Torvalds公开发布。</p></blockquote><blockquote><p>1992：在GNU GPL下Linux内核被重新授权使用，产生第一个“Linux发行版本”。</p></blockquote><blockquote><p>1993：超过100个开发者致力于Linux内核开发。在他们的努力下，内核逐渐适应GNU的环境，这个为Linux创造巨大的应用空间的广阔环境。Slackware首次发布。后来在同一年，Debian项目设立，现已成为最大的社区发布项目。</p></blockquote><blockquote><p>1994: 3月, Torvalds认为内核的所有组件已经完全成熟，他放出了Linux的1.0版本。XFree86项目组提供了一个图形化用户界面（GUI）.同年Red Hat公司和SUSE发行他们各自的Linux 1.0分发版本。</p></blockquote><blockquote><p>1995: Linux被移植到DEC Alpha和Sun公司的SPARC平台上，而在接下来的几年里它又被广泛地移植到更多的平台上。</p></blockquote><blockquote><p>1996: Linux内核2.0版本发布。此时内核已经支持多处理器，因而成为各大公司的绝佳选择。</p></blockquote><blockquote><p>1998：很多大公司，诸如IBM、Compaq ，Oracle表示支持Linux系统。另外，一部分程序员开始图形化用户界面KDE的开发。</p></blockquote><blockquote><p>1999：一些程序员开始致力于开发图形化环境GNOME，它可以替代依靠Qt工具包才能工作的KDE。在这一年里IBM宣布一项支持Linux的浩大的工程。</p></blockquote><blockquote><p>2004: XFree86小组分裂，同现有的X Windows标准组织 共同成立X.Org基金会，促使了X Window ServerLinux版本极其快速而迅猛的发展</p></blockquote><h4 id="Linux商标"><a href="#Linux商标" class="headerlink" title="Linux商标"></a>Linux商标</h4><blockquote><p>在1994和1995年，有多个来自不同国家的人想把Linux注册为商标，从而一些Linux公司可以从中收取特许使用金。很多Linux的开发人员和用户都不同意此举。Torvalds在Linux国际的帮助下得到了Linux这个商标，然后他把这个商标转让给了Linux国际。对这个商标的保护后来就由一个专门的基金会——非营利性的Linux标识协会——来管理。2000年，Linus Torvalds指定了分配许可权的基本规则。这意味着任何要想以Linux的名义发布产品和服务的人，都要拥有许可证。而许可证要通过购买获得。</p></blockquote><h4 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h4><blockquote><p>开源码发展实验室（Open Source Development Lab）创立于2000年。它是一个独立的非营利性组织。它的目标是优化Linux以应用于数据中心和运营商的领域。</p></blockquote><blockquote><p>它是Linus Torvalds和Andrew Morton工作的赞助来源。2006年年中，Morton去了Google（Google也是使用Linux内核的）；Torvalds全职为OSDL开发Linux内核。非商业性运营机制的资金主要来源于Red Hat，Novell，三菱，英特尔, IBM ，戴尔和惠普等几家大公司。</p></blockquote><blockquote><p>2007年1月22日，OSDL和自由标准组织合并为Linux基金会，把它们的工作焦点集中在改进GNU&#x2F;Linux以与Windows竞争</p></blockquote><h4 id="云计算时代"><a href="#云计算时代" class="headerlink" title="云计算时代"></a>云计算时代</h4><p> <img src="https://s1.ax1x.com/2020/08/15/dFpDIJ.png"><br> <img src="https://s1.ax1x.com/2020/08/15/dFpsi9.png"></p><h3 id="软件许可协议简介"><a href="#软件许可协议简介" class="headerlink" title="软件许可协议简介"></a>软件许可协议简介</h3><p><img src="https://s1.ax1x.com/2020/08/15/di48Z8.png"></p><h4 id="BSD开源协议"><a href="#BSD开源协议" class="headerlink" title="BSD开源协议"></a>BSD开源协议</h4><blockquote><p>BSD开源协议是一个给于使用者很大自由的协议。基本上使用者可以”为所欲为”,可以自由的使用，修改源代码，也可以将修改后的代码作为开源或者专有软件再发布。</p></blockquote><ul><li><p>但“为所欲为”的前提当你发布使用了BSD协议的代码，或则以BSD协议代码为基础做二次开发自己的产品时，需要满足三个条件：</p><blockquote><p>如果再发布的产品中包含源代码，则在源代码中必须带有原来代码中的BSD协议。<br>如果再发布的只是二进制类库&#x2F;软件，则需要在类库&#x2F;软件的文档和版权声明中包含原来代码中的BSD协议。<br>不可以用开源代码的作者&#x2F;机构名字和原来产品的名字做市场推广。</p></blockquote></li><li><p>BSD 代码鼓励代码共享，但需要尊重代码作者的著作权。</p></li><li><p>BSD由于允许使用者修改和重新发布代码，也允许使用或在BSD代码上开发商业软件发布和销售，因此是对商业集成很友好的协议。</p></li><li><p>而很多的公司企业在选用开源产品的时候都首选BSD协议，因为可以完全控制这些第三方的代码，在必要的时候可以修改或者二次开发。</p></li></ul><h4 id="Apache-Licence-2-0"><a href="#Apache-Licence-2-0" class="headerlink" title="Apache Licence 2.0"></a>Apache Licence 2.0</h4><blockquote><p>Apache Licence是著名的非盈利开源组织Apache采用的协议。该协议和BSD类似，同样鼓励代码共享和尊重原作者的著作权，同样允许代码修改，再发布（作为开源或商业软件）。</p></blockquote><ul><li><p>需要满足的条件也和BSD类似：</p><blockquote><p>需要给代码的用户一份Apache Licence<br>如果你修改了代码，需要再被修改的文件中说明。<br>在延伸的代码中（修改和有源代码衍生的代码中）需要带有原来代码中的协议，商标，专利声明和其他原来作者规定需要包含的说明。<br>如果再发布的产品中包含一个Notice文件，则在Notice文件中需要带有Apache Licence。你可以在Notice中增加自己的许可，但不可以表现为对Apache Licence构成更改。</p></blockquote></li><li><p>Apache Licence也是对商业应用友好的许可。</p></li><li><p>使用者也可以在需要的时候修改代码来满足需要并作为开源或商业产品发布&#x2F;销售。</p></li></ul><h4 id="GPL"><a href="#GPL" class="headerlink" title="GPL"></a>GPL</h4><blockquote><p>我们很熟悉的Linux就是采用了GPL。</p></blockquote><blockquote><p>GPL协议和BSD, Apache Licence等鼓励代码重用的许可很不一样。</p></blockquote><ul><li>GPL的出发点是代码的开源&#x2F;免费使用和引用&#x2F;修改&#x2F;衍生代码的开源&#x2F;免费使用，但不允许修改后和衍生的代码做为闭源的商业软件发布和销售。</li><li>这也就是为什么我们能用免费的各种linux，包括商业公司的linux和linux上各种各样的由个人，组织，以及商业软件公司开发的免费软件了。</li></ul><blockquote><p>GPL协议的主要内容是只要在一个软件中使用(”使用”指类库引用，修改后的代码或者衍生代码)GPL 协议的产品，则该软件产品必须也采用GPL协议，既必须也是开源和免费。这就是所谓的”传染性”。GPL协议的产品作为一个单独的产品使用没有任何问题，还可以享受免费的优势。</p></blockquote><blockquote><p>由于GPL严格要求使用了GPL类库的软件产品必须使用GPL协议，对于使用GPL协议的开源代码，商业软件或者对代码有保密要求的部门就不适合集成&#x2F;采用作为类库和二次开发的基础。<br>其它细节如再发布的时候需要伴随GPL协议等和BSD&#x2F;Apache等类似。</p></blockquote><h4 id="LGPL"><a href="#LGPL" class="headerlink" title="LGPL"></a>LGPL</h4><blockquote><p>LGPL是GPL的一个为主要为类库使用设计的开源协议。和GPL要求任何使用&#x2F;修改&#x2F;衍生之GPL类库的的软件必须采用GPL协议不同。</p></blockquote><ul><li>LGPL 允许商业软件通过类库引用(link)方式使用LGPL类库而不需要开源商业软件的代码。</li><li>这使得采用LGPL协议的开源代码可以被商业软件作为类库引用并发布和销售。</li></ul><blockquote><p>但是如果修改LGPL协议的代码或者衍生，则所有修改的代码，涉及修改部分的额外代码和衍生的代码都必须采用LGPL协议。因此LGPL协议的开源代码很适合作为第三方类库被商业软件引用，但不适合希望以LGPL协议代码为基础，通过修改和衍生的方式做二次开发的商业软件采用。<br>GPL&#x2F;LGPL都保障原作者的知识产权，避免有人利用开源代码复制并开发类似的产品</p></blockquote><h4 id="MIT"><a href="#MIT" class="headerlink" title="MIT"></a>MIT</h4><blockquote><p>MIT是和BSD一样宽范的许可协议,作者只想保留版权,而无任何其他了限制.也就是说,你必须在你的发行版里包含原许可协议的声明,无论你是以二进制发布的还是以源代码发布的.</p></blockquote><h4 id="MPL"><a href="#MPL" class="headerlink" title="MPL"></a>MPL</h4><blockquote><p>MPL是The Mozilla Public License的简写，是1998年初Netscape的 Mozilla小组为其开源软件项目设计的软件许可证。</p></blockquote><ul><li>MPL许可证出现的最重要原因就是，Netscape公司认为GPL许可证没有很好地平衡开发者对源代码的需求和他们利用源代码获得的利益。</li><li>同著名的GPL许可证和BSD许可证相比，MPL在许多权利与义务的约定方面与它们相同（因为都是符合OSIA 认定的开源软件许可证）。</li></ul><blockquote><p>但是，相比而言MPL还有以下几个显著的不同之处:</p></blockquote><ul><li>MPL虽然要求对于经MPL许可证发布的源代码的修改也要以MPL许可证的方式再许可出来，以保证其他人可以在MPL的条款下共享源代码。</li><li>但是，在MPL 许可证中对“发布”的定义是“以源代码方式发布的文件”，这就意味着MPL允许一个企业在自己已有的源代码库上加一个接口，除了接口程序的源代码以MPL 许可证的形式对外许可外，</li><li>源代码库中的源代码就可以不用MPL许可证的方式强制对外许可。这些，就为借鉴别人的源代码用做自己商业软件开发的行为留了一个豁口。</li><li>MPL许可证第三条第7款中允许被许可人将经过MPL许可证获得的源代码同自己其他类型的代码混合得到自己的软件程序。</li><li>对软件专利的态度，MPL许可证不像GPL许可证那样明确表示反对软件专利，但是却明确要求源代码的提供者不能提供已经受专利保护的源代码（除非他本人是专利权人，并书面向公众免费许可这些源代码），也不能在将这些源代码以开放源代码许可证形式许可后再去申请与这些源代码有关的专利。</li></ul><blockquote><p>对源代码的定义</p></blockquote><ul><li>MPL（1.1版本）许可证中，对源代码的定义是:“源代码指的是对作品进行修改最优先择取的形式，它包括:所有模块的所有源程序，加上有关的接口的定义，加上控制可执行作品的安装和编译的‘原本’（原文为‘Script’），或者不是与初始源代码显著不同的源代码就是被源代码贡献者选择的从公共领域可以得到的程序代码。”</li><li>MPL许可证第3条有专门的一款是关于对源代码修改进行描述的规定，就是要求所有再发布者都得有一个专门的文件就对源代码程序修改的时间和修改的方式有描述。</li></ul><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><h4 id="Linux历史"><a href="#Linux历史" class="headerlink" title="Linux历史"></a><a href="https://zh.wikipedia.org/wiki/Linux%E5%8E%86%E5%8F%B2">Linux历史</a></h4>]]></content>
      
      
      
        <tags>
            
            <tag> shell </tag>
            
            <tag> 脚本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Css3》- CSS进阶之页面布局</title>
      <link href="/2020/08/14/front_skills/css3/%E3%80%8ACss3%E3%80%8B-%20CSS%E8%BF%9B%E9%98%B6%E4%B9%8B%E9%A1%B5%E9%9D%A2%E5%B8%83%E5%B1%80/"/>
      <url>/2020/08/14/front_skills/css3/%E3%80%8ACss3%E3%80%8B-%20CSS%E8%BF%9B%E9%98%B6%E4%B9%8B%E9%A1%B5%E9%9D%A2%E5%B8%83%E5%B1%80/</url>
      
        <content type="html"><![CDATA[<h3 id="页面布局"><a href="#页面布局" class="headerlink" title="页面布局"></a>页面布局</h3><blockquote><p>页面布局，说的浅显点，就是页面排版。如何利用已知的div,table,tr,article,section等html5元素，解决用哪些、怎么放、放多少的问题。</p></blockquote><blockquote><p>好的排版，在css样式文件，没有生效的情况下，也能理解界面整体轮廓。</p></blockquote><blockquote><p>不会因css生效后，元素位置大调整。否则，界面性能差且体验不友好。</p></blockquote><h3 id="布局方式"><a href="#布局方式" class="headerlink" title="布局方式"></a>布局方式</h3><blockquote><p>正常文档流 或者说，采用浏览器默认行为， 元素按照出现位置，进行排列。块元素，独占一行；行内元素，先后排列。<br>快级别元素，譬如div，默认只设置宽度，不设置高度的。</p></blockquote><h4 id="display"><a href="#display" class="headerlink" title="display"></a>display</h4><blockquote><p>block, inline or inline-block 正常文档流中生效<br>grid ,flex 决定是子元素 <strong>(直接子元素)</strong> 如何布局的</p></blockquote><h5 id="flex-为何会出现呢？"><a href="#flex-为何会出现呢？" class="headerlink" title="flex 为何会出现呢？"></a>flex 为何会出现呢？</h5><blockquote><p>当然是为了在一个方向上，布局更简单. display:flex ;</p></blockquote><ul><li>flex-direction 默认row</li><li>align-items  默认 stretch ，按照最高的元素拉伸</li></ul>  <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">   <span class="attribute">display</span>: flex;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="selector-class">.wrapper</span> &gt; <span class="selector-tag">div</span> &#123;</span><br><span class="line">       <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"> &lt;<span class="selector-tag">div</span> class=&quot;wrapper&quot;&gt;</span><br><span class="line">   &lt;<span class="selector-tag">div</span> class=&quot;box1&quot;&gt;One&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">   &lt;<span class="selector-tag">div</span> class=&quot;box2&quot;&gt;Two&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">   &lt;<span class="selector-tag">div</span> class=&quot;box3&quot;&gt;Three&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">div</span>&gt;</span><br></pre></td></tr></table></figure><h5 id="grid为何要出现呢？"><a href="#grid为何要出现呢？" class="headerlink" title="grid为何要出现呢？"></a>grid为何要出现呢？</h5><blockquote><p>一个方向布局，怎么够呢？得两个方向呀。 display: <a href="https://css-tricks.com/snippets/css/complete-guide-grid/">grid </a></p></blockquote><ul><li>grid-template-row 控制水平</li><li>grid-template-column 控制垂直</li><li>父节点，设置完毕, 自动分配子元素到对应的位置;或者grid-row,grid-column设置子元素</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.container &#123;</span><br><span class="line">  // can be a length, a percentage, or a fraction of the free space in the grid (using the fr unit)</span><br><span class="line">  grid-template-columns:  ... |   ...; </span><br><span class="line">  grid-template-rows:  ... |   ...;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>语法规则<br>直接定义row、column宽度</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.container &#123;</span><br><span class="line">  grid-template-columns: 40px 50px auto 50px 40px;</span><br><span class="line">  grid-template-rows: 25% 100px auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://s1.ax1x.com/2020/08/21/dYFljg.png" height="300" width="400"><blockquote><p>利用自定义名称+数值，设置布局</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.container &#123;</span><br><span class="line">  grid-template-columns: [first] 40px [line2] 50px [line3] auto [col4-start] 50px [five] 40px [end];</span><br><span class="line">  grid-template-rows: [row1-start] 25% [row1-end] 100px [third-line] auto [last-line];</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><img src="https://s1.ax1x.com/2020/08/21/dYF6ER.png" width="400" height="300"><ul><li><p>子元素布局</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.item-a &#123;</span><br><span class="line">  grid-column-start: 2;</span><br><span class="line">  grid-column-end: five;</span><br><span class="line">  grid-row-start: row1-start;</span><br><span class="line">  grid-row-end: 3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://s1.ax1x.com/2020/08/21/dYF5Ke.png" height="200" width="300"></li><li><p>span 扩展</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.item-b &#123;</span><br><span class="line">  grid-column-start: 1;</span><br><span class="line">  grid-column-end: span col4-start;</span><br><span class="line">  grid-row-start: 2;</span><br><span class="line">  grid-row-end: span 2; #默认span 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://s1.ax1x.com/2020/08/21/dYkP5q.png" height="200" width="300"></li></ul><blockquote><p>其余简写语法</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#简写</span><br><span class="line">.container &#123;</span><br><span class="line">  grid-template-columns: repeat(3, 20px [col-start]);</span><br><span class="line">&#125;</span><br><span class="line"># 等效于</span><br><span class="line">.container &#123;</span><br><span class="line">  grid-template-columns: 20px [col-start] 20px [col-start] 20px [col-start];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 百分比</span><br><span class="line">.container &#123;</span><br><span class="line">  #除去50px，之后的1/3</span><br><span class="line">  grid-template-columns: 1fr 50px 1fr 1fr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="float"><a href="#float" class="headerlink" title="float"></a>float</h4><blockquote><p>元素浮动，左右摆放，脱离正常文档流</p></blockquote><ul><li>left</li><li>right</li><li>none (不浮动，采用默认值)</li><li>inherit（采用父容器规则）</li></ul><h4 id="position"><a href="#position" class="headerlink" title="position"></a>position</h4><blockquote><p>精确的把元素控制在盒子模型中，盒子套盒子等,主要运用于界面局部布局，而非界面整体布局。</p></blockquote><ul><li>static （不做任何改动）</li><li>relative (相对于之前出现的位置进行x轴或者y轴移动）</li><li>absolute （脱离文档流,相对于最近的非static定位的祖先节点）</li><li>fixed (也脱离文档流，相对于浏览器定位)</li><li>sticky (offset 类似fixed,没有则什么也不做，类似static)</li></ul><h4 id="table"><a href="#table" class="headerlink" title="table"></a>table</h4><blockquote><p>固定的宽高布局，还能自适应，</p></blockquote><ul><li>table ,th,tr,td元素标签布局</li><li>css table <blockquote><p>用来兼容不支持display: flex,grid，版本早的浏览器</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">html &#123;</span><br><span class="line">  font-family: sans-serif;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">form &#123;</span><br><span class="line">  display: table;</span><br><span class="line">  margin: 0 auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">form div &#123;</span><br><span class="line">  display: table-row;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">form label, form input &#123;</span><br><span class="line">  display: table-cell;</span><br><span class="line">  margin-bottom: 10px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">form label &#123;</span><br><span class="line">  width: 200px;</span><br><span class="line">  padding-right: 5%;</span><br><span class="line">  text-align: right;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">form input &#123;</span><br><span class="line">  width: 300px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">form p &#123;</span><br><span class="line">  display: table-caption;</span><br><span class="line">  caption-side: bottom;</span><br><span class="line">  width: 300px;</span><br><span class="line">  color: #999;</span><br><span class="line">  font-style: italic;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="Multi-column-布局"><a href="#Multi-column-布局" class="headerlink" title="Multi-column 布局"></a>Multi-column 布局</h4><blockquote><p>按照column-width，column-count，从左到有，从上到下顺序，展示内容</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;container&quot;&gt;</span><br><span class="line">    &lt;h1&gt;Multi-column layout&lt;/h1&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;p&gt;Paragraph 1.&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;Paragraph 2.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">.container &#123;</span><br><span class="line">        column-width: 200px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="元素默认样式"><a href="#元素默认样式" class="headerlink" title="元素默认样式"></a>元素默认样式</h3><table><thead><tr><th>元素</th><th>style</th></tr></thead></table><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><h3 id="web-develop"><a href="#web-develop" class="headerlink" title="web-develop"></a><a href="https://developer.mozilla.org/en-US/docs/Learn/Front-end_web_developer">web-develop</a></h3>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> html </tag>
            
            <tag> css3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Css3》- 如何成为一名前端开发者之CrossTest入门</title>
      <link href="/2020/08/09/front_skills/css3/%E3%80%8ACss3%E3%80%8B-%20%E5%A6%82%E4%BD%95%E6%88%90%E4%B8%BA%E4%B8%80%E5%90%8D%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E8%80%85%E4%B9%8BCrossTest%E5%85%A5%E9%97%A8/"/>
      <url>/2020/08/09/front_skills/css3/%E3%80%8ACss3%E3%80%8B-%20%E5%A6%82%E4%BD%95%E6%88%90%E4%B8%BA%E4%B8%80%E5%90%8D%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E8%80%85%E4%B9%8BCrossTest%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><h2 id="Javascript"><a href="#Javascript" class="headerlink" title="Javascript"></a>Javascript</h2><h2 id="Web-Forms"><a href="#Web-Forms" class="headerlink" title="Web Forms"></a>Web Forms</h2><h2 id="Cross-browser-testing"><a href="#Cross-browser-testing" class="headerlink" title="Cross-browser testing"></a>Cross-browser testing</h2><h2 id="Accessibility"><a href="#Accessibility" class="headerlink" title="Accessibility"></a>Accessibility</h2><h2 id="Modern-tooling"><a href="#Modern-tooling" class="headerlink" title="Modern tooling"></a>Modern tooling</h2><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><h3 id="web-develop"><a href="#web-develop" class="headerlink" title="web-develop"></a><a href="https://developer.mozilla.org/en-US/docs/Learn/Front-end_web_developer">web-develop</a></h3>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> html </tag>
            
            <tag> css3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Css3》- CSS进阶之媒介查询</title>
      <link href="/2020/08/09/front_skills/css3/%E3%80%8ACss3%E3%80%8B-%20CSS%E8%BF%9B%E9%98%B6%E4%B9%8B%E5%AA%92%E4%BB%8B%E6%9F%A5%E8%AF%A2/"/>
      <url>/2020/08/09/front_skills/css3/%E3%80%8ACss3%E3%80%8B-%20CSS%E8%BF%9B%E9%98%B6%E4%B9%8B%E5%AA%92%E4%BB%8B%E6%9F%A5%E8%AF%A2/</url>
      
        <content type="html"><![CDATA[<p>这节内容，紧接着上一篇<a href="https://juejin.im/post/6858822065164648456/">HTML入门</a>,我们介绍Css进阶相关知识点</p><h3 id="Css是什么？"><a href="#Css是什么？" class="headerlink" title="Css是什么？"></a>Css是什么？</h3><blockquote><p>css为了美化页面的一套浏览器语法规则，</p></blockquote><blockquote><p>Css是由CSS Working Group负责制定的. 这个工作组有不同浏览器厂商代表、其他公司中对css感兴趣的人以及一些受邀请的专家组成。</p></blockquote><blockquote><p>由此，我们就可以看出，css需要浏览器厂商去实现。这样就存在时间差、实现差，进而存在了兼容性问题</p></blockquote><h3 id="Css为何要出现？"><a href="#Css为何要出现？" class="headerlink" title="Css为何要出现？"></a>Css为何要出现？</h3><blockquote><p>浏览器渲染Html元素，展示的内容都是黑色、固定大小，不能做到丰富多彩，我们希望的是，可以跟印刷一样，多彩好看。</p></blockquote><h3 id="Css结构"><a href="#Css结构" class="headerlink" title="Css结构"></a>Css结构</h3><blockquote><p>优先级，从高到底</p></blockquote><h4 id="行内样式"><a href="#行内样式" class="headerlink" title="行内样式"></a>行内样式</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;My CSS experiment&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;h1 style=&quot;color: blue;background-color: yellow;border: 1px solid black;&quot;&gt;Hello World!&lt;/h1&gt;</span><br><span class="line">    &lt;p style=&quot;color:red;&quot;&gt;This is my first CSS example&lt;/p&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h4 id="html内css"><a href="#html内css" class="headerlink" title="html内css"></a>html内css</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;My CSS experiment&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">      h1 &#123;</span><br><span class="line">        color: blue;</span><br><span class="line">        background-color: yellow;</span><br><span class="line">        border: 1px solid black;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      p &#123;</span><br><span class="line">        color: red;</span><br><span class="line">      &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;h1&gt;Hello World!&lt;/h1&gt;</span><br><span class="line">    &lt;p&gt;This is my first CSS example&lt;/p&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h4 id="外部文件css"><a href="#外部文件css" class="headerlink" title="外部文件css"></a>外部文件css</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">#html </span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;My CSS experiment&lt;/title&gt;</span><br><span class="line">    &lt;link rel=&quot;stylesheet&quot; href=&quot;styles.css&quot;&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;h1&gt;Hello World!&lt;/h1&gt;</span><br><span class="line">    &lt;p&gt;This is my first CSS example&lt;/p&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br><span class="line">#css</span><br><span class="line">h1 &#123;</span><br><span class="line">  color: blue;</span><br><span class="line">  background-color: yellow;</span><br><span class="line">  border: 1px solid black;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">p &#123;</span><br><span class="line">  color: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Css开发要点"><a href="#Css开发要点" class="headerlink" title="Css开发要点"></a>Css开发要点</h3><h4 id="内置函数的调用"><a href="#内置函数的调用" class="headerlink" title="内置函数的调用"></a>内置函数的调用</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.box &#123;</span><br><span class="line">  margin: 30px;</span><br><span class="line">  width: 100px;</span><br><span class="line">  height: 100px;</span><br><span class="line">  background-color: rebeccapurple;</span><br><span class="line">  transform: rotate(0.8turn)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="媒介查询"><a href="#媒介查询" class="headerlink" title="媒介查询"></a>媒介查询</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@media (min-width: 30em) &#123;</span><br><span class="line">  body &#123;</span><br><span class="line">    background-color: blue;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="添加注释"><a href="#添加注释" class="headerlink" title="添加注释"></a>添加注释</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/* Handle specific elements nested in the DOM  */</span><br><span class="line">/* -------------------------------------------------------------------------------------------- */</span><br><span class="line">div p, #id:first-line &#123;</span><br><span class="line">  background-color: red; </span><br><span class="line">  border-radius: 3px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="缩写"><a href="#缩写" class="headerlink" title="缩写"></a>缩写</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">padding: 10px 15px 15px 5px;</span><br><span class="line">等效于</span><br><span class="line">padding-top: 10px;</span><br><span class="line">padding-right: 15px;</span><br><span class="line">padding-bottom: 15px;</span><br><span class="line">padding-left: 5px;</span><br></pre></td></tr></table></figure><h4 id="CSS-RULE"><a href="#CSS-RULE" class="headerlink" title="CSS @RULE"></a>CSS @RULE</h4><blockquote><p>charset, 标识css文件采用的编码</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 只能用于css文件，style属性、标签均无效</span><br><span class="line">@charset &quot;utf-8&quot;;</span><br></pre></td></tr></table></figure><blockquote><p>引用其他css文件</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@import &#x27;styles2.css&#x27;;</span><br></pre></td></tr></table></figure><blockquote><p>设置命名空间</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@namespace url(http://www.w3.org/1999/xhtml);</span><br><span class="line">@namespace svg url(http://www.w3.org/2000/svg);</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>support 与 <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/@media">media</a><br>media 可能的值： all，print,screen,speech</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@supports (display: flex) &#123;</span><br><span class="line">  @media screen and (min-width: 900px) &#123;</span><br><span class="line">    article &#123;</span><br><span class="line">      display: flex;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><blockquote><p>document，限定到特定的url.</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 仅仅firefox支持</span><br><span class="line">@document url(&quot;https://www.example.com/&quot;) &#123;</span><br><span class="line">  h1 &#123;</span><br><span class="line">    color: green;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>page，打印的时候，修改部分css样式</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@page &#123;</span><br><span class="line">  margin: 1cm;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@page :first &#123;</span><br><span class="line">  margin: 2cm;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2020/08/09/aTuPe0.png"></p><blockquote><p>使用特定字体</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@font-face &#123;</span><br><span class="line">  font-family: &quot;Open Sans&quot;;</span><br><span class="line">  src: url(&quot;/fonts/OpenSans-Regular-webfont.woff2&quot;) format(&quot;woff2&quot;),</span><br><span class="line">       url(&quot;/fonts/OpenSans-Regular-webfont.woff&quot;) format(&quot;woff&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>定义css动画帧</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@keyframes slidein &#123;</span><br><span class="line">  from &#123;</span><br><span class="line">    transform: translateX(0%);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  to &#123;</span><br><span class="line">    transform: translateX(100%);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>viewport</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#已废弃</span><br><span class="line">@viewport &#123;</span><br><span class="line">  width: 100vw; /*Sets the width of the actual viewport to the device width*/</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 改用html中</span><br><span class="line">&lt;meta name=&quot;viewport&quot;&gt; </span><br></pre></td></tr></table></figure><h3 id="Css-Media"><a href="#Css-Media" class="headerlink" title="Css Media"></a>Css Media</h3><h4 id="any-hover"><a href="#any-hover" class="headerlink" title="any-hover"></a><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/@media/any-hover">any-hover</a></h4><blockquote><p>统一修改hover效果<br><img src="https://s1.ax1x.com/2020/08/09/aTNDAJ.png"></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#html</span><br><span class="line">&lt;a href=&quot;#&quot;&gt;Try hovering over me!&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">#css</span><br><span class="line">@media (any-hover: hover) &#123;</span><br><span class="line">  a:hover &#123;</span><br><span class="line">    background: yellow;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 类似hover</span><br><span class="line">@media (hover: hover) &#123;</span><br><span class="line">  a:hover &#123;</span><br><span class="line">    background: yellow;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2020/08/09/aTN9OO.gif"></p><h4 id="any-pointer"><a href="#any-pointer" class="headerlink" title="any-pointer"></a><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/@media/any-pointer">any-pointer</a></h4><blockquote><p>设置鼠标操作效果<br><img src="https://s1.ax1x.com/2020/08/09/aTrCo8.md.png"></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"># html</span><br><span class="line">&lt;input id=&quot;test&quot; type=&quot;checkbox&quot; /&gt;</span><br><span class="line">&lt;label for=&quot;test&quot;&gt;Look at me!&lt;/label&gt;</span><br><span class="line"></span><br><span class="line">#css</span><br><span class="line">input[type=&quot;checkbox&quot;]:checked &#123;</span><br><span class="line">  background: gray;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@media (any-pointer: fine) &#123;</span><br><span class="line">  input[type=&quot;checkbox&quot;] &#123;</span><br><span class="line">    -moz-appearance: none;</span><br><span class="line">    -webkit-appearance: none;</span><br><span class="line">    appearance: none;</span><br><span class="line">    width: 15px;</span><br><span class="line">    height: 15px;</span><br><span class="line">    border: 1px solid blue;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@media (any-pointer: coarse) &#123;</span><br><span class="line">  input[type=&quot;checkbox&quot;] &#123;</span><br><span class="line">    -moz-appearance: none;</span><br><span class="line">    -webkit-appearance: none;</span><br><span class="line">    appearance: none;</span><br><span class="line">    width: 30px;</span><br><span class="line">    height: 30px;</span><br><span class="line">    border: 2px solid red;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2020/08/09/aTwvMq.gif"></p><h4 id="aspect-ratio"><a href="#aspect-ratio" class="headerlink" title="aspect-ratio"></a><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/@media/aspect-ratio">aspect-ratio</a></h4><blockquote><p>根据viewpoint宽高比，设置不同css<br><img src="https://s1.ax1x.com/2020/08/09/aTDd2j.md.png"><br>常见的宽高比如下：<br><img src="https://s1.ax1x.com/2020/08/09/aTsF76.png"></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">#html</span><br><span class="line">&lt;div id=&#x27;inner&#x27;&gt;</span><br><span class="line">  Watch this element as you resize your viewport&#x27;s width and height.</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">#css</span><br><span class="line">@media (min-aspect-ratio: 8/5) &#123;</span><br><span class="line">  div &#123;</span><br><span class="line">    background: #9af; /* blue */</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@media (max-aspect-ratio: 3/2) &#123;</span><br><span class="line">  div &#123;</span><br><span class="line">    background: #9ff;  /* cyan */</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@media (aspect-ratio: 1/1) &#123;</span><br><span class="line">  div &#123;</span><br><span class="line">    background: #f9a; /* red */</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://s1.ax1x.com/2020/08/09/aTD9C4.gif" width="600" height="200"><h4 id="height"><a href="#height" class="headerlink" title="height"></a>height</h4><blockquote><p>根据高度设置不同css</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#html</span><br><span class="line">div&gt;Watch this element as you resize your viewport&#x27;s height.&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">#css</span><br><span class="line">html&#123;</span><br><span class="line">  font-size:16px;</span><br><span class="line">&#125;</span><br><span class="line">@media (min-height: 20rem) &#123;</span><br><span class="line">  div &#123;</span><br><span class="line">      background:  yellow;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">@media (max-height: 30rem) &#123;</span><br><span class="line">  div &#123;</span><br><span class="line">      background:  red;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="orientation"><a href="#orientation" class="headerlink" title="orientation"></a><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/@media/orientation">orientation</a></h4><blockquote><p>横屏、竖屏样式设置<br><img src="https://s1.ax1x.com/2020/08/09/aT4Hoj.md.png"></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#html</span><br><span class="line">&lt;div&gt;Box 1&lt;/div&gt;</span><br><span class="line">&lt;div&gt;Box 2&lt;/div&gt;</span><br><span class="line">&lt;div&gt;Box 3&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">#css</span><br><span class="line">body &#123;</span><br><span class="line">  display: flex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">div &#123;</span><br><span class="line">  background: yellow;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@media (orientation: landscape) &#123;</span><br><span class="line">  body &#123;</span><br><span class="line">    flex-direction: row;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@media (orientation: portrait) &#123;</span><br><span class="line">  body &#123;</span><br><span class="line">    flex-direction: column;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="prefers-color-scheme"><a href="#prefers-color-scheme" class="headerlink" title="prefers-color-scheme"></a>prefers-color-scheme</h4><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-color-scheme">暗黑模式</a>, 利用chrome的模拟功能触发change，加载不同的css样式<br><img src="https://s1.ax1x.com/2020/08/09/aT7FHO.png"></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">#html</span><br><span class="line"> &lt;div class=&quot;night&quot;&gt;Night (initial)&lt;/div&gt;</span><br><span class="line"> &lt;div class=&quot;night night-scheme&quot;&gt;Night (changes in scheme)&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">#css</span><br><span class="line"> .night &#123; background: black; color: #eee; &#125;</span><br><span class="line">  @media (prefers-color-scheme: dark) &#123;</span><br><span class="line">  .night.night-scheme &#123; background: black; color:  #eee; &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @media (prefers-color-scheme: light) &#123;</span><br><span class="line">  .night.night-scheme &#123; background:  #eee; color: black; &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .night &#123;</span><br><span class="line">      display: inline-block;</span><br><span class="line">      padding: 1em;</span><br><span class="line">      width: 7em;</span><br><span class="line">      height: 2em;</span><br><span class="line">      vertical-align: middle;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2020/08/09/aTTqBT.gif"></p><h4 id="width"><a href="#width" class="headerlink" title="width"></a><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/@media/width">width</a></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">#html</span><br><span class="line">&lt;div&gt;Watch this element as you resize your viewport&#x27;s width.&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">#css</span><br><span class="line">@media (width: 360px) &#123;</span><br><span class="line">  div &#123;</span><br><span class="line">    color: red;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@media (min-width: 35rem) &#123;</span><br><span class="line">  div &#123;</span><br><span class="line">    background: yellow;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@media (max-width: 50rem) &#123;</span><br><span class="line">  div &#123;</span><br><span class="line">    border: 2px solid blue;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Css如何生效的"><a href="#Css如何生效的" class="headerlink" title="Css如何生效的"></a>Css如何生效的</h3><p><img src="https://s1.ax1x.com/2020/08/09/aTHizn.md.png"></p><blockquote><p>1.HTML解析为对应的DOM</p></blockquote><blockquote><p>2.浏览器解析Css，并根据选择器，使用优先级、继承等规则，决定选择器应该设置哪些样式</p></blockquote><blockquote><p>3.然后把对应整合后的css样式，设置到Dom对象上</p></blockquote><blockquote><p>4.交给浏览器绘制渲染展示</p></blockquote><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><h3 id="web-develop"><a href="#web-develop" class="headerlink" title="web-develop"></a><a href="https://developer.mozilla.org/en-US/docs/Learn/Front-end_web_developer">web-develop</a></h3>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> html </tag>
            
            <tag> css3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《HTML》- 如何成为一名前端开发之HTML入门</title>
      <link href="/2020/08/09/front_skills/css3/%E3%80%8ACss3%E3%80%8B-%20%E5%A6%82%E4%BD%95%E6%88%90%E4%B8%BA%E4%B8%80%E5%90%8D%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E4%B9%8BHTML%E5%85%A5%E9%97%A8/"/>
      <url>/2020/08/09/front_skills/css3/%E3%80%8ACss3%E3%80%8B-%20%E5%A6%82%E4%BD%95%E6%88%90%E4%B8%BA%E4%B8%80%E5%90%8D%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E4%B9%8BHTML%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<p>前端开发，入门简单，有一台可以运行多款浏览器的电脑，能联网查询资料即可。深入的部分，需要更多的理论知识、肯钻研的精神。<br>前端开发，需要入门了解的屈指可数，主要就是如下几个大方面：</p><h2 id="背景知识"><a href="#背景知识" class="headerlink" title="背景知识"></a>背景知识</h2><h3 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h3><h4 id="文本编辑器"><a href="#文本编辑器" class="headerlink" title="文本编辑器"></a>文本编辑器</h4><ul><li>vscode(推荐使用，功能强大)</li><li>Sublime Text</li><li>NodePad++</li></ul><h4 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h4><blockquote><p> Firefox, <a href="https://www.google.com/chrome/browser/">Chrome</a>, Opera, Safari, Internet Explorer and Microsoft Edge</p></blockquote><h4 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h4><blockquote><p><a href="http://git-scm.com/">Git</a><br><a href="https://github.com/">GitHub</a></p></blockquote><h4 id="构建工具"><a href="#构建工具" class="headerlink" title="构建工具"></a>构建工具</h4><ul><li><a href="https://webpack.js.org/">Webpack</a></li><li><a href="http://gulpjs.com/">Gulp</a></li></ul><h3 id="Web-standards"><a href="#Web-standards" class="headerlink" title="Web standards"></a>Web standards</h3><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/The_web_and_web_standards">Web standards</a>，主要定义浏览器端，功能接口标准的，标准的具体实现，由不同的浏览器厂商完成。</p></blockquote><h3 id="当下使用的web技术"><a href="#当下使用的web技术" class="headerlink" title="当下使用的web技术"></a>当下使用的web技术</h3><h4 id="主流浏览器"><a href="#主流浏览器" class="headerlink" title="主流浏览器"></a>主流浏览器</h4><blockquote><p>Firefox, <a href="https://www.google.com/chrome/browser/">Chrome</a>, Opera, Safari, Internet Explorer and Microsoft Edge</p></blockquote><h4 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h4><blockquote><p>协议，主要用于通信。前后端不是独立的，彼此通过协议，互换信息，web系统才能运行正常</p></blockquote><ul><li>http</li><li>https</li><li>socket</li></ul><h4 id="HTML-CSS-and-JavaScript"><a href="#HTML-CSS-and-JavaScript" class="headerlink" title="HTML, CSS, and JavaScript"></a>HTML, CSS, and JavaScript</h4><h4 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h4><ul><li>各浏览的DevTool,便于调试</li><li>Linters插件</li><li>Minify工具</li><li>CDN等</li><li><a href="https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/Cross_browser_testing">测试工具</a></li><li>js库和前端框架（站点构建的更快、更高效）</li></ul><h4 id="服务端语言"><a href="#服务端语言" class="headerlink" title="服务端语言"></a>服务端语言</h4><blockquote><p>Python, NodeJS, Deno, Go, Rust </p></blockquote><h3 id="面临的挑战"><a href="#面临的挑战" class="headerlink" title="面临的挑战"></a>面临的挑战</h3><h4 id="浏览器兼容"><a href="#浏览器兼容" class="headerlink" title="浏览器兼容"></a>浏览器兼容</h4><blockquote><p>Web standards，各实现厂商不同，支持力度不同，浏览器兼容问题自然存在</p></blockquote><h4 id="响应式设计"><a href="#响应式设计" class="headerlink" title="响应式设计"></a>响应式设计</h4><blockquote><p>厂商的不同，展示场景的不同，意味着不能全篇一律敲定，需要动态变化展示内容</p></blockquote><h4 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h4><blockquote><p>天下站点，只有快，才能留住用户</p></blockquote><h4 id="易用性"><a href="#易用性" class="headerlink" title="易用性"></a>易用性</h4><blockquote><p>站点的访问人群不同，要具备普适性， 都能轻松使用。</p></blockquote><h4 id="国际化"><a href="#国际化" class="headerlink" title="国际化"></a>国际化</h4><blockquote><p>国际语言众多，需要尽可能的多支持</p></blockquote><h4 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h4><blockquote><p>用户隐私数据保护</p></blockquote><h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><h3 id="html基础概念"><a href="#html基础概念" class="headerlink" title="html基础概念"></a><a href="https://developer.mozilla.org/en-US/docs/Learn/HTML/Introduction_to_HTML">html基础概念</a></h3><h4 id="html元素"><a href="#html元素" class="headerlink" title="html元素"></a>html元素</h4><img src="https://mdn.mozillademos.org/files/9347/grumpy-cat-small.png" height="200" width="600"><blockquote><p>当然，也有例外，不是这种格式的</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Empty elements， or (void elements.) </span><br><span class="line">&lt;img src=&quot;https://raw.githubusercontent.com/mdn/beginner-html-site/gh-pages/images/firefox-icon.png&quot;&gt;</span><br></pre></td></tr></table></figure><h4 id="html元素嵌套"><a href="#html元素嵌套" class="headerlink" title="html元素嵌套"></a>html元素嵌套</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;My cat is &lt;strong&gt;very&lt;/strong&gt; grumpy.&lt;/p&gt;</span><br></pre></td></tr></table></figure><h4 id="块元素和行内元素"><a href="#块元素和行内元素" class="headerlink" title="块元素和行内元素"></a><a href="https://html.spec.whatwg.org/multipage/indices.html#element-content-categories">块元素和行内元素</a></h4><blockquote><p>块元素，独占一行；行内元素，按先后顺序，排列<br>这些与css的display不同，不影响元素能包含哪些元素，能被哪些元素包含</p></blockquote><p><img src="https://s1.ax1x.com/2020/08/09/aorWVK.md.png"></p><h4 id="元素属性"><a href="#元素属性" class="headerlink" title="元素属性"></a>元素属性</h4><p><img src="https://mdn.mozillademos.org/files/9345/grumpy-cat-attribute-small.png"></p><blockquote><p>其中，也存在一种特殊的属性：Boolean attributes</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=&quot;text&quot; disabled&gt;</span><br><span class="line"># 等效于</span><br><span class="line">&lt;input type=&quot;text&quot; disabled=&quot;disabled&quot;&gt;</span><br></pre></td></tr></table></figure><blockquote><p>另外，也会存在一些特殊的写法。推荐都是key&#x3D;”value”形式</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=https://www.mozilla.org/&gt;favorite website&lt;/a&gt;</span><br></pre></td></tr></table></figure><h4 id="html文档结构"><a href="#html文档结构" class="headerlink" title="html文档结构"></a>html文档结构</h4><blockquote><p>不管多少连续的空白，浏览器都会解析会一个空格</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt; # 定义解析格式</span><br><span class="line">&lt;html&gt; # 文档的root </span><br><span class="line">  &lt;head&gt; #定义源数据地方 </span><br><span class="line">    &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;My test page&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt; # 文档的可见内容部分</span><br><span class="line">    &lt;p&gt;This is my page&lt;/p&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Learn/HTML/Introduction_to_HTML/The_head_metadata_in_HTML">元数据等请移步参考</a></p></blockquote><h4 id="html特殊字符"><a href="#html特殊字符" class="headerlink" title="html特殊字符"></a>html特殊字符</h4><blockquote><p> &lt;, &gt;,”,’ and &amp;, 这是html自身使用的，如果用户需要展示，那么需要转义 </p></blockquote><blockquote><p>(不好展示，&amp;添加了 空格,其实是没有的)</p></blockquote><table><thead><tr><th>特殊字符</th><th>转义字符</th></tr></thead><tbody><tr><td>&lt;</td><td>&amp; lt;</td></tr><tr><td>&gt;</td><td>&amp; gt;</td></tr><tr><td>“</td><td>&amp; quot;</td></tr><tr><td>‘</td><td>&amp; apos;</td></tr><tr><td>&amp;</td><td>&amp; amp;</td></tr></tbody></table><h4 id="html注释"><a href="#html注释" class="headerlink" title="html注释"></a>html注释</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- </span><br><span class="line"> &lt;p&gt;I am!&lt;/p&gt; </span><br><span class="line">--&gt;</span><br></pre></td></tr></table></figure><h3 id="html-多媒体"><a href="#html-多媒体" class="headerlink" title="html 多媒体"></a>html 多媒体</h3><h4 id="image"><a href="#image" class="headerlink" title="image"></a>image</h4><ul><li>普通的图片</li></ul><blockquote><p>alt描述图片</p></blockquote> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 推荐添加alt,而不是text子元素节点添加</span><br><span class="line">&lt;img src=&quot;images/dinosaur.jpg&quot;</span><br><span class="line">    alt=&quot;The head and torso of a dinosaur skeleton;</span><br><span class="line">         it has a large head with long sharp teeth&quot;&gt;</span><br></pre></td></tr></table></figure><blockquote><p>caption添加标题</p></blockquote>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> &lt;figure&gt;</span><br><span class="line">  &lt;img src=&quot;images/dinosaur.jpg&quot;</span><br><span class="line">       alt=&quot;The head and torso of a dinosaur skeleton;</span><br><span class="line">            it has a large head with long sharp teeth&quot;</span><br><span class="line">       width=&quot;400&quot;</span><br><span class="line">       height=&quot;341&quot;&gt;</span><br><span class="line"> &lt;figcaption&gt;A T-Rex on display in the Manchester University Museum.&lt;/figcaption&gt;</span><br><span class="line">&lt;/figure&gt;</span><br></pre></td></tr></table></figure><ul><li>响应式图片</li></ul><blockquote><p>根据展示设备尺寸的不同，加载不同的图片</p></blockquote> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;img srcset=&quot;elva-fairy-480w.jpg 480w,</span><br><span class="line">             elva-fairy-800w.jpg 800w&quot;</span><br><span class="line">     sizes=&quot;(max-width: 600px) 480px,</span><br><span class="line">            800px&quot;</span><br><span class="line">     src=&quot;elva-fairy-800w.jpg&quot;</span><br><span class="line">     alt=&quot;Elva dressed as a fairy&quot;&gt;</span><br></pre></td></tr></table></figure><blockquote><p>设备尺寸相同，但是分辨率不同</p></blockquote> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;img srcset=&quot;elva-fairy-320w.jpg,</span><br><span class="line">            elva-fairy-480w.jpg 1.5x,</span><br><span class="line">            elva-fairy-640w.jpg 2x&quot;</span><br><span class="line">    src=&quot;elva-fairy-640w.jpg&quot;</span><br><span class="line">    alt=&quot;Elva dressed as a fairy&quot;&gt;</span><br></pre></td></tr></table></figure><blockquote><p>利用picture，不同设选择加载不同的图片</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;picture&gt;</span><br><span class="line">  &lt;source media=&quot;(max-width: 799px)&quot; srcset=&quot;elva-480w-close-portrait.jpg&quot;&gt;</span><br><span class="line">  &lt;source media=&quot;(min-width: 800px)&quot; srcset=&quot;elva-800w.jpg&quot;&gt;</span><br><span class="line">  &lt;img src=&quot;elva-800w.jpg&quot; alt=&quot;Chris standing up holding his daughter Elva&quot;&gt;</span><br><span class="line">&lt;/picture&gt;</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images">picture+svg</a></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;picture&gt;</span><br><span class="line">  &lt;source type=&quot;image/svg+xml&quot; srcset=&quot;pyramid.svg&quot;&gt;</span><br><span class="line">  &lt;source type=&quot;image/webp&quot; srcset=&quot;pyramid.webp&quot;&gt; </span><br><span class="line">  &lt;img src=&quot;pyramid.png&quot; alt=&quot;regular pyramid built from four equilateral triangles&quot;&gt;</span><br><span class="line">&lt;/picture&gt;</span><br></pre></td></tr></table></figure><h4 id="audio"><a href="#audio" class="headerlink" title="audio"></a>audio</h4><blockquote><p>单一url<br>浏览器厂商，针对音频的支持格式不是不同的，譬如： <a href="https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Video_and_audio_content">MP3, MP4 and WebM</a></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;video src=&quot;rabbit320.webm&quot; controls&gt;</span><br><span class="line">  &lt;p&gt;Your browser doesn&#x27;t support HTML5 video. Here is a &lt;a href=&quot;rabbit320.webm&quot;&gt;link to the video&lt;/a&gt; instead.&lt;/p&gt; </span><br><span class="line">&lt;/video&gt;</span><br></pre></td></tr></table></figure><blockquote><p>浏览器适配问题</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;audio controls&gt;</span><br><span class="line">  &lt;source src=&quot;viper.mp3&quot; type=&quot;audio/mp3&quot;&gt;</span><br><span class="line">  &lt;source src=&quot;viper.ogg&quot; type=&quot;audio/ogg&quot;&gt;</span><br><span class="line">  &lt;p&gt;Your browser doesn&#x27;t support HTML5 audio. Here is a &lt;a href=&quot;viper.mp3&quot;&gt;link to the audio&lt;/a&gt; instead.&lt;/p&gt;</span><br><span class="line">&lt;/audio&gt;</span><br></pre></td></tr></table></figure><h4 id="video"><a href="#video" class="headerlink" title="video"></a>video</h4><blockquote><p>单一url<br>浏览器厂商，针对视频的支持格式不是不同的</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;video src=&quot;rabbit320.webm&quot; controls&gt;</span><br><span class="line">  &lt;p&gt;Your browser doesn&#x27;t support HTML5 video. Here is a &lt;a href=&quot;rabbit320.webm&quot;&gt;link to the video&lt;/a&gt; instead.&lt;/p&gt; </span><br><span class="line">&lt;/video&gt;</span><br></pre></td></tr></table></figure><blockquote><p>浏览器适配问题</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;video controls width=&quot;400&quot; height=&quot;400&quot;</span><br><span class="line">       autoplay loop muted preload=&quot;auto&quot; </span><br><span class="line">       poster=&quot;poster.png&quot;&gt;</span><br><span class="line">  &lt;source src=&quot;rabbit320.mp4&quot; type=&quot;video/mp4&quot;&gt;</span><br><span class="line">  &lt;source src=&quot;rabbit320.webm&quot; type=&quot;video/webm&quot;&gt;</span><br><span class="line">  &lt;p&gt;Your browser doesn&#x27;t support HTML video. Here is a &lt;a href=&quot;rabbit320.mp4&quot;&gt;link to the video&lt;/a&gt; instead.&lt;/p&gt;</span><br><span class="line">&lt;/video&gt;</span><br></pre></td></tr></table></figure><h4 id="svg"><a href="#svg" class="headerlink" title="svg"></a>svg</h4><blockquote><p>image引用svg</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;img </span><br><span class="line">    src=&quot;equilateral.svg&quot; </span><br><span class="line">    alt=&quot;triangle with all three sides equal&quot;</span><br><span class="line">    height=&quot;87&quot;</span><br><span class="line">    width=&quot;100&quot; /&gt;</span><br></pre></td></tr></table></figure><blockquote><p>html引用svg</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg width=&quot;300&quot; height=&quot;200&quot;&gt;</span><br><span class="line">    &lt;rect width=&quot;100%&quot; height=&quot;100%&quot; fill=&quot;green&quot; /&gt;</span><br><span class="line">&lt;/svg&gt;</span><br></pre></td></tr></table></figure><blockquote><p>iframe等中引用svg</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe src=&quot;triangle.svg&quot; width=&quot;500&quot; height=&quot;500&quot; sandbox&gt;</span><br><span class="line">    &lt;img src=&quot;triangle.png&quot; alt=&quot;Triangle with three unequal sides&quot; /&gt;</span><br><span class="line">&lt;/iframe&gt;</span><br></pre></td></tr></table></figure><h4 id="canvas"><a href="#canvas" class="headerlink" title="canvas"></a>canvas</h4><blockquote><p>canvas与svg不同，canvas基于像素,svg基于矢量图</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#html</span><br><span class="line">&lt;canvas id=&quot;my-canvas&quot; width=&quot;600&quot; height=&quot;400&quot;&gt;&lt;/canvas&gt;</span><br></pre></td></tr></table></figure><h4 id="嵌入元素"><a href="#嵌入元素" class="headerlink" title="嵌入元素"></a>嵌入元素</h4><blockquote><p>iframe, embed and object</p></blockquote><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Other_embedding_technologies">iframe</a></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe src=&quot;https://developer.mozilla.org/en-US/docs/Glossary&quot;</span><br><span class="line">        width=&quot;100%&quot; height=&quot;500&quot; frameborder=&quot;0&quot;</span><br><span class="line">        allowfullscreen sandbox&gt;</span><br><span class="line">  &lt;p&gt; </span><br><span class="line">    &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary&quot;&gt;</span><br><span class="line">       Fallback link for browsers that don&#x27;t support iframes</span><br><span class="line">    &lt;/a&gt;</span><br><span class="line">  &lt;/p&gt;</span><br><span class="line">&lt;/iframe&gt;</span><br></pre></td></tr></table></figure><h3 id="html-table"><a href="#html-table" class="headerlink" title="html table"></a>html table</h3><h4 id="样式指定"><a href="#样式指定" class="headerlink" title="样式指定"></a>样式指定</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;table&gt;</span><br><span class="line">  &lt;tr&gt;</span><br><span class="line">    &lt;th&gt;Data 1&lt;/th&gt;</span><br><span class="line">    &lt;th style=&quot;background-color: yellow&quot;&gt;Data 2&lt;/th&gt;</span><br><span class="line">  &lt;/tr&gt;</span><br><span class="line">  &lt;tr&gt;</span><br><span class="line">    &lt;td&gt;Calcutta&lt;/td&gt;</span><br><span class="line">    &lt;td style=&quot;background-color: yellow&quot;&gt;Orange&lt;/td&gt;</span><br><span class="line">  &lt;/tr&gt;</span><br><span class="line">  &lt;tr&gt;</span><br><span class="line">    &lt;td&gt;Robots&lt;/td&gt;</span><br><span class="line">    &lt;td style=&quot;background-color: yellow&quot;&gt;Jazz&lt;/td&gt;</span><br><span class="line">  &lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure><h4 id="更好的样式指定"><a href="#更好的样式指定" class="headerlink" title="更好的样式指定"></a>更好的样式指定</h4><blockquote><p>col 一次指定即可</p></blockquote><p><img src="https://s1.ax1x.com/2020/08/09/aoH7b8.md.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;table&gt;</span><br><span class="line">  &lt;colgroup&gt;</span><br><span class="line">    &lt;col&gt; # 定义在colgroup中，与th个数对应</span><br><span class="line">    &lt;col style=&quot;background-color: yellow&quot;&gt;</span><br><span class="line">  &lt;/colgroup&gt;</span><br><span class="line">  &lt;tr&gt;</span><br><span class="line">    &lt;th&gt;Data 1&lt;/th&gt;</span><br><span class="line">    &lt;th&gt;Data 2&lt;/th&gt;</span><br><span class="line">  &lt;/tr&gt;</span><br><span class="line">  &lt;tr&gt;</span><br><span class="line">    &lt;td&gt;Calcutta&lt;/td&gt;</span><br><span class="line">    &lt;td&gt;Orange&lt;/td&gt;</span><br><span class="line">  &lt;/tr&gt;</span><br><span class="line">  &lt;tr&gt;</span><br><span class="line">    &lt;td&gt;Robots&lt;/td&gt;</span><br><span class="line">    &lt;td&gt;Jazz&lt;/td&gt;</span><br><span class="line">  &lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure><blockquote><p>全部设置</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;colgroup&gt;</span><br><span class="line">  &lt;col style=&quot;background-color: yellow&quot; span=&quot;2&quot;&gt;</span><br><span class="line">&lt;/colgroup&gt;</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><h3 id="web-develop"><a href="#web-develop" class="headerlink" title="web-develop"></a><a href="https://developer.mozilla.org/en-US/docs/Learn/Front-end_web_developer">web-develop</a></h3>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> html </tag>
            
            <tag> css3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Css3》- 如何成为一名前端开发者</title>
      <link href="/2020/08/09/front_skills/css3/%E3%80%8ACss3%E3%80%8B-%20%E5%A6%82%E4%BD%95%E6%88%90%E4%B8%BA%E4%B8%80%E5%90%8D%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E8%80%85/"/>
      <url>/2020/08/09/front_skills/css3/%E3%80%8ACss3%E3%80%8B-%20%E5%A6%82%E4%BD%95%E6%88%90%E4%B8%BA%E4%B8%80%E5%90%8D%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E8%80%85/</url>
      
        <content type="html"><![CDATA[<h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><h2 id="Javascript"><a href="#Javascript" class="headerlink" title="Javascript"></a>Javascript</h2><h2 id="Web-Forms"><a href="#Web-Forms" class="headerlink" title="Web Forms"></a>Web Forms</h2><h2 id="Cross-browser-testing"><a href="#Cross-browser-testing" class="headerlink" title="Cross-browser testing"></a>Cross-browser testing</h2><h2 id="Accessibility"><a href="#Accessibility" class="headerlink" title="Accessibility"></a>Accessibility</h2><h2 id="Modern-tooling"><a href="#Modern-tooling" class="headerlink" title="Modern tooling"></a>Modern tooling</h2><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><h3 id="web-develop"><a href="#web-develop" class="headerlink" title="web-develop"></a><a href="https://developer.mozilla.org/en-US/docs/Learn/Front-end_web_developer">web-develop</a></h3>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> html </tag>
            
            <tag> css3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Node》- npm 与yarn 区别</title>
      <link href="/2020/08/05/front_skills/node/%E3%80%8ANode%E3%80%8B-%20npm%20%E4%B8%8Eyarn%20%E5%8C%BA%E5%88%AB/"/>
      <url>/2020/08/05/front_skills/node/%E3%80%8ANode%E3%80%8B-%20npm%20%E4%B8%8Eyarn%20%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<h3 id="1-node-安装"><a href="#1-node-安装" class="headerlink" title="1.node 安装"></a>1.node 安装</h3><blockquote><p>npm是node安装包中默认自带的，推荐使用<a href="https://juejin.im/post/6844904033187004430">nvm</a>等node版本管理工具安装，避免可能的权限问题</p></blockquote><h4 id="npm-版本验证"><a href="#npm-版本验证" class="headerlink" title="npm 版本验证"></a>npm 版本验证</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ node -v</span><br><span class="line">v10.19.0</span><br><span class="line">$ npm -v</span><br><span class="line">6.14.2</span><br></pre></td></tr></table></figure><h4 id="npm-更新"><a href="#npm-更新" class="headerlink" title="npm 更新"></a>npm 更新</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[sudo] npm install npm -g</span><br></pre></td></tr></table></figure><h4 id="npm-latest安装"><a href="#npm-latest安装" class="headerlink" title="npm latest安装"></a><a href="https://docs.npmjs.com/about-npm-versions">npm latest安装</a></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install npm@latest -g</span><br></pre></td></tr></table></figure><h4 id="npm-next安装"><a href="#npm-next安装" class="headerlink" title="npm next安装"></a>npm next安装</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install npm@next -g</span><br></pre></td></tr></table></figure><h4 id="npm-debug-log定位失败原因"><a href="#npm-debug-log定位失败原因" class="headerlink" title="npm-debug.log定位失败原因"></a>npm-debug.log定位失败原因</h4><blockquote><p>npm install or npm publish 失败时候，通常.npm文件夹下会产生日志npm-debug.log</p></blockquote><blockquote><p>cli构建或者npm Enterprise用户，不适用此方法，<a href="https://docs.npmjs.com/generating-and-locating-npm-debug-log-files">可参考</a></p></blockquote><h5 id="确定日志文件所在路径"><a href="#确定日志文件所在路径" class="headerlink" title="确定日志文件所在路径"></a>确定日志文件所在路径</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm config get cache</span><br><span class="line">/Users/hu/.npm</span><br></pre></td></tr></table></figure><h5 id="开启日志"><a href="#开启日志" class="headerlink" title="开启日志"></a>开启日志</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># install </span><br><span class="line">npm install --timing</span><br><span class="line"># publish </span><br><span class="line">npm publish --timing</span><br></pre></td></tr></table></figure><h3 id="2-yarn-安装"><a href="#2-yarn-安装" class="headerlink" title="2.yarn 安装"></a>2.yarn 安装</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><blockquote><p>全局安装</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g yarn</span><br></pre></td></tr></table></figure><blockquote><p>Home Brew</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install yarn</span><br></pre></td></tr></table></figure><blockquote><p>script脚本安装</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -o- -L https://yarnpkg.com/install.sh | bash</span><br><span class="line"># 指定版本</span><br><span class="line">curl -o- -L https://yarnpkg.com/install.sh | bash -s -- --version [version]</span><br></pre></td></tr></table></figure><blockquote><p>tar包安装</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /opt</span><br><span class="line">wget https://yarnpkg.com/latest.tar.gz</span><br><span class="line">tar zvxf latest.tar.gz</span><br></pre></td></tr></table></figure><h4 id="yarn-版本验证"><a href="#yarn-版本验证" class="headerlink" title="yarn 版本验证"></a>yarn 版本验证</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ yarn --version</span><br><span class="line">1.22.0 </span><br><span class="line">#如果不成功，可能需要添加path</span><br><span class="line">export PATH=&quot;$PATH:/opt/yarn-[version]/bin&quot;</span><br></pre></td></tr></table></figure><h4 id="yarn-版本升级"><a href="#yarn-版本升级" class="headerlink" title="yarn 版本升级"></a>yarn 版本升级</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew upgrade yarn</span><br></pre></td></tr></table></figure><h4 id="安装失败-yarn-error-log"><a href="#安装失败-yarn-error-log" class="headerlink" title="安装失败 yarn-error.log"></a>安装失败 yarn-error.log</h4><blockquote><p>查看路径</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm config get cache</span><br><span class="line">/Users/hu/.npm</span><br></pre></td></tr></table></figure><blockquote><p>查看日志yarn-error.log</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/Users/hu/.npm/yarn-error.log</span><br></pre></td></tr></table></figure><h3 id="3-npm-cli-与-yarn-cli-常用命令类比"><a href="#3-npm-cli-与-yarn-cli-常用命令类比" class="headerlink" title="3.npm cli 与 yarn cli 常用命令类比"></a>3.npm cli 与 yarn cli 常用命令类比</h3><table><thead><tr><th>内容</th><th>npm</th><th>yarn</th></tr></thead><tbody><tr><td>初始化工程</td><td><a href="https://docs.npmjs.com/cli-commands/init.html">npm init</a> [-y]</td><td>yarn init</td></tr><tr><td>添加依赖</td><td>npm install [package]</td><td>yarn add [package]</td></tr><tr><td>添加特定版本依赖</td><td>npm install [package]@[version]</td><td>yarn add [package]@[version]</td></tr><tr><td>添加特定tag依赖</td><td>npm install [package]@[tag]</td><td>yarn add [package]@[tag]</td></tr><tr><td>开发依赖</td><td>npm install [pageckage] - -save-dev(-D)</td><td>yarn add [package] - -dev</td></tr><tr><td>运行时依赖</td><td>npm install [package] - -save（-P）</td><td>yarn add [package]</td></tr><tr><td>optionalDependencies</td><td>npm install [package] - -save-optional</td><td>yarn add [package] –optional</td></tr><tr><td>更新依赖</td><td>npm upgrade [pageckage]</td><td>yarn upgrade [package]</td></tr><tr><td>更新特定版本依赖</td><td>npm upgrade [pageckage]@[version]</td><td>yarn upgrade [package]@[version]</td></tr><tr><td>更新特定tag依赖</td><td>npm upgrade [pageckage]@[tag]</td><td>yarn upgrade [package]@[tag]</td></tr><tr><td>删除依赖</td><td>npm remove [pageckage]</td><td>yarn remove [package]</td></tr><tr><td>整体安装</td><td>npm install</td><td>yarn</td></tr></tbody></table><h3 id="4-npm-cli-与-yarn-cli命令列表区别"><a href="#4-npm-cli-与-yarn-cli命令列表区别" class="headerlink" title="4. npm cli 与 yarn cli命令列表区别"></a>4. <a href="https://docs.npmjs.com/cli-documentation/">npm cli</a> 与 <a href="https://classic.yarnpkg.com/en/docs/cli/">yarn cli</a>命令列表区别</h3><table><thead><tr><th>npm</th><th>yarn</th><th>描述</th></tr></thead><tbody><tr><td>npm install [package]</td><td>yarn add [package]</td><td>添加单个依赖</td></tr><tr><td>npm audit</td><td>yarn audit</td><td>安全性校验</td></tr><tr><td>&#x2F;</td><td>yarn autoclean</td><td>自我移除不需要的依赖</td></tr><tr><td>npm bin</td><td>yarn bin</td><td></td></tr><tr><td>npm build</td><td>&#x2F;</td><td>包构建</td></tr><tr><td>npm cache</td><td>yarn cache</td><td>本地缓存相关管理</td></tr><tr><td>npm doctor 与 npm outdated</td><td>yarn check</td><td>两者不同，npm是判断环境和是否过期，yarn 是check依赖是否正确</td></tr><tr><td>npm config</td><td>yarn config</td><td>配置信息</td></tr><tr><td>&#x2F;</td><td>yarn create</td><td>yarn create 利用create-*模板创建项目</td></tr><tr><td>npm install -g</td><td>yarn global</td><td>全局安装</td></tr><tr><td>npm help</td><td>yarn help</td><td>帮助信息</td></tr><tr><td>&#x2F;</td><td>yarn import</td><td>从package-lock.json 得到yarn.lock</td></tr><tr><td>&#x2F;</td><td>yarn info [package]</td><td>展示package 信息</td></tr><tr><td>npm init</td><td>yarn init</td><td>创建package.json</td></tr><tr><td>npm install</td><td>yarn install</td><td>根据package.json配置，添加整体依赖</td></tr><tr><td>npm ci</td><td>&#x2F;</td><td>根据package-lock.json配置，添加依赖，没有package-lock.json，报错退出</td></tr><tr><td>&#x2F;</td><td>yarn licenses</td><td>列出所有安装包的licenses</td></tr><tr><td>npm link</td><td>yarn link</td><td>创建符号链接</td></tr><tr><td>npm ls</td><td>yarn list</td><td>列表已经安装的依赖</td></tr><tr><td>&#x2F;</td><td>yarn login</td><td>保存npm 注册填写username,email</td></tr><tr><td>npm logout</td><td>yarn logout</td><td>清空保存的username,email</td></tr><tr><td>npm outdated</td><td>yarn outdated</td><td>check 版本是否过期</td></tr><tr><td>npm owner</td><td>yarn owner</td><td>包管理者相关概念</td></tr><tr><td>npm pack</td><td>yarn pack</td><td>创建压缩包</td></tr><tr><td>npm publish</td><td>yarn publish</td><td>发布包</td></tr><tr><td>npm uninstall</td><td>yarn remove</td><td>删除包依赖</td></tr><tr><td>npm run</td><td>yarn run</td><td>运行scripts脚本命令</td></tr><tr><td>&#x2F;</td><td>yarn self-update</td><td>yarn更新到最新</td></tr><tr><td>npm dist-tag</td><td>yarn tag</td><td>依赖tag管理</td></tr><tr><td>npm team</td><td>yarn team</td><td>team信息维护</td></tr><tr><td>npm test</td><td>yarn test</td><td>包测试</td></tr><tr><td>&#x2F;</td><td>yarn unlink</td><td>删除符号链接</td></tr><tr><td>npm upgrade</td><td>yarn upgrade</td><td>更新依赖</td></tr><tr><td>npm version</td><td>yarn version</td><td>版本验证</td></tr><tr><td>&#x2F;</td><td>yarn versions</td><td>展示安装的node,yarn，依赖版本信息</td></tr></tbody></table><h3 id="5-npm-安装常见18错误"><a href="#5-npm-安装常见18错误" class="headerlink" title="5.npm 安装常见18错误"></a>5.npm 安装常见18错误</h3><h4 id="1-Broken-npm-installation"><a href="#1-Broken-npm-installation" class="headerlink" title="1.Broken npm installation"></a>1.Broken npm installation</h4><blockquote><p>解决方法如下：</p></blockquote><ul><li>Mac or Linux，重新安装</li><li>Windows，从<a href="https://nodejs.org/en/">官网下载</a>node安装包，重新安装</li></ul><h4 id="2-Random-errors"><a href="#2-Random-errors" class="headerlink" title="2.Random errors"></a>2.Random errors</h4><blockquote><p>解决方法如下：</p></blockquote><ul><li>运行如下命令 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 清楚缓存</span><br><span class="line">npm cache clean</span><br></pre></td></tr></table></figure></li><li>查看具体的错误,分析原因 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install xxx -verbose </span><br></pre></td></tr></table></figure></li></ul><h4 id="3-No-compatible-version-found"><a href="#3-No-compatible-version-found" class="headerlink" title="3.No compatible version found"></a>3.No compatible version found</h4><blockquote><p>npm版本过低，需要升级</p></blockquote><blockquote><p>解决方法如下：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g npm@latest</span><br></pre></td></tr></table></figure><h4 id="4-Permissions-errors"><a href="#4-Permissions-errors" class="headerlink" title="4.Permissions errors"></a>4.Permissions errors</h4><blockquote><p>权限问题，安装路径拥有的权限有关，推荐使用nvm等包管理工具安装</p></blockquote><h4 id="5-Error-ENOENT-…"><a href="#5-Error-ENOENT-…" class="headerlink" title="5.Error: ENOENT,…"></a>5.Error: ENOENT,…</h4><blockquote><p>Error: ENOENT, stat ‘C:\Users&lt;user&gt;\AppData\Roaming\npm’ on Windows 7</p></blockquote><blockquote><p>需要确保路径存在且可写入</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\&lt;user&gt;\AppData\Roaming\npm</span><br></pre></td></tr></table></figure><h4 id="6-No-space"><a href="#6-No-space" class="headerlink" title="6.No space"></a>6.No space</h4><blockquote><p>npm ERR! Error: ENOSPC, write。原因在于没有空间，或者权限不足，</p></blockquote><blockquote><p>解决方法如下：</p></blockquote><ul><li>释放磁盘空间</li><li>修改路径 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set tmp /path/to/big/drive/tmp</span><br></pre></td></tr></table></figure></li><li>最终跟换有空间的服务器安装</li></ul><h4 id="7-No-git"><a href="#7-No-git" class="headerlink" title="7.No git"></a>7.No git</h4><blockquote><p>npm ERR! not found: git ENOGIT 。</p></blockquote><blockquote><p>解决方法如下：</p></blockquote><ul><li><a href="http://git-scm.com/book/en/Getting-Started-Installing-Git">安装git</a></li><li><a href="https://docs.npmjs.com/managing-your-profile-settings">配置git信息</a></li></ul><h4 id="8-Running-a-Vagrant-box…"><a href="#8-Running-a-Vagrant-box…" class="headerlink" title="8.Running a Vagrant box…"></a>8.Running a Vagrant box…</h4><h4 id="9-npm-only-uses-git…"><a href="#9-npm-only-uses-git…" class="headerlink" title="9.npm only uses git…"></a>9.npm only uses git…</h4><blockquote><p>解决方法如下：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global url.&quot;https://github.com/&quot;.insteadOf git@github.com:</span><br><span class="line">git config --global url.&quot;https://&quot;.insteadOf git://</span><br></pre></td></tr></table></figure><h4 id="10-SSL-error"><a href="#10-SSL-error" class="headerlink" title="10.SSL error"></a>10.SSL error</h4><blockquote><p>解决方法如下： </p></blockquote><ul><li><ol><li>禁用 strict-ssl <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># or </span><br><span class="line">npm config set strict-ssl false</span><br></pre></td></tr></table></figure></li></ol></li><li><ol start="2"><li>查看node版本，过低，先升级node</li></ol></li><li><ol start="3"><li>更新npm <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install npm -g --ca=&quot;&quot;</span><br><span class="line">npm config set ca &quot;&quot; </span><br></pre></td></tr></table></figure></li></ol></li><li><ol start="4"><li><a href="https://github.com/npm/npm/issues/7439#issuecomment-76024878">参考proxy 相关fix</a></li></ol></li></ul><h4 id="12-Not-found-Server-error"><a href="#12-Not-found-Server-error" class="headerlink" title="12.Not found &#x2F; Server error"></a>12.Not found &#x2F; Server error</h4><blockquote><p>解决方法如下：</p></blockquote><ul><li>确保安装包存在</li><li>检查网络</li></ul><h4 id="13-Invalid-JSON"><a href="#13-Invalid-JSON" class="headerlink" title="13.Invalid JSON"></a>13.Invalid JSON</h4><blockquote><p>解放方法如下：</p></blockquote><ul><li>清除缓存 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm cache clean</span><br></pre></td></tr></table></figure></li><li>检查<a href="https://docs.npmjs.com/misc/config">proxy配置</a></li></ul><h4 id="14-Many-ENOENT-ENOTEMPTY-errors-in-output"><a href="#14-Many-ENOENT-ENOTEMPTY-errors-in-output" class="headerlink" title="14.Many ENOENT &#x2F; ENOTEMPTY errors in output"></a>14.Many ENOENT &#x2F; ENOTEMPTY errors in output</h4><blockquote><p>解决方法如下：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 升级</span><br><span class="line">npm install -g npm@latest</span><br></pre></td></tr></table></figure><h4 id="15-cb-never-called"><a href="#15-cb-never-called" class="headerlink" title="15.cb() never called!"></a>15.cb() never called!</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 升级</span><br><span class="line">npm install -g npm@latest</span><br></pre></td></tr></table></figure><h4 id="16-npm-login-errors"><a href="#16-npm-login-errors" class="headerlink" title="16.npm login errors"></a>16.npm login errors</h4><blockquote><p>解决步骤如下：</p></blockquote><ul><li>登录<a href="https://npmjs.com/">npmjs.com</a></li><li>修改密码</li><li>清除相关文件<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -ie &#x27;/registry.npmjs.org/d&#x27; ~/.npmrc</span><br></pre></td></tr></table></figure></li><li>重新登录</li></ul><h4 id="17-npm-hangs-on-Windows…"><a href="#17-npm-hangs-on-Windows…" class="headerlink" title="17.npm hangs on Windows…"></a>17.npm hangs on Windows…</h4><blockquote><p>解决步骤如下：</p></blockquote><ul><li>查看tmp文件夹<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config ls -l</span><br></pre></td></tr></table></figure></li><li>删除多余的一个</li></ul><h4 id="18-npm-not-running-the-latest-version…"><a href="#18-npm-not-running-the-latest-version…" class="headerlink" title="18.npm not running the latest version…"></a>18.npm not running the latest version…</h4><blockquote><p>解决方法，<a href="https://docs.npmjs.com/try-the-latest-stable-version-of-npm">请移步</a></p></blockquote><h3 id="npm-ci"><a href="#npm-ci" class="headerlink" title="npm ci"></a>npm ci</h3><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><h4 id="Npm-Doc"><a href="#Npm-Doc" class="headerlink" title="Npm Doc"></a><a href="https://docs.npmjs.com/getting-started/">Npm Doc</a></h4><h4 id="Yarn-Doc"><a href="#Yarn-Doc" class="headerlink" title="Yarn Doc"></a><a href="https://yarnpkg.com/getting-started">Yarn Doc</a></h4><h4 id="npm-cli"><a href="#npm-cli" class="headerlink" title="npm cli"></a><a href="https://docs.npmjs.com/cli-documentation/">npm cli</a></h4>]]></content>
      
      
      
        <tags>
            
            <tag> npm </tag>
            
            <tag> node </tag>
            
            <tag> yarn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《angular8》-Angular8多场景下单元测试实践指南</title>
      <link href="/2020/08/04/front_skills/angular/%E3%80%8Aangular8%E3%80%8B-Angular8%E5%A4%9A%E5%9C%BA%E6%99%AF%E4%B8%8B%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E5%AE%9E%E8%B7%B5%E6%8C%87%E5%8D%97/"/>
      <url>/2020/08/04/front_skills/angular/%E3%80%8Aangular8%E3%80%8B-Angular8%E5%A4%9A%E5%9C%BA%E6%99%AF%E4%B8%8B%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E5%AE%9E%E8%B7%B5%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<h2 id="开篇三问："><a href="#开篇三问：" class="headerlink" title="开篇三问："></a>开篇三问：</h2><blockquote><p>为何要进行单元测试？</p></blockquote><blockquote><p>单元测试有什么好处？</p></blockquote><blockquote><p>如何编写angular单元测试？</p></blockquote><h4 id="没有单元测试会如何？"><a href="#没有单元测试会如何？" class="headerlink" title="没有单元测试会如何？"></a>没有单元测试会如何？</h4><blockquote><p>或者换句话说，为何要开发编写单元测试？<br>在业务开发紧张的情况下，往往会忽略单元测试，直接采用，然后开启下方的难忘人生回忆~<br><img src="https://s1.ax1x.com/2020/08/04/aDK5Ox.md.png"></p></blockquote><h4 id="单元测试有啥好处？"><a href="#单元测试有啥好处？" class="headerlink" title="单元测试有啥好处？"></a>单元测试有啥好处？</h4><blockquote><p>我们在开发完毕，加入单元测试环节，下划线部分可能就不存在了~<br><img src="https://s1.ax1x.com/2020/08/04/aDQyiF.md.png"></p></blockquote><h3 id="如何进行angular单元测试？"><a href="#如何进行angular单元测试？" class="headerlink" title="如何进行angular单元测试？"></a>如何进行angular单元测试？</h3><h4 id="angular前提背景知识"><a href="#angular前提背景知识" class="headerlink" title="angular前提背景知识"></a>angular前提背景知识</h4><ul><li>构建angular框架，<a href="https://juejin.im/post/6844903981966163982">angular-cli</a>命令可以，在创建service、pipe、component时候，同时创建对应的测试用例**.spec.ts文件</li><li>运行单元测试 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng test --no-watch --code-coverage //根目录下会生成coverage目录，其中index.html记录组件覆盖率</span><br></pre></td></tr></table></figure></li><li>查看<br> <img src="https://s1.ax1x.com/2020/08/04/aD8nFf.png"><br> <img src="https://s1.ax1x.com/2020/08/04/aD82tK.md.png"></li></ul><h2 id="编写angular8-单元测试"><a href="#编写angular8-单元测试" class="headerlink" title="编写angular8 单元测试"></a>编写angular8 单元测试</h2><h3 id="测试service-无依赖"><a href="#测试service-无依赖" class="headerlink" title="测试service-无依赖"></a>测试service-无依赖</h3><blockquote><p>框架new实例测试</p></blockquote><p>代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Injectable() //交给angular管理，帮忙注入依赖</span><br><span class="line">export class ValueService &#123;</span><br><span class="line">  value:string;</span><br><span class="line">  constructor() &#123; &#125;</span><br><span class="line">  getValue() &#123; return this.value&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>测试用例如下：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># 1.直接new service 实例</span><br><span class="line">let service: ValueService;</span><br><span class="line">  beforeEach(() =&gt; &#123; service = new ValueService(); &#125;);</span><br><span class="line"></span><br><span class="line">  it(&#x27;#getValue should return real value&#x27;, () =&gt; &#123;</span><br><span class="line">    expect(service.getValue()).toBe(&#x27;real value&#x27;);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"># or </span><br><span class="line"></span><br><span class="line"># 2.直接获取服务实例进行测试，通过调用服务，校验逻辑</span><br><span class="line">let service: ValueService;</span><br><span class="line">beforeEach(() =&gt; &#123;</span><br><span class="line">  TestBed.configureTestingModule(&#123; providers: [ValueService] &#125;); //等效于useClass</span><br><span class="line">&#125;);</span><br><span class="line">it(&#x27;should use ValueService&#x27;, () =&gt; &#123;</span><br><span class="line">  service = TestBed.get(ValueService);</span><br><span class="line">  expect(service.getValue()).toBe(&#x27;real value&#x27;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="测试service-有依赖"><a href="#测试service-有依赖" class="headerlink" title="测试service - 有依赖"></a>测试service - 有依赖</h3><h4 id="利用spyOn-mock"><a href="#利用spyOn-mock" class="headerlink" title="利用spyOn mock"></a>利用spyOn mock</h4><blockquote><p>代码如下：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Injectable()</span><br><span class="line">export class MasterService &#123;</span><br><span class="line">  constructor(private valueService: ValueService) &#123; &#125;</span><br><span class="line">  getValue() &#123; return this.valueService.getValue(); &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>获取真实的依赖服务，常因为服务中依赖原因，难以顺利创建。此时spy,跳过真正的服务业务逻辑，进行单独测试，是最简单的方法。** 不跳过依赖，则属于集成测试范畴。**</p></blockquote><blockquote><p>测试如下：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">let masterService: MasterService;</span><br><span class="line">let valueServiceSpy: jasmine.SpyObj&lt;ValueService&gt;;</span><br><span class="line"></span><br><span class="line">beforeEach(() =&gt; &#123;</span><br><span class="line">  const spy = jasmine.createSpyObj(&#x27;ValueService&#x27;, [&#x27;getValue&#x27;]);//需要注意位置，在beforeEach</span><br><span class="line"></span><br><span class="line">  TestBed.configureTestingModule(&#123;</span><br><span class="line">    // Provide both the service-to-test and its (spy) dependency</span><br><span class="line">    providers: [</span><br><span class="line">      MasterService,</span><br><span class="line">//注入服务，mock提供依赖服务的支持，完成MasterService实例创建</span><br><span class="line">      &#123; provide: ValueService, useValue: spy &#125; </span><br><span class="line">    ]</span><br><span class="line">  &#125;);</span><br><span class="line">  // Inject both the service-to-test and its (spy) dependency</span><br><span class="line">  masterService = TestBed.get(MasterService);</span><br><span class="line">  valueServiceSpy = TestBed.get(ValueService);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">it(&#x27;#getValue should return stubbed value from a spy&#x27;, () =&gt; &#123;</span><br><span class="line">  const stubValue = &#x27;stub value&#x27;;</span><br><span class="line">  # mock 返回值 </span><br><span class="line">  valueServiceSpy.getValue.and.returnValue(stubValue);</span><br><span class="line">  expect(masterService.getValue())</span><br><span class="line">    .toBe(stubValue, &#x27;service returned stub value&#x27;); //利用mock依赖返回的值，进行期望判断业务逻辑</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="测试组件-无依赖"><a href="#测试组件-无依赖" class="headerlink" title="测试组件-无依赖"></a>测试组件-无依赖</h3><blockquote><p>代码如下：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@Component(&#123;</span><br><span class="line">  selector: &#x27;lightswitch-comp&#x27;,</span><br><span class="line">  template: `</span><br><span class="line">    &lt;button (click)=&quot;clicked()&quot;&gt;Click me!&lt;/button&gt;</span><br><span class="line">    &lt;span&gt;&#123;&#123;message&#125;&#125;&lt;/span&gt;`</span><br><span class="line">&#125;)</span><br><span class="line">export class LightswitchComponent &#123;</span><br><span class="line">  isOn = false;</span><br><span class="line">  clicked() &#123; this.isOn = !this.isOn; &#125;</span><br><span class="line">  get message() &#123; return `The light is $&#123;this.isOn ? &#x27;On&#x27; : &#x27;Off&#x27;&#125;`; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>测试代码如下：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">//直接new </span><br><span class="line">it(&#x27;#clicked() should set #message to &quot;is on&quot;&#x27;, () =&gt; &#123;</span><br><span class="line">    const comp = new LightswitchComponent();</span><br><span class="line">    expect(comp.message).toMatch(/is off/i, &#x27;off at first&#x27;);</span><br><span class="line">    comp.clicked();</span><br><span class="line">    expect(comp.message).toMatch(/is on/i, &#x27;on after clicked&#x27;);</span><br><span class="line"> &#125;);</span><br><span class="line"> </span><br><span class="line"> //or 获取组件实例,交给框架创建new</span><br><span class="line"> let comp:LightswitchComponent;</span><br><span class="line"> beforeEach(() =&gt; &#123;</span><br><span class="line">  TestBed.configureTestingModule(&#123;</span><br><span class="line">    // provide the component-under-test and dependent service</span><br><span class="line">    providers: [</span><br><span class="line">      LightswitchComponent,</span><br><span class="line">    ]</span><br><span class="line">  &#125;);</span><br><span class="line">  // inject both the component and the dependent service.</span><br><span class="line">  comp = TestBed.get(LightswitchComponent);</span><br><span class="line">&#125;);</span><br><span class="line"> it(&#x27;#clicked() should set #message to &quot;is on&quot;&#x27;, () =&gt; &#123;</span><br><span class="line">    expect(comp.message).toMatch(/is off/i, &#x27;off at first&#x27;);</span><br><span class="line">    comp.clicked();</span><br><span class="line">    expect(comp.message).toMatch(/is on/i, &#x27;on after clicked&#x27;);</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure><h3 id="测试组件-有input、output"><a href="#测试组件-有input、output" class="headerlink" title="测试组件-有input、output"></a>测试组件-有input、output</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">export class DashboardHeroComponent &#123;</span><br><span class="line">  @Input() hero: Hero;</span><br><span class="line">  @Output() selected = new EventEmitter&lt;Hero&gt;();</span><br><span class="line">  click() &#123; this.selected.emit(this.hero); &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>测试代码如下：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">let comp:DashboardHeroComponent;</span><br><span class="line"> beforeEach(() =&gt; &#123;</span><br><span class="line">  TestBed.configureTestingModule(&#123;</span><br><span class="line">    // provide the component-under-test and dependent service</span><br><span class="line">    providers: [</span><br><span class="line">      DashboardHeroComponent,</span><br><span class="line">    ]</span><br><span class="line">  &#125;);</span><br><span class="line">  // inject both the component and the dependent service.</span><br><span class="line">  comp = TestBed.get(DashboardHeroComponent);</span><br><span class="line">&#125;);</span><br><span class="line">it(&#x27;raises the selected event when clicked&#x27;, () =&gt; &#123;</span><br><span class="line">  const hero: Hero = &#123; id: 42, name: &#x27;Test&#x27; &#125;;</span><br><span class="line">  comp.hero = hero;</span><br><span class="line"></span><br><span class="line">  comp.selected.subscribe((selectedHero: Hero) =&gt; expect(selectedHero).toBe(hero));</span><br><span class="line">  comp.click();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="测试组件-有依赖"><a href="#测试组件-有依赖" class="headerlink" title="测试组件 - 有依赖"></a>测试组件 - 有依赖</h3><blockquote><p>WelcomeComponent 依赖于 UserService</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">export class WelcomeComponent  implements OnInit &#123;</span><br><span class="line">welcome: string;</span><br><span class="line">constructor(private userService: UserService) &#123; &#125;</span><br><span class="line"></span><br><span class="line">ngOnInit(): void &#123;</span><br><span class="line">this.welcome = this.userService.isLoggedIn ?</span><br><span class="line">&#x27;Welcome, &#x27; + this.userService.user.name : &#x27;Please log in.&#x27;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>测试代码</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># spect.ts</span><br><span class="line">class MockUserService &#123;</span><br><span class="line">isLoggedIn = true;</span><br><span class="line">user = &#123; name: &#x27;Test User&#x27;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">beforeEach(() =&gt; &#123;</span><br><span class="line">TestBed.configureTestingModule(&#123;</span><br><span class="line">// provide the component-under-test and dependent service</span><br><span class="line">providers: [</span><br><span class="line">WelcomeComponent,</span><br><span class="line">&#123; provide: UserService, useClass: MockUserService &#125; </span><br><span class="line">// &#123;provide: UserService, useVale: userServiceSpy&#125; # 两者都可以，不同方式而已</span><br><span class="line">]</span><br><span class="line">&#125;);</span><br><span class="line">// inject both the component and the dependent service.</span><br><span class="line">comp = TestBed.get(WelcomeComponent);</span><br><span class="line">    //容易记住，也不太冗长。但是，只有当Angular在测试的根注入器中将带有服务实例的组件注入组件时，它才起作用。</span><br><span class="line">userService = TestBed.get(UserService); </span><br><span class="line">    //userService = fixture.debugElement.injector.get(UserService);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">it(&#x27;should not have welcome message after construction&#x27;, () =&gt; &#123;</span><br><span class="line">expect(comp.welcome).toBeUndefined();</span><br><span class="line">&#125;);</span><br><span class="line">it(&#x27;should welcome logged in user after Angular calls ngOnInit&#x27;, () =&gt; &#123;</span><br><span class="line">comp.ngOnInit();</span><br><span class="line">expect(comp.welcome).toContain(userService.user.name);</span><br><span class="line">&#125;);</span><br><span class="line">it(&#x27;should ask user to log in if not logged in after ngOnInit&#x27;, () =&gt; &#123;</span><br><span class="line">userService.isLoggedIn = false;</span><br><span class="line">comp.ngOnInit();</span><br><span class="line">expect(comp.welcome).not.toContain(userService.user.name);</span><br><span class="line">expect(comp.welcome).toContain(&#x27;log in&#x27;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="组件中dom元素测试"><a href="#组件中dom元素测试" class="headerlink" title="组件中dom元素测试"></a>组件中dom元素测试</h3><h4 id="组件创建测试"><a href="#组件创建测试" class="headerlink" title="组件创建测试"></a>组件创建测试</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import &#123; async, ComponentFixture, TestBed &#125; from &#x27;@angular/core/testing&#x27;;</span><br><span class="line">import &#123; BannerComponent &#125; from &#x27;./banner.component&#x27;;</span><br><span class="line">describe(&#x27;BannerComponent&#x27;, () =&gt; &#123;</span><br><span class="line">  let component: BannerComponent;</span><br><span class="line">  let fixture: ComponentFixture&lt;BannerComponent&gt;;</span><br><span class="line">  beforeEach(async(() =&gt; &#123;</span><br><span class="line">    TestBed.configureTestingModule(&#123;</span><br><span class="line">      declarations: [ BannerComponent ]</span><br><span class="line">    &#125;)</span><br><span class="line">    .compileComponents();</span><br><span class="line">  &#125;));</span><br><span class="line">  beforeEach(() =&gt; &#123;</span><br><span class="line">    fixture = TestBed.createComponent(BannerComponent);</span><br><span class="line">    component = fixture.componentInstance;</span><br><span class="line">    fixture.detectChanges();</span><br><span class="line">  &#125;);</span><br><span class="line">  # 只有在组件创建初期有意义，后面添加业务单元测试，推荐删除的</span><br><span class="line">  it(&#x27;should create&#x27;, () =&gt; &#123;</span><br><span class="line">    expect(component).toBeDefined();</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="页面元素固定"><a href="#页面元素固定" class="headerlink" title="页面元素固定"></a>页面元素固定</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> it(&#x27;should contain &quot;banner works!&quot;&#x27;, () =&gt; &#123;</span><br><span class="line">const bannerElement: HTMLElement = fixture.nativeElement;</span><br><span class="line">expect(bannerElement.textContent).toContain(&#x27;banner works!&#x27;);</span><br><span class="line">  &#125;);</span><br><span class="line">  </span><br><span class="line"> it(&#x27;should have &lt;p&gt; with &quot;banner works!&quot;&#x27;, () =&gt; &#123;</span><br><span class="line">const bannerElement: HTMLElement = fixture.nativeElement;</span><br><span class="line">const p = bannerElement.querySelector(&#x27;p&#x27;);</span><br><span class="line">expect(p.textContent).toEqual(&#x27;banner works!&#x27;);</span><br><span class="line"> &#125;);</span><br><span class="line"> </span><br><span class="line"> it(&#x27;should find the &lt;p&gt; with fixture.debugElement.nativeElement)&#x27;, () =&gt; &#123;</span><br><span class="line">  const bannerDe: DebugElement = fixture.debugElement;</span><br><span class="line">  const bannerEl: HTMLElement = bannerDe.nativeElement;</span><br><span class="line">  const p = bannerEl.querySelector(&#x27;p&#x27;);</span><br><span class="line">  expect(p.textContent).toEqual(&#x27;banner works!&#x27;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>如果querySelector不能使用，</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import &#123; By &#125; from &#x27;@angular/platform-browser&#x27;;</span><br><span class="line">it(&#x27;should find the &lt;p&gt; with fixture.debugElement.query(By.css)&#x27;, () =&gt; &#123;</span><br><span class="line">const bannerDe: DebugElement = fixture.debugElement;</span><br><span class="line">const paragraphDe = bannerDe.query(By.css(&#x27;p&#x27;));</span><br><span class="line">const p: HTMLElement = paragraphDe.nativeElement;</span><br><span class="line">expect(p.textContent).toEqual(&#x27;banner works!&#x27;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="页面元素动态修改"><a href="#页面元素动态修改" class="headerlink" title="页面元素动态修改"></a>页面元素动态修改</h4><blockquote><p>页面元素动态修改，测试</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">it(&#x27;should display a different test title&#x27;, () =&gt; &#123;</span><br><span class="line">  component.title = &#x27;Test Title&#x27;;</span><br><span class="line">  fixture.detectChanges(); //显示的进行修改检测</span><br><span class="line">  expect(h1.textContent).toContain(&#x27;Test Title&#x27;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>除去上述显示声明detectChanges，使用自动检测也可以实现</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import &#123; ComponentFixtureAutoDetect &#125; from &#x27;@angular/core/testing&#x27;;</span><br><span class="line">TestBed.configureTestingModule(&#123;</span><br><span class="line">  declarations: [ BannerComponent ],</span><br><span class="line">  providers: [</span><br><span class="line">    &#123; provide: ComponentFixtureAutoDetect, useValue: true &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="Render2-样式测试"><a href="#Render2-样式测试" class="headerlink" title="Render2 样式测试"></a>Render2 样式测试</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">import &#123;Type ,Render2 &#125; from &#x27;angular/core&#x27;;</span><br><span class="line"></span><br><span class="line">let renderer2: Renderer2;</span><br><span class="line">...</span><br><span class="line">beforeEach(async( () =&gt; &#123;</span><br><span class="line">    TestBed.configureTestingModule(&#123;</span><br><span class="line">        ...</span><br><span class="line">        providers: [Renderer2]</span><br><span class="line">    &#125;).compileComponents();</span><br><span class="line">&#125;));</span><br><span class="line"></span><br><span class="line">beforeEach(() =&gt; &#123;</span><br><span class="line">    fixture = TestBed.createComponent(BannerComponent);</span><br><span class="line">    renderer2 = fixture.componentRef.injector.get&lt;Renderer2&gt;(Renderer2 as Type&lt;Renderer2&gt;);</span><br><span class="line">    // and spy on it</span><br><span class="line">    spyOn(renderer2, &#x27;addClass&#x27;).and.callThrough();</span><br><span class="line">    // or replace</span><br><span class="line">    // spyOn(renderer2, &#x27;addClass&#x27;).and.callFake(..);</span><br><span class="line">    // etc</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">it(&#x27;should call renderer&#x27;, () =&gt; &#123;</span><br><span class="line">    expect(renderer2.addClass).toHaveBeenCalledWith(jasmine.any(Object), &#x27;css-class&#x27;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="Observable测试"><a href="#Observable测试" class="headerlink" title="Observable测试"></a>Observable测试</h3><blockquote><p>代码如下 </p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">getQuote() &#123;</span><br><span class="line">  this.errorMessage = &#x27;&#x27;;</span><br><span class="line">  this.quote = this.twainService.getQuote().pipe(</span><br><span class="line">    startWith(&#x27;...&#x27;),</span><br><span class="line">    catchError( (err: any) =&gt; &#123;</span><br><span class="line">      // Wait a turn because errorMessage already set once this turn</span><br><span class="line">      () =&gt; this.errorMessage = err.message || err.toString()</span><br><span class="line">      return of(&#x27;...&#x27;); // reset message to placeholder</span><br><span class="line">    &#125;)</span><br><span class="line">  );</span><br></pre></td></tr></table></figure><h4 id="正常返回"><a href="#正常返回" class="headerlink" title="正常返回"></a>正常返回</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">beforeEach(() =&gt; &#123;</span><br><span class="line">  testQuote = &#x27;Test Quote&#x27;;</span><br><span class="line">  const twainServiceSpy = jasmine.createSpyObj(&#x27;TwainService&#x27;, [&#x27;getQuote&#x27;]);</span><br><span class="line">  getQuoteSpy = twainServiceSpy.getQuote.and.returnValue( of(testQuote) ); //关键在此</span><br><span class="line"></span><br><span class="line">  TestBed.configureTestingModule(&#123;</span><br><span class="line">    declarations: [ TwainComponent ],</span><br><span class="line">    providers:    [</span><br><span class="line">      &#123; provide: TwainService, useValue: twainServiceSpy &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  fixture = TestBed.createComponent(TwainComponent);</span><br><span class="line">  component = fixture.componentInstance;</span><br><span class="line">  quoteEl = fixture.nativeElement.querySelector(&#x27;.twain&#x27;);</span><br><span class="line">&#125;);</span><br><span class="line">it(&#x27;should show quote after component initialized&#x27;, () =&gt; &#123;</span><br><span class="line">  fixture.detectChanges(); // onInit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  expect(quoteEl.textContent).toBe(testQuote);</span><br><span class="line">  expect(getQuoteSpy.calls.any()).toBe(true, &#x27;getQuote called&#x27;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="返回异常"><a href="#返回异常" class="headerlink" title="返回异常"></a>返回异常</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">beforeEach(() =&gt; &#123;</span><br><span class="line">  const twainService = jasmine.createSpyObj(&#x27;TwainService&#x27;, [&#x27;getQuote&#x27;]);</span><br><span class="line">  getQuoteSpy = twainService.getQuote.and.returnValue( throwError(&#x27;ops&#x27;) ); //关键在此</span><br><span class="line"></span><br><span class="line">  TestBed.configureTestingModule(&#123;</span><br><span class="line">    declarations: [ TwainComponent ],</span><br><span class="line">    providers:    [</span><br><span class="line">      &#123; provide: TwainService, useValue: twainService &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  fixture = TestBed.createComponent(TwainComponent);</span><br><span class="line">  component = fixture.componentInstance;</span><br><span class="line">  quoteEl = fixture.nativeElement.querySelector(&#x27;.twain&#x27;);</span><br><span class="line">&#125;);</span><br><span class="line">it(&#x27;should show quote after component initialized&#x27;, () =&gt; &#123;</span><br><span class="line">  fixture.detectChanges(); // onInit()</span><br><span class="line"></span><br><span class="line">  expect(errorMessage()).toMatch(/test failure/, &#x27;should display error&#x27;);</span><br><span class="line">  expect(quoteEl.textContent).toBe(&#x27;...&#x27;, &#x27;should show placeholder&#x27;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="返回异常，但异步处理"><a href="#返回异常，但异步处理" class="headerlink" title="返回异常，但异步处理"></a>返回异常，但异步处理</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">getQuote() &#123;</span><br><span class="line">  this.errorMessage = &#x27;&#x27;;</span><br><span class="line">  this.quote = this.twainService.getQuote().pipe(</span><br><span class="line">    startWith(&#x27;...&#x27;),</span><br><span class="line">    catchError( (err: any) =&gt; &#123;</span><br><span class="line">      setTimeout(() =&gt; this.errorMessage = err.message || err.toString());</span><br><span class="line">      return of(&#x27;...&#x27;);</span><br><span class="line">    &#125;)</span><br><span class="line">  );</span><br><span class="line">  </span><br><span class="line"> beforeEach(() =&gt; &#123;</span><br><span class="line">  const twainService = jasmine.createSpyObj(&#x27;TwainService&#x27;, [&#x27;getQuote&#x27;]);</span><br><span class="line">  getQuoteSpy = twainService.getQuote.and.returnValue( throwError(&#x27;ops&#x27;) ); //关键在此</span><br><span class="line"></span><br><span class="line">  TestBed.configureTestingModule(&#123;</span><br><span class="line">    declarations: [ TwainComponent ],</span><br><span class="line">    providers:    [</span><br><span class="line">      &#123; provide: TwainService, useValue: twainService &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  fixture = TestBed.createComponent(TwainComponent);</span><br><span class="line">  component = fixture.componentInstance;</span><br><span class="line">  quoteEl = fixture.nativeElement.querySelector(&#x27;.twain&#x27;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">it(&#x27;should display error when TwainService fails&#x27;, fakeAsync(() =&gt; &#123; //fakeAsync不适用与ajax</span><br><span class="line">  getQuoteSpy.and.returnValue(</span><br><span class="line">    throwError(&#x27;TwainService test failure&#x27;));</span><br><span class="line"></span><br><span class="line">  fixture.detectChanges(); // onInit()</span><br><span class="line">  tick(); // flush the component&#x27;s setTimeout()</span><br><span class="line">  fixture.detectChanges(); // update errorMessage within setTimeout()</span><br><span class="line"></span><br><span class="line">  expect(errorMessage()).toMatch(/test failure/, &#x27;should display error&#x27;);</span><br><span class="line">  expect(quoteEl.textContent).toBe(&#x27;...&#x27;, &#x27;should show placeholder&#x27;);</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure><h3 id="异步代码测试"><a href="#异步代码测试" class="headerlink" title="异步代码测试"></a>异步代码测试</h3><h4 id="使用fakeAsync"><a href="#使用fakeAsync" class="headerlink" title="使用fakeAsync"></a>使用fakeAsync</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">it(&#x27;should get Date diff correctly in fakeAsync&#x27;, fakeAsync(() =&gt; &#123;</span><br><span class="line">    const start = Date.now();</span><br><span class="line">    tick(100);</span><br><span class="line">    const end = Date.now();</span><br><span class="line">    expect(end - start).toBe(100);</span><br><span class="line"> &#125;));</span><br><span class="line"> </span><br></pre></td></tr></table></figure><p>fakeAsync支持以下异步任务：</p><ul><li>setTimeout</li><li>setInterval</li><li>requestAnimationFrame</li><li>webkitRequestAnimationFrame</li><li>mozRequestAnimationFrame</li><li>rxjs - delay、interval等</li></ul><h4 id="ajax请求测试"><a href="#ajax请求测试" class="headerlink" title="ajax请求测试"></a>ajax请求测试</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">it(&#x27;should show quote after getQuote (async)&#x27;, async(() =&gt; &#123;</span><br><span class="line">  fixture.detectChanges(); // ngOnInit()</span><br><span class="line">  expect(quoteEl.textContent).toBe(&#x27;...&#x27;, &#x27;should show placeholder&#x27;);</span><br><span class="line"></span><br><span class="line">  fixture.whenStable().then(() =&gt; &#123; // wait for async getQuote</span><br><span class="line">    fixture.detectChanges();        // update view with quote</span><br><span class="line">    expect(quoteEl.textContent).toBe(testQuote);</span><br><span class="line">    expect(errorMessage()).toBeNull(&#x27;should not show error&#x27;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure><h4 id="jasmine-done"><a href="#jasmine-done" class="headerlink" title="jasmine done"></a>jasmine done</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">it(&#x27;should show quote after getQuote (spy done)&#x27;, (done: DoneFn) =&gt; &#123;</span><br><span class="line">  fixture.detectChanges();</span><br><span class="line"></span><br><span class="line">  // the spy&#x27;s most recent call returns the observable with the test quote</span><br><span class="line">  getQuoteSpy.calls.mostRecent().returnValue.subscribe(() =&gt; &#123;</span><br><span class="line">    fixture.detectChanges(); // update view with quote</span><br><span class="line">    expect(quoteEl.textContent).toBe(testQuote);</span><br><span class="line">    expect(errorMessage()).toBeNull(&#x27;should not show error&#x27;);</span><br><span class="line">    done();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="组件嵌套测试"><a href="#组件嵌套测试" class="headerlink" title="组件嵌套测试"></a>组件嵌套测试</h3><h4 id="服务依赖错误"><a href="#服务依赖错误" class="headerlink" title="服务依赖错误"></a>服务依赖错误</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TypeError: ctor is not a constructor</span><br></pre></td></tr></table></figure><blockquote><p>问题原因：provide中错误的配置<br> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//错误的</span><br><span class="line">providers: [&#123;provide: OrderService, useClass: new OrderServiceMock()&#125;]</span><br></pre></td></tr></table></figure><br> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//正确的</span><br><span class="line">providers: [&#123;provide: OrderService, useValue: new OrderServiceMock()&#125;]</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="HTTP-service测试"><a href="#HTTP-service测试" class="headerlink" title="HTTP service测试"></a>HTTP service测试</h3><h4 id="类似service测试，使用Spy"><a href="#类似service测试，使用Spy" class="headerlink" title="类似service测试，使用Spy"></a>类似service测试，使用Spy</h4><h4 id="使用HttpTestingController"><a href="#使用HttpTestingController" class="headerlink" title="使用HttpTestingController"></a>使用HttpTestingController</h4><blockquote><p>配置</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">let service: BlogPostsService;</span><br><span class="line">let backend: HttpTestingController;</span><br><span class="line">beforeEach(() =&gt; &#123;</span><br><span class="line">  TestBed.configureTestingModule(&#123;</span><br><span class="line">    providers: [BlogPostsService],</span><br><span class="line">    imports: [</span><br><span class="line">      HttpClientTestingModule</span><br><span class="line">    ]</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">beforeEach(() =&gt; &#123;</span><br><span class="line">  service = TestBed.get(BlogPostsService);</span><br><span class="line">  backend = TestBed.get(HttpTestingController);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>expectOne判定url</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">it(&#x27;should expectOne url&#x27;, () =&gt; &#123;</span><br><span class="line">  service.getAll().subscribe();</span><br><span class="line">  backend.expectOne(`https://rails-rest.herokuapp.com/posts`);</span><br><span class="line">  backend.verify();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>method判定</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">it(&#x27;should expectOne url and method&#x27;, () =&gt; &#123;</span><br><span class="line">  service.getAll().subscribe();</span><br><span class="line">  backend.expectOne(&#123;url: `https://rails-rest.herokuapp.com/posts`&#125;);</span><br><span class="line">  service.getAll().subscribe();</span><br><span class="line">  backend.expectOne(&#123;url: `https://rails-rest.herokuapp.com/posts`, method: &#x27;GET&#x27;&#125;);</span><br><span class="line">  backend.verify();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>none判定</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">it(&#x27;should not expect one when not subscribed&#x27;, () =&gt; &#123;</span><br><span class="line">   service.getAll()// .subscribe();</span><br><span class="line">   backend.expectNone(`https://rails-rest.herokuapp.com/posts`);</span><br><span class="line">   backend.verify();</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure><blockquote><p>match 正则判定</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">it(&#x27;should match two requests&#x27;, () =&gt; &#123;</span><br><span class="line">   service.getAll().subscribe();</span><br><span class="line">   service.get(1).subscribe();</span><br><span class="line">   const calls = backend.match((request) =&gt; &#123;</span><br><span class="line">     return request.url.match(/posts/) &amp;&amp; # url正则匹配</span><br><span class="line">            request.method === &#x27;GET&#x27;;</span><br><span class="line">   &#125;);</span><br><span class="line">   expect(calls.length).toEqual(2);</span><br><span class="line">   expect(calls[0].request.url).toEqual(`https://rails-rest.herokuapp.com/posts`);</span><br><span class="line">   expect(calls[1].request.url).toEqual(`https://rails-rest.herokuapp.com/posts/1.json`);</span><br><span class="line">   backend.verify();</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure><blockquote><p>match 不同url</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">it(&#x27;should match different requests&#x27;, () =&gt; &#123;</span><br><span class="line">    service.getAll().subscribe();</span><br><span class="line">    service.get(1).subscribe();</span><br><span class="line">    const otherCalls = backend.match((request) =&gt; &#123;</span><br><span class="line">      return request.url == `https://rails-rest.herokuapp.com/posts/1.json` &amp;&amp;</span><br><span class="line">             request.method === &#x27;GET&#x27;;</span><br><span class="line">    &#125;);</span><br><span class="line">    const calls = backend.match((request) =&gt; &#123;</span><br><span class="line">      return request.url == `https://rails-rest.herokuapp.com/posts` &amp;&amp;</span><br><span class="line">             request.method === &#x27;GET&#x27;;</span><br><span class="line">    &#125;);</span><br><span class="line">    expect(calls.length).toEqual(1);</span><br><span class="line">    expect(otherCalls.length).toEqual(1);</span><br><span class="line">    expect(calls[0].request.url).toEqual(`https://rails-rest.herokuapp.com/posts`);</span><br><span class="line">    expect(otherCalls[0].request.url).toEqual(`https://rails-rest.herokuapp.com/posts/1.json`);</span><br><span class="line">    backend.verify();</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><blockquote><p>match 判定urlWithParams</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">it(&#x27;should have url and urlWithParams&#x27;, () =&gt; &#123;</span><br><span class="line">      service.getAll(&#123;page: 1&#125;).subscribe();</span><br><span class="line">      const calls = backend.match((request) =&gt; &#123;</span><br><span class="line">        return request.url == `https://rails-rest.herokuapp.com/posts` &amp;&amp;</span><br><span class="line">               request.urlWithParams == `https://rails-rest.herokuapp.com/posts?page=1` &amp;&amp;</span><br><span class="line">               request.method === &#x27;GET&#x27;;</span><br><span class="line">      &#125;);</span><br><span class="line">      backend.expectNone(`https://rails-rest.herokuapp.com/posts`); // If url with params, use `.match`</span><br><span class="line">      backend.verify();</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><blockquote><p>match 其余request参数</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">it(&#x27;should have a few more attributes on request that are useful&#x27;, () =&gt; &#123;</span><br><span class="line">    service.getAll(&#123;page: 1&#125;).subscribe();</span><br><span class="line">    const calls = backend.match((request: HttpRequest&lt;any&gt;) =&gt; &#123;</span><br><span class="line">      return request.url == `https://rails-rest.herokuapp.com/posts` &amp;&amp;</span><br><span class="line">             request.urlWithParams == `https://rails-rest.herokuapp.com/posts?page=1` &amp;&amp;</span><br><span class="line">             request.method === &#x27;GET&#x27; &amp;&amp;</span><br><span class="line">             request.params.get(&#x27;page&#x27;) == &#x27;1&#x27; &amp;&amp;</span><br><span class="line">             request.body == null &amp;&amp;</span><br><span class="line">             request.headers instanceof HttpHeaders &amp;&amp;</span><br><span class="line">             request.responseType == &#x27;json&#x27; &amp;&amp;</span><br><span class="line">             request.withCredentials == false;</span><br><span class="line">    &#125;);</span><br><span class="line">    backend.expectNone(`https://rails-rest.herokuapp.com/posts`); // If url with params, use `.match`</span><br><span class="line">    backend.verify();</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><blockquote><p>subscribe 结果验证</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">it(&#x27;should create post&#x27;, () =&gt; &#123;</span><br><span class="line">      service.save(&#123;</span><br><span class="line">        title: &#x27;Creating a post&#x27;,</span><br><span class="line">        content: &#x27;Another long description...&#x27;</span><br><span class="line">      &#125;).subscribe((response) =&gt; &#123;</span><br><span class="line">        expect(response).toEqual(jasmine.objectContaining(&#123;</span><br><span class="line">          id: 2,</span><br><span class="line">          title: &#x27;Creating a post&#x27;,</span><br><span class="line">          content: jasmine.any(String),</span><br><span class="line">          created_at: new Date(&#x27;2017-12-07T04:39:49.447Z&#x27;),</span><br><span class="line">          updated_at: jasmine.any(Date)</span><br><span class="line">        &#125;));</span><br><span class="line">      &#125;);</span><br><span class="line">      const response = &#123;</span><br><span class="line">        &#x27;id&#x27;: 2,</span><br><span class="line">        &#x27;title&#x27;: &#x27;Creating a post&#x27;,</span><br><span class="line">        &#x27;content&#x27;: &#x27;Another long description...&#x27;,</span><br><span class="line">        &#x27;created_at&#x27;: &#x27;2017-12-07T04:39:49.447Z&#x27;,</span><br><span class="line">        &#x27;updated_at&#x27;: &#x27;2017-12-07T04:39:49.447Z&#x27;</span><br><span class="line">      &#125;;</span><br><span class="line">      const call = backend.expectOne(`https://rails-rest.herokuapp.com/posts`);</span><br><span class="line">      expect(call.request.method).toEqual(&#x27;POST&#x27;);</span><br><span class="line">      call.flush(response); # 返回结果</span><br><span class="line">      backend.verify();</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><h3 id="个人心得"><a href="#个人心得" class="headerlink" title="个人心得"></a>个人心得</h3><ul><li>测试用例的编写，应该尽可能的简化测试对象逻辑，分而测之，</li><li>避免一次调用，敲定全部测试，这属于集成测试范畴</li><li>编写代码时候，需要有意识的拆分代码，便于单元测试，不要一个方法一大屏看不到低</li></ul><h3 id="更多推荐"><a href="#更多推荐" class="headerlink" title="更多推荐"></a>更多推荐</h3><h4 id="Angular开发提效vscode插件"><a href="#Angular开发提效vscode插件" class="headerlink" title="Angular开发提效vscode插件"></a><a href="https://juejin.im/post/6844903981966163982">Angular开发提效vscode插件</a></h4><h4 id="angular开发需要了解的rxjs操作符实践"><a href="#angular开发需要了解的rxjs操作符实践" class="headerlink" title="angular开发需要了解的rxjs操作符实践"></a><a href="https://juejin.im/post/6844903997451534343">angular开发需要了解的rxjs操作符实践</a></h4><h4 id="Angular8-日常开发避坑指南"><a href="#Angular8-日常开发避坑指南" class="headerlink" title="Angular8 日常开发避坑指南"></a><a href="https://juejin.im/post/6844904174237433863">Angular8 日常开发避坑指南</a></h4><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><h4 id="window-变量"><a href="#window-变量" class="headerlink" title="window 变量"></a><a href="https://juristr.com/blog/2016/09/ng2-get-window-ref/">window 变量</a></h4><h4 id="Angular"><a href="#Angular" class="headerlink" title="Angular"></a><a href="https://angular.io/guide/testing#component-dom-testing">Angular</a></h4><h4 id="d3-测试"><a href="#d3-测试" class="headerlink" title="d3 测试"></a><a href="https://eng.wealthfront.com/2016/07/27/tips-for-unit-testing-d3/">d3 测试</a></h4><h4 id="HttpTestingContrller"><a href="#HttpTestingContrller" class="headerlink" title="HttpTestingContrller"></a><a href="https://github.com/angularityio/playground/blob/master/apps/example-001-httpclient-testing/src/app/blog-posts.service.spec.ts#L32">HttpTestingContrller</a></h4>]]></content>
      
      
      
        <tags>
            
            <tag> angular </tag>
            
            <tag> 测试用例 </tag>
            
            <tag> UT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Performance》- 博客性能优化到90分+实践</title>
      <link href="/2020/07/28/performace_detect_skills/concepts/%E3%80%8APerformance%E3%80%8B-%20%E5%8D%9A%E5%AE%A2%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E5%88%B090%E5%88%86+%E5%AE%9E%E8%B7%B5/"/>
      <url>/2020/07/28/performace_detect_skills/concepts/%E3%80%8APerformance%E3%80%8B-%20%E5%8D%9A%E5%AE%A2%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E5%88%B090%E5%88%86+%E5%AE%9E%E8%B7%B5/</url>
      
        <content type="html"><![CDATA[<h2 id="lighthouse"><a href="#lighthouse" class="headerlink" title="lighthouse"></a>lighthouse</h2><h3 id="优化前打分"><a href="#优化前打分" class="headerlink" title="优化前打分"></a>优化前打分</h3><p>  <img src="https://s1.ax1x.com/2020/07/31/aMflZV.png"></p><ul><li>从中我们可以看到具体的优化建议</li><li>移除不用的code</li><li>图片改用压缩率高的JPEG 2000, JPEG XR, and WebP</li><li>减少css，js对界面渲染的影响</li><li>避免使用 document.write()</li><li>静态资源，使用有效的缓存策略，譬如CDN</li><li>避免重量级请求链式调用</li><li>减少请求数、请求大小</li><li>避免长的主线程任务，可适当交给webwork完成</li></ul><h2 id="具体优化"><a href="#具体优化" class="headerlink" title="具体优化"></a>具体优化</h2><h3 id="减少阻塞渲染的文件资源"><a href="#减少阻塞渲染的文件资源" class="headerlink" title="减少阻塞渲染的文件资源"></a>减少阻塞渲染的文件资源</h3><blockquote><p>如何识别哪些会产生阻塞的资源文件呢？</p></blockquote><blockquote><p>我们使用Chrome Coverage tab 判定,green 表示需要加载，red表示不依赖，可延迟加载<br><img src="https://s1.ax1x.com/2020/07/31/aMWPNF.png"></p></blockquote><h4 id="js"><a href="#js" class="headerlink" title="js"></a>js</h4><ul><li>必须的js，可以综合考虑，放入script内部，与html一同下载</li><li>script 标签，添加 async or defer</li><li>移除不用的老代码，注释</li><li>修改cdn源，采用国内cdn.bootcdn.net</li></ul><h4 id="css"><a href="#css" class="headerlink" title="css"></a>css</h4><ul><li>必须的code，写入link标签内容，与html一同下载</li></ul><h4 id="html"><a href="#html" class="headerlink" title="html"></a>html</h4><ul><li>非必须的，改用下方写法<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=&quot;import&quot; href=&quot;myfile.html&quot; async&gt;</span><br></pre></td></tr></table></figure></li></ul><h4 id="img"><a href="#img" class="headerlink" title="img"></a>img</h4><ul><li>chrome 支持 loading&#x3D;”lazy”</li></ul><blockquote><p>优化后，covarage<br><img src="https://s1.ax1x.com/2020/07/31/aMW4C4.png"> </p></blockquote><h3 id="缩小、优化CSS"><a href="#缩小、优化CSS" class="headerlink" title="缩小、优化CSS"></a>缩小、优化CSS</h3><h4 id="webpack等工具压缩"><a href="#webpack等工具压缩" class="headerlink" title="webpack等工具压缩"></a>webpack等工具压缩</h4><h4 id="文件拆分，添加media查询，加载不同文件"><a href="#文件拆分，添加media查询，加载不同文件" class="headerlink" title="文件拆分，添加media查询，加载不同文件"></a>文件拆分，添加media查询，加载不同文件</h4><h4 id="删除未使用的CSS"><a href="#删除未使用的CSS" class="headerlink" title="删除未使用的CSS"></a>删除未使用的CSS</h4><h4 id="减少空白行的存在"><a href="#减少空白行的存在" class="headerlink" title="减少空白行的存在"></a>减少空白行的存在</h4><h3 id="减少服务器响应时间（TTFB）"><a href="#减少服务器响应时间（TTFB）" class="headerlink" title="减少服务器响应时间（TTFB）"></a>减少服务器响应时间（TTFB）</h3><h3 id="避免多次页面重定向"><a href="#避免多次页面重定向" class="headerlink" title="避免多次页面重定向"></a>避免多次页面重定向</h3><ul><li>域名重定向，会增大展示时间，譬如<br><a href="http://test.com/">http://test.com</a> → 重定向到 htts:&#x2F;&#x2F;test.com</li></ul><h3 id="preload-请求"><a href="#preload-请求" class="headerlink" title="preload 请求"></a>preload 请求</h3><h4 id="preload-css"><a href="#preload-css" class="headerlink" title="preload css"></a>preload css</h4><p>可以<a href="https://github.com/addyosmani/critical/blob/master/README.md">参考,使用下方critical插件</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rel=&quot;preload&quot; as=&quot;style&quot;</span><br><span class="line"></span><br><span class="line"># 使用工具批量修改</span><br><span class="line">npm i -D critical</span><br></pre></td></tr></table></figure><h3 id="async处理js"><a href="#async处理js" class="headerlink" title="async处理js"></a>async处理js</h3><ul><li>js添加async 处理</li><li>耗时大的inline code延迟<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">document.write()</span><br></pre></td></tr></table></figure></li></ul><h3 id="避免巨大的网络负载"><a href="#避免巨大的网络负载" class="headerlink" title="避免巨大的网络负载"></a>避免巨大的网络负载</h3><h3 id="缓存静态资产"><a href="#缓存静态资产" class="headerlink" title="缓存静态资产"></a>缓存静态资产</h3><h4 id="服务器返回过期时间"><a href="#服务器返回过期时间" class="headerlink" title="服务器返回过期时间"></a>服务器返回过期时间</h4> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cache-Control: max-age=31536000</span><br></pre></td></tr></table></figure><h3 id="避免DOM太大"><a href="#避免DOM太大" class="headerlink" title="避免DOM太大"></a>避免DOM太大</h3><h3 id="最小化关键请求深度"><a href="#最小化关键请求深度" class="headerlink" title="最小化关键请求深度"></a>最小化关键请求深度</h3><h3 id="避免展示font字体文件"><a href="#避免展示font字体文件" class="headerlink" title="避免展示font字体文件"></a>避免展示font字体文件</h3><h4 id="css添加display"><a href="#css添加display" class="headerlink" title="css添加display"></a>css添加display</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@font-face &#123;</span><br><span class="line">  font-family: &#x27;Pacifico&#x27;;</span><br><span class="line">  font-style: normal;</span><br><span class="line">  font-weight: 400;</span><br><span class="line">  src: local(&#x27;Pacifico Regular&#x27;), local(&#x27;Pacifico-Regular&#x27;), url(https://fonts.gstatic.com/s/pacifico/v12/FwZY7-Qmy14u9lezJ-6H6MmBp0u-.woff2) format(&#x27;woff2&#x27;);</span><br><span class="line">  font-display: swap; # 告知浏览器，先展示系统字体，等自定义font加载完毕，在替换</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="link添加preload"><a href="#link添加preload" class="headerlink" title="link添加preload"></a>link添加preload</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=&quot;preload&quot;&gt; # 开启预加载</span><br></pre></td></tr></table></figure><h4 id="最终方法，fontfaceobserver动态展示css样式"><a href="#最终方法，fontfaceobserver动态展示css样式" class="headerlink" title="最终方法，fontfaceobserver动态展示css样式"></a>最终方法，fontfaceobserver动态展示css样式</h4><blockquote><p><a href="https://github.com/bramstein/fontfaceobserver">fontfaceobserver</a></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"># 引入 fontfaceobserver</span><br><span class="line">&lt;script src=&quot;fontfaceobserver.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"># 根据css font-family设置</span><br><span class="line">const pacificoObserver = new FontFaceObserver(&#x27;Pacifico&#x27;);</span><br><span class="line">const robotoObserver = new FontFaceObserver(&#x27;Roboto&#x27;);</span><br><span class="line"></span><br><span class="line"># 字体加载完毕，设置css</span><br><span class="line">Promise.all([</span><br><span class="line">  pacificoObserver.load(),</span><br><span class="line">  robotoObserver.load()</span><br><span class="line">]).then(function()&#123;</span><br><span class="line">  document.documentElement.className += &quot; fonts-loaded&quot;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"># 更新css</span><br><span class="line">.header &#123;</span><br><span class="line">html.fonts-loaded .header &#123;</span><br><span class="line">  font-family: &#x27;Pacifico&#x27;, cursive;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.text</span><br><span class="line">html.fonts-loaded .text &#123;</span><br><span class="line">  font-family: &#x27;Roboto&#x27;, sans-serif;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="保持低请求数量和小传输大小"><a href="#保持低请求数量和小传输大小" class="headerlink" title="保持低请求数量和小传输大小"></a>保持低请求数量和小传输大小</h3><h3 id="优化后打分"><a href="#优化后打分" class="headerlink" title="优化后打分"></a>优化后打分</h3>]]></content>
      
      
      
        <tags>
            
            <tag> 性能优化 </tag>
            
            <tag> performance </tag>
            
            <tag> lighthouse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Performance》- 前端界面性能指标和测量优化方法</title>
      <link href="/2020/07/26/performace_detect_skills/concepts/%E3%80%8APerformance%E3%80%8B-%20%E5%89%8D%E7%AB%AF%E7%95%8C%E9%9D%A2%E6%80%A7%E8%83%BD%E6%8C%87%E6%A0%87%E5%92%8C%E6%B5%8B%E9%87%8F%E4%BC%98%E5%8C%96%E6%96%B9%E6%B3%95/"/>
      <url>/2020/07/26/performace_detect_skills/concepts/%E3%80%8APerformance%E3%80%8B-%20%E5%89%8D%E7%AB%AF%E7%95%8C%E9%9D%A2%E6%80%A7%E8%83%BD%E6%8C%87%E6%A0%87%E5%92%8C%E6%B5%8B%E9%87%8F%E4%BC%98%E5%8C%96%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="性能定义"><a href="#性能定义" class="headerlink" title="性能定义"></a>性能定义</h2><h3 id="性能理解"><a href="#性能理解" class="headerlink" title="性能理解"></a>性能理解</h3><blockquote><p>性能是相对的，非绝对的<br>快的网络好的硬件设备，加载同样网页 ，会比差的网络和硬件设备<br>不同站点的加载耗时，也可能是相同的<br>站点加载虽然快，但是用户交互、请求响应也可能慢</p></blockquote><h3 id="好的性能如何定义"><a href="#好的性能如何定义" class="headerlink" title="好的性能如何定义"></a>好的性能如何定义</h3><blockquote><p>Perceived load speeda(界面加载和渲染速度)</p></blockquote><ul><li>how quickly a page can load and render all of its visual elements to the screen.</li></ul><blockquote><p>Load responsiveness(js执行加载和执行速度)</p></blockquote><ul><li>how quickly a page can load and execute any required JavaScript code in order for components to respond quickly to user interaction</li></ul><blockquote><p>Runtime responsiveness(js交互执行速度)</p></blockquote><ul><li>after page load, how quickly can the page respond to user interaction.</li></ul><blockquote><p>Visual stability(界面Ui友好、体验稳定性)</p></blockquote><ul><li>do elements on the page shift in ways that users don’t expect and potentially interfere with their interactions?</li></ul><blockquote><p>Smoothness(Ui界面动画性能)</p></blockquote><ul><li>do transitions and animations render at a consistent frame rate and flow fluidly from one state to the next?</li></ul><h3 id="如何测量"><a href="#如何测量" class="headerlink" title="如何测量"></a>如何测量</h3><ul><li><p><a href="https://developers.google.com/speed/pagespeed/insights/">PageSpeed Insights</a></p></li><li><p><a href="https://developers.google.com/web/tools/chrome-user-experience-report">Chrome User Experience Report</a></p></li><li><p><a href="https://webmasters.googleblog.com/2019/11/search-console-speed-report.html">Search Console (Speed Report)</a></p></li><li><p><a href="https://developers.google.com/web/tools/lighthouse/">Lighthouse</a></p></li><li><p><a href="https://developers.google.com/web/tools/chrome-devtools/">Chrome DevTools</a></p></li><li><p><a href="https://webpagetest.org/">webpagetest</a></p></li></ul><h2 id="性能指标量化"><a href="#性能指标量化" class="headerlink" title="性能指标量化"></a>性能指标量化</h2><h3 id="First-Contentful-Paint-FCP"><a href="#First-Contentful-Paint-FCP" class="headerlink" title="First Contentful Paint (FCP)"></a>First Contentful Paint (FCP)</h3><blockquote><p>First Contentful Paint reports the time when the browser first rendered any text, image (including background images), non-white canvas or SVG. This includes text with pending webfonts. This is the first time users could start consuming page content.</p></blockquote><ul><li>标准： 1s </li><li>还可通过<a href="https://firebase.google.com/docs/perf-mon/get-started-web">Firebase Performance Monitoring (beta)</a>测量</li></ul><h3 id="Largest-Contentful-Paint-LCP"><a href="#Largest-Contentful-Paint-LCP" class="headerlink" title="Largest Contentful Paint (LCP)"></a>Largest Contentful Paint (LCP)</h3><blockquote><p>Largest Contentful Paint (LCP) is an important, user-centric metric for measuring perceived load speed because it marks the point in the page load timeline when the page’s main content has likely loaded—a fast LCP helps reassure the user that the page is useful.</p></blockquote><p><img src="https://s1.ax1x.com/2020/07/30/anF0ln.png"></p><h3 id="First-Input-Delay-FID"><a href="#First-Input-Delay-FID" class="headerlink" title="First Input Delay (FID)"></a>First Input Delay (FID)</h3><blockquote><p>First Input Delay (FID) is an important, user-centric metric for measuring load responsiveness because it quantifies the experience users feel when trying to interact with unresponsive pages—a low FID helps ensure that the page is usable</p></blockquote><p><img src="https://s1.ax1x.com/2020/07/30/anFgkF.png"></p><h3 id="Time-to-Interactive-TTI"><a href="#Time-to-Interactive-TTI" class="headerlink" title="Time to Interactive (TTI)"></a>Time to Interactive (TTI)</h3><blockquote><p>The TTI metric measures the time from when the page starts loading to when its main sub-resources have loaded and it is capable of reliably responding to user input quickly</p></blockquote><p><img src="https://s1.ax1x.com/2020/07/30/anFRfJ.png"></p><h3 id="Total-Blocking-Time-TBT"><a href="#Total-Blocking-Time-TBT" class="headerlink" title="Total Blocking Time (TBT)"></a>Total Blocking Time (TBT)</h3><blockquote><p>The Total Blocking Time (TBT) metric measures the total amount of time between First Contentful Paint (FCP) and Time to Interactive (TTI) where the main thread was blocked for long enough to prevent input responsiveness.</p></blockquote><p><img src="https://s1.ax1x.com/2020/07/30/anF5Ox.md.png"></p><p><a href="https://web.dev/custom-metrics/#long-tasks-api">Long Task</a></p><ul><li>主线程上运行</li><li>运行时间超过50ms</li></ul><h3 id="Cumulative-Layout-Shift-CLS"><a href="#Cumulative-Layout-Shift-CLS" class="headerlink" title="Cumulative Layout Shift (CLS)"></a>Cumulative Layout Shift (CLS)</h3><blockquote><p>Cumulative Layout Shift (CLS) is an important, user-centric metric for measuring visual stability because it helps quantify how often users experience unexpected layout shifts—a low CLS helps ensure that the page is delightful.</p></blockquote><p><img src="https://s1.ax1x.com/2020/07/30/anFom6.md.png"></p><h3 id="Time-to-first-byte（TTFB-）"><a href="#Time-to-first-byte（TTFB-）" class="headerlink" title="Time to first byte（TTFB ）"></a>Time to first byte（TTFB ）</h3><blockquote><p>Time to first byte (TTFB) is a measurement used as an indication of the responsiveness of a webserver or other network resource. TTFB measures the duration from the user or client making an HTTP request to the first byte of the page being received by the client’s browser. This time is made up of the socket connection time, the time taken to send the HTTP request, and the time taken to get the first byte of the page</p></blockquote><p>Load time is how long it takes for a webpage to be loaded and usable by a browser. Often in web page delivery a page is compressed in the Gzip format to make the size of the download smaller. This practice prevents the first byte from being sent until the compression is complete and increases the TTFB significantly. TTFB can go from 100–200 ms to 1000–2000 ms, but the page will load much faster and be ready for the user in a much smaller amount of time. Many websites see a common 5–10× increase in TTFB but a much faster browser response time garnering 20% load-time decrease. There are some drawbacks however in using Gzip compression:</p><p>server CPU load increases during compression.<br>data can take a long time to process and since a first byte isn’t sent until it’s done compressing it can make the webpage appear to be hung.<br>long times to first bytes will often cause a user to cancel and reissue their request to the web-server resulting in increased CPU loads because of sequential load requests.</p><h2 id="如何优化"><a href="#如何优化" class="headerlink" title="如何优化"></a>如何优化</h2><h3 id="FCP"><a href="#FCP" class="headerlink" title="FCP"></a>FCP</h3><ul><li>减少header头中，阻塞html渲染的script，link请求</li><li>移除不用的js,css,html 代码</li><li>css代码压缩</li><li>预连接到所需的起点</li><li>减少服务器响应时间（TTFB）</li><li>避免多次页面重定向</li><li>预加载关键请求</li><li>避免巨大的网络负载</li><li>通过有效的缓存策略服务静态资产</li><li>避免DOM太大</li><li>最小化关键请求深度</li><li>确保文本在Webfont加载期间保持可见</li><li>保持低请求数量和小传输大小</li></ul><h3 id="LCP"><a href="#LCP" class="headerlink" title="LCP"></a>LCP</h3><blockquote><p>影响因素：</p></blockquote><ul><li>服务器响应时间慢</li><li>渲染阻止的JavaScript和CSS</li><li>资源加载时间</li><li>客户端渲染</li></ul><blockquote><p>优化方法</p></blockquote><ul><li><p>使用PRPL模式应用即时加载</p></li><li><p>Push (or preload) rel&#x3D;”preload”来预加载关键资源</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=&quot;preload&quot; as=&quot;style&quot; href=&quot;css/style.css&quot;&gt;</span><br></pre></td></tr></table></figure></li><li><p>Render 渲染界面尽可能的快</p><ul><li>没有任何一种正确的解决方案可以减少应用程序中的First Paint，并且只有在收益大于应用程序的权衡因素的情况下，才应考虑内联样式和服务器端渲染</li></ul></li><li><p>Pre-cache 预缓存剩余静态资源</p></li><li><p>Lazy load 按需拆分整个捆绑包和延迟加载块</p></li><li><p>优化关键渲染路径</p></li><li><p>优化您的CSS</p></li><li><p>优化图像</p></li><li><p>优化网络字体</p></li><li><p>优化您的JavaScript（适用于客户端呈现的网站）</p></li></ul><h3 id="FID"><a href="#FID" class="headerlink" title="FID"></a>FID</h3><ul><li>减少第三方代码的影响</li><li>减少JavaScript执行时间</li><li>减少主线程工作</li><li>保持低请求数量和小传输大小</li></ul><h3 id="TTI"><a href="#TTI" class="headerlink" title="TTI"></a>TTI</h3><ul><li>缩小JavaScript</li><li>预连接到所需的起点</li><li>预加载关键请求</li><li>减少第三方代码的影响</li><li>最小化关键请求深度</li><li>减少JavaScript执行时间</li><li>减少主线程工作</li><li>保持低请求数量和小传输大小</li></ul><h3 id="TBT"><a href="#TBT" class="headerlink" title="TBT"></a>TBT</h3><ul><li>减少第三方代码的影响</li><li>减少JavaScript执行时间</li><li>减少主线程工作</li><li>保持低请求数量和小传输大小</li></ul><h3 id="CLS"><a href="#CLS" class="headerlink" title="CLS"></a>CLS</h3><blockquote><p><a href="https://web.dev/optimize-cls/">影响原因</a>：</p></blockquote><ul><li>图片无尺寸</li><li>没有尺寸的广告，嵌入和iframe</li><li>动态注入的内容</li><li>Web字体导致FOIT &#x2F; FOUT</li><li>在更新DOM之前等待网络响应的操作</li></ul><blockquote><p>优化方法</p></blockquote><ul><li>请务必在图片和视频元素上包含size属性，否则，请使用CSS宽高比框保留所需的空间。这种方法可确保在加载图像时浏览器可以在文档中分配正确的空间量。请注意，您还可以使用unsize-media功能部件策略 在支持功能部件策略的浏览器中强制执行此行为。</li><li>除非响应用户交互，否则切勿在现有内容上方插入内容。这样可以确保可以预期发生任何版式移位。</li><li>优先于变换动画而不是触发布局更改的属性动画。对过渡进行动画处理，以提供状态与状态之间的上下文和连续性</li></ul><h3 id="TTFB"><a href="#TTFB" class="headerlink" title="TTFB"></a>TTFB</h3><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><h4 id="user-experience"><a href="#user-experience" class="headerlink" title="user-experience"></a><a href="https://developers.google.com/web/tools/chrome-user-experience-report">user-experience</a></h4><h4 id="pageSpeed"><a href="#pageSpeed" class="headerlink" title="pageSpeed"></a><a href="https://developers.google.com/speed/pagespeed/insights/">pageSpeed</a></h4><h4 id="improve-performance"><a href="#improve-performance" class="headerlink" title="improve performance"></a><a href="https://royal.pingdom.com/how-to-analyze-and-improve-page-load-performance/">improve performance</a></h4><h4 id="Time-to-first-byte"><a href="#Time-to-first-byte" class="headerlink" title="Time_to_first_byte"></a><a href="https://en.wikipedia.org/wiki/Time_to_first_byte">Time_to_first_byte</a></h4><h4 id="New-Metrics"><a href="#New-Metrics" class="headerlink" title="New Metrics"></a><a href="https://web.dev/metrics/">New Metrics</a></h4>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> performance </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Security》- SameSite入门</title>
      <link href="/2020/07/25/devops_skills/security/%E3%80%8ASecurity%E3%80%8B-%20SameSite%E5%85%A5%E9%97%A8/"/>
      <url>/2020/07/25/devops_skills/security/%E3%80%8ASecurity%E3%80%8B-%20SameSite%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<ul><li>http请求，每次都会携带cookies.http请求是无状态的，那么通过设计cookie，标记回话，标记用户登录状态的。无加密状态，就会存在安全风险，别人盗用你的cookies，操作你的账户中数据。CSRF(cross site request fakey).</li><li>之前，通用的做法是使用Referer，请求跟Referer不同，那么可能就被当做CSRF。当然，我们可以添加白名单过滤的。</li><li>目前新的方法，就是我们要介绍的SameSite:<br><img src="https://s1.ax1x.com/2020/07/26/apu5uQ.png"></li></ul><h3 id="SameSite"><a href="#SameSite" class="headerlink" title="SameSite"></a>SameSite</h3><blockquote><p>字面意思，就是同站，或者同源<br>浏览器<a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie#Browser_compatibility">支持情况</a><br><img src="https://s1.ax1x.com/2020/07/26/apK8xS.md.png"></p></blockquote><h3 id="作用原理"><a href="#作用原理" class="headerlink" title="作用原理"></a>作用原理</h3><h3 id="如何设置"><a href="#如何设置" class="headerlink" title="如何设置"></a>如何设置</h3><blockquote><p>存在三种设置：None,Strict,Lax<br>Neither Strict nor Lax are a complete solution for your site’s security.</p></blockquote><h4 id="Strict"><a href="#Strict" class="headerlink" title="Strict"></a>Strict</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set-Cookie: promo_shown=1; SameSite=Strict</span><br></pre></td></tr></table></figure><h4 id="Lax"><a href="#Lax" class="headerlink" title="Lax"></a>Lax</h4><blockquote><p>默认行为</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 不设置sameSite</span><br><span class="line">Set-Cookie: promo_shown=1</span><br><span class="line"></span><br><span class="line"># 等效于下方</span><br><span class="line"></span><br><span class="line">Set-Cookie: promo_shown=1; SameSite=Lax</span><br></pre></td></tr></table></figure><h4 id="None"><a href="#None" class="headerlink" title="None"></a>None</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 这样的配置chrome会拒绝</span><br><span class="line">Set-Cookie: promo_shown=1; SameSite=None</span><br><span class="line"></span><br><span class="line">#还需要添加Secure,表明自己相信没有问题</span><br><span class="line">Set-Cookie: widget_session=abc123; SameSite=None; Secure</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>You can test this behavior as of Chrome 76 by enabling chrome:&#x2F;&#x2F;flags&#x2F;#cookies-without-same-site-must-be-secure and from Firefox 69 in about:config by setting network.cookie.sameSite.noneRequiresSecure.</p></blockquote><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><h4 id="sameSite"><a href="#sameSite" class="headerlink" title="sameSite"></a><a href="https://web.dev/samesite-cookies-explained/?utm_source=devtools">sameSite</a></h4>]]></content>
      
      
      
        <tags>
            
            <tag> sameSite </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Js》- js 原生方法原理和实现过程</title>
      <link href="/2020/07/23/front_skills/js/%E3%80%8AJs%E3%80%8B-%20js%20%E5%8E%9F%E7%94%9F%E6%96%B9%E6%B3%95%E5%8E%9F%E7%90%86%E5%92%8C%E5%AE%9E%E7%8E%B0%E8%BF%87%E7%A8%8B/"/>
      <url>/2020/07/23/front_skills/js/%E3%80%8AJs%E3%80%8B-%20js%20%E5%8E%9F%E7%94%9F%E6%96%B9%E6%B3%95%E5%8E%9F%E7%90%86%E5%92%8C%E5%AE%9E%E7%8E%B0%E8%BF%87%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h3><h4 id="isArray"><a href="#isArray" class="headerlink" title="isArray"></a>isArray</h4> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Array.isArray = function(arg) &#123;</span><br><span class="line">   return Object.prototype.toString.call(arg) === &#x27;[object Array]&#x27;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="from"><a href="#from" class="headerlink" title="from"></a>from</h4> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line">Array.from = (function () &#123;</span><br><span class="line">       var symbolIterator;</span><br><span class="line">       try &#123;</span><br><span class="line">           symbolIterator = Symbol.iterator</span><br><span class="line">               ? Symbol.iterator</span><br><span class="line">               : &#x27;Symbol(Symbol.iterator)&#x27;;</span><br><span class="line">       &#125; catch &#123;</span><br><span class="line">           symbolIterator = &#x27;Symbol(Symbol.iterator)&#x27;;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       var toStr = Object.prototype.toString;</span><br><span class="line">       var isCallable = function (fn) &#123;</span><br><span class="line">           return (</span><br><span class="line">               typeof fn === &#x27;function&#x27; ||</span><br><span class="line">               toStr.call(fn) === &#x27;[object Function]&#x27;</span><br><span class="line">           );</span><br><span class="line">       &#125;;</span><br><span class="line">       var toInteger = function (value) &#123;</span><br><span class="line">           var number = Number(value);</span><br><span class="line">           if (isNaN(number)) return 0;</span><br><span class="line">           if (number === 0 || !isFinite(number)) return number;</span><br><span class="line">           return (number &gt; 0 ? 1 : -1) * Math.floor(Math.abs(number));</span><br><span class="line">       &#125;;</span><br><span class="line">       var maxSafeInteger = Math.pow(2, 53) - 1;</span><br><span class="line">       var toLength = function (value) &#123;</span><br><span class="line">           var len = toInteger(value);</span><br><span class="line">           return Math.min(Math.max(len, 0), maxSafeInteger);</span><br><span class="line">       &#125;;</span><br><span class="line"></span><br><span class="line">       var setGetItemHandler = function setGetItemHandler(isIterator, items) &#123;</span><br><span class="line">           var iterator = isIterator &amp;&amp; items[symbolIterator]();</span><br><span class="line">           return function getItem(k) &#123;</span><br><span class="line">               return isIterator ? iterator.next() : items[k];</span><br><span class="line">           &#125;;</span><br><span class="line">       &#125;;</span><br><span class="line"></span><br><span class="line">       var getArray = function getArray(</span><br><span class="line">           T,</span><br><span class="line">           A,</span><br><span class="line">           len,</span><br><span class="line">           getItem,</span><br><span class="line">           isIterator,</span><br><span class="line">           mapFn</span><br><span class="line">       ) &#123;</span><br><span class="line">           // 16. Let k be 0.</span><br><span class="line">           var k = 0;</span><br><span class="line"></span><br><span class="line">           // 17. Repeat, while k &lt; len… or while iterator is done (also steps a - h)</span><br><span class="line">           while (k &lt; len || isIterator) &#123;</span><br><span class="line">               var item = getItem(k);</span><br><span class="line">               var kValue = isIterator ? item.value : item;</span><br><span class="line"></span><br><span class="line">               if (isIterator &amp;&amp; item.done) &#123;</span><br><span class="line">                   return A;</span><br><span class="line">               &#125; else &#123;</span><br><span class="line">                   if (mapFn) &#123;</span><br><span class="line">                       A[k] =</span><br><span class="line">                           typeof T === &#x27;undefined&#x27;</span><br><span class="line">                               ? mapFn(kValue, k)</span><br><span class="line">                               : mapFn.call(T, kValue, k);</span><br><span class="line">                   &#125; else &#123;</span><br><span class="line">                       A[k] = kValue;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">               k += 1;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           if (isIterator) &#123;</span><br><span class="line">               throw new TypeError(</span><br><span class="line">                   &#x27;Array.from: provided arrayLike or iterator has length more then 2 ** 52 - 1&#x27;</span><br><span class="line">               );</span><br><span class="line">           &#125; else &#123;</span><br><span class="line">               A.length = len;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           return A;</span><br><span class="line">       &#125;;</span><br><span class="line"></span><br><span class="line">       // The length property of the from method is 1.</span><br><span class="line">       return function from(arrayLikeOrIterator /*, mapFn, thisArg */) &#123;</span><br><span class="line">           // 1. Let C be the this value.</span><br><span class="line">           var C = this;</span><br><span class="line"></span><br><span class="line">           // 2. Let items be ToObject(arrayLikeOrIterator).</span><br><span class="line">           var items = Object(arrayLikeOrIterator);</span><br><span class="line">           var isIterator = isCallable(items[symbolIterator]);</span><br><span class="line"></span><br><span class="line">           // 3. ReturnIfAbrupt(items).</span><br><span class="line">           if (arrayLikeOrIterator == null &amp;&amp; !isIterator) &#123;</span><br><span class="line">               throw new TypeError(</span><br><span class="line">                   &#x27;Array.from requires an array-like object or iterator - not null or undefined&#x27;</span><br><span class="line">               );</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           // 4. If mapfn is undefined, then let mapping be false.</span><br><span class="line">           var mapFn = arguments.length &gt; 1 ? arguments[1] : void undefined;</span><br><span class="line">           var T;</span><br><span class="line">           if (typeof mapFn !== &#x27;undefined&#x27;) &#123;</span><br><span class="line">               // 5. else</span><br><span class="line">               // 5. a If IsCallable(mapfn) is false, throw a TypeError exception.</span><br><span class="line">               if (!isCallable(mapFn)) &#123;</span><br><span class="line">                   throw new TypeError(</span><br><span class="line">                       &#x27;Array.from: when provided, the second argument must be a function&#x27;</span><br><span class="line">                   );</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">               // 5. b. If thisArg was supplied, let T be thisArg; else let T be undefined.</span><br><span class="line">               if (arguments.length &gt; 2) &#123;</span><br><span class="line">                   T = arguments[2];</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           // 10. Let lenValue be Get(items, &quot;length&quot;).</span><br><span class="line">           // 11. Let len be ToLength(lenValue).</span><br><span class="line">           var len = toLength(items.length);</span><br><span class="line"></span><br><span class="line">           // 13. If IsConstructor(C) is true, then</span><br><span class="line">           // 13. a. Let A be the result of calling the [[Construct]] internal method</span><br><span class="line">           // of C with an argument list containing the single item len.</span><br><span class="line">           // 14. a. Else, Let A be ArrayCreate(len).</span><br><span class="line">           var A = isCallable(C) ? Object(new C(len)) : new Array(len);</span><br><span class="line"></span><br><span class="line">           return getArray(</span><br><span class="line">               T,</span><br><span class="line">               A,</span><br><span class="line">               len,</span><br><span class="line">               setGetItemHandler(isIterator, items),</span><br><span class="line">               isIterator,</span><br><span class="line">               mapFn</span><br><span class="line">           );</span><br><span class="line">       &#125;;</span><br><span class="line">   &#125;)();</span><br></pre></td></tr></table></figure><h4 id="of"><a href="#of" class="headerlink" title="of"></a>of</h4> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Array.of = function() &#123;</span><br><span class="line">  return Array.prototype.slice.call(arguments);</span><br><span class="line">  // Or </span><br><span class="line">  let vals = [];</span><br><span class="line">  for(let prop in arguments)&#123;</span><br><span class="line">      vals.push(arguments[prop]);</span><br><span class="line">  &#125;</span><br><span class="line">  return vals;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Other"><a href="#Other" class="headerlink" title="Other"></a>Other</h3><h4 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h4><h4 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h4>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 原生 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《devTool》- angular vscode开发插件看这篇就够了</title>
      <link href="/2020/07/23/dev_tool_skills/vscode/%E3%80%8AdevTool%E3%80%8B-%20angular%20vscode%E5%BC%80%E5%8F%91%E6%8F%92%E4%BB%B6%E7%9C%8B%E8%BF%99%E7%AF%87%E5%B0%B1%E5%A4%9F%E4%BA%86/"/>
      <url>/2020/07/23/dev_tool_skills/vscode/%E3%80%8AdevTool%E3%80%8B-%20angular%20vscode%E5%BC%80%E5%8F%91%E6%8F%92%E4%BB%B6%E7%9C%8B%E8%BF%99%E7%AF%87%E5%B0%B1%E5%A4%9F%E4%BA%86/</url>
      
        <content type="html"><![CDATA[<h2 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h2><h3 id="Angular-cli"><a href="#Angular-cli" class="headerlink" title="Angular-cli"></a>Angular-cli</h3><blockquote><p>开发前提条件，初始化，开发，构建和维护Angular应用程序的命令行界面工具。</p></blockquote><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @angular/cli </span><br></pre></td></tr></table></figure><h4 id="创建工程"><a href="#创建工程" class="headerlink" title="创建工程"></a>创建工程</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ng new my-first-project</span><br><span class="line">cd my-first-project</span><br><span class="line">ng serve or ng serve --open </span><br></pre></td></tr></table></figure><h4 id="添加-service"><a href="#添加-service" class="headerlink" title="添加 service"></a>添加 service</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng generate service hero //创建service</span><br></pre></td></tr></table></figure><h4 id="添加路由"><a href="#添加路由" class="headerlink" title="添加路由"></a>添加路由</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//模块添加路由</span><br><span class="line">ng generate module app-routing --flat --module=app</span><br></pre></td></tr></table></figure><h4 id="创建多模块"><a href="#创建多模块" class="headerlink" title="创建多模块"></a>创建多模块</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ng new my-workspace --createApplication=&quot;false&quot;</span><br><span class="line">cd my-workspace</span><br><span class="line"> ng generate application my-first-app</span><br><span class="line">ng generate application my-second-app</span><br><span class="line">ng generate library my-lib  </span><br><span class="line">// 开发人员可以为特定领域创建通用解决方案，以适合在不同应用程序中重复使用。</span><br><span class="line">// 这样的解决方案可以作为Angular 库构建，并且这些库可以作为npm软件包发布和共享。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">my-workspace/</span><br><span class="line">  ...             (workspace-wide config files)</span><br><span class="line">  projects/       (generated applications and libraries)</span><br><span class="line">    my-first-app/ --(an explicitly generated application)</span><br><span class="line">      ...         --(application-specific config)</span><br><span class="line">      e2e/        ----(corresponding e2e tests)</span><br><span class="line">         src/     ----(e2e tests source)</span><br><span class="line">         ...      ----(e2e-specific config)</span><br><span class="line">      src/        --(source and support files for application)</span><br><span class="line">    my-lib/       --(a generated library)</span><br><span class="line">      ...         --(library-specific config)</span><br><span class="line">      src/        --source and support files for library)</span><br></pre></td></tr></table></figure><h2 id="必备插件"><a href="#必备插件" class="headerlink" title="必备插件"></a>必备插件</h2><h3 id="1-Nx-Console"><a href="#1-Nx-Console" class="headerlink" title="1 Nx Console"></a>1 <a href="https://marketplace.visualstudio.com/items?itemName=nrwl.angular-console">Nx Console</a></h3><blockquote><p>交互式UI 间接使用Angular cli </p></blockquote><p> <img src="https://user-gold-cdn.xitu.io/2020/7/23/17378d5daa0c4093?w=680&h=350&f=png&s=32549"></p><h3 id="2-Angular-Language-Service"><a href="#2-Angular-Language-Service" class="headerlink" title="2.Angular Language Service"></a>2.<a href="https://marketplace.visualstudio.com/items?itemName=Angular.ng-template">Angular Language Service</a></h3><blockquote><p>编辑器会自动检测到您正在打开Angular文件。</p></blockquote><p> <img src="https://user-gold-cdn.xitu.io/2020/7/23/17378d83481c55c5?w=917&h=480&f=gif&s=322179"></p><h3 id="3-Angular-Follow-Selector"><a href="#3-Angular-Follow-Selector" class="headerlink" title="3.Angular Follow Selector"></a>3.Angular Follow Selector</h3><p>  组件标签定位组件文件；或者样式，定位样式所在文件</p><h3 id="4-dev-tool-–-Augury"><a href="#4-dev-tool-–-Augury" class="headerlink" title="4. dev-tool – Augury"></a>4. dev-tool – Augury</h3><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>   Augury是最常用的开发人员工具扩展，用于调试和分析Google Chrome和Mozilla Firefox浏览器中的Angular应用程序。</p><h4 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h4><p>  Augury通过组件树和可视化调试工具帮助Angular开发人员可视化应用程序。开发人员可以立即洞悉其应用程序结构，变更检测和性能特征。</p><h4 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h4><p>   下方Angury官网有详细教程，这里就不班门弄斧了。</p><h4 id="Angury官网"><a href="#Angury官网" class="headerlink" title="Angury官网"></a><a href="https://augury.rangle.io/">Angury官网</a></h4><h3 id="5-TSLint"><a href="#5-TSLint" class="headerlink" title="5. TSLint"></a>5. <a href="https://marketplace.visualstudio.com/items?itemName=eg2.tslint">TSLint</a></h3><blockquote><p>angular 文件校验 </p></blockquote><p>  <img src="https://user-gold-cdn.xitu.io/2020/7/23/17378a1328b0cd81?w=1152&h=544&f=gif&s=800082"></p><h3 id="6-Auto-Import"><a href="#6-Auto-Import" class="headerlink" title="6. Auto Import"></a>6. <a href="https://marketplace.visualstudio.com/items?itemName=steoates.autoimport">Auto Import</a></h3><blockquote><p>code 联想，自动提示导入</p></blockquote><p> <img src="https://user-gold-cdn.xitu.io/2020/7/23/17378a1067a36055?w=1152&h=544&f=gif&s=834518"></p><h3 id="7-Angular-Snippets-Version-9"><a href="#7-Angular-Snippets-Version-9" class="headerlink" title="7.Angular Snippets (Version 9)"></a>7.<a href="https://marketplace.visualstudio.com/items?itemName=johnpapa.Angular2">Angular Snippets (Version 9)</a></h3><blockquote><p>written by the John Papa</p></blockquote><p><img src="https://user-gold-cdn.xitu.io/2020/7/23/17378a56cc2333c4?w=680&h=200&f=gif&s=29802"></p><blockquote><p>ngrx code 生成快捷键，提升coding效率</p></blockquote><h3 id="8-Angular-8-and-TypeScript-HTML-VS-Code-Snippets"><a href="#8-Angular-8-and-TypeScript-HTML-VS-Code-Snippets" class="headerlink" title="8.Angular 8 and TypeScript&#x2F;HTML VS Code Snippets"></a>8.<a href="https://marketplace.visualstudio.com/items?itemName=danwahlin.angular2-snippets">Angular 8 and TypeScript&#x2F;HTML VS Code Snippets</a></h3><blockquote><p>angular html、service 指令快捷生成</p></blockquote><blockquote><p>Windows:  Select Ctrl+P and then type: ext install angular2-snippets</p></blockquote><blockquote><p>Mac:      Select ⌘+P and then type: ext install angular2-snippets </p></blockquote><p><img src="https://user-gold-cdn.xitu.io/2020/7/23/17378afe728b916a?w=680&h=97&f=gif&s=14098"></p><h3 id="9-Angular2-Files"><a href="#9-Angular2-Files" class="headerlink" title="9. Angular2 Files"></a>9. Angular2 Files</h3><blockquote><p>ext install vscode-angular2-files</p></blockquote><blockquote><p> angular组件、service ui界面生成</p></blockquote><p><img src="https://user-gold-cdn.xitu.io/2020/7/23/17378b7a636feb5f?w=680&h=403&f=gif&s=68419"></p><h3 id="10-angular2-inline"><a href="#10-angular2-inline" class="headerlink" title="10.  angular2-inline"></a>10.  <a href="https://marketplace.visualstudio.com/items?itemName=natewallace.angular2-inline">angular2-inline</a></h3><blockquote><p>template 形式下html 高亮</p></blockquote><p><img src="https://user-gold-cdn.xitu.io/2020/7/23/17378b9096f92a51?w=458&h=613&f=png&s=100451"></p><h3 id="11-angular2-switcher"><a href="#11-angular2-switcher" class="headerlink" title="11.angular2-switcher"></a>11.<a href="https://marketplace.visualstudio.com/items?itemName=infinity1207.angular2-switcher">angular2-switcher</a></h3><blockquote><p>ts,css，html等同名文件快速切换</p></blockquote><blockquote><p>ext install angular2-switcher</p></blockquote><p><img src="https://user-gold-cdn.xitu.io/2020/7/23/17378c53bb2de0d2?w=1058&h=442&f=gif&s=389472"></p><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><h4 id="Angular-cli-1"><a href="#Angular-cli-1" class="headerlink" title="Angular cli"></a><a href="https://angular.io/cli">Angular cli</a></h4>]]></content>
      
      
      
        <tags>
            
            <tag> vscode </tag>
            
            <tag> 快捷键 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《angular8》- Rxjs 操作符理解才是王道</title>
      <link href="/2020/07/17/front_skills/angular/%E3%80%8Aangular8%E3%80%8B-%20Rxjs%20%E6%93%8D%E4%BD%9C%E7%AC%A6%E7%90%86%E8%A7%A3%E6%89%8D%E6%98%AF%E7%8E%8B%E9%81%93/"/>
      <url>/2020/07/17/front_skills/angular/%E3%80%8Aangular8%E3%80%8B-%20Rxjs%20%E6%93%8D%E4%BD%9C%E7%AC%A6%E7%90%86%E8%A7%A3%E6%89%8D%E6%98%AF%E7%8E%8B%E9%81%93/</url>
      
        <content type="html"><![CDATA[<h2 id="按照必选参数分类"><a href="#按照必选参数分类" class="headerlink" title="按照必选参数分类"></a>按照必选参数分类</h2><h3 id="无入参"><a href="#无入参" class="headerlink" title="无入参"></a>无入参</h3><h4 id="empty"><a href="#empty" class="headerlink" title="empty"></a>empty</h4><h4 id="interval"><a href="#interval" class="headerlink" title="interval"></a>interval</h4><h4 id="range"><a href="#range" class="headerlink" title="range"></a>range</h4><h4 id="timer"><a href="#timer" class="headerlink" title="timer"></a>timer</h4><h4 id="combineAll"><a href="#combineAll" class="headerlink" title="combineAll"></a>combineAll</h4><h4 id="concatAll"><a href="#concatAll" class="headerlink" title="concatAll"></a>concatAll</h4><h4 id="mergeAll"><a href="#mergeAll" class="headerlink" title="mergeAll"></a>mergeAll</h4><h4 id="switchAll"><a href="#switchAll" class="headerlink" title="switchAll"></a>switchAll</h4><h4 id="count"><a href="#count" class="headerlink" title="count"></a>count</h4><h4 id="max"><a href="#max" class="headerlink" title="max"></a>max</h4><h4 id="min"><a href="#min" class="headerlink" title="min"></a>min</h4><h4 id="dematerialize"><a href="#dematerialize" class="headerlink" title="dematerialize"></a>dematerialize</h4><h4 id="distinct"><a href="#distinct" class="headerlink" title="distinct"></a>distinct</h4><h4 id="distinctUntilChanged"><a href="#distinctUntilChanged" class="headerlink" title="distinctUntilChanged"></a>distinctUntilChanged</h4><h4 id="exhaust"><a href="#exhaust" class="headerlink" title="exhaust"></a>exhaust</h4><h4 id="first"><a href="#first" class="headerlink" title="first"></a>first</h4><h4 id="last"><a href="#last" class="headerlink" title="last"></a>last</h4><h4 id="isEmpty"><a href="#isEmpty" class="headerlink" title="isEmpty"></a>isEmpty</h4><h3 id="单一入参"><a href="#单一入参" class="headerlink" title="单一入参"></a>单一入参</h3><h4 id="bindCallback"><a href="#bindCallback" class="headerlink" title="bindCallback"></a>bindCallback</h4><h4 id="bindNodeCallback"><a href="#bindNodeCallback" class="headerlink" title="bindNodeCallback"></a>bindNodeCallback</h4><h4 id="defer"><a href="#defer" class="headerlink" title="defer"></a>defer</h4><h4 id="from"><a href="#from" class="headerlink" title="from"></a>from</h4><h4 id="fromEventPattern"><a href="#fromEventPattern" class="headerlink" title="fromEventPattern"></a>fromEventPattern</h4><h4 id="generate"><a href="#generate" class="headerlink" title="generate"></a>generate</h4><h4 id="iif"><a href="#iif" class="headerlink" title="iif"></a>iif</h4><h4 id="pairs"><a href="#pairs" class="headerlink" title="pairs"></a>pairs</h4><h4 id="throwError"><a href="#throwError" class="headerlink" title="throwError"></a>throwError</h4><h4 id="audit"><a href="#audit" class="headerlink" title="audit"></a>audit</h4><h4 id="auditTime"><a href="#auditTime" class="headerlink" title="auditTime"></a>auditTime</h4><h4 id="buffer"><a href="#buffer" class="headerlink" title="buffer"></a>buffer</h4><h4 id="bufferCount"><a href="#bufferCount" class="headerlink" title="bufferCount"></a>bufferCount</h4><h4 id="bufferTime"><a href="#bufferTime" class="headerlink" title="bufferTime"></a>bufferTime</h4><h4 id="bufferWhen"><a href="#bufferWhen" class="headerlink" title="bufferWhen"></a>bufferWhen</h4><h4 id="catchError"><a href="#catchError" class="headerlink" title="catchError"></a>catchError</h4><h4 id="concatMap"><a href="#concatMap" class="headerlink" title="concatMap"></a>concatMap</h4><h4 id="concatMapTo"><a href="#concatMapTo" class="headerlink" title="concatMapTo"></a>concatMapTo</h4><h4 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h4><h4 id="debounce"><a href="#debounce" class="headerlink" title="debounce"></a>debounce</h4><h4 id="debounceTime"><a href="#debounceTime" class="headerlink" title="debounceTime"></a>debounceTime</h4><h4 id="defaultIfEmpty"><a href="#defaultIfEmpty" class="headerlink" title="defaultIfEmpty"></a>defaultIfEmpty</h4><h4 id="delay"><a href="#delay" class="headerlink" title="delay"></a>delay</h4><h4 id="delayWhen"><a href="#delayWhen" class="headerlink" title="delayWhen"></a>delayWhen</h4><h4 id="distinctUntilKeyChanged"><a href="#distinctUntilKeyChanged" class="headerlink" title="distinctUntilKeyChanged"></a>distinctUntilKeyChanged</h4><h4 id="elementAt"><a href="#elementAt" class="headerlink" title="elementAt"></a>elementAt</h4><h4 id="every"><a href="#every" class="headerlink" title="every"></a>every</h4><h4 id="exhaustMap"><a href="#exhaustMap" class="headerlink" title="exhaustMap"></a>exhaustMap</h4><h4 id="expand"><a href="#expand" class="headerlink" title="expand"></a>expand</h4><h4 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h4><h4 id="find"><a href="#find" class="headerlink" title="find"></a>find</h4><h4 id="findIndex"><a href="#findIndex" class="headerlink" title="findIndex"></a>findIndex</h4><h4 id="groupBy"><a href="#groupBy" class="headerlink" title="groupBy"></a>groupBy</h4><h4 id="isEmpty-1"><a href="#isEmpty-1" class="headerlink" title="isEmpty"></a>isEmpty</h4><h4 id=""><a href="#" class="headerlink" title=""></a></h4><h3 id="多参数"><a href="#多参数" class="headerlink" title="多参数"></a>多参数</h3><h4 id="combineLatest"><a href="#combineLatest" class="headerlink" title="combineLatest"></a>combineLatest</h4><h4 id="concat"><a href="#concat" class="headerlink" title="concat"></a>concat</h4><h4 id="forkJoin"><a href="#forkJoin" class="headerlink" title="forkJoin"></a>forkJoin</h4><h4 id="fromEvent"><a href="#fromEvent" class="headerlink" title="fromEvent"></a>fromEvent</h4><h4 id="merge"><a href="#merge" class="headerlink" title="merge"></a>merge</h4><h4 id="of"><a href="#of" class="headerlink" title="of"></a>of</h4><h4 id="partition"><a href="#partition" class="headerlink" title="partition"></a>partition</h4><h4 id="race"><a href="#race" class="headerlink" title="race"></a>race</h4><h4 id="zip"><a href="#zip" class="headerlink" title="zip"></a>zip</h4><h4 id="bufferToggle"><a href="#bufferToggle" class="headerlink" title="bufferToggle"></a>bufferToggle</h4><h4 id="startWith"><a href="#startWith" class="headerlink" title="startWith"></a>startWith</h4><h4 id="-1"><a href="#-1" class="headerlink" title=""></a></h4><h4 id="-2"><a href="#-2" class="headerlink" title=""></a></h4><h2 id="按照api-import方式分类"><a href="#按照api-import方式分类" class="headerlink" title="按照api import方式分类"></a>按照api import方式分类</h2><h3 id="rxjs"><a href="#rxjs" class="headerlink" title="rxjs"></a>rxjs</h3><h4 id="bindCallback-1"><a href="#bindCallback-1" class="headerlink" title="bindCallback"></a>bindCallback</h4><h4 id="bindNodeCallback-1"><a href="#bindNodeCallback-1" class="headerlink" title="bindNodeCallback"></a>bindNodeCallback</h4><h4 id="combineLatest-1"><a href="#combineLatest-1" class="headerlink" title="combineLatest"></a>combineLatest</h4><h4 id="concat-1"><a href="#concat-1" class="headerlink" title="concat"></a>concat</h4><h4 id="defer-1"><a href="#defer-1" class="headerlink" title="defer"></a>defer</h4><h4 id="empty-1"><a href="#empty-1" class="headerlink" title="empty"></a>empty</h4><h4 id="forkJoin-1"><a href="#forkJoin-1" class="headerlink" title="forkJoin"></a>forkJoin</h4><h4 id="from-1"><a href="#from-1" class="headerlink" title="from"></a>from</h4><h4 id="fromEvent-1"><a href="#fromEvent-1" class="headerlink" title="fromEvent"></a>fromEvent</h4><h4 id="fromEventPattern-1"><a href="#fromEventPattern-1" class="headerlink" title="fromEventPattern"></a>fromEventPattern</h4><h4 id="generate-1"><a href="#generate-1" class="headerlink" title="generate"></a>generate</h4><h4 id="iif-1"><a href="#iif-1" class="headerlink" title="iif"></a>iif</h4><h4 id="interval-1"><a href="#interval-1" class="headerlink" title="interval"></a>interval</h4><h4 id="merge-1"><a href="#merge-1" class="headerlink" title="merge"></a>merge</h4><h4 id="never-deprecated"><a href="#never-deprecated" class="headerlink" title="never - deprecated"></a>never - deprecated</h4><h4 id="of-1"><a href="#of-1" class="headerlink" title="of"></a>of</h4><h4 id="pairs-1"><a href="#pairs-1" class="headerlink" title="pairs"></a>pairs</h4><h4 id="partition-1"><a href="#partition-1" class="headerlink" title="partition"></a>partition</h4><h4 id="race-1"><a href="#race-1" class="headerlink" title="race"></a>race</h4><h4 id="range-1"><a href="#range-1" class="headerlink" title="range"></a>range</h4><h4 id="throwError-1"><a href="#throwError-1" class="headerlink" title="throwError"></a>throwError</h4><h4 id="timer-1"><a href="#timer-1" class="headerlink" title="timer"></a>timer</h4><h4 id="zip-1"><a href="#zip-1" class="headerlink" title="zip"></a>zip</h4><h3 id="rxjs-operator"><a href="#rxjs-operator" class="headerlink" title="rxjs&#x2F;operator"></a>rxjs&#x2F;operator</h3><h4 id="audit-1"><a href="#audit-1" class="headerlink" title="audit"></a>audit</h4><h4 id="auditTime-1"><a href="#auditTime-1" class="headerlink" title="auditTime"></a>auditTime</h4><h4 id="buffer-1"><a href="#buffer-1" class="headerlink" title="buffer"></a>buffer</h4><h4 id="bufferCount-1"><a href="#bufferCount-1" class="headerlink" title="bufferCount"></a>bufferCount</h4><h4 id="bufferTime-1"><a href="#bufferTime-1" class="headerlink" title="bufferTime"></a>bufferTime</h4><h4 id="bufferToggle-1"><a href="#bufferToggle-1" class="headerlink" title="bufferToggle"></a>bufferToggle</h4><h4 id="bufferWhen-1"><a href="#bufferWhen-1" class="headerlink" title="bufferWhen"></a>bufferWhen</h4><h4 id="catchError-1"><a href="#catchError-1" class="headerlink" title="catchError"></a>catchError</h4><h4 id="combineAll-1"><a href="#combineAll-1" class="headerlink" title="combineAll"></a>combineAll</h4><h4 id="combineLatest-2"><a href="#combineLatest-2" class="headerlink" title="combineLatest"></a>combineLatest</h4><h4 id="concat-2"><a href="#concat-2" class="headerlink" title="concat"></a>concat</h4><h4 id="concatAll-1"><a href="#concatAll-1" class="headerlink" title="concatAll"></a>concatAll</h4><h4 id="concatMap-1"><a href="#concatMap-1" class="headerlink" title="concatMap"></a>concatMap</h4><h4 id="concatMapTo-1"><a href="#concatMapTo-1" class="headerlink" title="concatMapTo"></a>concatMapTo</h4><h4 id="count-1"><a href="#count-1" class="headerlink" title="count"></a>count</h4><h4 id="debounce-1"><a href="#debounce-1" class="headerlink" title="debounce"></a>debounce</h4><h4 id="debounceTime-1"><a href="#debounceTime-1" class="headerlink" title="debounceTime"></a>debounceTime</h4><h4 id="defaultIfEmpty-1"><a href="#defaultIfEmpty-1" class="headerlink" title="defaultIfEmpty"></a>defaultIfEmpty</h4><h4 id="delay-1"><a href="#delay-1" class="headerlink" title="delay"></a>delay</h4><h4 id="delayWhen-1"><a href="#delayWhen-1" class="headerlink" title="delayWhen"></a>delayWhen</h4><h4 id="dematerialize-1"><a href="#dematerialize-1" class="headerlink" title="dematerialize"></a>dematerialize</h4><h4 id="distinct-1"><a href="#distinct-1" class="headerlink" title="distinct"></a>distinct</h4><h4 id="distinctUntilChanged-1"><a href="#distinctUntilChanged-1" class="headerlink" title="distinctUntilChanged"></a>distinctUntilChanged</h4><h4 id="distinctUntilKeyChanged-1"><a href="#distinctUntilKeyChanged-1" class="headerlink" title="distinctUntilKeyChanged"></a>distinctUntilKeyChanged</h4><h4 id="elementAt-1"><a href="#elementAt-1" class="headerlink" title="elementAt"></a>elementAt</h4><h4 id="every-1"><a href="#every-1" class="headerlink" title="every"></a>every</h4><h4 id="exhaust-1"><a href="#exhaust-1" class="headerlink" title="exhaust"></a>exhaust</h4><h4 id="exhaustMap-1"><a href="#exhaustMap-1" class="headerlink" title="exhaustMap"></a>exhaustMap</h4><h4 id="expand-1"><a href="#expand-1" class="headerlink" title="expand"></a>expand</h4><h4 id="filter-1"><a href="#filter-1" class="headerlink" title="filter"></a>filter</h4><h4 id="find-1"><a href="#find-1" class="headerlink" title="find"></a>find</h4><h4 id="findIndex-1"><a href="#findIndex-1" class="headerlink" title="findIndex"></a>findIndex</h4><h4 id="first-1"><a href="#first-1" class="headerlink" title="first"></a>first</h4><h4 id="groupBy-1"><a href="#groupBy-1" class="headerlink" title="groupBy"></a>groupBy</h4><h4 id="ignoreElements"><a href="#ignoreElements" class="headerlink" title="ignoreElements"></a>ignoreElements</h4><h4 id="isEmpty-2"><a href="#isEmpty-2" class="headerlink" title="isEmpty"></a>isEmpty</h4><h4 id="last-1"><a href="#last-1" class="headerlink" title="last"></a>last</h4><h4 id="map"><a href="#map" class="headerlink" title="map"></a>map</h4><h4 id="mapTo"><a href="#mapTo" class="headerlink" title="mapTo"></a>mapTo</h4><h4 id="materialize"><a href="#materialize" class="headerlink" title="materialize"></a>materialize</h4><h4 id="max-1"><a href="#max-1" class="headerlink" title="max"></a>max</h4><h4 id="merge-2"><a href="#merge-2" class="headerlink" title="merge"></a>merge</h4><h4 id="mergeAll-1"><a href="#mergeAll-1" class="headerlink" title="mergeAll"></a>mergeAll</h4><h4 id="mergeMap"><a href="#mergeMap" class="headerlink" title="mergeMap"></a>mergeMap</h4><h4 id="flatMap"><a href="#flatMap" class="headerlink" title="flatMap"></a>flatMap</h4><h4 id="mergeMapTo"><a href="#mergeMapTo" class="headerlink" title="mergeMapTo"></a>mergeMapTo</h4><h4 id="mergeScan"><a href="#mergeScan" class="headerlink" title="mergeScan"></a>mergeScan</h4><h4 id="min-1"><a href="#min-1" class="headerlink" title="min"></a>min</h4><h4 id="multicast"><a href="#multicast" class="headerlink" title="multicast"></a>multicast</h4><h4 id="observeOn"><a href="#observeOn" class="headerlink" title="observeOn"></a>observeOn</h4><h4 id="onErrorResumeNext"><a href="#onErrorResumeNext" class="headerlink" title="onErrorResumeNext"></a>onErrorResumeNext</h4><h4 id="pairwise"><a href="#pairwise" class="headerlink" title="pairwise"></a>pairwise</h4><h4 id="partition-2"><a href="#partition-2" class="headerlink" title="partition"></a>partition</h4><h4 id="pluck"><a href="#pluck" class="headerlink" title="pluck"></a>pluck</h4><h4 id="publish"><a href="#publish" class="headerlink" title="publish"></a>publish</h4><h4 id="publishBehavior"><a href="#publishBehavior" class="headerlink" title="publishBehavior"></a>publishBehavior</h4><h4 id="publishLast"><a href="#publishLast" class="headerlink" title="publishLast"></a>publishLast</h4><h4 id="publishReplay"><a href="#publishReplay" class="headerlink" title="publishReplay"></a>publishReplay</h4><h4 id="race-2"><a href="#race-2" class="headerlink" title="race"></a>race</h4><h4 id="reduce-1"><a href="#reduce-1" class="headerlink" title="reduce"></a>reduce</h4><h4 id="repeat"><a href="#repeat" class="headerlink" title="repeat"></a>repeat</h4><h4 id="repeatWhen"><a href="#repeatWhen" class="headerlink" title="repeatWhen"></a>repeatWhen</h4><h4 id="retry"><a href="#retry" class="headerlink" title="retry"></a>retry</h4><h4 id="retryWhen"><a href="#retryWhen" class="headerlink" title="retryWhen"></a>retryWhen</h4><h4 id="refCount"><a href="#refCount" class="headerlink" title="refCount"></a>refCount</h4><h4 id="sample"><a href="#sample" class="headerlink" title="sample"></a>sample</h4><h4 id="sampleTime"><a href="#sampleTime" class="headerlink" title="sampleTime"></a>sampleTime</h4><h4 id="scan"><a href="#scan" class="headerlink" title="scan"></a>scan</h4><h4 id="sequenceEqual"><a href="#sequenceEqual" class="headerlink" title="sequenceEqual"></a>sequenceEqual</h4><h4 id="share"><a href="#share" class="headerlink" title="share"></a>share</h4><h4 id="shareReplay"><a href="#shareReplay" class="headerlink" title="shareReplay"></a>shareReplay</h4><h4 id="single"><a href="#single" class="headerlink" title="single"></a>single</h4><h4 id="skip"><a href="#skip" class="headerlink" title="skip"></a>skip</h4><h4 id="skipLast"><a href="#skipLast" class="headerlink" title="skipLast"></a>skipLast</h4><h4 id="skipUntil"><a href="#skipUntil" class="headerlink" title="skipUntil"></a>skipUntil</h4><h4 id="skipWhile"><a href="#skipWhile" class="headerlink" title="skipWhile"></a>skipWhile</h4><h4 id="startWith-1"><a href="#startWith-1" class="headerlink" title="startWith"></a>startWith</h4><h4 id="subscribeOn"><a href="#subscribeOn" class="headerlink" title="subscribeOn"></a>subscribeOn</h4><h4 id="switchAll-1"><a href="#switchAll-1" class="headerlink" title="switchAll"></a>switchAll</h4><h4 id="switchMap"><a href="#switchMap" class="headerlink" title="switchMap"></a>switchMap</h4><h4 id="switchMapTo"><a href="#switchMapTo" class="headerlink" title="switchMapTo"></a>switchMapTo</h4><h4 id="take"><a href="#take" class="headerlink" title="take"></a>take</h4><h4 id="takeLast"><a href="#takeLast" class="headerlink" title="takeLast"></a>takeLast</h4><h4 id="takeUntil"><a href="#takeUntil" class="headerlink" title="takeUntil"></a>takeUntil</h4><h4 id="takeWhile"><a href="#takeWhile" class="headerlink" title="takeWhile"></a>takeWhile</h4><h4 id="tap"><a href="#tap" class="headerlink" title="tap"></a>tap</h4><h4 id="throttle"><a href="#throttle" class="headerlink" title="throttle"></a>throttle</h4><h4 id="throttleTime"><a href="#throttleTime" class="headerlink" title="throttleTime"></a>throttleTime</h4><h4 id="throwIfEmpty"><a href="#throwIfEmpty" class="headerlink" title="throwIfEmpty"></a>throwIfEmpty</h4><h4 id="timeInterval"><a href="#timeInterval" class="headerlink" title="timeInterval"></a>timeInterval</h4><h4 id="timeout"><a href="#timeout" class="headerlink" title="timeout"></a>timeout</h4><h4 id="timeoutWith"><a href="#timeoutWith" class="headerlink" title="timeoutWith"></a>timeoutWith</h4><h4 id="timestamp"><a href="#timestamp" class="headerlink" title="timestamp"></a>timestamp</h4><h4 id="toArray"><a href="#toArray" class="headerlink" title="toArray"></a>toArray</h4><h4 id="window"><a href="#window" class="headerlink" title="window"></a>window</h4><h4 id="windowCount"><a href="#windowCount" class="headerlink" title="windowCount"></a>windowCount</h4><h4 id="windowTime"><a href="#windowTime" class="headerlink" title="windowTime"></a>windowTime</h4><h4 id="windowToggle"><a href="#windowToggle" class="headerlink" title="windowToggle"></a>windowToggle</h4><h4 id="windowWhen"><a href="#windowWhen" class="headerlink" title="windowWhen"></a>windowWhen</h4><h4 id="withLatestFrom"><a href="#withLatestFrom" class="headerlink" title="withLatestFrom"></a>withLatestFrom</h4><h4 id="zip-2"><a href="#zip-2" class="headerlink" title="zip"></a>zip</h4><h4 id="zipAll"><a href="#zipAll" class="headerlink" title="zipAll"></a>zipAll</h4><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><h4 id="Rxjs"><a href="#Rxjs" class="headerlink" title="Rxjs"></a><a href="https://www.learnrxjs.io/learn-rxjs/operators/combination/combinelatest">Rxjs</a></h4>]]></content>
      
      
      
        <tags>
            
            <tag> angular </tag>
            
            <tag> rxjs </tag>
            
            <tag> operators </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《angular8》- Rxjs 操作符实践指南</title>
      <link href="/2020/07/16/front_skills/angular/%E3%80%8Aangular8%E3%80%8B-%20Rxjs%20%E6%93%8D%E4%BD%9C%E7%AC%A6%E5%AE%9E%E8%B7%B5%E6%8C%87%E5%8D%97/"/>
      <url>/2020/07/16/front_skills/angular/%E3%80%8Aangular8%E3%80%8B-%20Rxjs%20%E6%93%8D%E4%BD%9C%E7%AC%A6%E5%AE%9E%E8%B7%B5%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<ul><li>本文目的在于介绍rxjs operators，总结下个人code实践和理解，以备以后个人查阅,code 采用ts+rollup打包方式</li><li>具体可以移步下方传送通道</li></ul><h2 id="Rxjs-入门"><a href="#Rxjs-入门" class="headerlink" title="Rxjs 入门"></a>Rxjs 入门</h2><p> <a href="">传送门</a></p><h2 id="操作符实战"><a href="#操作符实战" class="headerlink" title="操作符实战"></a>操作符实战</h2><h3 id="1-工具方法型"><a href="#1-工具方法型" class="headerlink" title="1.工具方法型"></a>1.工具方法型</h3><h4 id="count"><a href="#count" class="headerlink" title="count"></a>count</h4><ul><li>统计总数  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import &#123; range &#125; from &#x27;rxjs&#x27;;</span><br><span class="line">import &#123; count &#125; from &#x27;rxjs/operators&#x27;;</span><br><span class="line"></span><br><span class="line">const numbers = range(1, 7);</span><br><span class="line">const result = numbers.pipe(count(i =&gt; i % 2 === 1));</span><br><span class="line">result.subscribe(x =&gt; console.log(x));</span><br><span class="line">// Results in:</span><br><span class="line">// 4</span><br></pre></td></tr></table></figure></li></ul><h4 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h4><ul><li>累计  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import &#123; fromEvent, interval &#125; from &#x27;rxjs&#x27;;</span><br><span class="line">import &#123; reduce, takeUntil, mapTo &#125; from &#x27;rxjs/operators&#x27;;</span><br><span class="line"></span><br><span class="line">const clicksInFiveSeconds = fromEvent(document, &#x27;click&#x27;).pipe(</span><br><span class="line">  takeUntil(interval(5000)),</span><br><span class="line">);</span><br><span class="line">const ones = clicksInFiveSeconds.pipe(mapTo(1));</span><br><span class="line">const seed = 0;</span><br><span class="line">const count = ones.pipe(reduce((acc, one) =&gt; acc + one, seed));</span><br><span class="line">count.subscribe(x =&gt; console.log(x));</span><br></pre></td></tr></table></figure></li></ul><h4 id="max-min"><a href="#max-min" class="headerlink" title="max\min"></a>max\min</h4>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">  import &#123; of,merge &#125; from &#x27;rxjs&#x27;;</span><br><span class="line">  import &#123; max,min,tap &#125; from &#x27;rxjs/operators&#x27;;</span><br><span class="line"></span><br><span class="line">  const obs$ = of(5, 4, 7, 2, 8);</span><br><span class="line">  merge(</span><br><span class="line">      obs$.pipe(max()),</span><br><span class="line">      obs$.pipe(min()),</span><br><span class="line">  ).pipe(tap((val) =&gt; &#123;</span><br><span class="line">      console.log(&quot;result....&quot;,val);</span><br><span class="line">  &#125;)).subscribe(console.log);</span><br><span class="line"></span><br><span class="line">//output</span><br><span class="line">result.... 8</span><br><span class="line">8</span><br><span class="line">result.... 2</span><br><span class="line">2</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="tap"><a href="#tap" class="headerlink" title="tap"></a>tap</h4><blockquote><p>日志输出<br>of 是一个个输出的</p></blockquote>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">  import &#123; of,merge &#125; from &#x27;rxjs&#x27;;</span><br><span class="line">  import &#123; max,min,tap &#125; from &#x27;rxjs/operators&#x27;;</span><br><span class="line"></span><br><span class="line">  const obs$ = of(5, 4, 7, 2, 8);</span><br><span class="line">  obs$.pipe(tap(&#123;</span><br><span class="line">      next:(val) =&gt; &#123;</span><br><span class="line">          console.log(&quot;val&quot;,val);</span><br><span class="line">      &#125;,</span><br><span class="line">      error:() =&gt; &#123;</span><br><span class="line"></span><br><span class="line">      &#125;,</span><br><span class="line">      complete:() =&gt; &#123;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;)).subscribe(console.log)</span><br><span class="line"></span><br><span class="line">//output</span><br><span class="line">val 5</span><br><span class="line">5</span><br><span class="line">val 4</span><br><span class="line">4</span><br><span class="line">val 7</span><br><span class="line">7</span><br><span class="line">val 2</span><br><span class="line">2</span><br></pre></td></tr></table></figure><h4 id="repeat"><a href="#repeat" class="headerlink" title="repeat"></a>repeat</h4><blockquote><p>重复 &#x3D;&#x3D;&#x3D; 多次订阅</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">import &#123; tap &#125; from &#x27;rxjs/operators&#x27;;</span><br><span class="line">// RxJS v6+</span><br><span class="line">import &#123; repeat, delay &#125; from &#x27;rxjs/operators&#x27;;</span><br><span class="line">import &#123; of &#125; from &#x27;rxjs&#x27;;</span><br><span class="line"></span><br><span class="line">const delayedThing = of(&#x27;delayed value&#x27;).pipe(</span><br><span class="line">        tap(() =&gt; &#123;</span><br><span class="line">            console.log(&quot;time..1.&quot;,new Date().toLocaleTimeString());</span><br><span class="line">        &#125;),</span><br><span class="line">        delay(2000)</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">delayedThing</span><br><span class="line">  .pipe(</span><br><span class="line">    tap(() =&gt; &#123;</span><br><span class="line">        console.log(&quot;time...2&quot;,new Date().toLocaleTimeString());</span><br><span class="line">    &#125;),</span><br><span class="line">      repeat(3)</span><br><span class="line">    )</span><br><span class="line">  .subscribe(console.log);</span><br><span class="line"></span><br><span class="line">//output </span><br><span class="line">time..1. 4:42:45 PM</span><br><span class="line">time...2 4:42:47 PM</span><br><span class="line">delayed value</span><br><span class="line">time..1. 4:42:47 PM</span><br><span class="line">time...2 4:42:49 PM</span><br><span class="line">delayed value</span><br><span class="line">time..1. 4:42:49 PM</span><br><span class="line">time...2 4:42:51 PM</span><br><span class="line">delayed value</span><br></pre></td></tr></table></figure><h4 id="subscribeOn，-observeOn"><a href="#subscribeOn，-observeOn" class="headerlink" title="subscribeOn， observeOn"></a>subscribeOn， observeOn</h4><ul><li>调整执行时机，  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">import &#123; of, merge &#125; from &#x27;rxjs&#x27;;</span><br><span class="line"></span><br><span class="line">const a = of(1, 2, 3, 4);</span><br><span class="line">const b = of(5, 6, 7, 8, 9);</span><br><span class="line">merge(a, b).subscribe(console.log);</span><br><span class="line">// 1 2 3 4 5 6 7 8 9</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import &#123; of, merge, asyncScheduler &#125; from &#x27;rxjs&#x27;;</span><br><span class="line">import &#123; subscribeOn &#125; from &#x27;rxjs/operators&#x27;;</span><br><span class="line"></span><br><span class="line">const a = of(1, 2, 3, 4).pipe(subscribeOn(asyncScheduler));</span><br><span class="line">const b = of(5, 6, 7, 8, 9);</span><br><span class="line">merge(a, b).subscribe(console.log);</span><br><span class="line">//5 6 7 8 9 1 2 3 4</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import &#123; interval &#125; from &#x27;rxjs&#x27;;</span><br><span class="line">import &#123; observeOn &#125; from &#x27;rxjs/operators&#x27;;</span><br><span class="line"></span><br><span class="line">const intervals = interval(10);                // Intervals are scheduled</span><br><span class="line">                                              // with async scheduler by default...</span><br><span class="line">intervals.pipe(</span><br><span class="line">  observeOn(animationFrameScheduler),          // ...but we will observe on animationFrame</span><br><span class="line">)                                              // scheduler to ensure smooth animation.</span><br><span class="line">.subscribe(val =&gt; &#123;</span><br><span class="line">  someDiv.style.height = val + &#x27;px&#x27;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h4 id="materialize"><a href="#materialize" class="headerlink" title="materialize"></a>materialize</h4><ul><li>用默认对象包箱, dematerialize 开箱  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import &#123; of &#125; from &#x27;rxjs&#x27;;</span><br><span class="line">import &#123; materialize, map &#125; from &#x27;rxjs/operators&#x27;;</span><br><span class="line"></span><br><span class="line">const letters = of(&#x27;a&#x27;, &#x27;b&#x27;, &#x27;13&#x27;, &#x27;d&#x27;);</span><br><span class="line">const upperCase = letters.pipe(map(x =&gt; x.toUpperCase()));</span><br><span class="line">const materialized = upperCase.pipe(materialize());</span><br><span class="line">materialized.subscribe(x =&gt; console.log(x));</span><br><span class="line"></span><br><span class="line">Notification &#123; kind: &#x27;N&#x27;, value: &#x27;A&#x27;, error: undefined, hasValue: true &#125;</span><br><span class="line">Notification &#123; kind: &#x27;N&#x27;, value: &#x27;B&#x27;, error: undefined, hasValue: true &#125;</span><br><span class="line">Notification &#123; kind: &#x27;N&#x27;, value: &#x27;13&#x27;, error: undefined, hasValue: true &#125;</span><br><span class="line">Notification &#123; kind: &#x27;N&#x27;, value: &#x27;D&#x27;, error: undefined, hasValue: true &#125;</span><br><span class="line">Notification &#123; kind: &#x27;C&#x27;, value: undefined, error: undefined, hasValue: false &#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="timestamp"><a href="#timestamp" class="headerlink" title="timestamp"></a>timestamp</h4><ul><li>添加时间戳    <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> import &#123; of &#125; from &#x27;rxjs&#x27;;</span><br><span class="line"> import &#123; materialize, map, timestamp, tap &#125; from &#x27;rxjs/operators&#x27;;</span><br><span class="line"></span><br><span class="line"> const letters = of(&#x27;a&#x27;, &#x27;b&#x27;, &#x27;13&#x27;, &#x27;d&#x27;);</span><br><span class="line"></span><br><span class="line"> const times = letters.pipe(timestamp());</span><br><span class="line"> times.subscribe(res =&gt; &#123;</span><br><span class="line">     console.log(&quot;res...&quot;,res)</span><br><span class="line"> &#125;);</span><br><span class="line"></span><br><span class="line">//output </span><br><span class="line"> res... Timestamp &#123; value: &#x27;a&#x27;, timestamp: 1594074567694 &#125;</span><br><span class="line"> res... Timestamp &#123; value: &#x27;b&#x27;, timestamp: 1594074567700 &#125;</span><br><span class="line"> res... Timestamp &#123; value: &#x27;13&#x27;, timestamp: 1594074567700 &#125;</span><br><span class="line"> res... Timestamp &#123; value: &#x27;d&#x27;, timestamp: 1594074567700 &#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="toArray"><a href="#toArray" class="headerlink" title="toArray"></a>toArray</h4><blockquote><p>最终结果toArray，取决于source是一个个产生的，map,filter,interval<br> <img src="https://user-gold-cdn.xitu.io/2020/7/17/17359bee0335b95b?w=680&h=287&f=png&s=30606" width="450" height="300"></p></blockquote> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import &#123; interval &#125; from &#x27;rxjs&#x27;;</span><br><span class="line">import &#123; toArray, take &#125; from &#x27;rxjs/operators&#x27;;</span><br><span class="line"></span><br><span class="line">const source = interval(1000);</span><br><span class="line">const example = source.pipe(</span><br><span class="line">  take(10),</span><br><span class="line">  toArray()</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">const subscribe = example.subscribe(val =&gt; console.log(val));</span><br><span class="line"></span><br><span class="line">// output: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span><br></pre></td></tr></table></figure><blockquote><p>结合 filter、map</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">import &#123; from &#125; from &#x27;rxjs&#x27;</span><br><span class="line">import &#123; filter , tap, toArray, map &#125; from &#x27;rxjs/operators&#x27;</span><br><span class="line"></span><br><span class="line">const arr = [&#123;</span><br><span class="line">    a:1,</span><br><span class="line">    b:2,</span><br><span class="line">    c:3</span><br><span class="line">&#125;,&#123;</span><br><span class="line">    a:2,</span><br><span class="line">    b:4,</span><br><span class="line">    c:5,</span><br><span class="line">&#125;,&#123;</span><br><span class="line">    a:7,</span><br><span class="line">    b:10,</span><br><span class="line">    c:10</span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line">from(arr).pipe(</span><br><span class="line">    map((item) =&gt; &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            a:item.a,</span><br><span class="line">            b:item.b * 2,</span><br><span class="line">            c: item.c</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;),</span><br><span class="line">    tap((val) =&gt; &#123;</span><br><span class="line">        console.log(&quot;map result ....&quot;,val);</span><br><span class="line">    &#125;),</span><br><span class="line">    toArray()</span><br><span class="line">).subscribe(console.log)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">from(arr).pipe(</span><br><span class="line">    filter( (item) =&gt; &#123;</span><br><span class="line">        return item.a &gt; 1;</span><br><span class="line">    &#125;),</span><br><span class="line">    tap( (val) =&gt; &#123;</span><br><span class="line">        console.log(&quot;the result is &quot;,val);</span><br><span class="line">    &#125;),</span><br><span class="line">    toArray(),</span><br><span class="line">).subscribe(console.log)</span><br></pre></td></tr></table></figure><h3 id="延迟类"><a href="#延迟类" class="headerlink" title="延迟类"></a>延迟类</h3><h4 id="delay"><a href="#delay" class="headerlink" title="delay"></a>delay</h4><ul><li>延迟执行，但是忽略error ?    <img src="https://user-gold-cdn.xitu.io/2020/7/17/17359bee04ec6430?w=1280&h=540&f=png&s=40648" width="450" height="300"/></li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import &#123; of &#125; from &#x27;rxjs&#x27;;</span><br><span class="line">import &#123; tap, delay &#125; from &#x27;rxjs/operators&#x27;;</span><br><span class="line"></span><br><span class="line">const obs$ = of([1,2]);</span><br><span class="line">obs$.pipe(tap(res =&gt; &#123;</span><br><span class="line">    console.log(&quot;get value from of....&quot;,new Date().toLocaleTimeString());</span><br><span class="line">&#125;),delay(2000),tap(() =&gt; &#123; # 延迟执行，也可以变成随机延迟。   delayWhen(event =&gt; interval(Math.random() * 5000))</span><br><span class="line">    console.log(&quot;get value from of....&quot;,new Date().toLocaleTimeString());</span><br><span class="line">&#125;)).subscribe(res =&gt; &#123;</span><br><span class="line">    console.log(&quot;of res...;.&quot;,res);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//output</span><br><span class="line">get value from of.... 7:52:27 AM</span><br><span class="line">get value from of.... 7:52:29 AM</span><br><span class="line">of res...;. [ 1, 2 ]</span><br></pre></td></tr></table></figure><h4 id="delayWhen"><a href="#delayWhen" class="headerlink" title="delayWhen"></a>delayWhen</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import &#123; interval, timer &#125; from &#x27;rxjs&#x27;;</span><br><span class="line">import &#123; delayWhen &#125; from &#x27;rxjs/operators&#x27;;</span><br><span class="line"></span><br><span class="line">const message = interval(1000);</span><br><span class="line">const delayForFiveSeconds = () =&gt; timer(5000);</span><br><span class="line">const delayWhenExample = message.pipe(delayWhen(delayForFiveSeconds));</span><br><span class="line">const subscribe = delayWhenExample.subscribe(val =&gt; console.log(val));</span><br><span class="line"></span><br><span class="line">//output</span><br><span class="line">5s延迟....</span><br><span class="line"></span><br><span class="line">0</span><br><span class="line">1</span><br><span class="line">2</span><br></pre></td></tr></table></figure><h4 id="timeout、timeInterval"><a href="#timeout、timeInterval" class="headerlink" title="timeout、timeInterval"></a>timeout、timeInterval</h4><ul><li>timeInterval 输出对象，timeout输出值 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"> import &#123; timeInterval, timeout &#125; from &quot;rxjs/operators&quot;;</span><br><span class="line"> import &#123; interval &#125; from &quot;rxjs&quot;;</span><br><span class="line"></span><br><span class="line"> const seconds = interval(1000);</span><br><span class="line"></span><br><span class="line"> seconds.pipe(timeInterval())</span><br><span class="line"> .subscribe(</span><br><span class="line">     value =&gt; &#123;</span><br><span class="line">         console.log(&quot;time.....&quot;);</span><br><span class="line">         console.log(value)</span><br><span class="line">     &#125;,</span><br><span class="line">     err =&gt; console.log(err),</span><br><span class="line"> );</span><br><span class="line"></span><br><span class="line"> seconds.pipe(timeout(1100)) # 900小于间隔1000，会忽略，不输出值</span><br><span class="line"> .subscribe(</span><br><span class="line">     value =&gt; &#123;</span><br><span class="line">         console.log(&quot;out.....&quot;);</span><br><span class="line">         console.log(value)</span><br><span class="line">     &#125;,</span><br><span class="line">     err =&gt; console.log(err),</span><br><span class="line"> );</span><br><span class="line"></span><br><span class="line">//output</span><br><span class="line"> time.....</span><br><span class="line"> TimeInterval &#123; value: 0, interval: 1007 &#125;</span><br><span class="line"> out.....</span><br><span class="line"> 0</span><br><span class="line"> time.....</span><br><span class="line"> TimeInterval &#123; value: 1, interval: 1005 &#125;</span><br><span class="line"> out.....</span><br><span class="line"> 1</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h4 id="timeoutWith"><a href="#timeoutWith" class="headerlink" title="timeoutWith"></a>timeoutWith</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import &#123; interval &#125; from &#x27;rxjs&#x27;;</span><br><span class="line">import &#123; timeoutWith &#125; from &#x27;rxjs/operators&#x27;</span><br><span class="line">import &#123; of &#125; from &#x27;rxjs&#x27;;</span><br><span class="line"></span><br><span class="line">const first$ = interval(3000);</span><br><span class="line">const second$ = of(&#x27;go to the default&#x27;);</span><br><span class="line">first$.pipe(timeoutWith(2000,second$)).subscribe(console.log) # 2s内必须获取到数据，否则走默认值</span><br><span class="line">//output</span><br><span class="line">go to the default</span><br></pre></td></tr></table></figure><h4 id="interval"><a href="#interval" class="headerlink" title="interval"></a>interval</h4><blockquote><p>异步产生数据</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import &#123; interval &#125; from &#x27;rxjs&#x27;;</span><br><span class="line">import &#123; take &#125; from &#x27;rxjs/operators&#x27;;</span><br><span class="line"></span><br><span class="line">const numbers = interval(1000);</span><br><span class="line"></span><br><span class="line">const takeFourNumbers = numbers.pipe(take(4));</span><br><span class="line"></span><br><span class="line">takeFourNumbers.subscribe(x =&gt; console.log(&#x27;Next: &#x27;, x));</span><br><span class="line"></span><br><span class="line">// Logs:</span><br><span class="line">// Next: 0</span><br><span class="line">// Next: 1</span><br><span class="line">// Next: 2</span><br><span class="line">// Next: 3</span><br></pre></td></tr></table></figure><h4 id="timer"><a href="#timer" class="headerlink" title="timer"></a>timer</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import &#123; timer &#125; from &#x27;rxjs&#x27;;</span><br><span class="line"></span><br><span class="line">const numbers = timer(3000, 1000);</span><br><span class="line">numbers.subscribe(x =&gt; console.log(x));</span><br></pre></td></tr></table></figure><h3 id="2-创造型"><a href="#2-创造型" class="headerlink" title="2.创造型"></a>2.创造型</h3><h4 id="of-单一输出"><a href="#of-单一输出" class="headerlink" title="of - 单一输出"></a>of - 单一输出</h4><blockquote><p>同步产生数据<br>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import &#123; of &#125; from &#x27;rxjs&#x27;;</span><br><span class="line"></span><br><span class="line">of([1,2,3])</span><br><span class="line">.subscribe(</span><br><span class="line">  next =&gt; console.log(&#x27;next:&#x27;, next),</span><br><span class="line">  err =&gt; console.log(&#x27;error:&#x27;, err),</span><br><span class="line">  () =&gt; console.log(&#x27;the end&#x27;),</span><br><span class="line">);</span><br><span class="line">// result:</span><br><span class="line">// &#x27;next: [1,2,3]&#x27;</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="from-拆分输出"><a href="#from-拆分输出" class="headerlink" title="from - 拆分输出"></a>from - 拆分输出</h4><blockquote><p>同步产生数据<br>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import &#123; from, asyncScheduler &#125; from &#x27;rxjs&#x27;;</span><br><span class="line"></span><br><span class="line">console.log(&#x27;start&#x27;);</span><br><span class="line"></span><br><span class="line">const array = [10, 20, 30];</span><br><span class="line">const result = from(array, asyncScheduler);</span><br><span class="line"></span><br><span class="line">result.subscribe(x =&gt; console.log(x));</span><br><span class="line"></span><br><span class="line">console.log(&#x27;end&#x27;);</span><br><span class="line"></span><br><span class="line">// Logs:</span><br><span class="line">// start</span><br><span class="line">// end</span><br><span class="line">// 10</span><br><span class="line">// 20</span><br><span class="line">// 30</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="ajax"><a href="#ajax" class="headerlink" title="ajax"></a>ajax</h4><blockquote><p>异步产生数据</p></blockquote><ul><li>ajax   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import &#123; ajax &#125; from &#x27;rxjs/ajax&#x27;;</span><br><span class="line">import &#123; map, catchError &#125; from &#x27;rxjs/operators&#x27;;</span><br><span class="line">import &#123; of &#125; from &#x27;rxjs&#x27;;</span><br><span class="line"></span><br><span class="line">const obs$ = ajax(`https://api.github.com/users?per_page=5`).pipe(</span><br><span class="line">  map(userResponse =&gt; console.log(&#x27;users: &#x27;, userResponse)),</span><br><span class="line">  catchError(error =&gt; &#123;</span><br><span class="line">    console.log(&#x27;error: &#x27;, error);</span><br><span class="line">    return of(error);</span><br><span class="line">  &#125;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li>getJson   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import &#123; ajax &#125; from &#x27;rxjs/ajax&#x27;;</span><br><span class="line">import &#123; map, catchError &#125; from &#x27;rxjs/operators&#x27;;</span><br><span class="line">import &#123; of &#125; from &#x27;rxjs&#x27;;</span><br><span class="line"></span><br><span class="line">const obs$ = ajax.getJSON(`https://api.github.com/users?per_page=5`).pipe(</span><br><span class="line">  map(userResponse =&gt; console.log(&#x27;users: &#x27;, userResponse)),</span><br><span class="line">  catchError(error =&gt; &#123;</span><br><span class="line">    console.log(&#x27;error: &#x27;, error);</span><br><span class="line">    return of(error);</span><br><span class="line">  &#125;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li>类jquery写法   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">import &#123; ajax &#125; from &#x27;rxjs/ajax&#x27;;</span><br><span class="line">import &#123; of &#125; from &#x27;rxjs&#x27;;</span><br><span class="line"></span><br><span class="line">const users = ajax(&#123;</span><br><span class="line">  url: &#x27;https://httpbin.org/delay/2&#x27;,</span><br><span class="line">  method: &#x27;POST&#x27;,</span><br><span class="line">  headers: &#123;</span><br><span class="line">    &#x27;Content-Type&#x27;: &#x27;application/json&#x27;,</span><br><span class="line">    &#x27;rxjs-custom-header&#x27;: &#x27;Rxjs&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  body: &#123;</span><br><span class="line">    rxjs: &#x27;Hello World!&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;).pipe(</span><br><span class="line">  map(response =&gt; console.log(&#x27;response: &#x27;, response)),</span><br><span class="line">  catchError(error =&gt; &#123;</span><br><span class="line">    console.log(&#x27;error: &#x27;, error);</span><br><span class="line">    return of(error);</span><br><span class="line">  &#125;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-转换型"><a href="#3-转换型" class="headerlink" title="3.转换型"></a>3.转换型</h3><h4 id="mergeMap-map-mergeAll"><a href="#mergeMap-map-mergeAll" class="headerlink" title="mergeMap &#x3D; map + mergeAll"></a>mergeMap &#x3D; map + mergeAll</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import &#123; of, interval &#125; from &#x27;rxjs&#x27;;</span><br><span class="line">import &#123; mergeMap, map &#125; from &#x27;rxjs/operators&#x27;;</span><br><span class="line"></span><br><span class="line">const letters = of(&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;);</span><br><span class="line">const result = letters.pipe(</span><br><span class="line">  mergeMap(x =&gt; interval(1000).pipe(map(i =&gt; x+i))),</span><br><span class="line">);</span><br><span class="line">result.subscribe(x =&gt; console.log(x));</span><br><span class="line"></span><br><span class="line">//output</span><br><span class="line">a0</span><br><span class="line">b0</span><br><span class="line">c0</span><br><span class="line">a1</span><br><span class="line">b1</span><br><span class="line">c1</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="concatMap-map-concatAll"><a href="#concatMap-map-concatAll" class="headerlink" title="concatMap &#x3D; map + concatAll"></a>concatMap &#x3D; map + concatAll</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">import &#123; of &#125; from &#x27;rxjs&#x27;;</span><br><span class="line">import &#123; concatMap, delay, mergeMap &#125; from &#x27;rxjs/operators&#x27;;</span><br><span class="line"></span><br><span class="line">const source = of(2000, 1000);</span><br><span class="line">// map value from source into inner observable, when complete emit result and move to next</span><br><span class="line">const example = source.pipe(</span><br><span class="line">  concatMap(val =&gt; of(`Delayed by: $&#123;val&#125;ms`).pipe(delay(val)))</span><br><span class="line">);</span><br><span class="line">const subscribe = example.subscribe(val =&gt;</span><br><span class="line">  console.log(`With concatMap: $&#123;val&#125;`)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">const mergeMapExample = source</span><br><span class="line">  .pipe(</span><br><span class="line">    // just so we can log this after the first example has run</span><br><span class="line">    delay(5000),</span><br><span class="line">    mergeMap(val =&gt; of(`Delayed by: $&#123;val&#125;ms`).pipe(delay(val)))</span><br><span class="line">  )</span><br><span class="line">  .subscribe(val =&gt; console.log(`With mergeMap: $&#123;val&#125;`));</span><br><span class="line"></span><br><span class="line">  //output</span><br><span class="line">// With concatMap: Delayed by: 2000ms</span><br><span class="line">// With concatMap: Delayed by: 1000ms</span><br><span class="line">// With mergeMap: Delayed by: 1000ms  1s延迟短，提前输出</span><br><span class="line">// With mergeMap: Delayed by: 2000ms</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="switchMap-map-switchAll"><a href="#switchMap-map-switchAll" class="headerlink" title="switchMap &#x3D; map + switchAll"></a>switchMap &#x3D; map + switchAll</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">// RxJS v6+</span><br><span class="line">import &#123; timer, interval, of &#125; from &#x27;rxjs&#x27;;</span><br><span class="line">import &#123; switchMap, tap &#125; from &#x27;rxjs/operators&#x27;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">console.log(&quot;time 0....&quot;,new Date().toLocaleTimeString());</span><br><span class="line">timer(1000,4000).pipe( //延迟一段时间，产生自增的整数</span><br><span class="line"> tap(() =&gt; &#123;</span><br><span class="line">     console.log(&quot;time 1....&quot;,new Date().toLocaleTimeString());</span><br><span class="line"> &#125;),</span><br><span class="line"> switchMap(</span><br><span class="line">    _ =&gt; interval(1000).pipe(tap((rs)=&gt; &#123;console.log(&#x27;inner value....&#x27;,rs)&#125;)), //特定间隔，产生递增整数 </span><br><span class="line">    (outerValue, innerValue, outerIndex, innerIndex) =&gt; (&#123;</span><br><span class="line">      outerValue,</span><br><span class="line">      innerValue,</span><br><span class="line">      outerIndex,</span><br><span class="line">      innerIndex</span><br><span class="line">    &#125;)</span><br><span class="line">  )</span><br><span class="line"> ).subscribe((res) =&gt; &#123;</span><br><span class="line">    console.log(&quot;final res....&quot;,res);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//output</span><br><span class="line">time 0.... 5:21:59 PM</span><br><span class="line">time 1.... 5:22:00 PM</span><br><span class="line">inner value.... 0</span><br><span class="line">final res.... &#123; outerValue: 0, innerValue: 0, outerIndex: 0, innerIndex: 0 &#125;</span><br><span class="line">inner value.... 1</span><br><span class="line">final res.... &#123; outerValue: 0, innerValue: 1, outerIndex: 0, innerIndex: 1 &#125;</span><br><span class="line">inner value.... 2</span><br><span class="line">final res.... &#123; outerValue: 0, innerValue: 2, outerIndex: 0, innerIndex: 2 &#125;</span><br><span class="line">time 1.... 5:22:04 PM</span><br><span class="line">inner value.... 0</span><br><span class="line">final res.... &#123; outerValue: 1, innerValue: 0, outerIndex: 1, innerIndex: 0 &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="exhaustMap-map-exhaustAll"><a href="#exhaustMap-map-exhaustAll" class="headerlink" title="exhaustMap &#x3D; map + exhaustAll"></a>exhaustMap &#x3D; map + exhaustAll</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">// RxJS v6+</span><br><span class="line">import &#123; interval &#125; from &#x27;rxjs&#x27;;</span><br><span class="line">import &#123; exhaustMap, tap, take &#125; from &#x27;rxjs/operators&#x27;;</span><br><span class="line"></span><br><span class="line">const firstInterval = interval(1000).pipe(take(10));</span><br><span class="line">const secondInterval = interval(1000).pipe(take(2));</span><br><span class="line"></span><br><span class="line">const exhaustSub = firstInterval</span><br><span class="line">  .pipe(</span><br><span class="line">    exhaustMap(f =&gt; &#123;</span><br><span class="line">      console.log(`Emission Corrected of first interval: $&#123;f&#125;`);</span><br><span class="line">      return secondInterval; //激活第二个，会忽略第一个</span><br><span class="line">    &#125;)</span><br><span class="line">  )</span><br><span class="line">  .subscribe(val =&gt; console.log(val));</span><br><span class="line"></span><br><span class="line">//output</span><br><span class="line">Emission Corrected of first interval: 0</span><br><span class="line">0</span><br><span class="line">1</span><br><span class="line">Emission Corrected of first interval: 2</span><br><span class="line">0</span><br><span class="line">1</span><br><span class="line">Emission Corrected of first interval: 4</span><br><span class="line">0</span><br><span class="line">1</span><br><span class="line">Emission Corrected of first interval: 6</span><br><span class="line">0</span><br><span class="line">1</span><br><span class="line">Emission Corrected of first interval: 8</span><br><span class="line">0</span><br><span class="line">1</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="mapTo"><a href="#mapTo" class="headerlink" title="mapTo"></a>mapTo</h4><ul><li>修改值<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import &#123; fromEvent &#125; from &#x27;rxjs&#x27;;</span><br><span class="line">import &#123; mapTo &#125; from &#x27;rxjs/operators&#x27;;</span><br><span class="line"></span><br><span class="line">const clicks = fromEvent(document, &#x27;click&#x27;);</span><br><span class="line">const greetings = clicks.pipe(mapTo(&#x27;Hi&#x27;));</span><br><span class="line">greetings.subscribe(x =&gt; console.log(x));</span><br></pre></td></tr></table></figure></li></ul><h4 id="map"><a href="#map" class="headerlink" title="map"></a>map</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import &#123; combineLatest, of &#125; from &#x27;rxjs&#x27;;</span><br><span class="line">import &#123; map, tap &#125; from &#x27;rxjs/operators&#x27;;</span><br><span class="line"> </span><br><span class="line">const weight = of(70, 72, 76, 79, 75);</span><br><span class="line">const height = of(1.76, 1.77, 1.78,1.8);</span><br><span class="line">const bmi = combineLatest(weight, height).pipe(</span><br><span class="line">  tap(([w,h]) =&gt; &#123;</span><br><span class="line">      console.log(`w:$&#123;w&#125;,h:$&#123;h&#125;`);</span><br><span class="line">  &#125;),</span><br><span class="line">  map(([w, h]) =&gt; w / (h * h)),</span><br><span class="line">);</span><br><span class="line">bmi.subscribe(x =&gt; console.log(&#x27;BMI is &#x27; + x));</span><br><span class="line"> </span><br><span class="line">// With output to console:</span><br><span class="line">w:75,h:1.76</span><br><span class="line">BMI is 24.212293388429753</span><br><span class="line">w:75,h:1.77</span><br><span class="line">BMI is 23.93948099205209</span><br><span class="line">w:75,h:1.78</span><br><span class="line">BMI is 23.671253629592222</span><br><span class="line">w:75,h:1.8</span><br><span class="line">BMI is 23.148148148148145</span><br></pre></td></tr></table></figure><h3 id="4-联合型"><a href="#4-联合型" class="headerlink" title="4.联合型"></a>4.联合型</h3><h4 id="combineLatest"><a href="#combineLatest" class="headerlink" title="combineLatest"></a>combineLatest</h4><blockquote><p>适用场景： 依赖多个输入，产出新的结论</p></blockquote><h5 id="数据整合交给下游"><a href="#数据整合交给下游" class="headerlink" title="数据整合交给下游"></a>数据整合交给下游</h5> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"> import &#123; timer, combineLatest &#125; from &#x27;rxjs&#x27;;</span><br><span class="line">​</span><br><span class="line">// timerOne emits first value at 1s, then once every 4s</span><br><span class="line">const timerOne$ = timer(1000, 4000);</span><br><span class="line">// timerTwo emits first value at 2s, then once every 4s</span><br><span class="line">const timerTwo$ = timer(2000, 4000);</span><br><span class="line">// timerThree emits first value at 3s, then once every 4s</span><br><span class="line">const timerThree$ = timer(3000, 4000);</span><br><span class="line">​</span><br><span class="line">// when one timer emits, emit the latest values from each timer as an array</span><br><span class="line">combineLatest(timerOne$, timerTwo$, timerThree$).subscribe(</span><br><span class="line">  ([timerValOne, timerValTwo, timerValThree]) =&gt; &#123;</span><br><span class="line">    /*</span><br><span class="line">      Example:</span><br><span class="line">    timerThree first tick: &#x27;Timer One Latest: 0, Timer Two Latest: 0, Timer Three Latest: 0</span><br><span class="line">    timerOne second tick: &#x27;Timer One Latest: 1, Timer Two Latest: 0, Timer Three Latest: 0</span><br><span class="line">    timerTwo second tick: &#x27;Timer One Latest: 1, Timer Two Latest: 1, Timer Three Latest: 0</span><br><span class="line">  */</span><br><span class="line">    console.log(</span><br><span class="line">      `Timer One Latest: $&#123;timerValOne&#125;,</span><br><span class="line">     Timer Two Latest: $&#123;timerValTwo&#125;,</span><br><span class="line">     Timer Three Latest: $&#123;timerValThree&#125;`</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h5 id="整合好数据，交给下游"><a href="#整合好数据，交给下游" class="headerlink" title="整合好数据，交给下游"></a>整合好数据，交给下游</h5><blockquote><p> 入参observabel数组<br> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> // RxJS v6+</span><br><span class="line">import &#123; timer, combineLatest &#125; from &#x27;rxjs&#x27;;</span><br><span class="line">​</span><br><span class="line">const timerOne$ = timer(1000, 4000);</span><br><span class="line">const timerTwo$ = timer(2000, 4000);</span><br><span class="line">const timerThree$ = timer(3000, 4000);</span><br><span class="line">​</span><br><span class="line">combineLatest(</span><br><span class="line">  timerOne$,</span><br><span class="line">  timerTwo$,</span><br><span class="line">  timerThree$,</span><br><span class="line">  // combineLatest also takes an optional projection function</span><br><span class="line">  (one, two, three) =&gt; &#123;</span><br><span class="line">    return `Timer One (Proj) Latest: $&#123;one&#125;, </span><br><span class="line">              Timer Two (Proj) Latest: $&#123;two&#125;, </span><br><span class="line">              Timer Three (Proj) Latest: $&#123;three&#125;`;</span><br><span class="line">  &#125;</span><br><span class="line">).subscribe(console.log);</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="concat-队列形式"><a href="#concat-队列形式" class="headerlink" title="concat - 队列形式"></a>concat - 队列形式</h4><blockquote><p>适用于： 先到先得，队列形式数据处理<br>返回Observable</p></blockquote><h5 id="前一个不结束，后一个永无机会"><a href="#前一个不结束，后一个永无机会" class="headerlink" title="前一个不结束，后一个永无机会"></a>前一个不结束，后一个永无机会</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// RxJS v6+</span><br><span class="line">import &#123; interval, of, concat &#125; from &#x27;rxjs&#x27;;</span><br><span class="line">​</span><br><span class="line">// when source never completes, any subsequent observables never run</span><br><span class="line">concat(interval(1000), of(&#x27;This&#x27;, &#x27;Never&#x27;, &#x27;Runs&#x27;))</span><br><span class="line">  // log: 1,2,3,4.....</span><br><span class="line">  .subscribe(console.log);</span><br></pre></td></tr></table></figure><h5 id="倒计时"><a href="#倒计时" class="headerlink" title="倒计时"></a>倒计时</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">// RxJS v6+</span><br><span class="line">import &#123; concat, empty &#125; from &#x27;rxjs&#x27;;</span><br><span class="line">import &#123; delay, startWith &#125; from &#x27;rxjs/operators&#x27;;</span><br><span class="line">​</span><br><span class="line">// elems</span><br><span class="line">const userMessage = document.getElementById(&#x27;message&#x27;);</span><br><span class="line">// helper</span><br><span class="line">const delayedMessage = (message, delayedTime = 1000) =&gt; &#123;</span><br><span class="line">  return empty().pipe(startWith(message), delay(delayedTime));</span><br><span class="line">&#125;;</span><br><span class="line">​</span><br><span class="line">concat(</span><br><span class="line">  delayedMessage(&#x27;Get Ready!&#x27;),</span><br><span class="line">  delayedMessage(3),</span><br><span class="line">  delayedMessage(2),</span><br><span class="line">  delayedMessage(1),</span><br><span class="line">  delayedMessage(&#x27;Go!&#x27;),</span><br><span class="line">  delayedMessage(&#x27;&#x27;, 2000)</span><br><span class="line">).subscribe((message: any) =&gt; (userMessage.innerHTML = message));</span><br></pre></td></tr></table></figure><h4 id="merge-先到先输出"><a href="#merge-先到先输出" class="headerlink" title="merge - 先到先输出"></a>merge - 先到先输出</h4><blockquote><p>先到先输出,不论书写位置，一个个输出，非数组形式<br>返回Observable</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import &#123; of, merge, concat &#125; from &#x27;rxjs&#x27;;</span><br><span class="line">import &#123; mapTo, delay, concatAll, mergeAll &#125; from &#x27;rxjs/operators&#x27;;</span><br><span class="line"></span><br><span class="line">//emit one item</span><br><span class="line">const example = of(null);</span><br><span class="line"></span><br><span class="line">merge(</span><br><span class="line">  example.pipe(mapTo(&#x27;Hello --- 1&#x27;)),</span><br><span class="line">  example.pipe(mapTo(&#x27;World1!--- 1&#x27;),delay(1300)),</span><br><span class="line">  example.pipe(mapTo(&#x27;Goodbye --- 1&#x27;),delay(500)),</span><br><span class="line">  example.pipe(mapTo(&#x27;World!2 -- 1&#x27;),delay(300))</span><br><span class="line">).subscribe(val =&gt; console.log(val));;</span><br><span class="line"></span><br><span class="line">//output</span><br><span class="line">Hello --- 1</span><br><span class="line">World!2 -- 1</span><br><span class="line">Goodbye --- 1</span><br><span class="line">World1!--- 1</span><br></pre></td></tr></table></figure><h4 id="exhaust"><a href="#exhaust" class="headerlink" title="exhaust"></a>exhaust</h4><blockquote><p>返回Observable</p></blockquote><h4 id="withLatestFrom"><a href="#withLatestFrom" class="headerlink" title="withLatestFrom"></a>withLatestFrom</h4><blockquote><p>适用于： 多个输入源，但是只有一个主导<br>返回 OperatorFunction</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import &#123; timeInterval, timeout, withLatestFrom &#125; from &quot;rxjs/operators&quot;;</span><br><span class="line">import &#123; interval, of &#125; from &quot;rxjs&quot;;</span><br><span class="line"></span><br><span class="line">const seconds = interval(1000);</span><br><span class="line"></span><br><span class="line">const first = interval(500);</span><br><span class="line"></span><br><span class="line">const obs$ = first.pipe(withLatestFrom(seconds));</span><br><span class="line">obs$.subscribe(res =&gt; &#123;</span><br><span class="line">    console.log(&quot;res...&quot;,res);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//output</span><br><span class="line">res... [ 1, 0 ]</span><br><span class="line">res... [ 2, 0 ]</span><br><span class="line">res... [ 3, 1 ]</span><br><span class="line">res... [ 4, 1 ]</span><br><span class="line">res... [ 5, 2 ]</span><br><span class="line">res... [ 6, 2 ]</span><br><span class="line">res... [ 7, 3 ]</span><br><span class="line">res... [ 8, 3 ]</span><br><span class="line">res... [ 9, 4 ]</span><br></pre></td></tr></table></figure><h4 id="concatAll"><a href="#concatAll" class="headerlink" title="concatAll"></a>concatAll</h4><blockquote><p>返回 OperatorFunction</p></blockquote><h4 id="mergeAll"><a href="#mergeAll" class="headerlink" title="mergeAll"></a>mergeAll</h4><blockquote><p>返回 OperatorFunction</p></blockquote><h4 id="exhaustAll"><a href="#exhaustAll" class="headerlink" title="exhaustAll"></a>exhaustAll</h4><blockquote><p>返回 OperatorFunction</p></blockquote><h4 id="switchAll"><a href="#switchAll" class="headerlink" title="switchAll"></a>switchAll</h4><blockquote><p>返回 OperatorFunction</p></blockquote><h4 id="forkJoin-只取最终值"><a href="#forkJoin-只取最终值" class="headerlink" title="forkJoin - 只取最终值"></a>forkJoin - 只取最终值</h4><blockquote><p> 入参observabel数组</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import &#123; forkJoin, of, timer &#125; from &#x27;rxjs&#x27;;</span><br><span class="line"></span><br><span class="line">const observable = forkJoin(&#123;</span><br><span class="line">  foo: of(1, 2, 3, 4),</span><br><span class="line">  bar: Promise.resolve(8),</span><br><span class="line">  baz: timer(4000),</span><br><span class="line">&#125;);</span><br><span class="line">observable.subscribe(&#123;</span><br><span class="line"> next: value =&gt; console.log(value),</span><br><span class="line"> complete: () =&gt; console.log(&#x27;This is how it ends!&#x27;),</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// Logs:</span><br><span class="line">// &#123; foo: 4, bar: 8, baz: 0 &#125; after 4 seconds</span><br><span class="line">// &quot;This is how it ends!&quot; immediately after</span><br></pre></td></tr></table></figure><h4 id="startWith"><a href="#startWith" class="headerlink" title="startWith"></a>startWith</h4><blockquote><p>适用于： 添加特定的数据</p></blockquote><h5 id="添加单个前置数据-hello-world"><a href="#添加单个前置数据-hello-world" class="headerlink" title="添加单个前置数据 - hello world"></a>添加单个前置数据 - hello world</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">// RxJS v6+</span><br><span class="line">import &#123; startWith, scan &#125; from &#x27;rxjs/operators&#x27;;</span><br><span class="line">import &#123; of &#125; from &#x27;rxjs&#x27;;</span><br><span class="line">​</span><br><span class="line">//emit (&#x27;World!&#x27;, &#x27;Goodbye&#x27;, &#x27;World!&#x27;)</span><br><span class="line">const source = of(&#x27;World!&#x27;, &#x27;Goodbye&#x27;, &#x27;World!&#x27;);</span><br><span class="line">//start with &#x27;Hello&#x27;, concat current string to previous</span><br><span class="line">const example = source.pipe(</span><br><span class="line">  startWith(&#x27;Hello&#x27;),</span><br><span class="line">  scan((acc, curr) =&gt; `$&#123;acc&#125; $&#123;curr&#125;`)</span><br><span class="line">);</span><br><span class="line">/*</span><br><span class="line">  output:</span><br><span class="line">  &quot;Hello&quot;</span><br><span class="line">  &quot;Hello World!&quot;</span><br><span class="line">  &quot;Hello World! Goodbye&quot;</span><br><span class="line">  &quot;Hello World! Goodbye World!&quot;</span><br><span class="line">*/</span><br><span class="line">const subscribe = example.subscribe(val =&gt; console.log(val));</span><br></pre></td></tr></table></figure><h5 id="添加多个前置数据"><a href="#添加多个前置数据" class="headerlink" title="添加多个前置数据"></a>添加多个前置数据</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// RxJS v6+</span><br><span class="line">import &#123; startWith &#125; from &#x27;rxjs/operators&#x27;;</span><br><span class="line">import &#123; interval &#125; from &#x27;rxjs&#x27;;</span><br><span class="line">​</span><br><span class="line">//emit values in sequence every 1s</span><br><span class="line">const source = interval(1000);</span><br><span class="line">//start with -3, -2, -1</span><br><span class="line">const example = source.pipe(startWith(-3, -2, -1));</span><br><span class="line">//output: -3, -2, -1, 0, 1, 2....</span><br><span class="line">const subscribe = example.subscribe(val =&gt; console.log(val));</span><br></pre></td></tr></table></figure><h3 id="5-过滤型"><a href="#5-过滤型" class="headerlink" title="5.过滤型"></a>5.过滤型</h3><h4 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import &#123; from &#125; from &#x27;rxjs&#x27;;</span><br><span class="line">import &#123; filter &#125; from &#x27;rxjs/operators&#x27;;</span><br><span class="line"></span><br><span class="line">const source = from([</span><br><span class="line">  &#123; name: &#x27;Joe&#x27;, age: 31 &#125;,</span><br><span class="line">  &#123; name: &#x27;Bob&#x27;, age: 25 &#125;</span><br><span class="line">]);</span><br><span class="line">const example = source.pipe(filter((person,index) =&gt; &#123; </span><br><span class="line">    const res = person.age &gt;= 30; </span><br><span class="line">    console.log(`person info.....`,person,index);</span><br><span class="line">    return res; </span><br><span class="line">&#125; ));</span><br><span class="line">const subscribe = example.subscribe(val =&gt; console.log(`final result Over 30: $&#123;val.name&#125;`));</span><br><span class="line"></span><br><span class="line">//output</span><br><span class="line">person info..... &#123; name: &#x27;Joe&#x27;, age: 31 &#125; 0</span><br><span class="line">final result Over 30: Joe</span><br><span class="line">person info..... &#123; name: &#x27;Bob&#x27;, age: 25 &#125; 1</span><br></pre></td></tr></table></figure><h3 id="6-条件判定"><a href="#6-条件判定" class="headerlink" title="6.条件判定"></a>6.条件判定</h3><h4 id="every"><a href="#every" class="headerlink" title="every"></a>every</h4><ul><li>每一个都需要满足条件才true  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import &#123; of &#125; from &#x27;rxjs&#x27;;</span><br><span class="line">import &#123; every &#125; from &#x27;rxjs/operators&#x27;;</span><br><span class="line"></span><br><span class="line">of(1, 2, 3, 4, 5, 6).pipe(</span><br><span class="line">    every(x =&gt; x &lt; 5),</span><br><span class="line">)</span><br><span class="line">.subscribe(x =&gt; console.log(x)); // -&gt; false</span><br></pre></td></tr></table></figure></li></ul><h4 id="find、findIndex"><a href="#find、findIndex" class="headerlink" title="find、findIndex"></a>find、findIndex</h4><ul><li>找到第一个满足条件的就行  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import &#123; fromEvent &#125; from &#x27;rxjs&#x27;;</span><br><span class="line">import &#123; find &#125; from &#x27;rxjs/operators&#x27;;</span><br><span class="line"></span><br><span class="line">const clicks = fromEvent(document, &#x27;click&#x27;);</span><br><span class="line">const result = clicks.pipe(find(ev =&gt; ev.target.tagName === &#x27;DIV&#x27;));</span><br><span class="line">result.subscribe(x =&gt; console.log(x));</span><br></pre></td></tr></table></figure></li></ul><h4 id="isEmpty"><a href="#isEmpty" class="headerlink" title="isEmpty"></a>isEmpty</h4><ul><li>判断Observable是否为空  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Subject &#125; from &#x27;rxjs&#x27;;</span><br><span class="line">import &#123; isEmpty &#125; from &#x27;rxjs/operators&#x27;;</span><br><span class="line"></span><br><span class="line">const source = new Subject&lt;string&gt;();</span><br><span class="line">const result = source.pipe(isEmpty());</span><br><span class="line">source.subscribe(x =&gt; console.log(x));</span><br><span class="line">result.subscribe(x =&gt; console.log(x));</span><br><span class="line">source.next(&#x27;a&#x27;);</span><br><span class="line">source.next(&#x27;b&#x27;);</span><br><span class="line">source.next(&#x27;c&#x27;);</span><br><span class="line">source.complete();</span><br><span class="line"></span><br><span class="line">// Results in:</span><br><span class="line">// a</span><br><span class="line">// false</span><br><span class="line">// b</span><br><span class="line">// c</span><br></pre></td></tr></table></figure></li></ul><h4 id="iif"><a href="#iif" class="headerlink" title="iif"></a>iif</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import &#123; iif, of, interval &#125; from &#x27;rxjs&#x27;;</span><br><span class="line">import &#123; mergeMap &#125; from &#x27;rxjs/operators&#x27;;</span><br><span class="line"></span><br><span class="line">const r$ = of(&#x27;R&#x27;);</span><br><span class="line">const x$ = of(&#x27;X&#x27;);</span><br><span class="line"></span><br><span class="line">interval(1000)</span><br><span class="line">  .pipe(mergeMap(v =&gt; iif(() =&gt; v % 4 === 0, r$, x$)))</span><br><span class="line">  .subscribe(console.log);</span><br><span class="line">//output </span><br><span class="line">R</span><br><span class="line">X</span><br><span class="line">R</span><br><span class="line">X</span><br></pre></td></tr></table></figure><h4 id="defaultIfEmpty"><a href="#defaultIfEmpty" class="headerlink" title="defaultIfEmpty"></a>defaultIfEmpty</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import &#123; defaultIfEmpty &#125; from &#x27;rxjs/operators&#x27;;</span><br><span class="line">import &#123; empty &#125; from &#x27;rxjs&#x27;;</span><br><span class="line">import &#123; of, merge &#125; from &#x27;rxjs&#x27;;</span><br><span class="line"></span><br><span class="line">const exampleOne = of().pipe(defaultIfEmpty(&#x27;Observable.of() Empty!&#x27;));</span><br><span class="line">const example = empty().pipe(defaultIfEmpty(&#x27;Observable.empty()!&#x27;));</span><br><span class="line"></span><br><span class="line">merge(</span><br><span class="line">    example,</span><br><span class="line">    exampleOne</span><br><span class="line">).subscribe(console.log);</span><br><span class="line"></span><br><span class="line">//output </span><br><span class="line">Observable.empty()!</span><br><span class="line">Observable.of() Empty!</span><br></pre></td></tr></table></figure><h3 id="7-异常处理"><a href="#7-异常处理" class="headerlink" title="7.异常处理"></a>7.异常处理</h3><h4 id="catchError"><a href="#catchError" class="headerlink" title="catchError"></a>catchError</h4><h5 id="单一处理"><a href="#单一处理" class="headerlink" title="单一处理"></a>单一处理</h5> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import &#123; throwError, of &#125; from &#x27;rxjs&#x27;;</span><br><span class="line">import &#123; catchError &#125; from &#x27;rxjs/operators&#x27;;</span><br><span class="line">//emit error</span><br><span class="line">const source = throwError(&#x27;This is an error!&#x27;);</span><br><span class="line">//gracefully handle error, returning observable with error message</span><br><span class="line">const example = source.pipe(catchError(val =&gt; of(`I caught: $&#123;val&#125;`)));</span><br><span class="line">//output: &#x27;I caught: This is an error&#x27;</span><br><span class="line">const subscribe = example.subscribe(val =&gt; console.log(val));</span><br></pre></td></tr></table></figure><h5 id="整合其他operator"><a href="#整合其他operator" class="headerlink" title="整合其他operator"></a>整合其他operator</h5> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">import &#123; throwError, fromEvent, of &#125; from &#x27;rxjs&#x27;;</span><br><span class="line">import &#123;</span><br><span class="line">  catchError,</span><br><span class="line">  tap,</span><br><span class="line">  switchMap,</span><br><span class="line">  mergeMap,</span><br><span class="line">  concatMap,</span><br><span class="line">  exhaustMap</span><br><span class="line">&#125; from &#x27;rxjs/operators&#x27;;</span><br><span class="line">​</span><br><span class="line">const fakeRequest$ = of().pipe(</span><br><span class="line">  tap(_ =&gt; console.log(&#x27;fakeRequest&#x27;)),</span><br><span class="line">  throwError</span><br><span class="line">);</span><br><span class="line">​</span><br><span class="line">const iWillContinueListening$ = fromEvent(</span><br><span class="line">  document.getElementById(&#x27;continued&#x27;),</span><br><span class="line">  &#x27;click&#x27;</span><br><span class="line">).pipe(</span><br><span class="line">  switchMap(_ =&gt; fakeRequest$.pipe(catchError(_ =&gt; of(&#x27;keep on clicking!!!&#x27;))))</span><br><span class="line">);</span><br><span class="line">​</span><br><span class="line">const iWillStopListening$ = fromEvent(</span><br><span class="line">  document.getElementById(&#x27;stopped&#x27;),</span><br><span class="line">  &#x27;click&#x27;</span><br><span class="line">).pipe(</span><br><span class="line">  switchMap(_ =&gt; fakeRequest$),</span><br><span class="line">  catchError(_ =&gt; of(&#x27;no more requests!!!&#x27;))</span><br><span class="line">);</span><br><span class="line">​</span><br><span class="line">iWillContinueListening$.subscribe(console.log);</span><br><span class="line">iWillStopListening$.subscribe(console.log);</span><br></pre></td></tr></table></figure><h4 id="retry"><a href="#retry" class="headerlink" title="retry"></a>retry</h4><h5 id="设置重试次数"><a href="#设置重试次数" class="headerlink" title="设置重试次数"></a>设置重试次数</h5> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"> // RxJS v6+</span><br><span class="line">import &#123; interval, of, throwError &#125; from &#x27;rxjs&#x27;;</span><br><span class="line">import &#123; mergeMap, retry &#125; from &#x27;rxjs/operators&#x27;;</span><br><span class="line"></span><br><span class="line">//emit value every 1s</span><br><span class="line">const source = interval(1000);</span><br><span class="line">const example = source.pipe(</span><br><span class="line">  mergeMap(val =&gt; &#123;</span><br><span class="line">    //throw error for demonstration</span><br><span class="line">    if (val &gt; 5) &#123;</span><br><span class="line">      return throwError(&#x27;Error!&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">    return of(val);</span><br><span class="line">  &#125;),</span><br><span class="line">  //retry 2 times on error</span><br><span class="line">  retry(2)</span><br><span class="line">);</span><br><span class="line">/*</span><br><span class="line">  output:</span><br><span class="line">  0..1..2..3..4..5..</span><br><span class="line">  0..1..2..3..4..5..</span><br><span class="line">  0..1..2..3..4..5..</span><br><span class="line">  &quot;Error!: Retried 2 times then quit!&quot;</span><br><span class="line">*/</span><br><span class="line">const subscribe = example.subscribe(&#123;</span><br><span class="line">  next: val =&gt; console.log(val),</span><br><span class="line">  error: val =&gt; console.log(`$&#123;val&#125;: Retried 2 times then quit!`)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="retryWhen"><a href="#retryWhen" class="headerlink" title="retryWhen"></a>retryWhen</h4><h5 id="delayWhen-1"><a href="#delayWhen-1" class="headerlink" title="delayWhen"></a>delayWhen</h5> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"> // RxJS v6+</span><br><span class="line">import &#123; timer, interval &#125; from &#x27;rxjs&#x27;;</span><br><span class="line">import &#123; map, tap, retryWhen, delayWhen &#125; from &#x27;rxjs/operators&#x27;;</span><br><span class="line"></span><br><span class="line">//emit value every 1s</span><br><span class="line">const source = interval(1000);</span><br><span class="line">const example = source.pipe(</span><br><span class="line">  map(val =&gt; &#123;</span><br><span class="line">    if (val &gt; 5) &#123;</span><br><span class="line">      //error will be picked up by retryWhen</span><br><span class="line">      throw val;</span><br><span class="line">    &#125;</span><br><span class="line">    return val;</span><br><span class="line">  &#125;),</span><br><span class="line">  retryWhen(errors =&gt;</span><br><span class="line">    errors.pipe(</span><br><span class="line">      //log error message</span><br><span class="line">      tap(val =&gt; console.log(`Value $&#123;val&#125; was too high!`)),</span><br><span class="line">      //restart in 6 seconds</span><br><span class="line">      delayWhen(val =&gt; timer(val * 1000))</span><br><span class="line">    )</span><br><span class="line">  )</span><br><span class="line">);</span><br><span class="line">/*</span><br><span class="line">  output:</span><br><span class="line">  0</span><br><span class="line">  1</span><br><span class="line">  2</span><br><span class="line">  3</span><br><span class="line">  4</span><br><span class="line">  5</span><br><span class="line">  &quot;Value 6 was too high!&quot;</span><br><span class="line">  --Wait 6 seconds then repeat</span><br><span class="line">*/</span><br><span class="line">const subscribe = example.subscribe(val =&gt; console.log(val));</span><br></pre></td></tr></table></figure><h3 id="8-自定义类型"><a href="#8-自定义类型" class="headerlink" title="8.自定义类型"></a>8.自定义类型</h3><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><h4 id="Rxjs"><a href="#Rxjs" class="headerlink" title="Rxjs"></a><a href="https://www.learnrxjs.io/learn-rxjs/operators/combination/combinelatest">Rxjs</a></h4>]]></content>
      
      
      
        <tags>
            
            <tag> angular </tag>
            
            <tag> rxjs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Devops》- Docker+Sails+mongo开发Rest api 与 Servless开发 Rest api的差异</title>
      <link href="/2020/07/14/devops_skills/docker/%E3%80%8ADocker%E3%80%8B-%20Docker+Sails+mongo%E5%BC%80%E5%8F%91Rest%20api%E8%BD%BB%E6%9D%BE%E5%85%A5%E9%97%A8/"/>
      <url>/2020/07/14/devops_skills/docker/%E3%80%8ADocker%E3%80%8B-%20Docker+Sails+mongo%E5%BC%80%E5%8F%91Rest%20api%E8%BD%BB%E6%9D%BE%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="本文目的，"><a href="#本文目的，" class="headerlink" title="本文目的，"></a>本文目的，</h3><blockquote><p>在于介绍使用sails+mongo开发rest api，并在docker容器中运行。Rest api，常用于提供一个http&#x2F;https api服务，尤其在开发小程序时候，是特别需要的。本文就不对docker 安装、docker cli进行介绍，具体请移步docker官网，参考。<br>介绍Servless开发rest api，并比较两者的区别<br>本文假定读者，已经安装好node,mongo,docker</p></blockquote><h4 id=""><a href="#" class="headerlink" title=""></a></h4>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> serverless </tag>
            
            <tag> node </tag>
            
            <tag> sails </tag>
            
            <tag> mongo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《 Angular8 》 - angular 模板语法实现原理</title>
      <link href="/2020/07/13/front_skills/angular/%E3%80%8Aangular8%E3%80%8B-angular%20%E6%A8%A1%E6%9D%BF%E8%AF%AD%E6%B3%95%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/"/>
      <url>/2020/07/13/front_skills/angular/%E3%80%8Aangular8%E3%80%8B-angular%20%E6%A8%A1%E6%9D%BF%E8%AF%AD%E6%B3%95%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h3 id="angular-模板语法"><a href="#angular-模板语法" class="headerlink" title="angular 模板语法"></a>angular 模板语法</h3><h4 id="插值"><a href="#插值" class="headerlink" title="插值"></a>插值</h4><p>在DOM属性或者子元素中，{}包裹组件属性<br>组件寻找对应的属性，需要计算先计算，然后转换为字符串替换</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//子元素替换</span><br><span class="line">&lt;p&gt;&#123;&#123;title&#125;&#125;&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">//属性替换</span><br><span class="line">&lt;div&gt;&lt;img src=&quot;&#123;&#123;itemImageUrl&#125;&#125;&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">//调用方法</span><br><span class="line">&lt;p&gt;The sum of 1 + 1 is not &#123;&#123;1 + 1 + getVal()&#125;&#125;.&lt;/p&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> angular </tag>
            
            <tag> template synax </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《devTool》- Chrome DevTool实战总结</title>
      <link href="/2020/07/12/dev_tool_skills/vscode/%E3%80%8AdevTool%E3%80%8B-%20Chrome%20DevTool%E5%AE%9E%E6%88%98%E6%80%BB%E7%BB%93/"/>
      <url>/2020/07/12/dev_tool_skills/vscode/%E3%80%8AdevTool%E3%80%8B-%20Chrome%20DevTool%E5%AE%9E%E6%88%98%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h3 id="Network"><a href="#Network" class="headerlink" title="Network"></a>Network</h3><blockquote><p>主要用来</p></blockquote><ul><li>查看http 请求相关信息，譬如http method get&#x2F;post, token,cookie</li><li>界面请求加载耗时</li></ul><h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
      
      
      
        <tags>
            
            <tag> vscode </tag>
            
            <tag> 快捷键 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《devTool》- mac vscode 快捷键看这篇就够了</title>
      <link href="/2020/07/12/dev_tool_skills/vscode/%E3%80%8AdevTool%E3%80%8B-%20vscode%20coding%E7%9C%8B%E8%BF%99%E7%AF%87%E5%B0%B1%E5%A4%9F%E4%BA%86/"/>
      <url>/2020/07/12/dev_tool_skills/vscode/%E3%80%8AdevTool%E3%80%8B-%20vscode%20coding%E7%9C%8B%E8%BF%99%E7%AF%87%E5%B0%B1%E5%A4%9F%E4%BA%86/</url>
      
        <content type="html"><![CDATA[<h2 id="vscode-快捷键"><a href="#vscode-快捷键" class="headerlink" title="vscode 快捷键"></a>vscode 快捷键</h2><h3 id="通用操作"><a href="#通用操作" class="headerlink" title="通用操作"></a>通用操作</h3><h4 id="1-查找文件"><a href="#1-查找文件" class="headerlink" title="1.查找文件"></a>1.查找文件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">⌘ + p</span><br></pre></td></tr></table></figure><h4 id="2-tab操作"><a href="#2-tab操作" class="headerlink" title="2.tab操作"></a>2.tab操作</h4><blockquote><p>打开新tab</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">⌘ + n</span><br></pre></td></tr></table></figure><blockquote><p>关闭已打开tab</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">⌘ + w</span><br></pre></td></tr></table></figure><h4 id="3-window操作"><a href="#3-window操作" class="headerlink" title="3.window操作"></a>3.window操作</h4><blockquote><p>打开新window</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">⌘ + option + n</span><br></pre></td></tr></table></figure><blockquote><p>关闭已打开window</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">⌘ + option + w</span><br></pre></td></tr></table></figure><h4 id="4-打开vscode配置tab"><a href="#4-打开vscode配置tab" class="headerlink" title="4.打开vscode配置tab"></a>4.打开vscode配置tab</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">⌘ + ,</span><br></pre></td></tr></table></figure><h4 id="5-查看vscode快捷键"><a href="#5-查看vscode快捷键" class="headerlink" title="5.查看vscode快捷键"></a>5.查看vscode快捷键</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#第一次按键</span><br><span class="line">⌘ + K </span><br><span class="line">#第二次按键</span><br><span class="line">⌘ + S</span><br></pre></td></tr></table></figure><h4 id="6-打开文件"><a href="#6-打开文件" class="headerlink" title="6. 打开文件"></a>6. 打开文件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">⌘ + O</span><br></pre></td></tr></table></figure><h4 id="7-多视图查看"><a href="#7-多视图查看" class="headerlink" title="7. 多视图查看"></a>7. 多视图查看</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">⌘ + \</span><br></pre></td></tr></table></figure><h3 id="文件编辑"><a href="#文件编辑" class="headerlink" title="文件编辑"></a>文件编辑</h3><h4 id="行移动"><a href="#行移动" class="headerlink" title="行移动"></a>行移动</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alt + ↑ </span><br></pre></td></tr></table></figure><h4 id="行copy"><a href="#行copy" class="headerlink" title="行copy"></a>行copy</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shift + alt + ↑ </span><br></pre></td></tr></table></figure><h4 id="行删除"><a href="#行删除" class="headerlink" title="行删除"></a>行删除</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shift + ⌘ + K</span><br></pre></td></tr></table></figure><h4 id="跳转"><a href="#跳转" class="headerlink" title="{} 跳转"></a>{} 跳转</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shift + ⌘ + \</span><br></pre></td></tr></table></figure><h4 id="行缩进"><a href="#行缩进" class="headerlink" title="行缩进"></a>行缩进</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">⌘ + [ or ⌘ + ]</span><br></pre></td></tr></table></figure><h4 id="行首、行尾"><a href="#行首、行尾" class="headerlink" title="行首、行尾"></a>行首、行尾</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Home \ End </span><br></pre></td></tr></table></figure><h4 id="文件的头部、尾部"><a href="#文件的头部、尾部" class="headerlink" title="文件的头部、尾部"></a>文件的头部、尾部</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">⌘ + Home , ⌘ + End</span><br></pre></td></tr></table></figure><h4 id="当前-折叠于展开"><a href="#当前-折叠于展开" class="headerlink" title="当前{} 折叠于展开"></a>当前{} 折叠于展开</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alt + ⌘ + [ \ ]</span><br></pre></td></tr></table></figure><h4 id="所有的子内容折叠"><a href="#所有的子内容折叠" class="headerlink" title="{} 所有的子内容折叠"></a>{} 所有的子内容折叠</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">⌘+ k  ⌘ + [ ,⌘ + k ⌘ + ] </span><br></pre></td></tr></table></figure><h4 id="所有都折叠"><a href="#所有都折叠" class="headerlink" title="{} 所有都折叠"></a>{} 所有都折叠</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">⌘ + k ⌘ + 0(1,2,3) , ⌘ + k  ⌘ + J </span><br></pre></td></tr></table></figure><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><h4 id="行注释"><a href="#行注释" class="headerlink" title="行注释"></a>行注释</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">⌘ + /</span><br></pre></td></tr></table></figure><h4 id="块注释"><a href="#块注释" class="headerlink" title="块注释"></a>块注释</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alt + shift + a </span><br><span class="line">&lt;!--  --&gt;</span><br></pre></td></tr></table></figure><h3 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h3><h4 id="文件路径copy"><a href="#文件路径copy" class="headerlink" title="文件路径copy"></a>文件路径copy</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">⌘ + k p </span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> vscode </tag>
            
            <tag> 快捷键 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《webpack》- 核心概念整理</title>
      <link href="/2020/07/11/front_package_build_skills/webpack/%E3%80%8Awebpack%E3%80%8B-%20%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5%E6%95%B4%E7%90%86/"/>
      <url>/2020/07/11/front_package_build_skills/webpack/%E3%80%8Awebpack%E3%80%8B-%20%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h2><blockquote><p>静态模块打包器，本身只能处理js,json。通过loader扩展，处理其他类型的文件</p></blockquote><h2 id="webpack核心概念"><a href="#webpack核心概念" class="headerlink" title="webpack核心概念"></a>webpack核心概念</h2><h3 id="Entry"><a href="#Entry" class="headerlink" title="Entry"></a>Entry</h3><blockquote><p>an entry point indicates which module webpack should use to begin building out its internal dependency graph</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 默认 ./src/index.js</span><br><span class="line">module.exports = &#123;</span><br><span class="line">  entry: &#x27;./path/to/my/entry/file.js&#x27;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><blockquote><p>The output property tells webpack where to emit the bundles it creates and how to name these files.</p></blockquote><h4 id="单一配置"><a href="#单一配置" class="headerlink" title="单一配置"></a>单一配置</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">const path = require(&#x27;path&#x27;);</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  mode:&#x27;development&#x27;, # development, production or none 之一</span><br><span class="line">  entry: &#x27;./path/to/my/entry/file.js&#x27;,</span><br><span class="line">  output: &#123; # 默认./dist/main.js</span><br><span class="line">    path: path.resolve(__dirname, &#x27;dist&#x27;),</span><br><span class="line">    filename: &#x27;my-first-webpack.bundle.js&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="多输出配置"><a href="#多输出配置" class="headerlink" title="多输出配置"></a>多输出配置</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># exports为数组，而非output是数组</span><br><span class="line">module.exports = [&#123;</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: &#x27;./dist-amd.js&#x27;,</span><br><span class="line">    libraryTarget: &#x27;amd&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  name: &#x27;amd&#x27;,</span><br><span class="line">  entry: &#x27;./app.js&#x27;,</span><br><span class="line">  mode: &#x27;production&#x27;,</span><br><span class="line">&#125;, &#123;</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: &#x27;./dist-commonjs.js&#x27;,</span><br><span class="line">    libraryTarget: &#x27;commonjs&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  name: &#x27;commonjs&#x27;, # 通过--config-name 进行单一配置项应用输出</span><br><span class="line">  entry: &#x27;./app.js&#x27;,</span><br><span class="line">  mode: &#x27;production&#x27;,</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure><h3 id="Module"><a href="#Module" class="headerlink" title="Module"></a>Module</h3><h4 id="js-module"><a href="#js-module" class="headerlink" title="js module"></a>js module</h4><blockquote><p>js 功能模块的逻辑划分</p></blockquote><h4 id="webpack-module"><a href="#webpack-module" class="headerlink" title="webpack module"></a>webpack module</h4><blockquote><p>js 或者 css依赖关系的一种表述</p></blockquote><ul><li>js<ul><li>node import\export</li><li>commonjs require\module.exports</li><li>ADM define\require</li></ul></li><li>css</li><li>@import</li><li>url or src</li></ul><h3 id="Loader"><a href="#Loader" class="headerlink" title="Loader"></a>Loader</h3><blockquote><p>webpack只能处理js，json，其他的文件类型处理，需要loader进行转换，转换为js模块<br>通过test进行正则匹配文件，use指定loader<br> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">const path = require(&#x27;path&#x27;);</span><br><span class="line"></span><br><span class="line"> module.exports = &#123;</span><br><span class="line"> output: &#123;</span><br><span class="line">     filename: &#x27;my-first-webpack.bundle.js&#x27;</span><br><span class="line"> &#125;,</span><br><span class="line"> module: &#123;</span><br><span class="line">     rules: [</span><br><span class="line">     &#123; test: /\.txt$/, use: &#x27;raw-loader&#x27; &#125;</span><br><span class="line">     ]</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;;</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="Plugins"><a href="#Plugins" class="headerlink" title="Plugins"></a>Plugins</h3><blockquote><p>完成loader不能完成的事情<br> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">const HtmlWebpackPlugin = require(&#x27;html-webpack-plugin&#x27;); //installed via npm</span><br><span class="line">const webpack = require(&#x27;webpack&#x27;); //to access built-in plugins</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  module: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123; test: /\.txt$/, use: &#x27;raw-loader&#x27; &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    new HtmlWebpackPlugin(&#123;template: &#x27;./src/index.html&#x27;&#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="Mode"><a href="#Mode" class="headerlink" title="Mode"></a>Mode</h3><blockquote><p>指定构建环境，用于构建不同的版本</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 默认产线</span><br><span class="line">module.exports = &#123;</span><br><span class="line">  mode: &#x27;production&#x27;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Browser-Compatibility"><a href="#Browser-Compatibility" class="headerlink" title="Browser Compatibility"></a>Browser Compatibility</h3><blockquote><p>webpack supports all browsers that are ES5-compliant (IE8 and below are not supported). webpack needs Promise for import() and require.ensure(). If you want to support older browsers, you will need to load a polyfill before using these expressions.</p></blockquote><h3 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h3><h4 id="指定配置文件"><a href="#指定配置文件" class="headerlink" title="指定配置文件"></a>指定配置文件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">  &quot;build&quot;: &quot;webpack --config prod.config.js&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Targets"><a href="#Targets" class="headerlink" title="Targets"></a>Targets</h4><blockquote><p>指定最终代码，运行环境</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  target: &#x27;node&#x27;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>多运行环境</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">const path = require(&#x27;path&#x27;);</span><br><span class="line">const serverConfig = &#123;</span><br><span class="line">  target: &#x27;node&#x27;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, &#x27;dist&#x27;),</span><br><span class="line">    filename: &#x27;lib.node.js&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">  //…</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">const clientConfig = &#123;</span><br><span class="line">  target: &#x27;web&#x27;, // &lt;=== can be omitted as default is &#x27;web&#x27;</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, &#x27;dist&#x27;),</span><br><span class="line">    filename: &#x27;lib.js&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">  //…</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">module.exports = [ serverConfig, clientConfig ];</span><br></pre></td></tr></table></figure><h4 id="resolve"><a href="#resolve" class="headerlink" title="resolve"></a>resolve</h4><blockquote><p>指定默认依赖如何查找</p></blockquote><h4 id="externals直接引用，非打包"><a href="#externals直接引用，非打包" class="headerlink" title="externals直接引用，非打包"></a>externals直接引用，非打包</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  //...</span><br><span class="line">  externals: &#123;</span><br><span class="line">    jquery: &#x27;jQuery&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="添加配置文件"><a href="#添加配置文件" class="headerlink" title="添加配置文件"></a>添加配置文件</h4><h5 id="React-ui添加webpack配置配置"><a href="#React-ui添加webpack配置配置" class="headerlink" title="React ui添加webpack配置配置"></a><a href="https://generatewebpackconfig.netlify.app/">React ui添加webpack配置配置</a></h5><p> <img src="https://s1.ax1x.com/2020/07/12/U1fBZQ.png"></p><h4 id="webpack配置"><a href="#webpack配置" class="headerlink" title="webpack配置"></a><a href="https://createapp.dev/webpack">webpack配置</a></h4><p> <img src="https://s1.ax1x.com/2020/07/12/U1fyin.md.png"></p><h5 id="webpack-cli添加配置"><a href="#webpack-cli添加配置" class="headerlink" title="webpack-cli添加配置"></a>webpack-cli添加配置</h5> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install @webpack-cli/init</span><br><span class="line">npx webpack-cli init</span><br></pre></td></tr></table></figure> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"> npx webpack-cli init</span><br><span class="line"></span><br><span class="line">ℹ INFO For more information and a detailed description of each question, have a look at https://github.com/webpack/webpack-cli/blob/master/INIT.md</span><br><span class="line">ℹ INFO Alternatively, run `webpack(-cli) --help` for usage info.</span><br><span class="line"></span><br><span class="line">? Will your application have multiple bundles? No</span><br><span class="line">? Which module will be the first to enter the application? [default: ./src/index]</span><br><span class="line">? Which folder will your generated bundles be in? [default: dist]:</span><br><span class="line">? Will you be using ES2015? Yes</span><br><span class="line">? Will you use one of the below CSS solutions? No</span><br><span class="line"></span><br><span class="line">+ babel-plugin-syntax-dynamic-import@6.18.0</span><br><span class="line">+ uglifyjs-webpack-plugin@2.0.1</span><br><span class="line">+ webpack-cli@3.2.3</span><br><span class="line">+ @babel/core@7.2.2</span><br><span class="line">+ babel-loader@8.0.4</span><br><span class="line">+ @babel/preset-env@7.1.0</span><br><span class="line">+ webpack@4.29.3</span><br><span class="line">added 124 packages from 39 contributors, updated 4 packages and audited 25221 packages in 7.463s</span><br><span class="line">found 0 vulnerabilities</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Congratulations! Your new webpack configuration file has been created!</span><br></pre></td></tr></table></figure><h4 id="用ts编写webpack-config"><a href="#用ts编写webpack-config" class="headerlink" title="用ts编写webpack.config"></a>用ts编写webpack.config</h4><h5 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h5> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev typescript ts-node @types/node @types/webpack</span><br><span class="line"> # and, if using webpack-dev-server</span><br><span class="line">npm install --save-dev @types/webpack-dev-server</span><br></pre></td></tr></table></figure><h5 id="ts配置webpack"><a href="#ts配置webpack" class="headerlink" title="ts配置webpack"></a>ts配置webpack</h5> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> # 使用import ,非require</span><br><span class="line">import * as path from &#x27;path&#x27;;</span><br><span class="line">import * as webpack from &#x27;webpack&#x27;;</span><br><span class="line"></span><br><span class="line">const config: webpack.Configuration = &#123;</span><br><span class="line">  mode: &#x27;production&#x27;,</span><br><span class="line">  entry: &#x27;./foo.js&#x27;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, &#x27;dist&#x27;),</span><br><span class="line">    filename: &#x27;foo.bundle.js&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"># 使用export ,非module.exports</span><br><span class="line">export default config;</span><br></pre></td></tr></table></figure><h5 id="ts配置tsconfig-json校验"><a href="#ts配置tsconfig-json校验" class="headerlink" title="ts配置tsconfig.json校验"></a>ts配置tsconfig.json校验</h5><ul><li>method one: compilerOptions <blockquote><p>有关tsconfig.json的介绍请参考<a href=""></a><br>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">compilerOptions: &#123; </span><br><span class="line">     &quot;module&quot;: &quot;commonjs&quot;,</span><br><span class="line">     &quot;target&quot;: &quot;es5&quot;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote></li><li>method two:   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev tsconfig-paths</span><br></pre></td></tr></table></figure></li><li>添加配置tsconfig-for-webpack-config.json,覆盖tsconfig.json   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> # tsconfig-for-webpack-config.json</span><br><span class="line"> &#123;</span><br><span class="line">  &quot;compilerOptions&quot;: &#123;</span><br><span class="line">      &quot;module&quot;: &quot;commonjs&quot;,</span><br><span class="line">      &quot;target&quot;: &quot;es5&quot;,</span><br><span class="line">      &quot;esModuleInterop&quot;: true</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>定义构建脚本   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> &quot;scripts&quot;: &#123;</span><br><span class="line">     &quot;build&quot;: &quot;cross-env TS_NODE_PROJECT=\&quot;tsconfig-for-webpack-config.json\&quot; webpack&quot;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> webpack </tag>
            
            <tag> core concepts </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《 Angular8 》 -  angular8深入了解指令</title>
      <link href="/2020/07/11/front_skills/angular/%E3%80%8Aangular8%E3%80%8B-%20angular8%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3%E6%8C%87%E4%BB%A4/"/>
      <url>/2020/07/11/front_skills/angular/%E3%80%8Aangular8%E3%80%8B-%20angular8%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3%E6%8C%87%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p> angular指令，目的在于影响Dom布局，或者修改Dom属性。</p><h3 id="Directive分类"><a href="#Directive分类" class="headerlink" title="Directive分类"></a>Directive分类</h3><h4 id="Component"><a href="#Component" class="headerlink" title="Component"></a>Component</h4><blockquote><p>an extension of @Directive()</p></blockquote><h5 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Component, OnInit &#125; from &#x27;@angular/core&#x27;;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">  selector: &#x27;idata&#x27;,</span><br><span class="line">  templateUrl: &#x27;./user.component.html&#x27;,</span><br><span class="line">  styleUrls: [&#x27;./user.component.scss&#x27;]</span><br><span class="line">&#125;)</span><br><span class="line">export class UserComponent implements OnInit &#123;</span><br><span class="line"></span><br><span class="line">  constructor() &#123; &#125;</span><br><span class="line"></span><br><span class="line">  ngOnInit(): void &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>@Component定义在class上</li><li>templateUrl、template定义视图模板</li></ul><h5 id="Component源码"><a href="#Component源码" class="headerlink" title="@Component源码"></a>@Component源码</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">export declare interface Component extends Directive &#123;</span><br><span class="line"></span><br><span class="line">    changeDetection?: ChangeDetectionStrategy;</span><br><span class="line"></span><br><span class="line">    viewProviders?: Provider[];</span><br><span class="line"></span><br><span class="line">    moduleId?: string;</span><br><span class="line"></span><br><span class="line">    templateUrl?: string;</span><br><span class="line"></span><br><span class="line">    template?: string;</span><br><span class="line"></span><br><span class="line">    styleUrls?: string[];</span><br><span class="line"></span><br><span class="line">    styles?: string[];</span><br><span class="line"></span><br><span class="line">    animations?: any[];</span><br><span class="line"></span><br><span class="line">    encapsulation?: ViewEncapsulation;</span><br><span class="line"></span><br><span class="line">    interpolation?: [string, string];</span><br><span class="line"></span><br><span class="line">    entryComponents?: Array&lt;Type&lt;any&gt; | any[]&gt;;</span><br><span class="line"></span><br><span class="line">    preserveWhitespaces?: boolean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>从中我们得出如下：</p></blockquote><ul><li>Component是一种特殊的指令</li><li>Component 上述自有属性，都是可选</li><li>那么Directive的源码又是什么呢？</li></ul><h5 id="Directive源码"><a href="#Directive源码" class="headerlink" title="@Directive源码"></a>@Directive源码</h5> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">export declare interface Directive &#123;</span><br><span class="line">    </span><br><span class="line">    selector?: string;</span><br><span class="line">   </span><br><span class="line">    inputs?: string[];</span><br><span class="line">    </span><br><span class="line">    outputs?: string[];</span><br><span class="line">    </span><br><span class="line">    providers?: Provider[];</span><br><span class="line">    </span><br><span class="line">    exportAs?: string;</span><br><span class="line">    </span><br><span class="line">    queries?: &#123;</span><br><span class="line">        [key: string]: any;</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    host?: &#123;</span><br><span class="line">        [key: string]: string;</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    jit?: true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="属性指令"><a href="#属性指令" class="headerlink" title="属性指令"></a>属性指令</h4><blockquote><p>Attribute directives are used as attributes of elements</p></blockquote><h5 id="内置指令"><a href="#内置指令" class="headerlink" title="内置指令"></a>内置指令</h5><ul><li>NgStyle</li><li>NgClass</li></ul><h5 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h5><ul><li><p>step 1: </p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 要求不能ng开头</span><br><span class="line">ng generate directive highlight</span><br></pre></td></tr></table></figure></li><li><p>code如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># src/app/highlight.directive.ts </span><br><span class="line">import &#123; Directive &#125; from &#x27;@angular/core&#x27;;</span><br><span class="line"></span><br><span class="line">@Directive(&#123;</span><br><span class="line">  selector: &#x27;[appHighlight]&#x27;</span><br><span class="line">&#125;)</span><br><span class="line">export class HighlightDirective &#123;</span><br><span class="line">  constructor() &#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>step 2:  添加指令处理逻辑</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Directive, ElementRef &#125; from &#x27;@angular/core&#x27;;</span><br><span class="line"></span><br><span class="line">@Directive(&#123;</span><br><span class="line">  selector: &#x27;[appHighlight]&#x27;</span><br><span class="line">&#125;)</span><br><span class="line">export class HighlightDirective &#123;</span><br><span class="line">    constructor(el: ElementRef) &#123;</span><br><span class="line">        # 修改元素背景</span><br><span class="line">       el.nativeElement.style.backgroundColor = &#x27;yellow&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>step3: 模块中声明指令的存在</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">import &#123; BrowserModule &#125; from &#x27;@angular/platform-browser&#x27;;</span><br><span class="line">import &#123; NgModule &#125; from &#x27;@angular/core&#x27;;</span><br><span class="line"></span><br><span class="line">import &#123; AppRoutingModule &#125; from &#x27;./app-routing.module&#x27;;</span><br><span class="line">import &#123; AppComponent &#125; from &#x27;./app.component&#x27;;</span><br><span class="line">import &#123; HighlightDirective &#125; from &#x27;./highlight.directive&#x27;;</span><br><span class="line"></span><br><span class="line">@NgModule(&#123;</span><br><span class="line">  declarations: [</span><br><span class="line">    AppComponent,</span><br><span class="line">    HighlightDirective # 视图中声明指令的引用</span><br><span class="line">  ],</span><br><span class="line">  imports: [</span><br><span class="line">    BrowserModule,</span><br><span class="line">    AppRoutingModule,</span><br><span class="line">  ],</span><br><span class="line">  providers: [],</span><br><span class="line">  bootstrap: [AppComponent],</span><br><span class="line">  exports: []</span><br><span class="line">&#125;)</span><br><span class="line">export class AppModule &#123; &#125;</span><br></pre></td></tr></table></figure></li><li><p>step 4： 应用指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p appHighlight&gt;Highlight me!&lt;/p&gt;</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2020/07/11/Ulk7uT.png"></p></li></ul><h4 id="结构指令"><a href="#结构指令" class="headerlink" title="结构指令"></a>结构指令</h4><blockquote><p>Structural directives are responsible for HTML layout</p></blockquote><ul><li>结构指令，影响当前元素以及后代元素</li><li>结构指令，大多以*开头</li></ul><h5 id="内置结构指令"><a href="#内置结构指令" class="headerlink" title="内置结构指令"></a>内置结构指令</h5><ul><li>ngIf - <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># false，不渲染元素，而非渲染后隐藏</span><br><span class="line">&lt;div *ngIf=&quot;hero&quot; class=&quot;name&quot;&gt;&#123;&#123;hero.name&#125;&#125;&lt;/div&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>ngIf false为何不隐藏元素，而是删除元素？<br>  这里应该是框架设计者针对利弊的取舍吧！如果元素仅仅隐藏，那么元素还占据原来的位置，那么对应的鼠标事件，有可能还是存在的，那么就会影响现有组件的功能，视图渲染数据。<br>  具体的可以参考这边文章<a href="https://segmentfault.com/a/1190000015116392">针对visible,opacity,hiden之间区别</a>，写的挺好的！</li><li>angular 编译ngIf为以下代码： <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;ng-template [ngIf]=&quot;hero&quot;&gt;</span><br><span class="line">&lt;div class=&quot;name&quot;&gt;&#123;&#123;hero.name&#125;&#125;&lt;/div&gt;</span><br><span class="line">&lt;/ng-template&gt;</span><br></pre></td></tr></table></figure></li><li>ngFor<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div *ngFor=&quot;let hero of heroes; let i=index; let odd=odd; trackBy: trackById&quot; [class.odd]=&quot;odd&quot;&gt;</span><br><span class="line">  (&#123;&#123;i&#125;&#125;) &#123;&#123;hero.name&#125;&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></li><li>angular编译为以下代码 ：  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;ng-template ngFor let-hero [ngForOf]=&quot;heroes&quot; let-i=&quot;index&quot; let-odd=&quot;odd&quot; [ngForTrackBy]=&quot;trackById&quot;&gt;</span><br><span class="line">  &lt;div [class.odd]=&quot;odd&quot;&gt;(&#123;&#123;i&#125;&#125;) &#123;&#123;hero.name&#125;&#125;&lt;/div&gt;</span><br><span class="line">&lt;/ng-template&gt;</span><br></pre></td></tr></table></figure></li><li>ngSwitch<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;div [ngSwitch]=&quot;hero?.emotion&quot;&gt;</span><br><span class="line">  &lt;app-happy-hero    *ngSwitchCase=&quot;&#x27;happy&#x27;&quot;    [hero]=&quot;hero&quot;&gt;&lt;/app-happy-hero&gt;</span><br><span class="line">  &lt;app-sad-hero      *ngSwitchCase=&quot;&#x27;sad&#x27;&quot;      [hero]=&quot;hero&quot;&gt;&lt;/app-sad-hero&gt;</span><br><span class="line">  &lt;app-confused-hero *ngSwitchCase=&quot;&#x27;confused&#x27;&quot; [hero]=&quot;hero&quot;&gt;&lt;/app-confused-hero&gt;</span><br><span class="line">  &lt;app-unknown-hero  *ngSwitchDefault           [hero]=&quot;hero&quot;&gt;&lt;/app-unknown-hero&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></li></ul><h5 id="自定义结构指令"><a href="#自定义结构指令" class="headerlink" title="自定义结构指令"></a>自定义结构指令</h5><ul><li>step 1:<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng generate directive appUnless</span><br></pre></td></tr></table></figure><ul><li>code 如下： <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Directive &#125; from &#x27;@angular/core&#x27;;</span><br><span class="line"></span><br><span class="line">@Directive(&#123;</span><br><span class="line">selector: &#x27;[appUnless]&#x27;</span><br><span class="line">&#125;)</span><br><span class="line">export class AppUnlessDirective &#123;</span><br><span class="line"></span><br><span class="line">constructor() &#123; &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li>step 2: 定义元素逻辑<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Directive, TemplateRef, ViewContainerRef, Input &#125; from &#x27;@angular/core&#x27;;</span><br><span class="line"></span><br><span class="line">@Directive(&#123;</span><br><span class="line">  selector: &#x27;[appUnless]&#x27;</span><br><span class="line">&#125;)</span><br><span class="line">export class AppUnlessDirective &#123;</span><br><span class="line"></span><br><span class="line">  private hasView = false;</span><br><span class="line"></span><br><span class="line">  constructor(</span><br><span class="line">    private templateRef: TemplateRef&lt;any&gt;,</span><br><span class="line">    private viewContainer: ViewContainerRef) &#123; &#125;</span><br><span class="line"></span><br><span class="line">  @Input() set appUnless(condition: boolean) &#123;</span><br><span class="line">    if (!condition &amp;&amp; !this.hasView) &#123;</span><br><span class="line">      this.viewContainer.createEmbeddedView(this.templateRef);</span><br><span class="line">      this.hasView = true;</span><br><span class="line">    &#125; else if (condition &amp;&amp; this.hasView) &#123;</span><br><span class="line">      this.viewContainer.clear();</span><br><span class="line">      this.hasView = false;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>step 3: 声明指令<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">import &#123; BrowserModule &#125; from &#x27;@angular/platform-browser&#x27;;</span><br><span class="line">import &#123; NgModule &#125; from &#x27;@angular/core&#x27;;</span><br><span class="line"></span><br><span class="line">import &#123; AppRoutingModule &#125; from &#x27;./app-routing.module&#x27;;</span><br><span class="line">import &#123; AppComponent &#125; from &#x27;./app.component&#x27;;</span><br><span class="line">import &#123; HighlightDirective &#125; from &#x27;./highlight.directive&#x27;;</span><br><span class="line">import &#123; AppUnlessDirective &#125; from &#x27;./app-unless.directive&#x27;;</span><br><span class="line"></span><br><span class="line">@NgModule(&#123;</span><br><span class="line">  declarations: [</span><br><span class="line">    AppComponent,</span><br><span class="line">    HighlightDirective,</span><br><span class="line">    AppUnlessDirective # 声明结构指令</span><br><span class="line">  ],</span><br><span class="line">  imports: [</span><br><span class="line">    BrowserModule,</span><br><span class="line">    AppRoutingModule,</span><br><span class="line">  ],</span><br><span class="line">  providers: [],</span><br><span class="line">  bootstrap: [AppComponent],</span><br><span class="line">  exports: []</span><br><span class="line">&#125;)</span><br><span class="line">export class AppModule &#123; &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>step 4: 应用指令<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;p *appUnless=&quot;condition&quot; class=&quot;unless a&quot;&gt;</span><br><span class="line">  (A) This paragraph is displayed because the condition is false.</span><br><span class="line">&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">#ts</span><br><span class="line">public condition = false;</span><br><span class="line">constructor(private domSanitizer: DomSanitizer)&#123;</span><br><span class="line">    interval(2000).subscribe(() =&gt; &#123;</span><br><span class="line">        this.condition = !this.condition;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://s1.ax1x.com/2020/07/11/UlM1dP.gif" width="300" height="100"></li></ul><h3 id="更多推荐"><a href="#更多推荐" class="headerlink" title="更多推荐"></a>更多推荐</h3><h4 id="Rxjs-操作符分类后的那些事"><a href="#Rxjs-操作符分类后的那些事" class="headerlink" title="Rxjs 操作符分类后的那些事"></a><a href="https://juejin.im/post/5f03ad0d5188252e884e7297">Rxjs 操作符分类后的那些事</a></h4><h4 id="Angular-Render2你了解吗？"><a href="#Angular-Render2你了解吗？" class="headerlink" title="Angular Render2你了解吗？"></a><a href="https://juejin.im/post/5edf9211f265da76c76b1d81">Angular Render2你了解吗？</a></h4><h4 id="Angular8-日常开发填坑指南"><a href="#Angular8-日常开发填坑指南" class="headerlink" title="Angular8 日常开发填坑指南"></a><a href="https://juejin.im/post/5ed080ebe51d45788325f27e">Angular8 日常开发填坑指南</a></h4><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><h4 id="Angular"><a href="#Angular" class="headerlink" title="Angular"></a><a href="https://angular.io/guide/glossary#structural-directive">Angular</a></h4>]]></content>
      
      
      
        <tags>
            
            <tag> angular </tag>
            
            <tag> directive </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《 Angular8 》 - angular.json文件你了解多少？</title>
      <link href="/2020/07/10/front_skills/angular/%E3%80%8Aangular8%E3%80%8B-angular.json%E6%96%87%E4%BB%B6%E4%BD%A0%E4%BA%86%E8%A7%A3%E5%A4%9A%E5%B0%91/"/>
      <url>/2020/07/10/front_skills/angular/%E3%80%8Aangular8%E3%80%8B-angular.json%E6%96%87%E4%BB%B6%E4%BD%A0%E4%BA%86%E8%A7%A3%E5%A4%9A%E5%B0%91/</url>
      
        <content type="html"><![CDATA[<h3 id="angular-json"><a href="#angular-json" class="headerlink" title="angular.json"></a>angular.json</h3><ul><li>相对于项目root 路径配置</li><li>有关workspace和项目的配置</li><li>angular-cli自动生成的</li></ul><h3 id="文件结构"><a href="#文件结构" class="headerlink" title="文件结构"></a>文件结构</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;$schema&quot;: &quot;./node_modules/@angular/cli/lib/config/schema.json&quot;,</span><br><span class="line">  &quot;version&quot;: 1, # 配置文件版本</span><br><span class="line">  &quot;newProjectRoot&quot;: &quot;projects&quot;, # 新项目code存放路径</span><br><span class="line">  &quot;projects&quot;: &#123; # 项目集合，定义了项目相关配置</span><br><span class="line">    &quot;angular-demo&quot;: &#123;</span><br><span class="line">      .....</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;defaultProject&quot;: &quot;angular-demo&quot;, # 默认于cli交互的项目</span><br><span class="line">  &quot;cli&quot;: &#123; # cli命令</span><br><span class="line">    &quot;defaultCollection&quot;: &quot;@ngrx/schematics&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> angular </tag>
            
            <tag> angular.json </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《typescript》- tsconfig.json你了解多少</title>
      <link href="/2020/07/10/front_skills/ts/%E3%80%8Atypescript%E3%80%8B-%20tsconfig.json%E4%BD%A0%E4%BA%86%E8%A7%A3%E5%A4%9A%E5%B0%91/"/>
      <url>/2020/07/10/front_skills/ts/%E3%80%8Atypescript%E3%80%8B-%20tsconfig.json%E4%BD%A0%E4%BA%86%E8%A7%A3%E5%A4%9A%E5%B0%91/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> ts </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《 Angular8 》 - Angular8 Pipe的那些用法</title>
      <link href="/2020/07/02/front_skills/angular/%E3%80%8A%20Angular8%20%E3%80%8B%20-%20Angular8%20Pipe%E7%9A%84%E9%82%A3%E4%BA%9B%E7%94%A8%E6%B3%95/"/>
      <url>/2020/07/02/front_skills/angular/%E3%80%8A%20Angular8%20%E3%80%8B%20-%20Angular8%20Pipe%E7%9A%84%E9%82%A3%E4%BA%9B%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h3 id="Angular-Pipe"><a href="#Angular-Pipe" class="headerlink" title="Angular Pipe"></a>Angular Pipe</h3><p>  Pipe的存在，目的在于进行数据的转换。前后端开发，后端提供的数据，不一定刚好就是要展示的数据，前端经常在拿到原始数据后，进行一次或者多次转换，才展示。</p><h3 id="内置Pipe"><a href="#内置Pipe" class="headerlink" title="内置Pipe"></a>内置Pipe</h3><h4 id="DatePipe"><a href="#DatePipe" class="headerlink" title="DatePipe"></a>DatePipe</h4><blockquote><p>根据时区格式化</p></blockquote><ul><li>采用默认的格式   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;The hero&#x27;s birthday is &#123;&#123; birthday | date &#125;&#125;&lt;/p&gt;</span><br></pre></td></tr></table></figure></li><li>指定格式   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;The hero&#x27;s birthday is &#123;&#123; birthday | date:&quot;MM/dd/yy&quot; &#125;&#125; &lt;/p&gt;</span><br></pre></td></tr></table></figure></li><li>指定转换的方法   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># example.ts</span><br><span class="line">template: `</span><br><span class="line">   &lt;p&gt;The hero&#x27;s birthday is &#123;&#123; birthday | date:format &#125;&#125;&lt;/p&gt;</span><br><span class="line">   &lt;button (click)=&quot;toggleFormat()&quot;&gt;Toggle Format&lt;/button&gt;</span><br><span class="line"> `</span><br><span class="line"> ....</span><br><span class="line"></span><br><span class="line"> birthday = new Date(1988, 3, 15); // April 15, 1988 -- since month parameter is zero-based</span><br><span class="line"> toggle = true; // start with true == shortDate</span><br><span class="line"></span><br><span class="line"> get format()   &#123; return this.toggle ? &#x27;shortDate&#x27; : &#x27;fullDate&#x27;; &#125;</span><br><span class="line"> toggleFormat() &#123; this.toggle = !this.toggle; &#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="UpperCasePipe"><a href="#UpperCasePipe" class="headerlink" title="UpperCasePipe"></a>UpperCasePipe</h4><blockquote><p>字母转换为大写</p></blockquote><ul><li>pipe可以链式调用,前者的output,是后者的input  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt; The chained hero&#x27;s birthday is &#123;&#123; birthday | date | uppercase&#125;&#125; &lt;/div&gt;</span><br></pre></td></tr></table></figure></li></ul><h4 id="LowerCasePipe"><a href="#LowerCasePipe" class="headerlink" title="LowerCasePipe"></a>LowerCasePipe</h4><blockquote><p>字母转换为小写</p></blockquote><h4 id="CurrencyPipe"><a href="#CurrencyPipe" class="headerlink" title="CurrencyPipe:"></a>CurrencyPipe:</h4><blockquote><p> 根据所在地，进行货币转换 </p></blockquote><ul><li>可以通过:传递参数  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;&#123;&#123; amount | currency:&#x27;EUR&#x27; &#125;&#125;&lt;/div&gt;</span><br></pre></td></tr></table></figure></li><li>传递多个参数  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;&#123;&#123; amount | currency:&#x27;EUR&#x27;:&#x27;Euros &#x27;&#125;&#125;&lt;/div&gt;</span><br></pre></td></tr></table></figure></li></ul><h4 id="DecimalPipe"><a href="#DecimalPipe" class="headerlink" title="DecimalPipe"></a>DecimalPipe</h4><blockquote><p>十进制处理数字</p></blockquote><h4 id="PercentPipe"><a href="#PercentPipe" class="headerlink" title="PercentPipe"></a>PercentPipe</h4><blockquote><p>数字转百分比 </p></blockquote><h4 id="AsyncPipe"><a href="#AsyncPipe" class="headerlink" title="AsyncPipe"></a>AsyncPipe</h4><h4 id="JsonPipe"><a href="#JsonPipe" class="headerlink" title="JsonPipe"></a>JsonPipe</h4><h4 id="KeyValuePipe"><a href="#KeyValuePipe" class="headerlink" title="KeyValuePipe"></a>KeyValuePipe</h4><h4 id="TitleCasePipe"><a href="#TitleCasePipe" class="headerlink" title="TitleCasePipe"></a>TitleCasePipe</h4><h4 id="SlicePipe"><a href="#SlicePipe" class="headerlink" title="SlicePipe"></a>SlicePipe</h4><h3 id="自定义Pipe"><a href="#自定义Pipe" class="headerlink" title="自定义Pipe"></a>自定义Pipe</h3><blockquote><p>定义类，实现接口 PipeTransform<br>重载方法transform<br>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  import &#123; Pipe, PipeTransform &#125; from &#x27;@angular/core&#x27;;</span><br><span class="line">@Pipe(&#123;name: &#x27;exponentialStrength&#x27;&#125;)</span><br><span class="line">export class ExponentialStrengthPipe implements PipeTransform &#123;</span><br><span class="line">  transform(value: number, exponent?: number): number &#123;</span><br><span class="line">    return Math.pow(value, isNaN(exponent) ? 1 : exponent);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>NgModule中声明即可</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Component &#125; from &#x27;@angular/core&#x27;;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">  selector: &#x27;app-power-booster&#x27;,</span><br><span class="line">  template: `</span><br><span class="line">    &lt;h2&gt;Power Booster&lt;/h2&gt;</span><br><span class="line">    &lt;p&gt;Super power boost: &#123;&#123;2 | exponentialStrength: 10&#125;&#125;&lt;/p&gt;</span><br><span class="line">  `</span><br><span class="line">&#125;)</span><br><span class="line">export class PowerBoosterComponent &#123; &#125;</span><br></pre></td></tr></table></figure><h3 id="数据转义"><a href="#数据转义" class="headerlink" title="数据转义"></a>数据转义</h3><blockquote><p>angular8 中内置一下几种：</p></blockquote><ul><li>bypassSecurityTrustHtml  - 防止html中注入script脚本</li><li>bypassSecurityTrustStyle</li><li>bypassSecurityTrustScript</li><li>bypassSecurityTrustUrl</li><li>bypassSecurityTrustResourceUrl</li></ul><blockquote><p>定义转义safe，传递不同参数即可</p></blockquote><ul><li>使用如下命令：  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng generate pipe safe</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Pipe, PipeTransform &#125; from &#x27;@angular/core&#x27;;</span><br><span class="line">import &#123; DomSanitizer, SafeHtml, SafeStyle, SafeScript, SafeUrl, SafeResourceUrl &#125; from &#x27;@angular/platform-browser&#x27;;</span><br><span class="line"></span><br><span class="line">@Pipe(&#123;</span><br><span class="line">  name: &#x27;safe&#x27;</span><br><span class="line">&#125;)</span><br><span class="line">export class SafePipe implements PipeTransform &#123;</span><br><span class="line"></span><br><span class="line">  constructor(protected sanitizer: DomSanitizer) &#123;&#125;</span><br><span class="line"> </span><br><span class="line"> public transform(value: any, type: string): SafeHtml | SafeStyle | SafeScript | SafeUrl | SafeResourceUrl &#123;</span><br><span class="line">    switch (type) &#123;</span><br><span class="line">case &#x27;html&#x27;: return this.sanitizer.bypassSecurityTrustHtml(value);</span><br><span class="line">case &#x27;style&#x27;: return this.sanitizer.bypassSecurityTrustStyle(value);</span><br><span class="line">case &#x27;script&#x27;: return this.sanitizer.bypassSecurityTrustScript(value);</span><br><span class="line">case &#x27;url&#x27;: return this.sanitizer.bypassSecurityTrustUrl(value);</span><br><span class="line">case &#x27;resourceUrl&#x27;: return this.sanitizer.bypassSecurityTrustResourceUrl(value);</span><br><span class="line">default: throw new Error(`Invalid safe type specified: $&#123;type&#125;`);</span><br><span class="line">&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>模块中声明pipe，同时引入模块BrowserModule</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@NgModule(&#123;</span><br><span class="line">  declarations: [</span><br><span class="line">    AppComponent,</span><br><span class="line">    SafePipe</span><br><span class="line">  ],</span><br><span class="line">  imports: [</span><br><span class="line">    BrowserModule,</span><br><span class="line">    AppRoutingModule</span><br><span class="line">  ],</span><br><span class="line">  providers: [],</span><br><span class="line">  bootstrap: [AppComponent],</span><br><span class="line">  exports: [UserComponent, SafePipe]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>使用</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=&quot;imgUrl | safe:&#x27;resourceUrl&#x27;&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;script src=&quot;url | safe:&#x27;url&#x27;&quot;&gt;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> angular </tag>
            
            <tag> pipe </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《 Git 》 - Git日常开发命令从入门到精通</title>
      <link href="/2020/07/02/dev_tool_skills/git/%E3%80%8AGit%E3%80%8B-%20Git%E6%97%A5%E5%B8%B8%E5%BC%80%E5%8F%91%E5%91%BD%E4%BB%A4%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/"/>
      <url>/2020/07/02/dev_tool_skills/git/%E3%80%8AGit%E3%80%8B-%20Git%E6%97%A5%E5%B8%B8%E5%BC%80%E5%8F%91%E5%91%BD%E4%BB%A4%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/</url>
      
        <content type="html"><![CDATA[<h3 id="Git-安装"><a href="#Git-安装" class="headerlink" title="Git 安装"></a>Git 安装</h3><blockquote><p><a href="https://git-scm.com/downloads">点击链接</a>，下载不同的版本安装即可，这里不再赘述了。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> $ git </span><br><span class="line"> usage: git [--version] [--help] [-C &lt;path&gt;] [-c &lt;name&gt;=&lt;value&gt;]</span><br><span class="line">           [--exec-path[=&lt;path&gt;]] [--html-path] [--man-path] [--info-path]</span><br><span class="line">           [-p | --paginate | -P | --no-pager] [--no-replace-objects] [--bare]</span><br><span class="line">           [--git-dir=&lt;path&gt;] [--work-tree=&lt;path&gt;] [--namespace=&lt;name&gt;]</span><br><span class="line">           &lt;command&gt; [&lt;args&gt;]</span><br><span class="line"></span><br><span class="line">These are common Git commands used in various situations:</span><br><span class="line">....</span><br></pre></td></tr></table></figure><h3 id="Git-配置"><a href="#Git-配置" class="headerlink" title="Git 配置"></a>Git 配置</h3><h4 id="git-config"><a href="#git-config" class="headerlink" title="git config"></a>git config</h4><blockquote><p>Get and set repository or global options</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ git config --help </span><br><span class="line"> git config [&lt;file-option&gt;] [--type=&lt;type&gt;] [--show-origin] [-z|--null] name [value [value_regex]]</span><br><span class="line">       git config [&lt;file-option&gt;] [--type=&lt;type&gt;] --add name value</span><br><span class="line">       git config [&lt;file-option&gt;] [--type=&lt;type&gt;] --replace-all name value [value_regex]</span><br><span class="line">       git config [&lt;file-option&gt;] [--type=&lt;type&gt;] [--show-origin] [-z|--null] --get name [value_regex]</span><br><span class="line">       git config [&lt;file-option&gt;] [--type=&lt;type&gt;] [--show-origin] [-z|--null] --get-all name [value_regex]</span><br><span class="line">       git config [&lt;file-option&gt;] [--type=&lt;type&gt;] [--show-origin] [-z|--null] [--name-only] --get-regexp name_regex [value_regex]</span><br><span class="line">       git config [&lt;file-option&gt;] [--type=&lt;type&gt;] [-z|--null] --get-urlmatch name URL</span><br><span class="line">       git config [&lt;file-option&gt;] --unset name [value_regex]</span><br><span class="line">       git config [&lt;file-option&gt;] --unset-all name [value_regex]</span><br><span class="line">       git config [&lt;file-option&gt;] --rename-section old_name new_name</span><br><span class="line">       git config [&lt;file-option&gt;] --remove-section name</span><br><span class="line">       git config [&lt;file-option&gt;] [--show-origin] [-z|--null] [--name-only] -l | --list</span><br><span class="line">       git config [&lt;file-option&gt;] --get-color name [default]</span><br><span class="line">       git config [&lt;file-option&gt;] --get-colorbool name [stdout-is-tty]</span><br><span class="line">       git config [&lt;file-option&gt;] -e | --edit</span><br></pre></td></tr></table></figure><h4 id="查看配置所在文件-git-config"><a href="#查看配置所在文件-git-config" class="headerlink" title="查看配置所在文件.git&#x2F;config"></a>查看配置所在文件.git&#x2F;config</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[core]</span><br><span class="line">repositoryformatversion = 0</span><br><span class="line">filemode = true</span><br><span class="line">bare = false</span><br><span class="line">logallrefupdates = true</span><br><span class="line">ignorecase = true</span><br><span class="line">precomposeunicode = true</span><br><span class="line">[remote &quot;origin&quot;]</span><br><span class="line">url = https://github.com/xxx.git</span><br><span class="line">fetch = +refs/heads/*:refs/remotes/origin/*</span><br><span class="line">[branch &quot;master&quot;]</span><br><span class="line">remote = origin</span><br><span class="line">merge = refs/heads/master</span><br></pre></td></tr></table></figure><blockquote><p>修改配置项</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config core.filemode true</span><br></pre></td></tr></table></figure><blockquote><p>总结</p></blockquote><ul><li>git 配置文件，配置存在分组概念。譬如core,remote ,branch 这些</li><li>每个分组的内容，通过key-value形式覆盖，中间空格连接 。core.filemodel true</li></ul><h3 id="Git-项目-管理"><a href="#Git-项目-管理" class="headerlink" title="Git 项目 管理"></a>Git 项目 管理</h3><h4 id="git-init"><a href="#git-init" class="headerlink" title="git init"></a>git init</h4><blockquote><p>Create an empty Git repository or reinitialize an existing one</p></blockquote><h4 id="git-clone"><a href="#git-clone" class="headerlink" title="git clone"></a>git clone</h4><blockquote><p>Clone a repository into a new directory</p></blockquote><ul><li>更新所有的本地fork分支 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git fetch</span><br></pre></td></tr></table></figure></li><li>拉取remote分支到当前分支 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 拉取remote分支，在.git/config 中remote中配置指定</span><br><span class="line">git pull </span><br></pre></td></tr></table></figure></li></ul><h3 id="Git-code-管理"><a href="#Git-code-管理" class="headerlink" title="Git code 管理"></a>Git code 管理</h3><h3 id="Git-code-version管理"><a href="#Git-code-version管理" class="headerlink" title="Git code version管理"></a>Git code version管理</h3>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vite 文件路径 + mtime</title>
      <link href="/2020/06/29/front_skills/vue/vite%20HMR/"/>
      <url>/2020/06/29/front_skills/vue/vite%20HMR/</url>
      
        <content type="html"><![CDATA[<h2 id="缓存判断机制：文件路径-mtime（文件修改时间）"><a href="#缓存判断机制：文件路径-mtime（文件修改时间）" class="headerlink" title="缓存判断机制：文件路径 + mtime（文件修改时间）"></a>缓存判断机制：文件路径 + mtime（文件修改时间）</h2><p>✔️ 缓存依赖的组件：<br>ModuleGraph：Vite 内部维护的模块依赖图（在 vite&#x2F;src&#x2F;node&#x2F;server&#x2F;moduleGraph.ts 中实现）。</p><p>每个模块都有：<br>url &#x2F; id：模块的唯一标识（通常是文件路径）<br>lastHMRTimestamp：用于判断该模块是否需要更新<br>transformResult：缓存上一次的编译结果（插件 transform 之后的产物）</p><h3 id="⚙️-更新流程："><a href="#⚙️-更新流程：" class="headerlink" title="⚙️ 更新流程："></a>⚙️ 更新流程：</h3><p>启动时：首次访问某模块，Vite 执行插件的 transform()，然后将结果缓存。<br>变更时（通过 chokidar 文件监听）：</p><p>比较文件当前的 mtime 与上次缓存时间。<br>如果不同，清除缓存并重新执行 transform()。<br>并且触发相关模块的 HMR 更新。</p><p>✅ 优点：<br>精准依赖追踪。<br>避免无效编译，极大提升热更新速度。</p><p>✅ 2. .vue 文件被拆分的模块路径说明：<br>当浏览器访问 &#x2F;src&#x2F;App.vue，你看到的这些路径是 Vue SFC 的拆解与模块化处理结果。</p><table><thead><tr><th>请求路径</th><th>说明</th><th>编译方式</th></tr></thead><tbody><tr><td>&#x2F;src&#x2F;App.vue</td><td>主模块，组合 template + script + styles</td><td>JS（聚合模块）</td></tr><tr><td>&#x2F;src&#x2F;App.vue?type&#x3D;script</td><td>提取 <script> 标签内容</td><td>使用 esbuild 处理 TS/JS</td></tr><tr><td>/src/App.vue?type=template</td><td>提取 <template> 模板</td><td>使用 Vue compiler 编译为 render 函数</td></tr><tr><td>/src/App.vue?type=style&index=0</td><td>提取第 1 个 <style> 样式</td><td>使用 PostCSS / CSS Modules / SASS 等插件处理</td></tr><tr><td>/src/App.vue?vue&type=style&scoped=true</td><td>表示带有 scoped 的样式，需要生成 scopeId 并作用于元素</td><td>插件做 hash 计算作用域</td></tr></tbody></table><p>👀 示例：你访问 /src/App.vue 实际响应内容如下：<br>import script from "/src/App.vue?type=script"<br>import { render } from "/src/App.vue?type=template"<br>script.render = render<br>export default script</p><p>🔨 编译细节：<br>@vitejs/plugin-vue 使用的是 @vue/compiler-sfc。<br>它会调用 parse()、compileScript()、compileTemplate()，然后生成 JS 模块片段。<br>每个部分都是一个独立的 ES 模块，因此浏览器可以逐一请求、缓存和 HMR。</p><p>📌 总结（最终版）</p><table><thead><tr><th>项目</th><th>描述</th></tr></thead><tbody><tr><td>缓存机制</td><td>Vite 通过文件路径 + mtime 来判断是否使用缓存编译结果</td></tr><tr><td>Vue SFC 拆分</td><td>.vue 文件被拆解为多个模块（script、template、style），分别处理，分别响应</td></tr><tr><td>性能优势</td><td>只编译必要部分，缓存智能，HMR 快速，开发体验极佳</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> vite </tag>
            
            <tag> vue3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《 vue 》 - vue-cli核心概念整理</title>
      <link href="/2020/06/29/front_skills/vue/%E3%80%8Avue%E3%80%8Bvue-cli%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5%E6%95%B4%E7%90%86/"/>
      <url>/2020/06/29/front_skills/vue/%E3%80%8Avue%E3%80%8Bvue-cli%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h3 id="vue-cli"><a href="#vue-cli" class="headerlink" title="vue-cli"></a>vue-cli</h3><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><ul><li>vue-cli版本基于4.4.x </li><li>Vue CLI 致力于将 Vue 生态中的工具基础标准化</li><li>让使用者专注在撰写应用上，而不必花好几天去纠结配置的问题</li><li>提供了如下功能：<ul><li>@vue&#x2F;cli  交互式的项目脚手架</li><li>@vue&#x2F;cli + @vue&#x2F;cli-service-global  零配置原型开发</li><li>运行时依赖 (@vue&#x2F;cli-service） <blockquote><p>可升级；<br>基于 webpack 构建，并带有合理的默认配置；<br>可以通过项目内的配置文件进行配置；<br>可以通过插件进行扩展</p></blockquote></li><li>丰富的官方插件集合, @vue&#x2F;cli-plugin- (内建插件) ,vue-cli-plugin- (社区插件)  </li><li>完全图形化的创建和管理 Vue.js 项目的用户界面</li></ul></li></ul><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><h5 id="node-安装"><a href="#node-安装" class="headerlink" title="node 安装"></a>node 安装</h5><h5 id="cli-安装"><a href="#cli-安装" class="headerlink" title="cli 安装"></a>cli 安装</h5> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @vue/cli</span><br><span class="line"># OR</span><br><span class="line">yarn global add @vue/cli</span><br></pre></td></tr></table></figure><h5 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h5> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ vue --version</span><br><span class="line">@vue/cli 4.4.6</span><br></pre></td></tr></table></figure><h4 id="快速原型开发"><a href="#快速原型开发" class="headerlink" title="快速原型开发"></a>快速原型开发</h4><h5 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h5>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@vue/cli </span><br><span class="line">@vue/cli-service-global </span><br></pre></td></tr></table></figure><h5 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h5>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @vue/cli-service-global</span><br></pre></td></tr></table></figure><h5 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h5><ul><li>vue serve  开发环境启动命令  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ vue serve --help </span><br><span class="line">Usage: serve [options] [entry]</span><br><span class="line"></span><br><span class="line">serve a .js or .vue file in development mode with zero config</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">-o, --open         Open browser</span><br><span class="line">-c, --copy         Copy local url to clipboard</span><br><span class="line">-p, --port &lt;port&gt;  Port used by the server (default: 8080 or next available port)</span><br><span class="line">-h, --help         output usage information</span><br></pre></td></tr></table></figure></li><li>vue build 线上版本构建  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ vue build --help </span><br><span class="line">Usage: build [options] [entry]</span><br><span class="line"></span><br><span class="line">build a .js or .vue file in production mode with zero config</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">-t, --target &lt;target&gt;  Build target (app | lib | wc | wc-async, default: app)</span><br><span class="line">-n, --name &lt;name&gt;      name for lib or web-component mode (default: entry filename)</span><br><span class="line">-d, --dest &lt;dir&gt;       output directory (default: dist)</span><br><span class="line">-h, --help             output usage information</span><br></pre></td></tr></table></figure></li><li>指令默认入口文件（以下列表之一）<blockquote><p>main.js<br>index.js<br>App.vue 或 app.vue<br>也可以指定</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vue serve MyComponent.vue</span><br><span class="line">vue build MyComponent.vue</span><br></pre></td></tr></table></figure></blockquote></li></ul><h4 id="vue-cli-指令"><a href="#vue-cli-指令" class="headerlink" title="vue-cli 指令"></a>vue-cli 指令</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ vue --help </span><br><span class="line">create [options] &lt;app-name&gt;                create a new project powered by vue-cli-service</span><br><span class="line">  add [options] &lt;plugin&gt; [pluginOptions]     install a plugin and invoke its generator in an already created project</span><br><span class="line">  invoke [options] &lt;plugin&gt; [pluginOptions]  invoke the generator of a plugin in an already created project</span><br><span class="line">  inspect [options] [paths...]               inspect the webpack config in a project with vue-cli-service</span><br><span class="line">  serve [options] [entry]                    serve a .js or .vue file in development mode with zero config</span><br><span class="line">  build [options] [entry]                    build a .js or .vue file in production mode with zero config</span><br><span class="line">  ui [options]                               start and open the vue-cli ui</span><br><span class="line">  init [options] &lt;template&gt; &lt;app-name&gt;       generate a project from a remote template (legacy API, requires @vue/cli-init)</span><br><span class="line">  config [options] [value]                   inspect and modify the config</span><br><span class="line">  outdated [options]                         (experimental) check for outdated vue cli service / plugins</span><br><span class="line">  upgrade [options] [plugin-name]            (experimental) upgrade vue cli service / plugins</span><br><span class="line">  migrate [options] [plugin-name]            (experimental) run migrator for an already-installed cli plugin</span><br><span class="line">  info                                       print debugging information about your environment</span><br></pre></td></tr></table></figure><h5 id="vue-create-创建新项目"><a href="#vue-create-创建新项目" class="headerlink" title="vue create 创建新项目"></a>vue create 创建新项目</h5><blockquote><p>指令介绍</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">$ vue create --help</span><br><span class="line">Usage: create [options] &lt;app-name&gt;</span><br><span class="line"></span><br><span class="line">create a new project powered by vue-cli-service</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -p, --preset &lt;presetName&gt;       Skip prompts and use saved or remote preset</span><br><span class="line">  -d, --default                   Skip prompts and use default preset</span><br><span class="line">  -i, --inlinePreset &lt;json&gt;       Skip prompts and use inline JSON string as preset</span><br><span class="line">  -m, --packageManager &lt;command&gt;  Use specified npm client when installing dependencies</span><br><span class="line">  -r, --registry &lt;url&gt;            Use specified npm registry when installing dependencies (only for npm)</span><br><span class="line">  -g, --git [message]             Force git initialization with initial commit message</span><br><span class="line">  -n, --no-git                    Skip git initialization</span><br><span class="line">  -f, --force                     Overwrite target directory if it exists</span><br><span class="line">  --merge                         Merge target directory if it exists</span><br><span class="line">  -c, --clone                     Use git clone when fetching remote preset</span><br><span class="line">  -x, --proxy                     Use specified proxy when creating project</span><br><span class="line">  -b, --bare                      Scaffold project without beginner instructions</span><br><span class="line">  --skipGetStarted                Skip displaying &quot;Get started&quot; instructions</span><br><span class="line">  -h, --help                      output usage information</span><br></pre></td></tr></table></figure><blockquote><p>指令应用</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue create hello-world </span><br></pre></td></tr></table></figure><h5 id="vue-add-添加插件"><a href="#vue-add-添加插件" class="headerlink" title="vue add 添加插件"></a>vue add 添加插件</h5><h5 id="vue-invoke-调用插件"><a href="#vue-invoke-调用插件" class="headerlink" title="vue invoke  调用插件"></a>vue invoke  调用插件</h5><h5 id="vue-inspect-查看配置"><a href="#vue-inspect-查看配置" class="headerlink" title="vue inspect 查看配置"></a>vue inspect 查看配置</h5><h5 id="vue-serve-启动"><a href="#vue-serve-启动" class="headerlink" title="vue serve  启动"></a>vue serve  启动</h5><h5 id="vue-build-构建"><a href="#vue-build-构建" class="headerlink" title="vue build 构建"></a>vue build 构建</h5><h5 id="vue-ui-启动ui界面"><a href="#vue-ui-启动ui界面" class="headerlink" title="vue ui 启动ui界面"></a>vue ui 启动ui界面</h5><h5 id="vue-init-初始化项目"><a href="#vue-init-初始化项目" class="headerlink" title="vue init 初始化项目"></a>vue init 初始化项目</h5><h5 id="vue-config-查看修改配置"><a href="#vue-config-查看修改配置" class="headerlink" title="vue config 查看修改配置"></a>vue config 查看修改配置</h5><h5 id="vue-outdated"><a href="#vue-outdated" class="headerlink" title="vue outdated"></a>vue outdated</h5><h5 id="vue-upgrade-升级插件"><a href="#vue-upgrade-升级插件" class="headerlink" title="vue upgrade 升级插件"></a>vue upgrade 升级插件</h5><h5 id="vue-migrate-合并插件"><a href="#vue-migrate-合并插件" class="headerlink" title="vue migrate 合并插件"></a>vue migrate 合并插件</h5><h5 id="vue-info-查看环境信息"><a href="#vue-info-查看环境信息" class="headerlink" title="vue info  查看环境信息"></a>vue info  查看环境信息</h5>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> vue-cli </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《angular》- Angular cli 你熟练到哪种程度？</title>
      <link href="/2020/06/19/front_skills/angular/%E3%80%8Aangular%E3%80%8B-%20Angular%20cli%20%E4%BD%A0%E7%86%9F%E7%BB%83%E5%88%B0%E5%93%AA%E7%A7%8D%E7%A8%8B%E5%BA%A6%EF%BC%9F/"/>
      <url>/2020/06/19/front_skills/angular/%E3%80%8Aangular%E3%80%8B-%20Angular%20cli%20%E4%BD%A0%E7%86%9F%E7%BB%83%E5%88%B0%E5%93%AA%E7%A7%8D%E7%A8%8B%E5%BA%A6%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<p>angular-cli，顾名思义，用于angular应用开发的脚手架,我们可以在命令行执行对应的命令。</p><ul><li>angular-cli主版本，跟angular保持一致。譬如angular9 → angular-cli 9 </li><li>但是，子版本独立的。<blockquote><p>@angular&#x2F;<a href="mailto:&#x63;&#108;&#x69;&#x40;&#x39;&#46;&#x31;&#46;&#57;">&#x63;&#108;&#x69;&#x40;&#x39;&#46;&#x31;&#46;&#57;</a><br>added 269 packages from 206 contributors in 77.894s</p></blockquote></li></ul><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @angular/cli</span><br></pre></td></tr></table></figure><h4 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall -g @angular/cli</span><br><span class="line">npm cache clean</span><br></pre></td></tr></table></figure><h4 id="校验"><a href="#校验" class="headerlink" title="校验"></a>校验</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&gt; ng v</span><br><span class="line"></span><br><span class="line">     _                      _                 ____ _     ___</span><br><span class="line">    / \   _ __   __ _ _   _| | __ _ _ __     / ___| |   |_ _|</span><br><span class="line">   / △ \ | &#x27;_ \ / _` | | | | |/ _` | &#x27;__|   | |   | |    | |</span><br><span class="line">  / ___ \| | | | (_| | |_| | | (_| | |      | |___| |___ | |</span><br><span class="line"> /_/   \_\_| |_|\__, |\__,_|_|\__,_|_|       \____|_____|___|</span><br><span class="line">                |___/</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">Angular CLI: 9.1.9</span><br><span class="line">Node: 10.19.0</span><br><span class="line">OS: darwin x64</span><br><span class="line"></span><br><span class="line">Angular: </span><br><span class="line">... </span><br><span class="line">Ivy Workspace: </span><br><span class="line"></span><br><span class="line">Package                      Version</span><br><span class="line">------------------------------------------------------</span><br><span class="line">@angular-devkit/architect    0.901.9</span><br><span class="line">@angular-devkit/core         9.1.9</span><br><span class="line">@angular-devkit/schematics   9.1.9</span><br><span class="line">@schematics/angular          9.1.9</span><br><span class="line">@schematics/update           0.901.9</span><br><span class="line">rxjs                         6.5.4</span><br></pre></td></tr></table></figure><h3 id="cli命令介绍"><a href="#cli命令介绍" class="headerlink" title="cli命令介绍"></a>cli命令介绍</h3><h4 id="ng-命令列表"><a href="#ng-命令列表" class="headerlink" title="ng 命令列表"></a>ng 命令列表</h4><h5 id="1-add"><a href="#1-add" class="headerlink" title="1.add"></a>1.add</h5><blockquote><p>Adds support for an external library to your project.</p></blockquote><h5 id="2-analytics"><a href="#2-analytics" class="headerlink" title="2.analytics"></a>2.analytics</h5><blockquote><p>Configures the gathering of Angular CLI usage metrics. See <a href="https://angular.io/cli/usage-analytics-gathering">https://angular.io/cli/usage-analytics-gathering</a>.</p></blockquote><h5 id="3-build-b"><a href="#3-build-b" class="headerlink" title="3.build(b)"></a>3.build(b)</h5><blockquote><p>Compiles an Angular app into an output directory named dist&#x2F; at the given output path. Must be executed from within a workspace directory.</p></blockquote><h5 id="4-deploy"><a href="#4-deploy" class="headerlink" title="4.deploy"></a>4.deploy</h5><blockquote><p> Invokes the deploy builder for a specified project or for the default project in the workspace.</p></blockquote><h5 id="5-config"><a href="#5-config" class="headerlink" title="5.config"></a>5.config</h5><blockquote><p>  Retrieves or sets Angular configuration values in the angular.json file for the workspace.</p></blockquote><h5 id="6-doc-d"><a href="#6-doc-d" class="headerlink" title="6.doc (d)"></a>6.doc (d)</h5><blockquote><p>  Opens the official Angular documentation (angular.io) in a browser, and searches for a given keyword.</p></blockquote><h5 id="7-e2e-e"><a href="#7-e2e-e" class="headerlink" title="7.e2e (e)"></a>7.e2e (e)</h5><blockquote><p> Builds and serves an Angular app, then runs end-to-end tests using Protractor.</p></blockquote><h5 id="8-generate-g"><a href="#8-generate-g" class="headerlink" title="8.generate (g)"></a>8.generate (g)</h5><blockquote><p>Generates and&#x2F;or modifies files based on a schematic.</p></blockquote><blockquote><p>ng g [schematic] [options]<br>schematic 列表如下(&#x3D;&#x3D;&#x3D; options均以两个-分隔 &#x3D;&#x3D;&#x3D; )：</p></blockquote><h6 id="appShell"><a href="#appShell" class="headerlink" title="appShell"></a>appShell</h6><blockquote><ul><li>ss</li></ul></blockquote><h6 id="application"><a href="#application" class="headerlink" title="application"></a>application</h6><blockquote><ul><li>ss</li></ul></blockquote><h6 id="class-产生新的ts文件"><a href="#class-产生新的ts文件" class="headerlink" title="class - 产生新的ts文件"></a>class - 产生新的ts文件</h6><blockquote><ul><li>ng g class [name] [options]</li><li>ng g class classTest –lintFix&#x3D;true   # 文件创建后，应用lint fix功能</li></ul></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 得到如下ts文件</span><br><span class="line">export class ClassTest &#123;</span><br><span class="line">&#125;</span><br><span class="line"># spec.ts文件</span><br><span class="line">describe(&#x27;ClassTest&#x27;, () =&gt; &#123;</span><br><span class="line">     it(&#x27;should create an instance&#x27;, () =&gt; &#123;</span><br><span class="line">     expect(new ClassTest()).toBeTruthy();</span><br><span class="line">     &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><ul><li>ng g class classTest –project&#x3D;projectTest  # 设置项目名</li><li>ng g class classTest –skipTests&#x3D;true   #不创建spec.ts的测试文件</li><li>ng g class classTest –type&#x3D;model   # 修改ts，形如 classTest.model.ts</li></ul></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; ng g class --type=model</span><br><span class="line">? What name would you like to use for the class? Test2</span><br><span class="line">CREATE src/app/test2.model.spec.ts (156 bytes)</span><br><span class="line">CREATE src/app/test2.model.ts (23 bytes)</span><br><span class="line"></span><br><span class="line">&gt; ng g cl test3 --type=bar</span><br><span class="line">CREATE src/app/test3.bar.spec.ts (154 bytes)</span><br><span class="line">CREATE src/app/test3.bar.ts (23 bytes)</span><br></pre></td></tr></table></figure><h6 id="component"><a href="#component" class="headerlink" title="component"></a>component</h6><blockquote><ul><li>ng g c [name] [options]</li><li>ng g c user –prefix&#x3D;we # 指定组件的选择器</li><li>ng g c user –selector&#x3D;idata  # 指定组件的选择器前缀</li><li>ng g c user –export&#x3D;true  # 导出组件</li></ul></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&gt; ng g c user --selector=idata --prefix=we --export=true</span><br><span class="line">CREATE src/app/user/user.component.scss (0 bytes)</span><br><span class="line">CREATE src/app/user/user.component.html (19 bytes)</span><br><span class="line">CREATE src/app/user/user.component.spec.ts (614 bytes)</span><br><span class="line">CREATE src/app/user/user.component.ts (265 bytes)</span><br><span class="line">UPDATE src/app/app.module.ts (495 bytes)</span><br><span class="line">@Component(&#123;</span><br><span class="line">  selector: &#x27;idata&#x27;,</span><br><span class="line">  templateUrl: &#x27;./user.component.html&#x27;,</span><br><span class="line">  styleUrls: [&#x27;./user.component.scss&#x27;]</span><br><span class="line">&#125;)</span><br><span class="line">export class UserComponent implements OnInit &#123;</span><br><span class="line"></span><br><span class="line">  constructor() &#123; &#125;</span><br><span class="line"></span><br><span class="line">  ngOnInit(): void &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt; ng g c user2 --prefix=we --export=true</span><br><span class="line">@Component(&#123;</span><br><span class="line">  selector: &#x27;we-user2&#x27;,</span><br><span class="line">  templateUrl: &#x27;./user2.component.html&#x27;,</span><br><span class="line">  styleUrls: [&#x27;./user2.component.scss&#x27;]</span><br><span class="line">&#125;)</span><br><span class="line">export class User2Component implements OnInit &#123;</span><br><span class="line"></span><br><span class="line">  constructor() &#123; &#125;</span><br><span class="line"></span><br><span class="line">  ngOnInit(): void &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"># 可见，prefix 于selector互斥</span><br></pre></td></tr></table></figure><h6 id="directive"><a href="#directive" class="headerlink" title="directive"></a>directive</h6><blockquote><ul><li>ng g d [name] [options]</li></ul></blockquote><h6 id="enum"><a href="#enum" class="headerlink" title="enum"></a>enum</h6><blockquote><ul><li>ng g e [name] [options]</li></ul></blockquote><h6 id="guard"><a href="#guard" class="headerlink" title="guard"></a>guard</h6><h6 id="interceptor"><a href="#interceptor" class="headerlink" title="interceptor"></a>interceptor</h6><h6 id="interface"><a href="#interface" class="headerlink" title="interface"></a>interface</h6><blockquote><ul><li>ng g i [name] [options]</li></ul></blockquote><h6 id="library"><a href="#library" class="headerlink" title="library"></a>library</h6><h6 id="module"><a href="#module" class="headerlink" title="module"></a>module</h6><h6 id="pipe"><a href="#pipe" class="headerlink" title="pipe"></a>pipe</h6><blockquote><ul><li>ng g p [name] [options]</li></ul></blockquote><h6 id="service"><a href="#service" class="headerlink" title="service"></a>service</h6><blockquote><ul><li>ng g s [name] [options]</li></ul></blockquote><h6 id="serviceWorker"><a href="#serviceWorker" class="headerlink" title="serviceWorker"></a>serviceWorker</h6><h6 id="webWorker"><a href="#webWorker" class="headerlink" title="webWorker"></a>webWorker</h6><h5 id="9-help"><a href="#9-help" class="headerlink" title="9.help"></a>9.help</h5><blockquote><p> Lists available commands and their short descriptions.</p></blockquote><h5 id="10-lint-l"><a href="#10-lint-l" class="headerlink" title="10.lint (l)"></a>10.lint (l)</h5><blockquote><p> Runs linting tools on Angular app code in a given project folder.</p></blockquote><h5 id="11-new-n"><a href="#11-new-n" class="headerlink" title="11.new (n)"></a>11.new (n)</h5><blockquote><p>Creates a new workspace and an initial Angular app.</p></blockquote><h6 id="ng-n"><a href="#ng-n" class="headerlink" title="ng n"></a>ng n</h6><ul><li>创建新的angular工程 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> $ ng n my-first-project</span><br><span class="line">? Would you like to add Angular routing? Yes</span><br><span class="line">? Which stylesheet format would you like to use? SCSS       ]</span><br><span class="line">CREATE angular-demo/README.md (1028 bytes)</span><br><span class="line">CREATE angular-demo/.editorconfig (274 bytes)</span><br><span class="line">CREATE angular-demo/.gitignore (631 bytes)</span><br><span class="line">CREATE angular-demo/angular.json (3702 bytes)</span><br><span class="line">CREATE angular-demo/package.json (1254 bytes)</span><br><span class="line">CREATE angular-demo/tsconfig.json (489 bytes)</span><br><span class="line">CREATE angular-demo/tslint.json (3125 bytes)</span><br><span class="line">CREATE angular-demo/browserslist (429 bytes)</span><br><span class="line">CREATE angular-demo/karma.conf.js (1024 bytes)</span><br><span class="line">CREATE angular-demo/tsconfig.app.json (210 bytes)</span><br><span class="line">.....</span><br><span class="line">Packages installed successfully.</span><br><span class="line">Successfully initialized git.</span><br></pre></td></tr></table></figure></li></ul><h5 id="12-run"><a href="#12-run" class="headerlink" title="12.run"></a>12.run</h5><blockquote><p>Runs an Architect target with an optional custom builder configuration defined in your project.</p></blockquote><h5 id="13-serve-s"><a href="#13-serve-s" class="headerlink" title="13.serve (s)"></a>13.serve (s)</h5><blockquote><p>Builds and serves your app, rebuilding on file changes. </p></blockquote><h5 id="14-test-t"><a href="#14-test-t" class="headerlink" title="14.test (t)"></a>14.test (t)</h5><blockquote><p>Runs unit tests in a project.</p></blockquote><h5 id="15-update"><a href="#15-update" class="headerlink" title="15.update"></a>15.update</h5><blockquote><p>Updates your application and its dependencies. See <a href="https://update.angular.io/">https://update.angular.io/</a></p></blockquote><h5 id="16-version-v"><a href="#16-version-v" class="headerlink" title="16.version (v)"></a>16.version (v)</h5><blockquote><p>Outputs Angular CLI version.</p></blockquote><h5 id="17-xi18n-i18n-extract"><a href="#17-xi18n-i18n-extract" class="headerlink" title="17.xi18n (i18n-extract)"></a>17.xi18n (i18n-extract)</h5><blockquote><p>Extracts i18n messages from source code.</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> angular </tag>
            
            <tag> angular-cli </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《angular8》- Rxjs 深入了解走向高端</title>
      <link href="/2020/06/13/front_skills/angular/%E3%80%8Aangular8%E3%80%8B-%20Rxjs%20%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3%E8%B5%B0%E5%90%91%E9%AB%98%E7%AB%AF/"/>
      <url>/2020/06/13/front_skills/angular/%E3%80%8Aangular8%E3%80%8B-%20Rxjs%20%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3%E8%B5%B0%E5%90%91%E9%AB%98%E7%AB%AF/</url>
      
        <content type="html"><![CDATA[<ul><li>Rxjs是Angular http请求所避开不了的一个主题。</li><li>Angular http请求，返回Observable对象，然后在业务逻辑中subscirbe获取返回值。具体的用法，可以参考<a href="https://juejin.im/post/5ee344586fb9a0479673478e#heading-26">Angular8 HttpClient 30分钟深入了解下</a>。</li><li>本文目的在于，针对Rxjs的所有的内容，进行一次自我理解升华。</li><li>rxjs入门内容，请移步<a href="https://juejin.im/post/5dca49d35188255700056e44">前端Rollup+RxJs响应式编程实践</a></li></ul><p>下面进入总结主题：</p><h4 id="Observable是什么？"><a href="#Observable是什么？" class="headerlink" title="Observable是什么？"></a>Observable是什么？</h4><ul><li>通俗解释，形如发布订阅模式</li><li>目的在于解耦代码，便于angular业务逻辑之间异步传递值，此时类似promise</li><li>简单例子 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"> const locations = new Observable((observer) =&gt; &#123;</span><br><span class="line">  let watchId: number;</span><br><span class="line"></span><br><span class="line">  // Simple geolocation API check provides values to publish</span><br><span class="line">  if (&#x27;geolocation&#x27; in navigator) &#123;</span><br><span class="line">    watchId = navigator.geolocation.watchPosition((position: Position) =&gt; &#123;</span><br><span class="line">      observer.next(position);</span><br><span class="line">    &#125;, (error: PositionError) =&gt; &#123;</span><br><span class="line">      observer.error(error);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    observer.error(&#x27;Geolocation not available&#x27;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // When the consumer unsubscribes, clean up data ready for next subscription.</span><br><span class="line">  return &#123;</span><br><span class="line">    unsubscribe() &#123;</span><br><span class="line">      navigator.geolocation.clearWatch(watchId);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// Call subscribe() to start listening for updates.</span><br><span class="line">const locationsSubscription = locations.subscribe(&#123;</span><br><span class="line">  next(position) &#123;</span><br><span class="line">    console.log(&#x27;Current Position: &#x27;, position);</span><br><span class="line">  &#125;,</span><br><span class="line">  error(msg) &#123;</span><br><span class="line">    console.log(&#x27;Error Getting Location: &#x27;, msg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// Stop listening for location after 10 seconds</span><br><span class="line">setTimeout(() =&gt; &#123;</span><br><span class="line">  locationsSubscription.unsubscribe();</span><br><span class="line">&#125;, 10000);</span><br></pre></td></tr></table></figure></li></ul><h3 id="Rxjs-核心概念"><a href="#Rxjs-核心概念" class="headerlink" title="Rxjs 核心概念"></a>Rxjs 核心概念</h3><h4 id="Observable"><a href="#Observable" class="headerlink" title="Observable"></a>Observable</h4><h4 id="operators"><a href="#operators" class="headerlink" title="operators"></a>operators</h4><h4 id=""><a href="#" class="headerlink" title=""></a></h4>]]></content>
      
      
      
        <tags>
            
            <tag> angular </tag>
            
            <tag> rxjs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《angular8》- Angular HttpClient 30分钟轻松上手</title>
      <link href="/2020/06/12/front_skills/angular/%E3%80%8Aangular8%E3%80%8B-%20Angular%20HttpClient%2030%E5%88%86%E9%92%9F%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B/"/>
      <url>/2020/06/12/front_skills/angular/%E3%80%8Aangular8%E3%80%8B-%20Angular%20HttpClient%2030%E5%88%86%E9%92%9F%E8%BD%BB%E6%9D%BE%E4%B8%8A%E6%89%8B/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="Angular8-HttpClient-30分钟深入了解下"><a href="#Angular8-HttpClient-30分钟深入了解下" class="headerlink" title="Angular8 HttpClient 30分钟深入了解下"></a>Angular8 HttpClient 30分钟深入了解下</h2><p>前端开发，axios是标配的http请求发起libary, 采用的是Promise的方式。然后，Angular中采用的是另外一种形式Observable，观察订阅模式。Angular默认推荐采用内置的HTTPClient。<br>下面让我们开始今天的主题，HTTPClient</p><h3 id="模块引入"><a href="#模块引入" class="headerlink" title="模块引入"></a>模块引入</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import &#123;HttpClientModule&#125; from &#x27;@angular/common/http&#x27;;</span><br><span class="line"></span><br><span class="line">@NgModule(&#123;</span><br><span class="line">    declarations: [</span><br><span class="line">        AppComponent</span><br><span class="line">    ],</span><br><span class="line">    imports: [</span><br><span class="line">        BrowserModule,</span><br><span class="line">        HttpClientModule</span><br><span class="line">    ],</span><br><span class="line">    providers: [],</span><br><span class="line">    bootstrap: [AppComponent]</span><br><span class="line">&#125;)</span><br><span class="line">export class AppModule &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h3><h4 id="GET请求"><a href="#GET请求" class="headerlink" title="GET请求"></a>GET请求</h4><h5 id="指定请求返回类型"><a href="#指定请求返回类型" class="headerlink" title="指定请求返回类型"></a>指定请求返回类型</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">this.http.get&lt;Config&gt;(this.configUrl)</span><br><span class="line">  .subscribe((data: Config) =&gt; this.config = &#123; ...data &#125;);</span><br></pre></td></tr></table></figure><ul><li>get请求，明确返回的数据类型为Config,故请求形式为：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this.http.get&lt;Config&gt;()...</span><br></pre></td></tr></table></figure></li><li>请求返回后，进行数据转换</li></ul><h5 id="不指定请求返回类型"><a href="#不指定请求返回类型" class="headerlink" title="不指定请求返回类型"></a>不指定请求返回类型</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">this.http.get(this.configUrl)</span><br><span class="line">.subscribe((data: any) =&gt; this.config = &#123; ...data &#125;);</span><br></pre></td></tr></table></figure><p> 等效于</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">this.http.get&lt;Object&gt;(this.configUrl)</span><br><span class="line">.subscribe((data: Object) =&gt; this.config = &#123; ...data &#125;);</span><br></pre></td></tr></table></figure><p>  <strong>问题1： 如果服务端，返回的数据就是一个text文本，譬如Hello,world，你猜会怎么样？</strong></p><h5 id="请求url携带参数"><a href="#请求url携带参数" class="headerlink" title="请求url携带参数"></a>请求url携带参数</h5><ul><li>方法一：HttpParams 形式set <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 必须.链式set，否则参数空</span><br><span class="line">const params = new HttpParams()</span><br><span class="line">    .set(&#x27;orderBy&#x27;, &#x27;&quot;$key&quot;&#x27;)</span><br><span class="line">    .set(&#x27;limitToFirst&#x27;, &quot;1&quot;);</span><br><span class="line">    </span><br><span class="line">this.http.get(this.configUrl,&#123;params&#125;)</span><br><span class="line">  .subscribe((data: any) =&gt; this.config = &#123; ...data &#125;);</span><br></pre></td></tr></table></figure></li><li>方法二： fromString<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const params = new HttpParams(&#123;</span><br><span class="line">  fromString: &#x27;orderBy=&quot;$key&quot;&amp;limitToFirst=1&#x27;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">this.http.get(this.configUrl,&#123;params&#125;)</span><br><span class="line">    .subscribe((data: any) =&gt; this.config = &#123; ...data &#125;);</span><br></pre></td></tr></table></figure><strong>问题2： 如果前端想拿到后端api header头中参数，怎么办？</strong></li></ul><h4 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">this.http.post(url,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;courseListIcon&quot;: &quot;...&quot;,</span><br><span class="line">        &quot;description&quot;: &quot;TEST&quot;,</span><br><span class="line">        &quot;iconUrl&quot;: &quot;..&quot;,</span><br><span class="line">        &quot;longDescription&quot;: &quot;...&quot;,</span><br><span class="line">        &quot;url&quot;: &quot;new-url&quot;</span><br><span class="line">    &#125;)</span><br><span class="line">    .subscribe(</span><br><span class="line">        (res) =&gt; &#123;</span><br><span class="line">            console.log(&quot;POST call successful value returned in body&quot;, </span><br><span class="line">                        res);</span><br><span class="line">        &#125;,</span><br><span class="line">        error =&gt; &#123;</span><br><span class="line">            console.log(&quot;POST call in error&quot;, error);</span><br><span class="line">        &#125;,</span><br><span class="line">        () =&gt; &#123;</span><br><span class="line">            console.log(&quot;The POST observable is now completed.&quot;);</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="DELETE"><a href="#DELETE" class="headerlink" title="DELETE"></a>DELETE</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">this.http.delete(url1)</span><br><span class="line">    .subscribe(</span><br><span class="line">        (res) =&gt; &#123;</span><br><span class="line">            console.log(&quot;DELETE call successful value returned in body&quot;, </span><br><span class="line">                        res);</span><br><span class="line">        &#125;,</span><br><span class="line">        error =&gt; &#123;</span><br><span class="line">            console.log(&quot;DELETE call in error&quot;, error);</span><br><span class="line">        &#125;,</span><br><span class="line">        () =&gt; &#123;</span><br><span class="line">            console.log(&quot;The DELETE observable is now completed.&quot;);</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="PATCH"><a href="#PATCH" class="headerlink" title="PATCH"></a>PATCH</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">this.http.patch(url,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;description&quot;: &quot;Angular Tutorial For Beginners PATCH TEST&quot;,</span><br><span class="line">    &#125;)</span><br><span class="line">    .subscribe(</span><br><span class="line">        (res) =&gt; &#123;</span><br><span class="line">            console.log(&quot;PATCH call successful value returned in body&quot;, </span><br><span class="line">                        res);</span><br><span class="line">        &#125;,</span><br><span class="line">        error =&gt; &#123;</span><br><span class="line">            console.log(&quot;PATCH call in error&quot;, error);</span><br><span class="line">        &#125;,</span><br><span class="line">        () =&gt; &#123;</span><br><span class="line">            console.log(&quot;The PATCH observable is now completed.&quot;);</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h3><h4 id="GET请求-1"><a href="#GET请求-1" class="headerlink" title="GET请求"></a>GET请求</h4><h5 id="request方式传参"><a href="#request方式传参" class="headerlink" title="request方式传参"></a>request方式传参</h5>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">   const params = new HttpParams(&#123;</span><br><span class="line">    fromString: &#x27;orderBy=&quot;$key&quot;&amp;limitToFirst=1&#x27;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">this.http.request(&quot;GET&quot;,this.configUrl, &#123; params &#125;)</span><br></pre></td></tr></table></figure><h5 id="header传参"><a href="#header传参" class="headerlink" title="header传参"></a>header传参</h5><ul><li>方法一： HttpHeaders   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> const headers = new HttpHeaders()</span><br><span class="line">          .set(&quot;X-CustomHeader&quot;, &quot;custom header value&quot;);</span><br><span class="line">          </span><br><span class="line">this.http.get(this.configUrl,&#123; headers &#125;)</span><br><span class="line">  .do(console.log)</span><br><span class="line">  .map(data =&gt; _.values(data));</span><br></pre></td></tr></table></figure></li><li>方法二：{} 字面量   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> const headers = &#123;</span><br><span class="line">   &quot;X-CustomHeader&quot;, &quot;custom header value&quot;,</span><br><span class="line">   &#x27;content-type&#x27;: &#x27;application/json&#x27;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line">this.http.get(this.configUrl,&#123; headers &#125;)</span><br><span class="line">  .do(console.log)</span><br><span class="line">  .map(data =&gt; _.values(data));</span><br></pre></td></tr></table></figure></li></ul><h5 id="解答问题1："><a href="#解答问题1：" class="headerlink" title="解答问题1："></a>解答问题1：</h5><ul><li><p>我们看一下源码针对Get方法请求参数的定义</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">get(url: string, options?: &#123;</span><br><span class="line">      headers?: HttpHeaders | &#123;</span><br><span class="line">          [header: string]: string | string[];</span><br><span class="line">      &#125;;</span><br><span class="line">      </span><br><span class="line">      # 默认值有： response| body| event </span><br><span class="line">      observe?: &#x27;body&#x27;;# 默认读取的是response中的body </span><br><span class="line">      params?: HttpParams | &#123;</span><br><span class="line">          [param: string]: string | string[];</span><br><span class="line">      &#125;;</span><br><span class="line">      reportProgress?: boolean;</span><br><span class="line">      </span><br><span class="line">      # 默认值有： arraybuffer | json | blob |text</span><br><span class="line">      responseType?: &#x27;json&#x27;;# 这里，ts参数类型可选，默认值json，</span><br><span class="line">      withCredentials?: boolean;</span><br><span class="line">  &#125;): Observable&lt;Object&gt;;</span><br></pre></td></tr></table></figure></li><li><p>故从源码我们可以知道，后端返回Hello,world,前端get方法会返回JSON解析异常。此时我们设置下responseType即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">this.http.get(this.configUrl,&#123;responseType:&#x27;text&#x27;&#125;)</span><br><span class="line">.subscribe((data: any) =&gt; this.config = &#123; ...data &#125;);</span><br></pre></td></tr></table></figure></li></ul><h5 id="解答问题二："><a href="#解答问题二：" class="headerlink" title="解答问题二："></a>解答问题二：</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">this.http.get&lt;Config&gt;(</span><br><span class="line">   this.configUrl, &#123; observe: &#x27;response&#x27; &#125;)</span><br><span class="line">  .subscribe((data: any) =&gt; this.config = &#123; ...data &#125;);</span><br></pre></td></tr></table></figure><h5 id="那么event-是干什么的呢？"><a href="#那么event-是干什么的呢？" class="headerlink" title="那么event 是干什么的呢？"></a>那么event 是干什么的呢？</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">const request = new HttpRequest(</span><br><span class="line">      &quot;POST&quot;, this.uploadURL, &#123;&#125;,&#123;observe: &#x27;events&#x27;,reportProgress: true&#125;);</span><br><span class="line">  this.http.request(request)</span><br><span class="line">      .subscribe(</span><br><span class="line">          event =&gt; &#123;</span><br><span class="line">              # 文件上传进度判定</span><br><span class="line">              if (event.type === HttpEventType.DownloadProgress) &#123;</span><br><span class="line">                  console.log(&quot;Download progress event&quot;, event);</span><br><span class="line">              &#125;</span><br><span class="line">              if (event.type === HttpEventType.UploadProgress) &#123;</span><br><span class="line">                  console.log(&quot;Upload progress event&quot;, event);</span><br><span class="line">              &#125;</span><br><span class="line">              if (event.type === HttpEventType.Response) &#123;</span><br><span class="line">                  console.log(&quot;response received...&quot;, event.body);</span><br><span class="line">              &#125;</span><br><span class="line"></span><br><span class="line">          &#125;</span><br><span class="line">      );</span><br></pre></td></tr></table></figure><h3 id="高级"><a href="#高级" class="headerlink" title="高级"></a>高级</h3><h4 id="GET请求-2"><a href="#GET请求-2" class="headerlink" title="GET请求"></a>GET请求</h4><h5 id="并行多个Get处理"><a href="#并行多个Get处理" class="headerlink" title="并行多个Get处理"></a>并行多个Get处理</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">const parallel$ = Observable.forkJoin(</span><br><span class="line">        this.http.get(url1),</span><br><span class="line">        this.http.get(url2)</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">parallel$.subscribe(</span><br><span class="line">    values =&gt; &#123;</span><br><span class="line">        console.log(&quot;all values&quot;, values)</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h5 id="串行多个Get请求"><a href="#串行多个Get请求" class="headerlink" title="串行多个Get请求"></a>串行多个Get请求</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const sequence$ = this.http.get&lt;Config&gt;(url1)</span><br><span class="line">    .switchMap(config =&gt; &#123;</span><br><span class="line">        config.description+= &#x27; - TEST &#x27;;</span><br><span class="line">        return this.http.put(url2,config)</span><br><span class="line">    &#125;);</span><br><span class="line">sequence$.subscribe(</span><br><span class="line">    values =&gt; console.log(&quot;result observable &quot;, values) </span><br><span class="line">);</span><br></pre></td></tr></table></figure><h5 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">this.http</span><br><span class="line">    .get(&quot;/api/simulate-error&quot;)</span><br><span class="line">    .catch( error =&gt; &#123;</span><br><span class="line">        // here we can show an error message to the user,</span><br><span class="line">        // for example via a service</span><br><span class="line">        console.error(&quot;error catched&quot;, error);</span><br><span class="line">        return Observable.of(&#123;description: &quot;Error Value Emitted&quot;&#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">    .subscribe(</span><br><span class="line">        val =&gt; console.log(&#x27;Value emitted successfully&#x27;, val),</span><br><span class="line">        error =&gt; &#123;</span><br><span class="line">            console.error(&quot;This line is never called &quot;,error);</span><br><span class="line">        &#125;,</span><br><span class="line">        () =&gt; console.log(&quot;HTTP Observable completed...&quot;)</span><br><span class="line">    );</span><br></pre></td></tr></table></figure><h5 id="请求拦截"><a href="#请求拦截" class="headerlink" title="请求拦截"></a>请求拦截</h5><ul><li>定义鉴权拦截器<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">import &#123;Injectable&#125; from &quot;@angular/core&quot;;</span><br><span class="line">import &#123;HttpEvent, HttpHandler, HttpInterceptor&#125; </span><br><span class="line">     from &quot;@angular/common/http&quot;;</span><br><span class="line">import &#123;HttpRequest&#125; from &quot;@angular/common/http&quot;;</span><br><span class="line">import &#123;Observable&#125; from &quot;rxjs/Observable&quot;;</span><br><span class="line"></span><br><span class="line">@Injectable()</span><br><span class="line">export class AuthInterceptor implements HttpInterceptor &#123;</span><br><span class="line">    </span><br><span class="line">    constructor(private authService: AuthService) &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    intercept(req: HttpRequest&lt;any&gt;, </span><br><span class="line">               next: HttpHandler):Observable&lt;HttpEvent&lt;any&gt;&gt; &#123;</span><br><span class="line">        </span><br><span class="line">        const clonedRequest = req.clone(&#123;</span><br><span class="line">            headers: req.headers.set(</span><br><span class="line">                &#x27;X-CustomAuthHeader&#x27;, </span><br><span class="line">                authService.getToken())</span><br><span class="line">        &#125;);</span><br><span class="line">        console.log(&quot;new headers&quot;, clonedRequest.headers.keys());</span><br><span class="line">        return next.handle(clonedRequest);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>配置拦截器<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">@NgModule(&#123;</span><br><span class="line">    declarations: [</span><br><span class="line">        AppComponent</span><br><span class="line">    ],</span><br><span class="line">    imports: [</span><br><span class="line">        BrowserModule,</span><br><span class="line">        HttpClientModule</span><br><span class="line">    ],</span><br><span class="line">    providers: [</span><br><span class="line">        [ </span><br><span class="line">           &#123; </span><br><span class="line">            provide: HTTP_INTERCEPTORS, </span><br><span class="line">            useClass: AuthInterceptor,</span><br><span class="line">            multi: true </span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">    ],</span><br><span class="line">    bootstrap: [AppComponent]</span><br><span class="line">&#125;)</span><br><span class="line">export class AppModule &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><p><a href="https://blog.angular-university.io/angular-http/">angular </a></p></li><li><p><a href="https://angular.cn/guide/http#reading-the-full-response">angular 官网 </a></p></li></ul><h3 id="推荐"><a href="#推荐" class="headerlink" title="推荐"></a>推荐</h3><h4 id="Angular8状态管理NgRx"><a href="#Angular8状态管理NgRx" class="headerlink" title="Angular8状态管理NgRx"></a><a href="https://juejin.im/post/5ddcd2b56fb9a07ad9676ca2">Angular8状态管理NgRx</a></h4><h4 id="前端Rollup-RxJs响应式编程实践"><a href="#前端Rollup-RxJs响应式编程实践" class="headerlink" title="前端Rollup+RxJs响应式编程实践"></a><a href="https://juejin.im/post/5dca49d35188255700056e44">前端Rollup+RxJs响应式编程实践</a></h4><h4 id="Angular8-httpclient简单入门"><a href="#Angular8-httpclient简单入门" class="headerlink" title="Angular8 httpclient简单入门"></a><a href="https://juejin.im/post/5dc534ce51882559706f82f9">Angular8 httpclient简单入门</a></h4><h4 id="20个你值得了解的Angular开源项目"><a href="#20个你值得了解的Angular开源项目" class="headerlink" title="20个你值得了解的Angular开源项目"></a><a href="https://juejin.im/post/5edf916a6fb9a047e6080dd9">20个你值得了解的Angular开源项目</a></h4><h4 id="angular8-日常开发填坑指南"><a href="#angular8-日常开发填坑指南" class="headerlink" title="angular8 日常开发填坑指南"></a><a href="https://juejin.im/post/5ed080ebe51d45788325f27e">angular8 日常开发填坑指南</a></h4>]]></content>
      
      
      
        <tags>
            
            <tag> angular </tag>
            
            <tag> http </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《angular8》-  angular 组件升级引用ui-grid最佳实践</title>
      <link href="/2020/06/10/front_skills/angular/%E3%80%8Aangular8%E3%80%8B-%20%20angular%20%E7%BB%84%E4%BB%B6%E9%99%8D%E7%BA%A7%E5%BC%95%E7%94%A8ui-grid%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/"/>
      <url>/2020/06/10/front_skills/angular/%E3%80%8Aangular8%E3%80%8B-%20%20angular%20%E7%BB%84%E4%BB%B6%E9%99%8D%E7%BA%A7%E5%BC%95%E7%94%A8ui-grid%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</url>
      
        <content type="html"><![CDATA[<p>Angular web 项目少不了列表的存在。针对angularjs web项目，进行技术升级，需要耗费一番功夫，不是简单的从ng-if变为*ngIf就能完成的。这些Angular框架，都替我们考虑到了。本文重点主要介绍UpgradeComponent进行组件升级，包裹使用angularjs ui-grid，实现angular 列表ui 保持不变效果。替代方案ag-grid，请移步<a href="https://juejin.im/post/5def66ae6fb9a0162b7f2f07">ag-grid具体参考</a>。<br>介于代码不方便copy，只能使用官网example进行实践过程介绍，下面我们进入主题：</p><h4 id="技术要点"><a href="#技术要点" class="headerlink" title="技术要点"></a>技术要点</h4><ul><li><p>本文实践依据angularjs component api，本文angularjs组件如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 不是所有的都可以进行升级的哦，</span><br><span class="line">export const heroGrid = &#123;</span><br><span class="line">bindings: &#123;</span><br><span class="line">  hero: &#x27;&lt;&#x27;,</span><br><span class="line">  deleted: &#x27;&amp;&#x27;</span><br><span class="line">&#125;,</span><br><span class="line">template: `</span><br><span class="line">  &lt;h2&gt;&#123;&#123;$ctrl.hero.name&#125;&#125; details!&lt;/h2&gt;</span><br><span class="line">  &lt;div&gt;&lt;label&gt;id: &lt;/label&gt;&#123;&#123;$ctrl.hero.id&#125;&#125;&lt;/div&gt;</span><br><span class="line">  &lt;button ng-click=&quot;$ctrl.onDelete()&quot;&gt;Delete&lt;/button&gt;</span><br><span class="line">`,</span><br><span class="line">controller: function() &#123;</span><br><span class="line">  this.onDelete = () =&gt; &#123;</span><br><span class="line">    this.deleted(this.hero);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>不是所有的angularjs指令都可以升级，在angular组件中使用哦，具体请参考(<a href="https://angular.io/guide/upgrade#using-component-directives">https://angular.io/guide/upgrade#using-component-directives</a>)</p></li><li><p>angularjs vs angular属性绑定<br><img src="https://s1.ax1x.com/2020/06/10/t78mSf.png"></p></li><li><p>angular指令的input、output与angularjs的输入、输出对应</p></li></ul><h3 id="升级实践"><a href="#升级实践" class="headerlink" title="升级实践"></a>升级实践</h3><h4 id="定义angularjs组件"><a href="#定义angularjs组件" class="headerlink" title="定义angularjs组件"></a>定义angularjs组件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">export const heroGrid = &#123;</span><br><span class="line">  bindings: &#123;</span><br><span class="line">    gridOptions: &#x27;&lt;&#x27;,</span><br><span class="line">    deleted: &#x27;&amp;&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  template: `</span><br><span class="line">     &lt;div id=&quot;grid1&quot; ui-grid=&quot;gridOptions&quot; class=&quot;grid&quot;&gt;&lt;/div&gt;</span><br><span class="line">  `,</span><br><span class="line">  controller: function() &#123;</span><br><span class="line">    this.onDelete = () =&gt; &#123;</span><br><span class="line">      this.deleted(this.hero);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="定义angular8-directive"><a href="#定义angular8-directive" class="headerlink" title="定义angular8 directive"></a>定义angular8 directive</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Directive, ElementRef, Injector, Input, Output, EventEmitter &#125; from &#x27;@angular/core&#x27;;</span><br><span class="line">import &#123; UpgradeComponent &#125; from &#x27;@angular/upgrade/static&#x27;;</span><br><span class="line">import &#123; Hero &#125; from &#x27;../hero&#x27;;</span><br><span class="line"></span><br><span class="line">@Directive(&#123;</span><br><span class="line">  selector: &#x27;hero-grid&#x27;</span><br><span class="line">&#125;)</span><br><span class="line">export class heroGridDirective extends UpgradeComponent &#123;</span><br><span class="line">  private subject:Subject = new Subject();</span><br><span class="line">  @Input() gridOptions: any;</span><br><span class="line"></span><br><span class="line">  @Input() </span><br><span class="line">  set gridData(data:Hero[])&#123;</span><br><span class="line">    if(!data)&#123;</span><br><span class="line">      return;</span><br><span class="line">    &#125;</span><br><span class="line">    this.gridOptions.data = data;</span><br><span class="line">    this.subject.next();</span><br><span class="line">  &#125;;</span><br><span class="line">  </span><br><span class="line">  @Output() deleted: EventEmitter&lt;Hero&gt;;</span><br><span class="line"></span><br><span class="line">  constructor(elementRef: ElementRef, injector: Injector) &#123;</span><br><span class="line">    super(&#x27;heroGrid&#x27;, elementRef, injector);</span><br><span class="line">    const $scope =  injector.get(&#x27;scope&#x27;);</span><br><span class="line">    this.subject.subscribe(res =&gt; &#123;</span><br><span class="line">       //延迟更新当前scope</span><br><span class="line">       defer(() =&gt; &#123;</span><br><span class="line">         $scope.digest();</span><br><span class="line">       &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>需要扩展UpgradeComponent组件</li><li>需要调用super方法，传递参数给angularjs组件</li><li>上面例子，heroGrid，是angularjs中注册的组件的名称。</li></ul><h4 id="ngModule中声明"><a href="#ngModule中声明" class="headerlink" title="ngModule中声明"></a>ngModule中声明</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@NgModule(&#123;</span><br><span class="line">  imports: [</span><br><span class="line">    BrowserModule,</span><br><span class="line">    UpgradeModule</span><br><span class="line">  ],</span><br><span class="line">  declarations: [</span><br><span class="line">    heroGridDirective,</span><br><span class="line">/* . . . */</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line">export class AppModule &#123;</span><br><span class="line">  constructor(private upgrade: UpgradeModule) &#123; &#125;</span><br><span class="line">  ngDoBootstrap() &#123;</span><br><span class="line">    this.upgrade.bootstrap(document.body, [&#x27;heroApp&#x27;], &#123; strictDi: true &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="定义外层容器html，使用directive"><a href="#定义外层容器html，使用directive" class="headerlink" title="定义外层容器html，使用directive"></a>定义外层容器html，使用directive</h4><ul><li>ContainerComponent 需要在appModule declaration中定义<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Component &#125; from &#x27;@angular/core&#x27;;</span><br><span class="line">import &#123; Hero &#125; from &#x27;../hero&#x27;;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">  selector: &#x27;my-container&#x27;,</span><br><span class="line">  template: `</span><br><span class="line">    &lt;h1&gt;Tour of Heroes&lt;/h1&gt;</span><br><span class="line">    &lt;hero-grid [gridOptions]=&quot;gridOptions&quot; [gridData]=&quot;heroList&quot;</span><br><span class="line">                 (deleted)=&quot;heroDeleted($event)&quot;&gt;</span><br><span class="line">    &lt;/hero-grid&gt;</span><br><span class="line">  `</span><br><span class="line">&#125;)</span><br><span class="line">export class ContainerComponent &#123;</span><br><span class="line">  heroList = [</span><br><span class="line">    new Hero(1, &#x27;Windstorm&#x27;),</span><br><span class="line">    new Hero(2, &#x27;Storm&#x27;),</span><br><span class="line">  ];</span><br><span class="line">  heroDeleted(hero: Hero) &#123;</span><br><span class="line">    hero.name = &#x27;Ex-&#x27; + hero.name;</span><br><span class="line">  &#125;,</span><br><span class="line">  gridOptions = &#123;</span><br><span class="line">    useExternalSorting: true,</span><br><span class="line">    data:this.heroList,</span><br><span class="line">    columnDefs: [</span><br><span class="line">      &#123; name: &#x27;name&#x27; &#125;,</span><br><span class="line">      &#123; name: &#x27;gender&#x27; &#125;,</span><br><span class="line">      &#123; name: &#x27;company&#x27;, enableSorting: false&#125;</span><br><span class="line">    ],</span><br><span class="line">    onRegisterApi: function( gridApi ) &#123;</span><br><span class="line">      $scope.gridApi = gridApi;</span><br><span class="line">      $scope.gridApi.core.on.sortChanged( $scope, $scope.sortChanged );</span><br><span class="line">      $scope.sortChanged($scope.gridApi.grid, [ $scope.gridOptions.columnDefs[1] ] );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h4><ul><li>表格在没有数据的时候，需要展示表头，然后存在数据了，需要渲染出来？</li><li>如果表格渲染出来后，如果存在，折叠展开，那么折叠的也要展示，怎么办？</li><li>会不会存在，js 数据更新了，但是界面ui不刷新问题？</li></ul><h4 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h4><ul><li>首先肯定需要传递gridOptions，不然表头无法渲染</li><li>新数据过来了，需要再次渲染；基于angular []数据会动态更新，我们理论上更新gridOptions即可，介于已有代码，修改浮动大，我们引入gridData，监听数据变化，set方法每次操作，顺带修改optioins，然后通过subject,通知optons一变动，digest更新angularjs</li><li>如果数据渲染，此时还需要变化怎么？  遇到的问题，就是digest没有收到数据更新，此时解决办法是使用loading，loading &#x3D; false,渲染数据，loading &#x3D; true,展示laoding，这样，数据会对应的更新。</li></ul><h4 id="更多推荐"><a href="#更多推荐" class="headerlink" title="更多推荐"></a>更多推荐</h4><ul><li><a href="https://juejin.im/post/5e15a0c46fb9a047f83eda08">angular7&#x2F;8 read local json的2种方法</a></li><li><a href="https://juejin.im/post/5ddcd2b56fb9a07ad9676ca2">入门指南-Angular8状态管理框架NgRx8</a></li></ul><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://angular.io/guide/upgrade#using-angular-components-from-angularjs-code">angularjs ui-grid升级</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> angular </tag>
            
            <tag> ui-grid </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《angular8》- 20个你值得了解的Angular开源项目</title>
      <link href="/2020/06/09/front_skills/angular/%E3%80%8Aangular8%E3%80%8B-%2020%E4%B8%AA%E4%BD%A0%E5%80%BC%E5%BE%97%E4%BA%86%E8%A7%A3%E7%9A%84Angular%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"/>
      <url>/2020/06/09/front_skills/angular/%E3%80%8Aangular8%E3%80%8B-%2020%E4%B8%AA%E4%BD%A0%E5%80%BC%E5%BE%97%E4%BA%86%E8%A7%A3%E7%9A%84Angular%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<h4 id="1-Angular-CLI-angular工具命令行"><a href="#1-Angular-CLI-angular工具命令行" class="headerlink" title="1.Angular-CLI - angular工具命令行"></a>1.Angular-CLI - angular工具命令行</h4><ul><li><a href="https://github.com/angular/angular-cli">GitHub: https://github.com/angular/angular-cli</a></li><li>Stars: 23.4k</li><li><a href="https://cli.angular.io/">Web-site: https://cli.angular.io/</a><br><img src="https://s1.ax1x.com/2020/06/09/t5vXTK.png"></li></ul><h4 id="2-Angular-Material-UI-组件框架"><a href="#2-Angular-Material-UI-组件框架" class="headerlink" title="2.Angular Material - UI 组件框架"></a>2.Angular Material - UI 组件框架</h4><ul><li><a href="https://github.com/angular/components">GitHub: https://github.com/angular/components</a></li><li>Stars: 19.9k</li><li><a href="https://material.angular.io/">Web-site: https://material.angular.io/</a><br><img src="https://s1.ax1x.com/2020/06/09/t5xytO.png"></li></ul><h4 id="3-Angularfire2-状态管理"><a href="#3-Angularfire2-状态管理" class="headerlink" title="3.Angularfire2 - 状态管理"></a>3.Angularfire2 - 状态管理</h4><ul><li><a href="https://github.com/angular/angularfire2">GitHub: https://github.com/angular/angularfire2</a></li><li>Stars: 6.1k<br> <img src="https://s1.ax1x.com/2020/06/09/t5xWjA.png"><br> <img src="https://s1.ax1x.com/2020/06/09/tIu1kF.md.png"></li></ul><h4 id="4-Flex-layout"><a href="#4-Flex-layout" class="headerlink" title="4.Flex layout"></a>4.Flex layout</h4><ul><li><a href="https://github.com/angular/flex-layout">GitHub: https://github.com/angular/flex-layout</a></li><li>Stars: 4.9k</li></ul><h4 id="5-Storybook"><a href="#5-Storybook" class="headerlink" title="5.Storybook"></a>5.Storybook</h4><ul><li><a href="https://github.com/storybookjs/storybook">GitHub: https://github.com/storybookjs/storybook</a></li><li>Stars: 49.2k</li><li><a href="https://storybook.js.org/">Web-site: https://storybook.js.org/</a><br><img src="https://s1.ax1x.com/2020/06/09/t5xLcj.md.png"></li></ul><h4 id="6-Clarity"><a href="#6-Clarity" class="headerlink" title="6.Clarity"></a>6.Clarity</h4><ul><li><a href="https://github.com/vmware/clarity/">GitHub: https://github.com/vmware/clarity/</a></li><li>Stars: 5.8k</li><li><a href="https://clarity.design/">Web-site: https://clarity.design/</a><br><img src="https://s1.ax1x.com/2020/06/09/t5zSEV.png"></li></ul><h4 id="7-NGX-Admin"><a href="#7-NGX-Admin" class="headerlink" title="7.NGX-Admin"></a>7.NGX-Admin</h4><ul><li><a href="https://github.com/akveo/ngx-admin">GitHub: https://github.com/akveo/ngx-admin</a></li><li>Stars: 20.7k</li><li><a href="http://akveo.github.io/ngx-admin/">Web-site: http://akveo.github.io/ngx-admin/</a><br><img src="https://s1.ax1x.com/2020/06/09/t5znUK.png"></li></ul><h4 id="8-Angular-calendar"><a href="#8-Angular-calendar" class="headerlink" title="8.Angular calendar"></a>8.Angular calendar</h4><ul><li><a href="https://github.com/mattlewis92/angular-calendar">GitHub: https://github.com/mattlewis92/angular-calendar</a></li><li>Stars: 2k</li><li><a href="https://mattlewis92.github.io/angular-calendar/">Web-site: https://mattlewis92.github.io/angular-calendar/</a><br><img src="https://s1.ax1x.com/2020/06/09/t5zlgH.png"></li></ul><h4 id="9-Angularspree"><a href="#9-Angularspree" class="headerlink" title="9.Angularspree"></a>9.Angularspree</h4><ul><li><a href="https://github.com/aviabird/angularspree">GitHub: https://github.com/aviabird/angularspree</a></li><li>Stars: 1.4k</li><li><a href="https://www.aviacommerce.org/">Web-site: https://www.aviacommerce.org/</a><br><img src="https://s1.ax1x.com/2020/06/09/t5zrKs.png"></li></ul><h4 id="10-Angular-google-maps"><a href="#10-Angular-google-maps" class="headerlink" title="10.Angular google maps"></a>10.Angular google maps</h4><ul><li><a href="https://github.com/SebastianM/angular-google-maps">GitHub: https://github.com/SebastianM/angular-google-maps</a></li><li>Stars: 1.9k</li><li><a href="https://angular-maps.com/">Web-site: https://angular-maps.com/</a><br><img src="https://s1.ax1x.com/2020/06/09/t5zgaV.png"></li></ul><h4 id="11-NGRX"><a href="#11-NGRX" class="headerlink" title="11.NGRX"></a>11.NGRX</h4><ul><li><a href="https://github.com/ngrx/platform">GitHub: https://github.com/ngrx/platform</a></li><li>Stars: 5.9k</li><li><a href="https://ngrx.io/">Web-site: https://ngrx.io/</a><br><img src="https://s1.ax1x.com/2020/06/09/t5zHVx.png"></li></ul><h4 id="12-Compodoc"><a href="#12-Compodoc" class="headerlink" title="12.Compodoc"></a>12.Compodoc</h4><ul><li><a href="https://github.com/compodoc/compodoc">GitHub: https://github.com/compodoc/compodoc</a></li><li>Stars: 3.1k</li><li><a href="https://compodoc.app/">Web-site: https://compodoc.app/</a><br><img src="https://s1.ax1x.com/2020/06/09/t5zh24.md.png"></li></ul><h4 id="13-NGX-charts"><a href="#13-NGX-charts" class="headerlink" title="13.NGX-charts"></a>13.NGX-charts</h4><ul><li><a href="https://github.com/swimlane/ngx-charts">GitHub: https://github.com/swimlane/ngx-charts</a></li><li>Stars: 3.6k</li><li><a href="https://swimlane.github.io/ngx-charts/#/ngx-charts/bar-vertical">Web-site: https://swimlane.github.io/ngx-charts/#/ngx-charts/bar-vertical</a><br><img src="https://s1.ax1x.com/2020/06/09/tIS6QH.png"></li></ul><h4 id="14-Angular-UI-router"><a href="#14-Angular-UI-router" class="headerlink" title="14.Angular UI router"></a>14.Angular UI router</h4><ul><li><a href="https://github.com/angular-ui/ui-router">GitHub: https://github.com/angular-ui/ui-router</a></li><li>Stars: 13.8k</li><li><a href="https://ui-router.github.io/">Web-site: https://ui-router.github.io/</a><br><img src="https://s1.ax1x.com/2020/06/09/tIS1iT.png"></li></ul><h4 id="15-Angular-Starter"><a href="#15-Angular-Starter" class="headerlink" title="15.Angular Starter"></a>15.Angular Starter</h4><ul><li><a href="https://github.com/PatrickJS/angular-starter">GitHub: https://github.com/PatrickJS/angular-starter</a></li><li>Stars: 10.4k<br><img src="https://s1.ax1x.com/2020/06/09/tISERg.png"></li></ul><h4 id="16-Angular-fullstack-generator"><a href="#16-Angular-fullstack-generator" class="headerlink" title="16.Angular fullstack generator"></a>16.Angular fullstack generator</h4><ul><li><a href="https://github.com/angular-fullstack/generator-angular-fullstack">GitHub: https://github.com/angular-fullstack/generator-angular-fullstack</a></li><li>Stars: 6.1k</li><li><a href="https://angular-fullstack.github.io/">Web-site: https://angular-fullstack.github.io/</a><br><img src="https://s1.ax1x.com/2020/06/09/tImsED.md.png"></li></ul><h4 id="17-Awesome-Angular"><a href="#17-Awesome-Angular" class="headerlink" title="17.Awesome Angular"></a>17.Awesome Angular</h4><ul><li><a href="https://github.com/PatrickJS/awesome-angular">GitHub: https://github.com/PatrickJS/awesome-angular</a></li><li>Stars: 7.3k<br><img src="https://s1.ax1x.com/2020/06/09/tImgCd.md.png"></li></ul><h4 id="18-Angular-performance-checklist-提高-Angular-应用性能的实践"><a href="#18-Angular-performance-checklist-提高-Angular-应用性能的实践" class="headerlink" title="18.Angular performance checklist - 提高 Angular 应用性能的实践"></a>18.Angular performance checklist - 提高 Angular 应用性能的实践</h4><ul><li><a href="https://github.com/mgechev/angular-performance-checklist">GitHub: https://github.com/mgechev/angular-performance-checklist</a></li><li>Stars: 3.3k<br><img src="https://s1.ax1x.com/2020/06/09/tIm5b8.png"></li></ul><h4 id="19-Nx"><a href="#19-Nx" class="headerlink" title="19.Nx"></a>19.<a href="https://blog.ng-book.com/getting-started-with-nx-the-nrwl-extensions-for-angular/">Nx</a></h4><ul><li><a href="https://github.com/nrwl/nx">GitHub: https://github.com/nrwl/nx</a></li><li>Stars: 3.7k<br>*<a href="https://nx.dev/">Web-site: https://nx.dev</a><br><img src="https://s1.ax1x.com/2020/06/09/tIu4AS.md.png"></li></ul><h4 id="20-PrimeNG-Angular-UI框架"><a href="#20-PrimeNG-Angular-UI框架" class="headerlink" title="20.PrimeNG - Angular UI框架"></a>20.PrimeNG - Angular UI框架</h4><ul><li><a href="https://github.com/primefaces/primeng">GitHub: https://github.com/primefaces/primeng</a></li><li>Stars: 6k</li><li><a href="https://www.primefaces.org/primeng/">Web-site: https://www.primefaces.org/primeng/</a><br><img src="https://s1.ax1x.com/2020/06/09/tInPPJ.md.png"></li></ul><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><h4 id="angular-lib"><a href="#angular-lib" class="headerlink" title="angular lib "></a><a href="https://medium.com/flatlogic/top-angular-open-source-projects-6e9b91a455c0">angular lib </a></h4>]]></content>
      
      
      
        <tags>
            
            <tag> angular </tag>
            
            <tag> 开源 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《angular8》- 你需要了解的Render2</title>
      <link href="/2020/06/09/front_skills/angular/%E3%80%8Aangular8%E3%80%8B-%20%E4%BD%A0%E9%9C%80%E8%A6%81%E4%BA%86%E8%A7%A3%E7%9A%84Render2/"/>
      <url>/2020/06/09/front_skills/angular/%E3%80%8Aangular8%E3%80%8B-%20%E4%BD%A0%E9%9C%80%E8%A6%81%E4%BA%86%E8%A7%A3%E7%9A%84Render2/</url>
      
        <content type="html"><![CDATA[<h3 id="Render2"><a href="#Render2" class="headerlink" title="Render2"></a>Render2</h3><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p> Render2 是angular中用于操作dom的，Angular做了封装，屏蔽底层差异，通用性更强。不仅仅可以用于浏览器端，还可以用于Server Side rendering, Web-Worker, mobile apps, and desktop apps等。</p><h4 id="Render2之指令用法"><a href="#Render2之指令用法" class="headerlink" title="Render2之指令用法"></a>Render2之指令用法</h4><ul><li><p>setStyle、removeStyle</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 定义指令</span><br><span class="line"> import &#123; Directive, ElementRef, OnInit, Renderer2, HostListener &#125; from &#x27;@angular/core&#x27;;</span><br><span class="line"> @Directive(&#123; </span><br><span class="line">     selector: &#x27;[animate]&#x27; </span><br><span class="line"> &#125;)</span><br><span class="line"> export class Animate  &#123;</span><br><span class="line"> constructor(private renderer: Renderer2, private el: ElementRef) &#123;&#125;</span><br><span class="line">     </span><br><span class="line"> @HostListener(&#x27;click&#x27;) </span><br><span class="line"> performTask() &#123;</span><br><span class="line">     let randomColor = &quot;#&quot;+((1&lt;&lt;24)*Math.random()|0).toString(16);</span><br><span class="line">     this.renderer.setStyle(this.el.nativeElement, &#x27;color&#x27;, randomColor);</span><br><span class="line">     this.renderer.setStyle(this.el.nativeElement, &#x27;background-color&#x27;, &#x27;black&#x27;);   </span><br><span class="line">     this.renderer.removeStyle(this.el.nativeElement, &#x27;color&#x27;,&#x27;red&#x27;);   </span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># html</span><br><span class="line">&lt;h2  animate&gt;Click here to give me a random color&lt;/h2&gt;</span><br></pre></td></tr></table></figure></li><li><p>setAttribute、removeAttribute</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> @Directive(&#123; </span><br><span class="line">     selector: &#x27;[defaultValue]&#x27; </span><br><span class="line">&#125;)</span><br><span class="line">export class DefaultInputValueDirective &#123;</span><br><span class="line">   constructor(private elRef: ElementRef, private renderer: Renderer2) &#123;</span><br><span class="line">   &#125;</span><br><span class="line">   @HostListener(&#x27;mouseover&#x27;) </span><br><span class="line">   onMouseOver() &#123;</span><br><span class="line">       this.renderer.setAttribute(this.elRef.nativeElement, &#x27;value&#x27;, &#x27;Enter a Value&#x27;);</span><br><span class="line">   &#125;</span><br><span class="line">   @HostListener(&#x27;mouseleave&#x27;) </span><br><span class="line">   onMouseLeave() &#123;</span><br><span class="line">       this.renderer.removeAttribute(this.elRef.nativeElement, &#x27;value&#x27;);</span><br><span class="line">   &#125;   </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></li><li><p>addClass、removeClass</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> @Directive(&#123; </span><br><span class="line">     selector: &#x27;[hlOnMouseOver]&#x27; </span><br><span class="line">&#125;)</span><br><span class="line">export class HlOnMouseOverDirective &#123;</span><br><span class="line">   constructor(private elRef: ElementRef, private renderer: Renderer2) &#123;</span><br><span class="line">   &#125;</span><br><span class="line">   @HostListener(&#x27;mouseover&#x27;) </span><br><span class="line">   onMouseOver() &#123;</span><br><span class="line">       this.renderer.addClass(this.elRef.nativeElement, &#x27;hl-text&#x27;);</span><br><span class="line">   &#125;</span><br><span class="line">   @HostListener(&#x27;mouseleave&#x27;) </span><br><span class="line">   onMouseLeave() &#123;</span><br><span class="line">       this.renderer.removeClass(this.elRef.nativeElement, &#x27;hl-text&#x27;);</span><br><span class="line">   &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>removeChild、appendChild</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> @Directive(&#123; </span><br><span class="line">     selector: &#x27;[removeChild]&#x27; </span><br><span class="line">&#125;)</span><br><span class="line">export class RemoveChildDirective &#123;</span><br><span class="line">   constructor(private elRef: ElementRef, private renderer: Renderer2) &#123;</span><br><span class="line">   &#125;</span><br><span class="line">   p = this.renderer.createElement(&#x27;p&#x27;);</span><br><span class="line">   text = this.renderer.createText(&#x27;Hello World !&#x27;);</span><br><span class="line">   </span><br><span class="line">   @HostListener(&#x27;mouseover&#x27;) </span><br><span class="line">   onMouseOver() &#123;</span><br><span class="line">       this.renderer.appendChild(this.p, this.text);  </span><br><span class="line">       this.renderer.appendChild(this.elRef.nativeElement, this.p);</span><br><span class="line">   &#125;</span><br><span class="line">   @HostListener(&#x27;mouseleave&#x27;) </span><br><span class="line">   onMouseLeave() &#123;</span><br><span class="line">       this.renderer.removeChild(this.elRef.nativeElement, this.p);</span><br><span class="line">   &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>setProperty</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> @Directive(&#123; </span><br><span class="line">     selector: &#x27;[imgAlt]&#x27; </span><br><span class="line">&#125;)</span><br><span class="line">export class ImageAltdDirective &#123;</span><br><span class="line">   constructor(private renderer: Renderer2, private elRef: ElementRef) &#123;&#125;</span><br><span class="line"></span><br><span class="line">   ngOnInit() &#123;</span><br><span class="line">     this.renderer.setProperty(this.elRef.nativeElement, &#x27;alt&#x27;, &#x27;image description&#x27;);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="Render2之组件用法-大部分构造方法只有Renderer2"><a href="#Render2之组件用法-大部分构造方法只有Renderer2" class="headerlink" title="Render2之组件用法 - 大部分构造方法只有Renderer2"></a>Render2之组件用法 - 大部分构造方法只有Renderer2</h4><ul><li><p>viewChild操作dom appendChild</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Component, ElementRef, Renderer2, ViewChild &#125; from &#x27;@angular/core&#x27;;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">   selector: &#x27;app-component&#x27;,</span><br><span class="line">   template: `&lt;ul class=&quot;col-md-2&quot;&gt;</span><br><span class="line">                &lt;li (click)=&quot;addBtn()&quot; #addButton&gt;Click here to add new button&lt;/li&gt;</span><br><span class="line">              &lt;/ul&gt; </span><br><span class="line">              `</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">export class AppComponent &#123; </span><br><span class="line">   @ViewChild(&#x27;addButton&#x27;) </span><br><span class="line">   private animateThis: ElementRef;</span><br><span class="line">   constructor(private renderer: Renderer2) &#123;&#125;</span><br><span class="line">   </span><br><span class="line">   addBtn() &#123;</span><br><span class="line">     const button = this.renderer.createElement(&#x27;button&#x27;); </span><br><span class="line">     const buttonText = this.renderer.createText(&#x27;This is a button&#x27;);</span><br><span class="line">     this.renderer.appendChild(button, buttonText);</span><br><span class="line">     this.renderer.appendChild(this.animateThis.nativeElement, button);</span><br><span class="line">   &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># html</span><br><span class="line">&lt;ul class=&quot;col-md-2&quot;&gt;</span><br><span class="line">  &lt;li (click)=&quot;addBtn()&quot; #addButton&gt;Click here to add new button&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt; </span><br></pre></td></tr></table></figure></li><li><p>insertBefore 、createComment</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Component, ElementRef, Renderer2, ViewChild &#125; from &#x27;@angular/core&#x27;;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">   selector: &#x27;app-component&#x27;,</span><br><span class="line">   template: `&lt;ul class=&quot;col-md-2&quot;&gt;</span><br><span class="line">                &lt;li (click)=&quot;addBtn()&quot; #addButton&gt;Click here to add new button&lt;/li&gt;</span><br><span class="line">              &lt;/ul&gt; </span><br><span class="line">              `</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">export class AppComponent &#123; </span><br><span class="line">   @ViewChild(&#x27;addButton&#x27;) </span><br><span class="line">   private animateThis: ElementRef;</span><br><span class="line">   constructor(private elRef: ElementRef, private renderer: Renderer2) &#123;&#125;</span><br><span class="line">   </span><br><span class="line">   addBtn() &#123;</span><br><span class="line">     const button = this.renderer.createElement(&#x27;button&#x27;); </span><br><span class="line">     const buttonText = this.renderer.createText(&#x27;This is a button&#x27;);</span><br><span class="line">     const comment = this.renderer.createComment(&#x27;createComment? Comment Created!&#x27;);</span><br><span class="line">     const parent = this.elRef.nativeElement.parentNode;</span><br><span class="line">     const reference = this.elRef.nativeElement;</span><br><span class="line">     this.renderer.appendChild(button, buttonText);</span><br><span class="line">     this.renderer.insertBefore(parent, comment, reference )</span><br><span class="line">     this.renderer.appendChild(this.animateThis.nativeElement, button);</span><br><span class="line">   &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></li><li><p>setStyle</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Component, ViewChild, ElementRef, Renderer2  &#125; from &#x27;@angular/core&#x27;;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">  selector: &#x27;my-app&#x27;,</span><br><span class="line">  template: `</span><br><span class="line">    Username: </span><br><span class="line">    &lt;input type=&quot;text&quot; placeholder=&quot;type your name...&quot;  #changeStyle&gt;</span><br><span class="line">  `,</span><br><span class="line">&#125;)</span><br><span class="line">export class AppComponent  &#123;</span><br><span class="line">   @ViewChild(&#x27;changeStyle&#x27;) </span><br><span class="line">   private elRef: ElementRef;</span><br><span class="line">   constructor(private renderer: Renderer2) &#123;&#125;</span><br><span class="line">   </span><br><span class="line">   ngOnInit() &#123;</span><br><span class="line">     this.renderer.setStyle(this.elRef.nativeElement, &#x27;border&#x27;, &#x27;1px solid red&#x27;);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>addClass</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Component, ViewChild, ElementRef, Renderer2  &#125; from &#x27;@angular/core&#x27;;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">  selector: &#x27;my-app&#x27;,</span><br><span class="line">  template: `</span><br><span class="line">    Username: </span><br><span class="line">    &lt;input type=&quot;text&quot; placeholder=&quot;type your name...&quot;  #changeStyle&gt;</span><br><span class="line">  `,</span><br><span class="line">&#125;)</span><br><span class="line">export class AppComponent  &#123;</span><br><span class="line">   @ViewChild(&#x27;changeStyle&#x27;) </span><br><span class="line">   private elRef: ElementRef;</span><br><span class="line">   constructor(private renderer: Renderer2) &#123;&#125;</span><br><span class="line">   </span><br><span class="line">   ngOnInit() &#123;</span><br><span class="line">     this.renderer.addClass(this.elRef.nativeElement, &#x27;someClass&#x27;);</span><br><span class="line">   &#125;</span><br><span class="line">  </span><br><span class="line">  //HTML output</span><br><span class="line">  //&lt;input placeholder=&quot;type your name...&quot; type=&quot;text&quot; class=&quot;someClass&quot;&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>setAttribute</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Component, ViewChild, ElementRef, Renderer2  &#125; from &#x27;@angular/core&#x27;;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">  selector: &#x27;my-app&#x27;,</span><br><span class="line">  template: `</span><br><span class="line">    Username: </span><br><span class="line">    &lt;input type=&quot;text&quot; placeholder=&quot;type your name...&quot;  #changeStyle&gt;</span><br><span class="line">  `,</span><br><span class="line">&#125;)</span><br><span class="line">export class AppComponent  &#123;</span><br><span class="line">   @ViewChild(&#x27;changeStyle&#x27;) </span><br><span class="line">   private elRef: ElementRef;</span><br><span class="line">   constructor(private renderer: Renderer2) &#123;&#125;</span><br><span class="line">   </span><br><span class="line">   ngOnInit() &#123;</span><br><span class="line">     this.renderer.setAttribute(this.elRef.nativeElement, &#x27;value&#x27;, &#x27;Gokhan&#x27;);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>setProperty</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Component, ViewChild, ElementRef, Renderer2  &#125; from &#x27;@angular/core&#x27;;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">  selector: &#x27;my-app&#x27;,</span><br><span class="line">  template: `</span><br><span class="line">    Username: </span><br><span class="line">    &lt;input type=&quot;text&quot; placeholder=&quot;type your name...&quot;  #changeStyle&gt;</span><br><span class="line">  `,</span><br><span class="line">&#125;)</span><br><span class="line">export class AppComponent  &#123;</span><br><span class="line">   @ViewChild(&#x27;changeStyle&#x27;) </span><br><span class="line">   private elRef: ElementRef;</span><br><span class="line">   constructor(private renderer: Renderer2) &#123;&#125;</span><br><span class="line">   </span><br><span class="line">   ngOnInit() &#123;</span><br><span class="line">      this.renderer.setProperty(this.elRef.nativeElement, &#x27;disabled&#x27;, &#x27;disabled&#x27;);</span><br><span class="line">      this.renderer.setProperty(this.elRef.nativeElement, &#x27;innerHTML&#x27;, change the inner html&#x27;);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>nextSibling</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Component, Renderer2, ElementRef, ViewChild, OnInit &#125; from &#x27;@angular/core&#x27;;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">  selector: &#x27;my-app&#x27;,</span><br><span class="line">  template: `</span><br><span class="line">    &lt;p #next&gt;First&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;Second&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;Third&lt;/p&gt;</span><br><span class="line">  `,</span><br><span class="line">  styleUrls: [ &#x27;./app.component.css&#x27; ]</span><br><span class="line">&#125;)</span><br><span class="line">export class AppComponent implements OnInit &#123;</span><br><span class="line">  @ViewChild(&#x27;next&#x27;) </span><br><span class="line">  private elRef: ElementRef;</span><br><span class="line">  constructor(private renderer: Renderer2) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  ngOnInit()&#123;</span><br><span class="line">    const currentElement = this.elRef.nativeElement;</span><br><span class="line">    const nextEl = this.renderer.nextSibling(currentElement);</span><br><span class="line">    this.renderer.addClass(nextEl, &#x27;red&#x27;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>parentNode</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Component, Renderer2, ElementRef, ViewChild, OnInit &#125; from &#x27;@angular/core&#x27;;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">  selector: &#x27;my-app&#x27;,</span><br><span class="line">  template: `</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;p #parent&gt;First&lt;/p&gt;</span><br><span class="line">      &lt;p&gt;Second&lt;/p&gt;</span><br><span class="line">      &lt;p&gt;Third&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">      `,</span><br><span class="line">  styleUrls: [ &#x27;./app.component.css&#x27; ]</span><br><span class="line">&#125;)</span><br><span class="line">export class AppComponent implements OnInit &#123;</span><br><span class="line">  @ViewChild(&#x27;parent&#x27;) </span><br><span class="line">  private elRef: ElementRef;</span><br><span class="line">  constructor(private renderer: Renderer2) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  ngOnInit()&#123;</span><br><span class="line">    const currentElement = this.elRef.nativeElement;</span><br><span class="line">    const parent = this.renderer.parentNode(currentElement);</span><br><span class="line">    this.renderer.addClass(parent, &#x27;red&#x27;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>selectRootElement</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"># selectRootElement(selectorOrNode: any, preserveContent?: boolean) - 是否保留子内容</span><br><span class="line"></span><br><span class="line">import &#123; Component, Renderer2, ElementRef, ViewChild, OnInit &#125; from &#x27;@angular/core&#x27;;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">  selector: &#x27;my-app&#x27;,</span><br><span class="line">  template: `</span><br><span class="line">        &lt;div #root&gt;</span><br><span class="line">        X or Y?</span><br><span class="line">        &lt;/div&gt; </span><br><span class="line">        &lt;button (click)=&quot;changeIt()&quot;&gt;Click&lt;/button&gt;</span><br><span class="line">      `,</span><br><span class="line">  styleUrls: [ &#x27;./app.component.css&#x27; ]</span><br><span class="line">&#125;)</span><br><span class="line">export class AppComponent &#123;</span><br><span class="line">  switchText: boolean = false;</span><br><span class="line">  @ViewChild(&#x27;root&#x27;) </span><br><span class="line">  private elRef: ElementRef;</span><br><span class="line">  constructor(private renderer: Renderer2) &#123;&#125;</span><br><span class="line">  changeIt()&#123;</span><br><span class="line">    this.switchText = !this.switchText;</span><br><span class="line">    const rootEl = this.elRef.nativeElement;</span><br><span class="line">    const text = this.switchText ? </span><br><span class="line">      this.renderer.createText(&#x27;Hey X!&#x27;) :</span><br><span class="line">      this.renderer.createText(&#x27;Hey Y!&#x27;);</span><br><span class="line">    this.renderer.selectRootElement(rootEl); </span><br><span class="line">    this.renderer.appendChild(rootEl, text)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 源码</span><br><span class="line">selectRootElement(selector: string): Element &#123;</span><br><span class="line">    var el = DOM.querySelector(this._rootRenderer.document, selector);</span><br><span class="line">    if (isBlank(el)) &#123;</span><br><span class="line">      throw new BaseException(`The selector &quot;$&#123;selector&#125;&quot; did not match any elements`);</span><br><span class="line">    &#125;</span><br><span class="line">    DOM.clearNodes(el);</span><br><span class="line">    return el;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li><p>listen</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Component, ViewChild, ElementRef, Renderer2 &#125; from &#x27;@angular/core&#x27;;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">  selector: &#x27;my-app&#x27;,</span><br><span class="line">  template: `</span><br><span class="line">    &lt;p #listen&gt;</span><br><span class="line">      Hover to see some magic!</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">    &#123;&#123;count&#125;&#125;</span><br><span class="line">  `,</span><br><span class="line">&#125;)</span><br><span class="line">export class AppComponent  &#123;</span><br><span class="line">  @ViewChild(&#x27;listen&#x27;) </span><br><span class="line">    private elRef: ElementRef;</span><br><span class="line">    constructor(private renderer: Renderer2) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    toggle = false; </span><br><span class="line">    count = 0;  </span><br><span class="line">    ngAfterViewInit() &#123;</span><br><span class="line">    this.renderer.listen(this.elRef.nativeElement, &#x27;mouseover&#x27;, () =&gt; &#123;</span><br><span class="line">      this.toggle = !this.toggle;</span><br><span class="line">      this.count++;</span><br><span class="line">      const currentElement = this.elRef.nativeElement;</span><br><span class="line">      const firstText = this.renderer.createText(&#x27;Hover to see new text! (Hover me)&#x27;);</span><br><span class="line">      const secondText = this.renderer.createText(&#x27;Text changed! (Hover me)&#x27;);</span><br><span class="line">      const thirdText = this.renderer.createText(&#x27;Reached maximum count!&#x27;);</span><br><span class="line"></span><br><span class="line">      this.renderer.selectRootElement(currentElement);</span><br><span class="line">      if(this.count &lt; 10)&#123;</span><br><span class="line">          this.toggle ? this.renderer.appendChild(currentElement, secondText) : </span><br><span class="line">          this.renderer.appendChild(currentElement, firstText);</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">          this.renderer.appendChild(currentElement, thirdText);</span><br><span class="line">          this.count = 10;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><h4 id="Angular-Render2"><a href="#Angular-Render2" class="headerlink" title="Angular Render2"></a><a href="https://itnext.io/using-renderer2-in-angular-8f80da6756f8">Angular Render2</a></h4>]]></content>
      
      
      
        <tags>
            
            <tag> angular </tag>
            
            <tag> render2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《angular8》- angular8 日常开发避坑指南</title>
      <link href="/2020/05/28/front_skills/angular/%E3%80%8Aangular8%E3%80%8B-%20angular8%E6%97%A5%E5%B8%B8%E5%BC%80%E5%8F%91%E9%81%BF%E5%9D%91%E6%8C%87%E5%8D%97/"/>
      <url>/2020/05/28/front_skills/angular/%E3%80%8Aangular8%E3%80%8B-%20angular8%E6%97%A5%E5%B8%B8%E5%BC%80%E5%8F%91%E9%81%BF%E5%9D%91%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<h4 id="1-else使用"><a href="#1-else使用" class="headerlink" title="1.else使用"></a>1.else使用</h4><ul><li>语法糖else <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;div *ngIf=&quot;isLoggedIn; else loggedOut&quot;&gt;</span><br><span class="line">Welcome back, friend.</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;ng-template #loggedOut&gt;</span><br><span class="line">Please friend, login.</span><br><span class="line">&lt;/ng-template&gt;</span><br></pre></td></tr></table></figure></li><li>code 等同于下方 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> &lt;ng-template [ngIf]=&quot;isLoggedIn&quot; [ngIfElse]=&quot;loggedOut&quot;&gt;</span><br><span class="line">  Welcome back, friend.</span><br><span class="line">&lt;/ng-template&gt;</span><br><span class="line"></span><br><span class="line">&lt;ng-template #loggedOut&gt;</span><br><span class="line">  Please friend, login.</span><br><span class="line">&lt;/ng-template&gt;</span><br></pre></td></tr></table></figure></li><li>在高级一点： <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> &lt;ng-container *ngIf=&quot;isLoggedIn;then loggedIn;loggedOut&quot;&gt;</span><br><span class="line">  &lt;ng-template #loggedIn&gt;</span><br><span class="line">    Welcome back, friend.</span><br><span class="line">  &lt;/ng-template&gt;</span><br><span class="line"></span><br><span class="line">  &lt;ng-template #loggedOut&gt;</span><br><span class="line">    Please friend, login.</span><br><span class="line">  &lt;/ng-template&gt;</span><br><span class="line">&lt;ng-container&gt;</span><br></pre></td></tr></table></figure></li></ul><h4 id="2-ng-show废弃"><a href="#2-ng-show废弃" class="headerlink" title="2.ng-show废弃"></a>2.ng-show废弃</h4> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> &lt;div [hidden]=&quot;!isLoggedIn&quot;&gt;</span><br><span class="line">  Welcome back, friend.</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h4 id="3-angular中使用angularjs组件"><a href="#3-angular中使用angularjs组件" class="headerlink" title="3.angular中使用angularjs组件"></a>3.angular中使用angularjs组件</h4><ul><li>angularjs组件<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">  export const heroDetail = &#123;</span><br><span class="line">  bindings: &#123;</span><br><span class="line">    hero: &#x27;&lt;&#x27;,</span><br><span class="line">    deleted: &#x27;&amp;&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  template: `</span><br><span class="line">    &lt;h2&gt;&#123;&#123;$ctrl.hero.name&#125;&#125; details!&lt;/h2&gt;</span><br><span class="line">    &lt;div&gt;&lt;label&gt;id: &lt;/label&gt;&#123;&#123;$ctrl.hero.id&#125;&#125;&lt;/div&gt;</span><br><span class="line">    &lt;button ng-click=&quot;$ctrl.onDelete()&quot;&gt;Delete&lt;/button&gt;</span><br><span class="line">  `,</span><br><span class="line">  controller: function() &#123;</span><br><span class="line">    this.onDelete = () =&gt; &#123;</span><br><span class="line">      this.deleted(this.hero);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li>定义angular指令<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Directive, ElementRef, Injector, Input, Output, EventEmitter &#125; from &#x27;@angular/core&#x27;;</span><br><span class="line">import &#123; UpgradeComponent &#125; from &#x27;@angular/upgrade/static&#x27;;</span><br><span class="line">import &#123; Hero &#125; from &#x27;../hero&#x27;;</span><br><span class="line"></span><br><span class="line">@Directive(&#123;</span><br><span class="line">  selector: &#x27;hero-detail&#x27;</span><br><span class="line">&#125;)</span><br><span class="line">export class HeroDetailDirective extends UpgradeComponent &#123; </span><br><span class="line"> # 需要对应于angularjs组件定义的数据绑定</span><br><span class="line">  @Input() hero: Hero;</span><br><span class="line">  @Output() deleted: EventEmitter&lt;Hero&gt;;</span><br><span class="line"></span><br><span class="line">  constructor(elementRef: ElementRef, injector: Injector) &#123;</span><br><span class="line">    super(&#x27;heroDetail&#x27;, elementRef, injector);</span><br><span class="line">  &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></li><li>使用指令，引用angularjs组件<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Component &#125; from &#x27;@angular/core&#x27;;</span><br><span class="line">import &#123; Hero &#125; from &#x27;../hero&#x27;;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">  selector: &#x27;my-container&#x27;,</span><br><span class="line">  template: `</span><br><span class="line">    &lt;h1&gt;Tour of Heroes&lt;/h1&gt;</span><br><span class="line">    &lt;hero-detail [hero]=&quot;hero&quot;</span><br><span class="line">                 (deleted)=&quot;heroDeleted($event)&quot;&gt;</span><br><span class="line">    &lt;/hero-detail&gt;</span><br><span class="line">  `</span><br><span class="line">&#125;)</span><br><span class="line">export class ContainerComponent &#123;</span><br><span class="line">  hero = new Hero(1, &#x27;Windstorm&#x27;);</span><br><span class="line">  heroDeleted(hero: Hero) &#123;</span><br><span class="line">    hero.name = &#x27;Ex-&#x27; + hero.name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="4-常用模板语法"><a href="#4-常用模板语法" class="headerlink" title="4.常用模板语法"></a>4.常用模板语法</h4><ul><li><p>结构指令：</p><ul><li>列表渲染 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;li *ngFor=&quot;let hero of heroes;&quot;&gt;</span><br><span class="line">    &#123;&#123; hero &#125;&#125;</span><br><span class="line">&lt;/li&gt;</span><br></pre></td></tr></table></figure></li><li>列表渲染并展示序号<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> &lt;li *ngFor=&quot;let hero of heroes;let i = index;&quot;&gt;</span><br><span class="line">    &#123;&#123;i+1&#125;&#125; &#123;&#123; hero &#125;&#125;</span><br><span class="line">&lt;/li&gt;</span><br></pre></td></tr></table></figure><blockquote><p>推荐添加trackBy，提升性能<br> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> &lt;li *ngFor=&quot;let hero of heroes;trackBy:trackByFn&quot;&gt;</span><br><span class="line">    &#123;&#123; hero &#125;&#125;</span><br><span class="line">&lt;/li&gt;</span><br><span class="line">trackByFn(index, item) &#123;</span><br><span class="line"> return item.id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote></li><li>条件渲染 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;li *ngIf=&quot;isHidden&quot;&gt;</span><br><span class="line">    &#123;&#123; hero &#125;&#125;</span><br><span class="line">&lt;/li&gt;</span><br></pre></td></tr></table></figure></li><li>条件选择 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;div [ngSwitch]=&quot;hero?.emotion&quot;&gt;</span><br><span class="line">  &lt;app-happy-hero    *ngSwitchCase=&quot;&#x27;happy&#x27;&quot;    [hero]=&quot;hero&quot;&gt;&lt;/app-happy-hero&gt;</span><br><span class="line">  &lt;app-sad-hero      *ngSwitchCase=&quot;&#x27;sad&#x27;&quot;      [hero]=&quot;hero&quot;&gt;&lt;/app-sad-hero&gt;</span><br><span class="line">  &lt;app-confused-hero *ngSwitchCase=&quot;&#x27;confused&#x27;&quot; [hero]=&quot;hero&quot;&gt;&lt;/app-confused-hero&gt;</span><br><span class="line">  &lt;app-unknown-hero  *ngSwitchDefault           [hero]=&quot;hero&quot;&gt;&lt;/app-unknown-hero&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>属性指令：</p><ul><li>数据单向输入 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 动态绑定，更新会触发对应子组件</span><br><span class="line">&lt;app-hero-detail [hero]=&quot;currentHero&quot;&gt;&lt;/app-hero-detail&gt;</span><br><span class="line"></span><br><span class="line"># 绑定字符串，非变量值</span><br><span class="line">&lt;app-item-detail childItem=&quot;parentItem&quot;&gt;&lt;/app-item-detail&gt;</span><br></pre></td></tr></table></figure></li><li>事件反馈 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;w-button (click)=&quot;handlerClick&quot; /&gt;</span><br><span class="line"></span><br><span class="line"># 双向数据绑定</span><br><span class="line">&lt;input [(ngModel)]=&quot;currentItem.name&quot;&gt;</span><br><span class="line"></span><br><span class="line"># 等效于</span><br><span class="line">&lt;input [value]=&quot;currentItem.name&quot;</span><br><span class="line">   (input)=&quot;currentItem.name=$event.target.value&quot; &gt;</span><br></pre></td></tr></table></figure></li><li>属性添加 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;button [attr.aria-label]=&quot;help&quot;&gt;help&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">&lt;div [class.special]=&quot;isSpecial&quot;&gt;Special&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;button [style.color]=&quot;isSpecial ? &#x27;red&#x27; : &#x27;green&#x27;&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;button [class]=&quot;&#123;foo: true, bar: false&#125;&quot; /&gt;</span><br></pre></td></tr></table></figure></li><li>自定义双向数据绑定 - x和xChange <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Component, Input, Output, EventEmitter &#125; from &#x27;@angular/core&#x27;;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">   selector: &#x27;app-sizer&#x27;,</span><br><span class="line">   templateUrl: &#x27;./sizer.component.html&#x27;,</span><br><span class="line">   styleUrls: [&#x27;./sizer.component.css&#x27;]</span><br><span class="line">&#125;)</span><br><span class="line">export class SizerComponent &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@Input()  size: number | string;</span><br><span class="line">@Output() sizeChange = new EventEmitter&lt;number&gt;();</span><br><span class="line"></span><br><span class="line">dec() &#123; this.resize(-1); &#125;</span><br><span class="line">inc() &#123; this.resize(+1); &#125;</span><br><span class="line"></span><br><span class="line">resize(delta: number) &#123;</span><br><span class="line">    this.size = Math.min(40, Math.max(8, +this.size + delta));</span><br><span class="line">    this.sizeChange.emit(this.size);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># html</span><br><span class="line">&lt;app-sizer [(size)]=&quot;fontSizePx&quot;&gt;&lt;/app-sizer&gt; 等效于</span><br><span class="line"></span><br><span class="line">&lt;app-sizer [size]=&quot;fontSizePx&quot; (sizeChange)=&quot;fontSizePx=$event&quot;&gt;&lt;/app-sizer&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="5-ng-template"><a href="#5-ng-template" class="headerlink" title="5.ng-template"></a>5.ng-template</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;div *ngIf=&quot;isLoggedIn&quot;&gt;</span><br><span class="line">Welcome back, friend.</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"># 等效于</span><br><span class="line">&lt;ng-template [ngIf]=&quot;isLoggedIn&quot;&gt;</span><br><span class="line">    Please friend, login.</span><br><span class="line">&lt;/ng-template&gt;</span><br></pre></td></tr></table></figure><h4 id="6-ng-content"><a href="#6-ng-content" class="headerlink" title="6.ng-content"></a>6.ng-content</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># html</span><br><span class="line"></span><br><span class="line">  &lt;fa-input icon=&quot;envelope&quot;&gt;</span><br><span class="line">     &lt;i class=&quot;fa fa-envelope&quot;&gt;&lt;/i&gt;</span><br><span class="line">     &lt;input inputRef type=&quot;email&quot; placeholder=&quot;Email&quot;&gt;</span><br><span class="line">  &lt;/fa-input&gt;</span><br><span class="line"></span><br><span class="line"># js component </span><br><span class="line">@Component(&#123;</span><br><span class="line">  selector: &#x27;fa-input&#x27;,</span><br><span class="line">  template: `</span><br><span class="line">    &lt;ng-content &gt;&lt;/ng-content&gt;  # 匹配fa-input所有其他的没有指定匹配的</span><br><span class="line">    &lt;ng-content select=&quot;input&quot;&gt;&lt;/ng-content&gt; # 匹配fa-input中特定的input标签</span><br><span class="line">  `&#125;)</span><br><span class="line">export class FaInputComponent &#123;</span><br><span class="line">   ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-inject-单例模式"><a href="#7-inject-单例模式" class="headerlink" title="7.inject 单例模式"></a>7.inject 单例模式</h4><ul><li>单例模式<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Injectable &#125; from &#x27;@angular/core&#x27;;</span><br><span class="line"></span><br><span class="line"># inject root 利用webpack tree-shaking，优化打包</span><br><span class="line">@Injectable(&#123;</span><br><span class="line">    providedIn: &#x27;root&#x27;,</span><br><span class="line">&#125;)</span><br><span class="line">export class UserService &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>privoder配置<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@NgModule(&#123;</span><br><span class="line">...</span><br><span class="line">providers: [UserService],</span><br><span class="line">...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li>如果两者都提供了，那么请注意，从UserService中读取内存数据，可能读取不到！！！</li></ul><h4 id="8-angularjs-ui-grid问题"><a href="#8-angularjs-ui-grid问题" class="headerlink" title="8.angularjs ui-grid问题"></a>8.angularjs ui-grid问题</h4><ul><li>使用技术升级-ag-grid</li><li>使用组件升级方案，参考总结3<blockquote><p>directive包裹angularjs ui-grid，在angular中使用，但是需要注意一点：已经使用的ui-grid 文件配置，不可以随意修改，否则会影响现有线上的ui展示功能，</p></blockquote></li></ul><blockquote><p>譬如：新版本不需要垂直滚动，手动修改默认angularjs ui-grid垂直滚动条配置，那么线上就会导致已有angularjs 表格垂直滚动条不展示，数据展示不全问题。<br> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> # 我们应该在自己的angular组件中定义配置项，而不应该在通用的配置修改</span><br><span class="line"> this.gridOptions = &#123;</span><br><span class="line">    enableFiltering: true,</span><br><span class="line">    useExternalFiltering: true,</span><br><span class="line">    columnDefs: [</span><br><span class="line">      &#123; name: &#x27;name&#x27;, enableFiltering: false &#125;,</span><br><span class="line">      &#123; name: &#x27;gender&#x27; &#125;,</span><br><span class="line">      &#123; name: &#x27;company&#x27;, enableFiltering: false&#125;</span><br><span class="line">    ],</span><br><span class="line">    enableHorizontalScrollbar: 1, # 0 关闭，1 开启</span><br><span class="line">    enableVerticalScrollbar:0 # 0 关闭，1 开启</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure></p></blockquote><h4 id="10-Render2-更新样式-，ViewChild选取dom"><a href="#10-Render2-更新样式-，ViewChild选取dom" class="headerlink" title="10.Render2 更新样式 ，ViewChild选取dom"></a>10.Render2 更新样式 ，ViewChild选取dom</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#html </span><br><span class="line">&lt;div #mydiv&gt;&lt;input&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"># js </span><br><span class="line">@ViewChild(&#x27;mydiv&#x27;) mydiv: ElementRef </span><br><span class="line">constructor( </span><br><span class="line">    private el:ElementRef,</span><br><span class="line">    private renderer2: Renderer2)&#123;</span><br><span class="line">&#125;</span><br><span class="line">ngOnInit()&#123;</span><br><span class="line">    this.renderer2.setStyle(this.el.nativeElement.querySelector(&#x27;.btn1&#x27;),&#x27;background&#x27;,&#x27;green&#x27;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 尽量减少应用层与渲染层之间强耦合关系, 推荐下方的render2 </span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># render2 api</span><br><span class="line">abstract data: &#123;...&#125;</span><br><span class="line">  destroyNode: ((node: any) =&gt; void) | null</span><br><span class="line">  abstract destroy(): void</span><br><span class="line">  abstract createElement(name: string, namespace?: string): any</span><br><span class="line">  abstract createComment(value: string): any</span><br><span class="line">  abstract createText(value: string): any</span><br><span class="line">  abstract appendChild(parent: any, newChild: any): void</span><br><span class="line">  abstract insertBefore(parent: any, newChild: any, refChild: any): void</span><br><span class="line">  abstract removeChild(parent: any, oldChild: any, isHostElement?: boolean): void</span><br><span class="line">  abstract selectRootElement(selectorOrNode: any, preserveContent?: boolean): any</span><br><span class="line">  abstract parentNode(node: any): any</span><br><span class="line">  abstract nextSibling(node: any): any</span><br><span class="line">  abstract setAttribute(el: any, name: string, value: string, namespace?: string): void</span><br><span class="line">  abstract removeAttribute(el: any, name: string, namespace?: string): void</span><br><span class="line">  abstract addClass(el: any, name: string): void</span><br><span class="line">  abstract removeClass(el: any, name: string): void</span><br><span class="line">  abstract setStyle(el: any, style: string, value: any, flags?: RendererStyleFlags2): void</span><br><span class="line">  abstract removeStyle(el: any, style: string, flags?: RendererStyleFlags2): void</span><br><span class="line">  abstract setProperty(el: any, name: string, value: any): void</span><br><span class="line">  abstract setValue(node: any, value: string): void</span><br><span class="line">  abstract listen(target: any, eventName: string, callback: (event: any) =&gt; boolean | void): () =&gt; void</span><br></pre></td></tr></table></figure><h4 id="11-类计算属性"><a href="#11-类计算属性" class="headerlink" title="11.类计算属性"></a>11.类计算属性</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">@Component(&#123;</span><br><span class="line">  selector: &#x27;fa-input&#x27;,</span><br><span class="line">  template: `</span><br><span class="line">    &lt;i class=&quot;fa&quot; [ngClass]=&quot;classes&quot;&gt;&lt;/i&gt;</span><br><span class="line">  `,</span><br><span class="line">  styleUrls: [&#x27;./fa-input.component.css&#x27;]</span><br><span class="line">&#125;)</span><br><span class="line">export class FaInputComponent &#123;</span><br><span class="line">  @Input() icon: string;</span><br><span class="line"></span><br><span class="line">  get  classes() &#123;</span><br><span class="line">    const cssClasses = &#123;</span><br><span class="line">      fa: true</span><br><span class="line">    &#125;;</span><br><span class="line">    cssClasses[&#x27;fa-&#x27; + this.icon] = true;</span><br><span class="line">    return cssClasses;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="12-元素绑定"><a href="#12-元素绑定" class="headerlink" title="12.元素绑定"></a>12.元素绑定</h4><ul><li>@HostBinding()可以为指令的宿主元素添加类、样式、属性等，</li><li>@HostListener()可以监听宿主元素上的事件。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Directive, HostBinding, HostListener &#125; from &#x27;@angular/core&#x27;;</span><br><span class="line"></span><br><span class="line">@Directive(&#123;</span><br><span class="line">  selector: &#x27;[highLight]&#x27; # 定义指令</span><br><span class="line">&#125;)</span><br><span class="line">export class HighLightDirective&#123;</span><br><span class="line">  colors = [</span><br><span class="line">    &#x27;hotpink&#x27;, &#x27;lightskyblue&#x27;, &#x27;goldenrod&#x27;, &#x27;peachpuff&#x27;</span><br><span class="line">  ]; </span><br><span class="line">  @HostBinding(&#x27;style.color&#x27;) color: string;</span><br><span class="line">  @HostBinding(&#x27;style.borderColor&#x27;) borderColor: string;  # 定义样式</span><br><span class="line">  @HostListener(&#x27;keydown&#x27;) onKeydown()&#123;   # 定义监听</span><br><span class="line">    const color = Math.floor(Math.random() * this.colors.length);</span><br><span class="line">    this.color = this.borderColor = this.colors[colorPick];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="13-viewChild"><a href="#13-viewChild" class="headerlink" title="13.viewChild"></a>13.viewChild</h4><ul><li>@ViewChild 选择组件模板内的节点, 类型 ElementRef 或子组件</li><li>@ContentChild 选择当前组件引用的子组件 @ContentChild(组件名)</li><li>区别在于ViewChild选择Shadow DOM, ContentChild 选择 Light DOM,一般情况下用ViewChild就ok了</li></ul><h4 id="14-元素宽度"><a href="#14-元素宽度" class="headerlink" title="14.元素宽度"></a>14.元素宽度</h4><ul><li>element clientWidth</li></ul><p> 内联元素以及没有 CSS 样式的元素的 clientWidth 属性值为 0。Element.clientWidth 属性表示元素的内部宽度，以像素计。该属性包括内边距 padding，但不包括边框 border、外边距 margin 和垂直滚动条（如果有的话）。<br>当在根元素(<html>元素)上使用clientWidth时(或者在<body>上，如果文档是在quirks(怪异)模式下)，将返回viewport的宽度(不包括任何滚动条).</p><p> <img src="https://user-gold-cdn.xitu.io/2020/5/29/1725e7893dd833ac?w=411&h=247&f=png&s=10558"></p><ul><li>jquery width()</li></ul><p> 始终指内容宽度，不包括border</p><p> <img src="https://user-gold-cdn.xitu.io/2020/5/29/1725e789401f43f6?w=272&h=155&f=png&s=2897" alt="width"></p><h4 id="15-scss-无效"><a href="#15-scss-无效" class="headerlink" title="15.scss 无效"></a>15.scss 无效</h4> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> # scss 文件</span><br><span class="line"> input &#123;</span><br><span class="line">  border: none;</span><br><span class="line">  outline: none;</span><br><span class="line">&#125;</span><br><span class="line"># 界面运行时css</span><br><span class="line">input[_ngcontent-c0] &#123;</span><br><span class="line">  border: none;</span><br><span class="line">  outline: none;</span><br><span class="line">&#125;</span><br><span class="line"># 此时需要添加编译处理</span><br><span class="line">:host ::ng-deep input &#123;</span><br><span class="line">  border: none;</span><br><span class="line">  outline: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="16-httpclient默认json格式接收"><a href="#16-httpclient默认json格式接收" class="headerlink" title="16. httpclient默认json格式接收"></a>16. httpclient默认json格式接收</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 后端传递text,需要设置类型</span><br><span class="line">this.http.get(this.configUrl,&#123;responseType:&#x27;text&#x27;&#125;)</span><br><span class="line">.subscribe((data: any) =&gt; this.config = &#123; ...data &#125;);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 源码</span><br><span class="line"> get(url: string, options?: &#123;</span><br><span class="line">      headers?: HttpHeaders | &#123;</span><br><span class="line">          [header: string]: string | string[];</span><br><span class="line">      &#125;;</span><br><span class="line">      # 默认值有： response| body| event </span><br><span class="line">      observe?: &#x27;body&#x27;;# 默认读取的是response中的body </span><br><span class="line">      params?: HttpParams | &#123;</span><br><span class="line">          [param: string]: string | string[];</span><br><span class="line">      &#125;;</span><br><span class="line">      reportProgress?: boolean;</span><br><span class="line">      # 默认值有： arraybuffer | json | blob |text</span><br><span class="line">      responseType?: &#x27;json&#x27;;# 这里，ts参数类型可选，默认值json，</span><br><span class="line">      withCredentials?: boolean;</span><br><span class="line">  &#125;): Observable&lt;Object&gt;;</span><br></pre></td></tr></table></figure><h4 id="17-内存泄漏风险"><a href="#17-内存泄漏风险" class="headerlink" title="17.内存泄漏风险"></a>17.内存泄漏风险</h4><blockquote><p>angular中推荐使用rxjs，进行响应式开发</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import &#123; from &#125; from &#x27;rxjs&#x27;;</span><br><span class="line"></span><br><span class="line">const data = fromEvent(&#x27;click&#x27;);</span><br><span class="line">// Subscribe to begin listening for async result</span><br><span class="line">this.$obser = data.subscribe(&#123;</span><br><span class="line">  next(response) &#123; console.log(response); &#125;,</span><br><span class="line">  error(err) &#123; console.error(&#x27;Error: &#x27; + err); &#125;,</span><br><span class="line">  complete() &#123; console.log(&#x27;Completed&#x27;); &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>上述的subscribe代码，在没有unsubscribe情况下，会出现订阅多次情况</p></blockquote><blockquote><p>我们可以通过多种方法优化</p></blockquote><ul><li>1.在OnDestroy中unsubscribe下<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public ngOnDestory()&#123;</span><br><span class="line">    if( this.$obser)&#123;</span><br><span class="line">         this.$obser.unsubscribe();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>2.类似上面写法，只不过参考这段代码<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 使用Subscription，一处取消，取消所有的</span><br><span class="line">import &#123; interval &#125; from &#x27;rxjs&#x27;;</span><br><span class="line"> </span><br><span class="line">const observable1 = interval(400);</span><br><span class="line">const observable2 = interval(300);</span><br><span class="line"> </span><br><span class="line"> #也可以私用subscription = new Subscription(); //全局创建，然后依次add</span><br><span class="line">const subscription = observable1.subscribe(x =&gt; console.log(&#x27;first: &#x27; + x));</span><br><span class="line">const childSubscription = observable2.subscribe(x =&gt; console.log(&#x27;second: &#x27; + x));</span><br><span class="line"> </span><br><span class="line">subscription.add(childSubscription);</span><br><span class="line"> </span><br><span class="line">setTimeout(() =&gt; &#123;</span><br><span class="line">  // Unsubscribes BOTH subscription and childSubscription</span><br><span class="line">  subscription.unsubscribe();</span><br><span class="line">&#125;, 1000);</span><br></pre></td></tr></table></figure></li><li>3.参考使用rxjs pipe，改用异步<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 具体细节还依赖rxjs operator熟练，后期整理一篇供大家参考</span><br><span class="line">@Component(&#123;</span><br><span class="line">  selector: &#x27;async-observable-pipe&#x27;,</span><br><span class="line">  template: `&lt;div&gt;&lt;code&gt;observable|async&lt;/code&gt;:</span><br><span class="line">       Time: &#123;&#123; time$ | async &#125;&#125;&lt;/div&gt;`</span><br><span class="line">&#125;)</span><br><span class="line">export class AsyncObservablePipeComponent &#123;</span><br><span class="line">  time$ = new Observable&lt;string&gt;(observer =&gt; &#123;</span><br><span class="line">    setInterval(() =&gt; observer.next(new Date().toString()), 1000);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="18-组件更新策略调整，优化组件树更新性能"><a href="#18-组件更新策略调整，优化组件树更新性能" class="headerlink" title="18.组件更新策略调整，优化组件树更新性能"></a>18.组件更新策略调整，优化组件树更新性能</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Component(&#123;</span><br><span class="line">    selector: &#x27;app-product&#x27;,</span><br><span class="line">    template: `...`,</span><br><span class="line">    changeDetection: ChangeDetectionStrategy.OnPush</span><br><span class="line">&#125;)</span><br><span class="line">export class ProductComponent &#123; ... &#125;</span><br></pre></td></tr></table></figure><blockquote><p>如下情况会触发<a href="https://indepth.dev/using-angular-in-the-right-way-template-syntax/">OnPush</a></p></blockquote><ul><li>@Input值发生改变</li><li>组件或者子组件，触发Dom事件</li><li>detectChanges 方法调用</li><li>async Pipe 发生改变</li></ul><h4 id="19-tooltip显示-getBoundingClientRect"><a href="#19-tooltip显示-getBoundingClientRect" class="headerlink" title="19. tooltip显示 getBoundingClientRect "></a>19. tooltip显示 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect">getBoundingClientRect </a></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># html</span><br><span class="line">&lt;div class=&quot;tips&quot; #tooltip&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">#ts</span><br><span class="line">class ToolTipCompoment &#123;</span><br><span class="line">    @ViewChild(&#x27;tips&#x27;)</span><br><span class="line">    tips: ElementRef;</span><br><span class="line">    </span><br><span class="line">    showTip()&#123;</span><br><span class="line">        const dom = this.tips.nativeElement;</span><br><span class="line">        const pos = dom.getBoundingClientRect();</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <img src="https://user-gold-cdn.xitu.io/2020/7/16/17354be96e1de380?w=1466&h=1099&f=png&s=66027" width="300" height="200"> <h4 id="20-Observable-lazy-push"><a href="#20-Observable-lazy-push" class="headerlink" title="20 Observable lazy push"></a>20 Observable lazy push</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#rxjs </span><br><span class="line">import &#123; Observable &#125; from &#x27;rxjs&#x27;;</span><br><span class="line"></span><br><span class="line">const observable = new Observable(subscriber =&gt; &#123;</span><br><span class="line">  subscriber.next(1);</span><br><span class="line">  subscriber.next(2);</span><br><span class="line">  subscriber.next(3);</span><br><span class="line">  setTimeout(() =&gt; &#123;</span><br><span class="line">    subscriber.next(4);</span><br><span class="line">    subscriber.complete();</span><br><span class="line">  &#125;, 1000);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>上述代码定义完毕，是否意味着我们就可以获取到数据呢？答案是否定的，请看官网，这样描述的：</p></blockquote><blockquote><p>To invoke the <a href="https://rxjs-dev.firebaseapp.com/guide/observable">Observable</a> and see these values, we need to subscribe to it:</p></blockquote><blockquote><p>code需要如下修改，添加subscribe：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Observable &#125; from &#x27;rxjs&#x27;;</span><br><span class="line"></span><br><span class="line">const observable = new Observable(subscriber =&gt; &#123;</span><br><span class="line">  subscriber.next(1);</span><br><span class="line">  subscriber.next(2);</span><br><span class="line">  subscriber.next(3);</span><br><span class="line">  setTimeout(() =&gt; &#123;</span><br><span class="line">    subscriber.next(4);</span><br><span class="line">    subscriber.complete();</span><br><span class="line">  &#125;, 1000);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">console.log(&#x27;just before subscribe&#x27;);</span><br><span class="line">observable.subscribe(&#123;</span><br><span class="line">  next(x) &#123; console.log(&#x27;got value &#x27; + x); &#125;,</span><br><span class="line">  error(err) &#123; console.error(&#x27;something wrong occurred: &#x27; + err); &#125;,</span><br><span class="line">  complete() &#123; console.log(&#x27;done&#x27;); &#125;</span><br><span class="line">&#125;);</span><br><span class="line">console.log(&#x27;just after subscribe&#x27;);</span><br></pre></td></tr></table></figure><blockquote><p>那么，同理，Rxjs的所有的operators，我们都需要Subscribe才能调用、获取到值 </p></blockquote><ul><li>一种方式： subscribe</li><li>另一种方式，html界面，(count$ | async )</li></ul><h4 id="21-Angular-httpclient-前端日志搜集失败"><a href="#21-Angular-httpclient-前端日志搜集失败" class="headerlink" title="21. Angular httpclient 前端日志搜集失败"></a>21. Angular httpclient 前端日志搜集失败</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 定义http api请求</span><br><span class="line">getConfig() &#123;</span><br><span class="line">  return this.http.get(this.configUrl);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 紧跟着我们会定义</span><br><span class="line">showConfig() &#123;</span><br><span class="line">  this.configService.getConfig()</span><br><span class="line">    .subscribe((data: Config) =&gt; this.config = &#123;</span><br><span class="line">        heroesUrl: data[&#x27;heroesUrl&#x27;],</span><br><span class="line">        textfile:  data[&#x27;textfile&#x27;]</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>结合20,我们可以发现，如果不subscribe，http请求是发送不出去的。</p></blockquote><blockquote><p>尤其在前端记录日志，如果只是定义，没有subscribe，那么前端日志是不能记录成功的哦！！！</p></blockquote><h4 id="22-async-与-subscribe-效果等同"><a href="#22-async-与-subscribe-效果等同" class="headerlink" title="22. async 与 subscribe 效果等同"></a>22. async 与 subscribe 效果等同</h4><blockquote><p>20 页面中导出数据，譬如 export json、csv文件时候，如果使用async 异步设置loading，那么会出现一次导出多份文件情况。</p></blockquote><blockquote><p>根本原因在于，asyn与subscribe效果等同，多次订阅，没有unsubscribe情况，触发多次保存</p></blockquote><h4 id="23-rxjs-创建数据流同异步之分"><a href="#23-rxjs-创建数据流同异步之分" class="headerlink" title="23. rxjs 创建数据流同异步之分"></a>23. rxjs 创建数据流同异步之分</h4><blockquote><p>同步数据流</p></blockquote><ul><li>create - Observable 构造函数</li><li>of  - 列举有限的</li><li>range - 特定范围</li><li>generate - 循环</li><li>repeat - 重复</li><li>empty  - 空</li><li>never - 永不完结</li><li>throw - 抛出错误</li></ul><blockquote><p>异步数据流</p></blockquote><ul><li>interval - 特定间隔</li><li>timer - 定时</li><li>from </li><li>fromEvent </li><li>ajax </li><li>defer</li></ul><blockquote><p>编写代码时候，常常没有想到异步的存在，导致undefined异常发生。</p></blockquote><h4 id="24-angular-iframe-loading"><a href="#24-angular-iframe-loading" class="headerlink" title="24. angular iframe loading"></a>24. angular iframe loading</h4><blockquote><p>我们期望的是，在iframe资源加载完毕，loading结束。</p></blockquote><blockquote><p>但是我们发现，chrome、safari load会触发两次，firefox、ie11 仅触发一次</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"># html</span><br><span class="line">&lt;div *ngIf=&quot;loading&quot; class=&quot;v-loading&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;iframe  [src]=&quot;url&quot; (load)=&quot;load()&quot;&gt;</span><br><span class="line"></span><br><span class="line"># ts</span><br><span class="line">class helperComponent extends onInit&#123;</span><br><span class="line">    loading = false;</span><br><span class="line">    constructor()&#123;</span><br><span class="line">        console.log(&quot;this is contructor...&quot;);</span><br><span class="line">        //this.loading = true; 通用的写法是，在构造的时候，初始化</span><br><span class="line">    &#125;</span><br><span class="line">    ngOnInit()&#123;</span><br><span class="line">        console.log(&quot;this is init...&quot;);</span><br><span class="line">        this.loading = true;</span><br><span class="line">    &#125;</span><br><span class="line">    load()&#123;</span><br><span class="line">        console.log(&quot;this is load...&quot;);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//output </span><br><span class="line">chrome|safari</span><br><span class="line">this is contructor  // 如果这里初始化true,那么chrome,safari下，loading很快就结束了</span><br><span class="line">this is load...  # 这里会多调用一次，</span><br><span class="line">this is init...  # 所以，我们把loding= true，放置在这里 </span><br><span class="line">this is load...</span><br><span class="line"></span><br><span class="line">ff | ie11</span><br><span class="line">this is contructor</span><br><span class="line">this is init... </span><br><span class="line">this is load...</span><br></pre></td></tr></table></figure><h4 id="25-Array-sort"><a href="#25-Array-sort" class="headerlink" title="25. Array sort"></a>25. Array sort</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 请问，你想到结果是什么吗？是否会发生异常？</span><br><span class="line">const arr = [1,undefined,2,undefined,4,undefined];</span><br><span class="line">arr.sort((a,b) =&gt; &#123;</span><br><span class="line">   return a.name &gt; b.name</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#output </span><br><span class="line">[1, 2, 4, undefined, undefined, undefined]</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort">原因如下</a>：</p></blockquote><blockquote><p>If compareFunction is supplied, all non-undefined array elements are sorted according to the return value of the compare function (all undefined elements are sorted to the end of the array, with no call to compareFunction)</p></blockquote><h4 id="26-ngrx-undefined问题"><a href="#26-ngrx-undefined问题" class="headerlink" title="26. ngrx undefined问题"></a>26. ngrx undefined问题</h4><blockquote><p><a href="https://ngrx.io/guide/store/selectors">ngrx</a> 用于状态管理，类似于sessionStorage，有 get&#x2F;set</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># selectors</span><br><span class="line">export const userLogin = createSelector(</span><br><span class="line">  getCounterValue,</span><br><span class="line">  (counter, props) =&gt; counter * props.multiply</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">ngOnInit() &#123;</span><br><span class="line">  this.counter = this.store.pipe(select(fromRoot.getCount, &#123; multiply: 2 &#125;))</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>我们在selector获取unfined，常见原因有两种：</p></blockquote><ul><li>对应的action，没有触发，没有set对应的value</li><li>对应的value设置了，但是get时候，写法不对，譬如</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 正确的写法</span><br><span class="line">this.counter = this.store.pipe(select(fromRoot.getCount, &#123; multiply: 2 &#125;))</span><br><span class="line"></span><br><span class="line"># 错误的写法</span><br><span class="line">  this.counter = this.store.pipe(fromRoot.getCount, &#123; multiply: 2 &#125;)</span><br></pre></td></tr></table></figure><h4 id="27-Cannot-find-module-‘typescript’"><a href="#27-Cannot-find-module-‘typescript’" class="headerlink" title="27. Cannot find module ‘typescript’"></a>27. Cannot find module ‘typescript’</h4><blockquote><p>TypeScript is required if you want to compile using ts-node.</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -D typescript</span><br><span class="line">npm install -D ts-node</span><br></pre></td></tr></table></figure><h4 id="28-ngrx-store-pip-sync-or-async"><a href="#28-ngrx-store-pip-sync-or-async" class="headerlink" title="28. ngrx store pip sync or async ?"></a>28. ngrx store pip sync or async ?</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">export const getList = () =&gt;</span><br><span class="line">  createSelector(</span><br><span class="line">    (state, props) =&gt; state.counter[props.key]</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">console.log(&quot;before....&quot;);</span><br><span class="line">this.store.pipe(</span><br><span class="line">  select(fromRoot.getList(), &#123; key: &#x27;counter2&#x27;&#125;),</span><br><span class="line">  tap(() =&gt; &#123;</span><br><span class="line">    console.log(&quot;store....&quot;);</span><br><span class="line">  &#125;)</span><br><span class="line">);</span><br><span class="line">console.log(&quot;after....&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//output</span><br><span class="line">before....</span><br><span class="line">store....</span><br><span class="line">after....</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="29-rxjs-EMPTY-与Of"><a href="#29-rxjs-EMPTY-与Of" class="headerlink" title="29 rxjs EMPTY 与Of({})"></a>29 rxjs EMPTY 与Of({})</h4><blockquote><p>EMPTY仅仅触发complete,不会触发next。在整合ngrx时，需要谨慎返回。</p></blockquote><blockquote><p>Of，next先触发，在执行complete</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">import &#123; fromEvent, interval , of, EMPTY &#125; from &#x27;rxjs&#x27;;</span><br><span class="line">import &#123; switchAll, map, tap &#125; from &#x27;rxjs/operators&#x27;;</span><br><span class="line"> </span><br><span class="line">EMPTY.subscribe(</span><br><span class="line">  () =&gt; &#123;</span><br><span class="line">    console.log(&#x27;empty next&#x27;);</span><br><span class="line">  &#125;,</span><br><span class="line">  () =&gt; &#123;</span><br><span class="line">    console.log(&#x27;empty error&#x27;);</span><br><span class="line">  &#125;,</span><br><span class="line">  () =&gt; &#123;</span><br><span class="line">    console.log(&#x27;empty complete&#x27;);</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">of(&#123;&#125;).subscribe(</span><br><span class="line">  () =&gt; &#123;</span><br><span class="line">    console.log(&#x27;of next&#x27;);</span><br><span class="line">  &#125;,</span><br><span class="line">  () =&gt; &#123;</span><br><span class="line">    console.log(&#x27;of error&#x27;);</span><br><span class="line">  &#125;,</span><br><span class="line">  () =&gt; &#123;</span><br><span class="line">    console.log(&#x27;of complete&#x27;);</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">//output</span><br><span class="line">empty complete</span><br><span class="line">of next</span><br><span class="line">of complete</span><br></pre></td></tr></table></figure><h4 id="30-rxjs-编写angular-export"><a href="#30-rxjs-编写angular-export" class="headerlink" title="30 rxjs 编写angular export"></a>30 rxjs 编写angular export</h4><blockquote><p>及时关闭数据流监听</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">getData: () =&gt; &#123;</span><br><span class="line">    const data1:Observabl&lt;any&gt; = this.getDataone();</span><br><span class="line">    const data2:Observable&lt;any&gt; = this.getDataTwo();</span><br><span class="line">    return combineLatest([data1,data2]).pipe(map([data1,data2]) =&gt; &#123;</span><br><span class="line">        //数据整合，返回json str</span><br><span class="line">        return jsonStr</span><br><span class="line">    &#125;)</span><br><span class="line">    //此处一定要关闭数据监听，不然会任何data1,data2改变，都会触发下载，即使没有点击下载按钮</span><br><span class="line">    take(1),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">this.exportService.getData().pipe(</span><br><span class="line"> (res) =&gt; &#123;</span><br><span class="line">     //download js logic </span><br><span class="line">    </span><br><span class="line"> &#125;</span><br><span class="line">).subscribe() </span><br></pre></td></tr></table></figure><h3 id="更多推荐"><a href="#更多推荐" class="headerlink" title="更多推荐"></a>更多推荐</h3><h4 id="Angular8-HttpClient-30分钟深入了解下"><a href="#Angular8-HttpClient-30分钟深入了解下" class="headerlink" title="Angular8 HttpClient 30分钟深入了解下"></a><a href="https://juejin.im/post/5ee344586fb9a0479673478e">Angular8 HttpClient 30分钟深入了解下</a></h4><h4 id="Angular-Render2你了解吗？"><a href="#Angular-Render2你了解吗？" class="headerlink" title="Angular Render2你了解吗？"></a><a href="https://juejin.im/post/5edf9211f265da76c76b1d81">Angular Render2你了解吗？</a></h4><h4 id="20个你值得了解的Angular开源项目"><a href="#20个你值得了解的Angular开源项目" class="headerlink" title="20个你值得了解的Angular开源项目"></a><a href="https://juejin.im/post/5edf916a6fb9a047e6080dd9">20个你值得了解的Angular开源项目</a></h4><h4 id="Angular7-8-read-local-json的2种方法"><a href="#Angular7-8-read-local-json的2种方法" class="headerlink" title="Angular7&#x2F;8 read local json的2种方法"></a><a href="https://juejin.im/post/5e15a0c46fb9a047f83eda08">Angular7&#x2F;8 read local json的2种方法</a></h4><h4 id="Angular8-ui-grid替代方案ag-grid入门"><a href="#Angular8-ui-grid替代方案ag-grid入门" class="headerlink" title="Angular8 ui-grid替代方案ag-grid入门"></a><a href="https://juejin.im/post/5def66ae6fb9a0162b7f2f07">Angular8 ui-grid替代方案ag-grid入门</a></h4><h4 id="深入了解指令"><a href="#深入了解指令" class="headerlink" title="深入了解指令"></a><a href="https://huchengzhang.com/2020/07/11/angular/%E3%80%8Aangular8%E3%80%8B-%20angular8%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3%E6%8C%87%E4%BB%A4/">深入了解指令</a></h4><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><ul><li><a href="https://blog.angular-university.io/angular-ng-template-ng-container-ngtemplateoutlet/">angular ng-template</a></li><li><a href="https://blog.angular-university.io/angular-ng-content/">angular ng-content</a></li><li><a href="https://www.cnblogs.com/cme-kai/p/8352087.html">元素绑定</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Element/clientWidth">element clientWidth</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> angular </tag>
            
            <tag> 避坑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Linux》- shell条件判断</title>
      <link href="/2020/05/13/devops_skills/linux/%E3%80%8ALinux%E3%80%8B-%20shell%E6%9D%A1%E4%BB%B6%E5%88%A4%E6%96%AD/"/>
      <url>/2020/05/13/devops_skills/linux/%E3%80%8ALinux%E3%80%8B-%20shell%E6%9D%A1%E4%BB%B6%E5%88%A4%E6%96%AD/</url>
      
        <content type="html"><![CDATA[<h3 id="shell-文件权限"><a href="#shell-文件权限" class="headerlink" title="shell 文件权限"></a>shell 文件权限</h3><h4 id="shell-开头"><a href="#shell-开头" class="headerlink" title="shell 开头"></a>shell 开头</h4><ul><li>以sh后缀</li><li>开头#注释，表明采用何种解释器 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash </span></span><br></pre></td></tr></table></figure></li><li>添加作者等说明 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">#/bin/bash</span></span><br><span class="line">&lt;&lt;<span class="string">ABC</span></span><br><span class="line"><span class="string">    author:cheonghu</span></span><br><span class="line"><span class="string">    date:2020-05-06</span></span><br><span class="line"><span class="string">    desc:shell demo</span></span><br><span class="line"><span class="string">ABC</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="文件权限"><a href="#文件权限" class="headerlink" title="文件权限"></a>文件权限</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ ll </span><br><span class="line">total 4</span><br><span class="line">-rw-r--r-- 1 root root 88 Apr 24 22:15 demo.sh</span><br></pre></td></tr></table></figure><ul><li>其中可以看到，demo.sh没有可执行权限;但是 bash demo.sh可以运行 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ ./demo.sh</span><br><span class="line">-bash: ./demo.sh: Permission denied</span><br><span class="line"></span><br><span class="line">$ bash ./demo.sh</span><br><span class="line">shell demo</span><br></pre></td></tr></table></figure></li><li>也可以通过chmod 修改权限 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ chmod 755 ./demo.sh </span><br><span class="line"># or</span><br><span class="line">$ chmod u+x ./demo.sh  # 给当前拥有者添加可执行权限</span><br><span class="line">$ ll </span><br><span class="line">-rwxr--r-- 1 root root 88 Apr 24 22:15 demo.sh</span><br></pre></td></tr></table></figure></li></ul><h3 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h3><h4 id="字符串非空"><a href="#字符串非空" class="headerlink" title="字符串非空"></a>字符串非空</h4><ul><li>n 测试是否为非空，需要””避免异常错误<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ [ -n &quot;$TEST&quot; ] &amp;&amp; echo Y || echo F</span><br><span class="line">Y</span><br></pre></td></tr></table></figure></li><li>z 测试是否为空 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ [-z $TEST] &amp;&amp; echo Y</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h4 id="字符串比较"><a href="#字符串比较" class="headerlink" title="字符串比较"></a>字符串比较</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ [ $USER == root ]</span><br><span class="line"># or </span><br><span class="line">$ test $USER == root </span><br></pre></td></tr></table></figure><h4 id="整数比较"><a href="#整数比较" class="headerlink" title="整数比较"></a>整数比较</h4><ul><li><p>-gt</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ [ 1 -gt 2 ]; echo $?</span><br><span class="line">1</span><br><span class="line"># $? 查看上一条命令结束码;0 正确 非0，false</span><br></pre></td></tr></table></figure></li><li><p>-eq </p></li><li><p>-ne</p></li><li><p>-lt</p></li><li><p>-le</p></li><li><p>-ge (大于或等于)</p></li></ul><h4 id="文件属性判断"><a href="#文件属性判断" class="headerlink" title="文件属性判断"></a>文件属性判断</h4><ul><li><p>-e 文件或者目录是否存在</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ [ -e get.sh ] &amp;&amp; echo &quot;存在&quot; || echo &quot;不存在&quot;</span><br><span class="line">存在</span><br></pre></td></tr></table></figure></li><li><p>-d 判断存在且为目录</p></li><li><p>-f</p></li><li><p>-L 软连接 （类似快捷键，跨分区，但是删除不可用；硬链接，相反；）</p></li><li><p>-p 管道 </p></li><li><p>-r 读权限</p></li><li><p>-w 写权限</p></li><li><p>-x 执行权限;root 也必须有x，才能执行</p></li><li><p>-s 非空</p></li></ul><h4 id="与"><a href="#与" class="headerlink" title="[] 与 [[]]"></a>[] 与 [[]]</h4><ul><li><p>通用</p><ul><li>数值大小比较<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ [ 5 -gt 8 ]</span><br><span class="line">$ [[ 5 -lt 8  ]]</span><br></pre></td></tr></table></figure></li><li>字符串非空比较<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ [ -z &quot;&quot; ] &amp;&amp; echo y || echo n </span><br><span class="line">y</span><br><span class="line">$ [ -n &#x27;13&#x27; ] &amp;&amp; echo y || echo n </span><br><span class="line">y </span><br></pre></td></tr></table></figure></li><li>文件属性<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ [ 9.txt -nt get.sh ] &amp;&amp; echo y || echo n</span><br><span class="line">$ [[ 9.txt -nt get.sh ]] &amp;&amp; echo y || echo n</span><br></pre></td></tr></table></figure></li></ul></li><li><p>不同</p></li><li><p>逻辑运算&amp;&amp; </p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ [[ 5 == 9 &amp;&amp; 5 == 4 ]] &amp;&amp; echo y || echo n </span><br><span class="line">n</span><br><span class="line"></span><br><span class="line"># []使用&amp;&amp; </span><br><span class="line">$[ 5 == 9 &amp;&amp; 5 == 4 ] &amp;&amp; echo y || echo n</span><br><span class="line">-bash: [: missing `]&#x27;</span><br><span class="line"></span><br><span class="line">$[ 5 == 9 -a 5 == 4 ] &amp;&amp; echo y || echo n</span><br><span class="line">n </span><br></pre></td></tr></table></figure></li><li><p>逻辑运算||</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$[[ 5 == 8 || 6 == 9 ]]</span><br><span class="line">$[ 5 == 8 -o 6 == 9 ]</span><br></pre></td></tr></table></figure></li><li><p>符号使用&gt;,&lt;</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$[[ 5 &gt; 9 ]] - 排序比较</span><br><span class="line">$[ 5 &gt; 9 ] - 部分支持</span><br></pre></td></tr></table></figure></li><li><p>正则使用</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 仅仅是字符比较</span><br><span class="line">$ test = &#x27;123&#x27;</span><br><span class="line">$ [ $test == 1* ] &amp;&amp; echo y || echo n </span><br><span class="line">n</span><br><span class="line"></span><br><span class="line"># 正则比较</span><br><span class="line">$ [[ $test == 1* ]] &amp;&amp; echo y || echo n </span><br><span class="line">y</span><br><span class="line"></span><br><span class="line"># a是否为数字</span><br><span class="line">$ a=2 </span><br><span class="line">$[[ $a == [0-9] ]]&amp;&amp; echo y || echo n </span><br><span class="line">y</span><br></pre></td></tr></table></figure></li><li><p>&#x3D;~ </p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> #  正则匹配，是否包含0-9</span><br><span class="line">$b=&#x27;a23&#x27;</span><br><span class="line">$[[ $b =~ [0-9] ]]&amp;&amp; echo y || echo n </span><br><span class="line">y</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> shell </tag>
            
            <tag> 脚本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《canvas》- canvas doc 学习笔记之文本</title>
      <link href="/2020/05/11/front_skills/canvas/%E3%80%8Acanvas%E3%80%8B-%20canvas%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E6%96%87%E6%9C%AC/"/>
      <url>/2020/05/11/front_skills/canvas/%E3%80%8Acanvas%E3%80%8B-%20canvas%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E6%96%87%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><h4 id="canvas-vs-svg"><a href="#canvas-vs-svg" class="headerlink" title="canvas vs svg"></a>canvas vs svg</h4><ul><li>canvas 适用于动态创建的位图，缩放失真。</li><li>svg 适用于静态描述的矢量图，缩放不失真。</li><li>canvas 基于”状态”绘制图形，譬如，strokeStyle、fillStyle、lineWidth等</li><li>svg基于dom，可以直接在html中展示</li></ul><h4 id="绘图四步骤"><a href="#绘图四步骤" class="headerlink" title="绘图四步骤"></a>绘图四步骤</h4><ul><li>定义canvas,设置width,height属性，设置变形等特效</li><li>获取canvas 2D context，绘制图形</li><li>添加动画</li><li>添加交互</li></ul><h4 id="canvas-w3c坐标系"><a href="#canvas-w3c坐标系" class="headerlink" title="canvas w3c坐标系"></a>canvas w3c坐标系</h4> <img src="https://s1.ax1x.com/2020/03/26/G9ZGr9.png" width="300" height="200"><h4 id="canvas-width-height设置"><a href="#canvas-width-height设置" class="headerlink" title="canvas width\height设置"></a>canvas width\height设置</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const dom = document.getElementById(&#x27;canvas&#x27;);</span><br><span class="line">dom.width = window.innerWidth;</span><br><span class="line">dom.height = window.innerHeight;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;canvas id=&quot;canvas&quot; width=&quot;600&quot; height=&quot;700&quot;&gt;&lt;/canvas&gt;</span><br></pre></td></tr></table></figure><h3 id="canvas-文本"><a href="#canvas-文本" class="headerlink" title="canvas 文本"></a>canvas 文本</h3><h4 id="strokeText"><a href="#strokeText" class="headerlink" title="strokeText"></a>strokeText</h4>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const str = &#x27;学习hello world&#x27;;</span><br><span class="line">ctx.font = &#x27;bold 30px 微软雅黑&#x27;; </span><br><span class="line"># font = &quot;font-style font-weight font-size font-family&quot;</span><br><span class="line"></span><br><span class="line">ctx.strokeStyle = &#x27;red&#x27;;</span><br><span class="line">ctx.strokeText(str,100,100,100);</span><br></pre></td></tr></table></figure><h4 id="fillText"><a href="#fillText" class="headerlink" title="fillText"></a>fillText</h4>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const str = &#x27;学习hello world&#x27;;</span><br><span class="line">ctx.font = &#x27;bold 30px 微软雅黑&#x27;;</span><br><span class="line"></span><br><span class="line">ctx.fillStyle = &#x27;blue&#x27;;</span><br><span class="line">ctx.fillText(str,200,100,100);</span><br></pre></td></tr></table></figure><h4 id="measureText"><a href="#measureText" class="headerlink" title="measureText"></a>measureText</h4>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const text = ctx.measureText(str);</span><br><span class="line">const width = text.width;</span><br><span class="line"></span><br><span class="line">//居中</span><br><span class="line">const canvasWidth = dom.width;</span><br><span class="line">const position = (canvasWidth - width) /2;</span><br><span class="line">ctx.strokeText(str,position,300,100);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="textAlign"><a href="#textAlign" class="headerlink" title="textAlign"></a>textAlign</h4>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> #textAlign 控制文本延伸方向;left/start 向右；right/end向左</span><br><span class="line">ctx.textAlign = &#x27;end&#x27;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> canvas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Jenkins》- jenkins入门实践</title>
      <link href="/2020/05/09/jenkins_for_frontend_skills/%E3%80%8AJenkins%E3%80%8B-%20jenkins%E5%85%A5%E9%97%A8%E5%AE%9E%E8%B7%B5/"/>
      <url>/2020/05/09/jenkins_for_frontend_skills/%E3%80%8AJenkins%E3%80%8B-%20jenkins%E5%85%A5%E9%97%A8%E5%AE%9E%E8%B7%B5/</url>
      
        <content type="html"><![CDATA[<h3 id="软件开发过程"><a href="#软件开发过程" class="headerlink" title="软件开发过程"></a>软件开发过程</h3><h4 id="瀑布流开发"><a href="#瀑布流开发" class="headerlink" title="瀑布流开发"></a>瀑布流开发</h4><p><img src="https://s1.ax1x.com/2020/04/21/JJpic9.md.png" width="400" height="250"></img></p><h4 id="持续集成"><a href="#持续集成" class="headerlink" title="持续集成"></a>持续集成</h4><p><img src="https://s1.ax1x.com/2020/04/21/JJpP1J.md.png" width="400" height="250"></img></p><h4 id="持续集成工具"><a href="#持续集成工具" class="headerlink" title="持续集成工具"></a>持续集成工具</h4><p><img src="https://s1.ax1x.com/2020/04/21/JJpFXR.md.png" width="400" height="250"></img></p><h3 id="jenkins"><a href="#jenkins" class="headerlink" title="jenkins"></a>jenkins</h3><h4 id="jenkins介绍"><a href="#jenkins介绍" class="headerlink" title="jenkins介绍"></a>jenkins介绍</h4><ul><li>java语言开发</li><li>支持插件</li><li>为持续构建而生</li></ul><h4 id="jekins安装"><a href="#jekins安装" class="headerlink" title="jekins安装"></a>jekins安装</h4><ul><li>拉取镜像 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull jenkinsci/blueocean </span><br></pre></td></tr></table></figure></li><li>容器启动 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># --rm \ stop后会删除</span><br><span class="line">docker run \</span><br><span class="line"> -u root \</span><br><span class="line"> --name jekins \</span><br><span class="line"> -d \</span><br><span class="line"> -p 8080:8080 \</span><br><span class="line"> -p 50000:50000 \</span><br><span class="line"> -v jenkins-data:/var/jenkins_home \</span><br><span class="line"> -v /var/run/docker.sock:/var/run/docker.sock \</span><br><span class="line"> jenkinsci/blueocean</span><br></pre></td></tr></table></figure></li><li>访问jekins 容器 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it jenkins-blueocean bash</span><br></pre></td></tr></table></figure></li><li>访问jekins 日志 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs &lt;docker-container-name&gt;</span><br></pre></td></tr></table></figure></li></ul><h4 id="jekins-访问"><a href="#jekins-访问" class="headerlink" title="jekins 访问"></a>jekins 访问</h4><ul><li><a href="http://localhost:8080/">http://localhost:8080</a></li><li>从Jenkins控制台日志输出中，复制自动生成的字母数字密码（在两组星号之间）</li></ul><h3 id="概念介绍"><a href="#概念介绍" class="headerlink" title="概念介绍"></a>概念介绍</h3><h4 id="节点"><a href="#节点" class="headerlink" title="节点"></a>节点</h4><ul><li>在脚本式流水线中，“节点”特指一个运行代理节点的系统，</li><li>声明式流水线中，其指代一个特定的代理节点来分配节点</li><li>node用于脚本式流水线，而agent则用于声明式流水线就够了</li></ul><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p> <a href="https://jenkins.io/zh/doc/book/installing/">jenkins</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> jenkins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Docker》- nginx 本地代理调试线上api</title>
      <link href="/2020/05/07/devops_skills/docker/%E3%80%8ADocker%E3%80%8B-%20nginx%20%E6%9C%AC%E5%9C%B0%E4%BB%A3%E7%90%86%E8%B0%83%E8%AF%95%E7%BA%BF%E4%B8%8Aapi/"/>
      <url>/2020/05/07/devops_skills/docker/%E3%80%8ADocker%E3%80%8B-%20nginx%20%E6%9C%AC%E5%9C%B0%E4%BB%A3%E7%90%86%E8%B0%83%E8%AF%95%E7%BA%BF%E4%B8%8Aapi/</url>
      
        <content type="html"><![CDATA[<h3 id="本地nginx-配置https访问产线api"><a href="#本地nginx-配置https访问产线api" class="headerlink" title="本地nginx 配置https访问产线api"></a>本地nginx 配置https访问产线api</h3><h4 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h4> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ brew search nginx</span><br><span class="line">$ brew install nginx </span><br></pre></td></tr></table></figure><h4 id="自签证书"><a href="#自签证书" class="headerlink" title="自签证书"></a>自签证书</h4> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> # 其中，证书，不设置任何密码，便于nginx使用</span><br><span class="line">openssl genrsa -des3 -passout pass:x -out http-ssl.pass.key 2048</span><br><span class="line"></span><br><span class="line">openssl rsa -passin pass:x -in http-ssl.pass.key -out http-ssl.key</span><br><span class="line"></span><br><span class="line">rm http-ssl.pass.key</span><br><span class="line"></span><br><span class="line">openssl req -new -key http-ssl.key -out http-ssl.csr</span><br><span class="line"></span><br><span class="line">openssl x509 -req -days 365 -in http-ssl.csr -signkey http-ssl.key -out http-ssl.crt</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>推荐命令写入sh脚本 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash </span><br><span class="line">....</span><br></pre></td></tr></table></figure> <img src="https://s1.ax1x.com/2020/05/08/YnAWX4.png"></li></ul><h4 id="本地host配置"><a href="#本地host配置" class="headerlink" title="本地host配置"></a>本地host配置</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1 api.test.com</span><br></pre></td></tr></table></figure><ul><li><p>选择Finder → Go → GO TO Folder<br> <img src="https://s1.ax1x.com/2020/05/07/Yegyhd.md.png"></p></li><li><p>输入 </p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/private/etc/hosts</span><br></pre></td></tr></table></figure></li><li><p>copy hosts 到其余地方，进行编辑</p></li><li><p>然后在copy 回来，替换即可</p></li></ul><h4 id="nginx-conf配置"><a href="#nginx-conf配置" class="headerlink" title="nginx.conf配置"></a>nginx.conf配置</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 443 ssl;</span><br><span class="line">    server_name *.test.com api.test.com localhost;</span><br><span class="line">   </span><br><span class="line">    client_body_buffer_size 4k;</span><br><span class="line">    client_max_body_size 4M;</span><br><span class="line">    client_header_buffer_size 1k;</span><br><span class="line">    large_client_header_buffers 4 1k;</span><br><span class="line">   </span><br><span class="line">    ssl_certificate      ./ssl/http-ssl.crt;</span><br><span class="line">    ssl_certificate_key  ./ssl/http-ssl.key;</span><br><span class="line">    ssl_session_timeout  5m;</span><br><span class="line">    ssl_protocols  SSLv2 SSLv3 TLSv1;</span><br><span class="line">    ssl_ciphers  HIGH:!aNULL:!MD5;</span><br><span class="line">    ssl_prefer_server_ciphers   on;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        root   /usr/share/nginx/html;</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">        proxy_set_header Host $host;</span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">        proxy_pass http://127.0.0.1:8090;</span><br><span class="line">    &#125;</span><br><span class="line">    error_page   500 502 503 504  /50x.html;</span><br><span class="line">    location = /50x.html &#123;</span><br><span class="line">        root   /usr/share/nginx/html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><h4 id="启动nginx"><a href="#启动nginx" class="headerlink" title="启动nginx"></a>启动nginx</h4><ul><li>启动 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx </span><br></pre></td></tr></table></figure></li><li>测试配置文件 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -t </span><br></pre></td></tr></table></figure></li><li>重新加载配置 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure></li></ul><h3 id="docker-nginx配置"><a href="#docker-nginx配置" class="headerlink" title="docker nginx配置"></a>docker nginx配置</h3><h4 id="自签证书-1"><a href="#自签证书-1" class="headerlink" title="自签证书"></a>自签证书</h4><ul><li>同上</li></ul><h4 id="本地host修改"><a href="#本地host修改" class="headerlink" title="本地host修改"></a>本地host修改</h4><ul><li>同上</li></ul><h4 id="nginx安装"><a href="#nginx安装" class="headerlink" title="nginx安装"></a>nginx安装</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker pull nginx</span><br></pre></td></tr></table></figure><h4 id="nginx-配置"><a href="#nginx-配置" class="headerlink" title="nginx 配置"></a>nginx 配置</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h4 id="nginx-启动"><a href="#nginx-启动" class="headerlink" title="nginx 启动"></a>nginx 启动</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ docker run \</span><br><span class="line">  --name my-nginx \</span><br><span class="line">  --rm \</span><br><span class="line">  -d -p 8090:80 \</span><br><span class="line">  -v $PWD/html:/usr/share/nginx/html \</span><br><span class="line">  -v $PWD/ssl:/etc/nginx/ssl \</span><br><span class="line">  -v $PWD/nginx.conf:/etc/nginx/nginx.conf:ro \</span><br><span class="line">  -v $PWD/conf.d:/etc/nginx/conf.d \</span><br><span class="line">  -v $PWD/logs:/var/log/nginx \</span><br><span class="line">  nginx</span><br><span class="line">  </span><br></pre></td></tr></table></figure><ul><li>可以将上述命令放入sh脚本中<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash </span><br><span class="line"></span><br><span class="line">docker stop my-nginx </span><br><span class="line"></span><br><span class="line">.....</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Linux》- shell脚本逻辑控制编写</title>
      <link href="/2020/05/05/devops_skills/linux/%E3%80%8ALinux%E3%80%8B-%20shell%E8%84%9A%E6%9C%AC%E9%80%BB%E8%BE%91%E6%8E%A7%E5%88%B6%E7%BC%96%E5%86%99/"/>
      <url>/2020/05/05/devops_skills/linux/%E3%80%8ALinux%E3%80%8B-%20shell%E8%84%9A%E6%9C%AC%E9%80%BB%E8%BE%91%E6%8E%A7%E5%88%B6%E7%BC%96%E5%86%99/</url>
      
        <content type="html"><![CDATA[<h3 id="shell-文件权限"><a href="#shell-文件权限" class="headerlink" title="shell 文件权限"></a>shell 文件权限</h3><h4 id="shell-开头"><a href="#shell-开头" class="headerlink" title="shell 开头"></a>shell 开头</h4><ul><li>以sh后缀</li><li>开头#注释，表明采用何种解释器 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash </span></span><br></pre></td></tr></table></figure></li><li>添加作者等说明 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">#/bin/bash</span></span><br><span class="line">&lt;&lt;<span class="string">ABC</span></span><br><span class="line"><span class="string">    author:cheonghu</span></span><br><span class="line"><span class="string">    date:2020-05-06</span></span><br><span class="line"><span class="string">    desc:shell demo</span></span><br><span class="line"><span class="string">ABC</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="文件权限"><a href="#文件权限" class="headerlink" title="文件权限"></a>文件权限</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ ll </span><br><span class="line">total 4</span><br><span class="line">-rw-r--r-- 1 root root 88 Apr 24 22:15 demo.sh</span><br></pre></td></tr></table></figure><ul><li>其中可以看到，demo.sh没有可执行权限;但是 bash demo.sh可以运行 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ ./demo.sh</span><br><span class="line">-bash: ./demo.sh: Permission denied</span><br><span class="line"></span><br><span class="line">$ bash ./demo.sh</span><br><span class="line">shell demo</span><br></pre></td></tr></table></figure></li><li>也可以通过chmod 修改权限 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ chmod 755 ./demo.sh </span><br><span class="line"># or</span><br><span class="line">$ chmod u+x ./demo.sh  # 给当前拥有者添加可执行权限</span><br><span class="line">$ ll </span><br><span class="line">-rwxr--r-- 1 root root 88 Apr 24 22:15 demo.sh</span><br></pre></td></tr></table></figure></li></ul><h3 id="shell-代码执行"><a href="#shell-代码执行" class="headerlink" title="shell 代码执行"></a>shell 代码执行</h3><h4 id="shell-A；B-依次执行"><a href="#shell-A；B-依次执行" class="headerlink" title="shell - A；B 依次执行"></a>shell - A；B 依次执行</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 两条命令，按照前后顺序执行</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&#x27;hello &#x27;</span>; <span class="built_in">echo</span> <span class="string">&#x27;world&#x27;</span></span><br><span class="line">hello </span><br><span class="line">world</span><br></pre></td></tr></table></figure><h4 id="shell-A-B-有前提条件的执行"><a href="#shell-A-B-有前提条件的执行" class="headerlink" title="shell - A &amp;&amp; B 有前提条件的执行"></a>shell - A &amp;&amp; B 有前提条件的执行</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 前一条命令，执行成功，才继续执行下一条</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&#x27;hello &#x27;</span> &amp;&amp;  <span class="built_in">echo</span> <span class="string">&#x27;world&#x27;</span></span><br><span class="line">hello </span><br><span class="line">world</span><br></pre></td></tr></table></figure><h4 id="shell-A-B-兜底策略的执行"><a href="#shell-A-B-兜底策略的执行" class="headerlink" title="shell - A || B 兜底策略的执行"></a>shell - A || B 兜底策略的执行</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 前一条执行不成功，才执行下一条</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&#x27;hello &#x27;</span> || <span class="built_in">echo</span> <span class="string">&#x27;world&#x27;</span></span><br><span class="line">hello </span><br></pre></td></tr></table></figure><h3 id="shell-代码运算"><a href="#shell-代码运算" class="headerlink" title="shell 代码运算"></a>shell 代码运算</h3><h4 id=""><a href="#" class="headerlink" title="$()"></a>$()</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> $(2+5)</span><br><span class="line">-bash: 2+5: <span class="built_in">command</span> not found</span><br></pre></td></tr></table></figure><h4 id="-1"><a href="#-1" class="headerlink" title="$(())"></a>$(())</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ echo $((2+5))</span><br><span class="line">7</span><br></pre></td></tr></table></figure><h4 id="-2"><a href="#-2" class="headerlink" title="$[]"></a>$[]</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ echo $[2+5]</span><br><span class="line">7</span><br></pre></td></tr></table></figure><h4 id="仅支持的运算符内容，其他无效"><a href="#仅支持的运算符内容，其他无效" class="headerlink" title="仅支持的运算符内容，其他无效"></a>仅支持的运算符内容，其他无效</h4><ul><li>++, - -</li><li>+，-，*，&#x2F;</li><li>**, %, ?:（三目运算符）</li><li>+&#x3D;,-&#x3D;,*&#x3D;,&#x2F;&#x3D;,%&#x3D;</li><li>&amp;&amp;, || </li><li>&lt;, &lt;&#x3D;, &gt;,&gt;&#x3D;</li></ul><h4 id="let"><a href="#let" class="headerlink" title="let"></a>let</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ let x=4,y=5;</span><br><span class="line">$ echo $x</span><br><span class="line">$ echo $[x+y]</span><br></pre></td></tr></table></figure><h4 id="bash不支持小数计算、let定义变量"><a href="#bash不支持小数计算、let定义变量" class="headerlink" title="bash不支持小数计算、let定义变量"></a>bash不支持小数计算、let定义变量</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ let x=2.2 </span><br><span class="line">-bash: let: x=2.2: syntax error: invalid arithmetic operator (error token is &quot;.2&quot;)</span><br><span class="line">$ bc</span><br><span class="line">bc 1.06.95</span><br><span class="line">Copyright 1991-1994, 1997, 1998, 2000, 2004, 2006 Free Software Foundation, Inc.</span><br><span class="line">This is free software with ABSOLUTELY NO WARRANTY.</span><br><span class="line">For details type `warranty&#x27;. </span><br><span class="line"></span><br><span class="line">let x=2.2</span><br><span class="line">(standard_in) 8: syntax error</span><br><span class="line">1.5+3.2</span><br><span class="line">4.7</span><br></pre></td></tr></table></figure><h4 id="echo中引用bc"><a href="#echo中引用bc" class="headerlink" title="echo中引用bc"></a>echo中引用bc</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ x=$(echo &quot;scale=4;(49+6-30+10)/9;&quot; | bc)</span><br><span class="line">3.8888</span><br><span class="line"># 错误做法</span><br><span class="line">$ x=$[echo &quot;scale=4;(49+6-30+10)/9;&quot; | bc]</span><br><span class="line">-bash: echo &quot;scale=4;(49+6-30+10)/9;&quot; | bc: </span><br><span class="line"> syntax error: invalid arithmetic operator (error token is &quot;&quot;scale=4;(49+6-30+10)/9;&quot; | bc&quot;)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 1000以二进制的形式输入</span><br><span class="line">$ echo &quot;ibase=2;1000&quot; | bc</span><br><span class="line">8</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 8以2进制形式输出</span><br><span class="line">$ echo &quot;obase=2;8&quot;|bc</span><br><span class="line">1000</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> shell </tag>
            
            <tag> 脚本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《angular8》 - angular directive 升级ui-grid Ui更新问题</title>
      <link href="/2020/04/28/front_skills/angular/%E3%80%8A%20angular8%20%E3%80%8B%20-%20angular%20directive%20%E5%8D%87%E7%BA%A7ui-grid%20Ui%E6%9B%B4%E6%96%B0%E9%97%AE%E9%A2%98/"/>
      <url>/2020/04/28/front_skills/angular/%E3%80%8A%20angular8%20%E3%80%8B%20-%20angular%20directive%20%E5%8D%87%E7%BA%A7ui-grid%20Ui%E6%9B%B4%E6%96%B0%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h4 id="ui-grid升级方案"><a href="#ui-grid升级方案" class="headerlink" title="ui-grid升级方案"></a>ui-grid升级方案</h4><ul><li>详情请移步这里<a href="https://juejin.im/post/5ea2e502f265da47d12936f2">ui-grid升级</a></li><li>核心code <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> @Directive(&#123;</span><br><span class="line">  selector: &#x27;hero-detail&#x27;</span><br><span class="line">&#125;)</span><br><span class="line">export class HeroDetailDirective extends UpgradeComponent &#123;</span><br><span class="line">  @Input() hero: Hero;</span><br><span class="line">  @Output() deleted: EventEmitter&lt;Hero&gt;;</span><br><span class="line"></span><br><span class="line">  constructor(elementRef: ElementRef, injector: Injector) &#123;</span><br><span class="line">    super(&#x27;heroDetail&#x27;, elementRef, injector);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><ul><li>ui-grid 通过gridOptions选项设置 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># js</span><br><span class="line">gridOption = &#123;</span><br><span class="line">   enableFiltering: true,</span><br><span class="line">   enableGroupHeaderSelection: true,</span><br><span class="line">   treeRowHeaderAlwaysVisible: false,</span><br><span class="line">   data:[...],</span><br><span class="line">   showColumnFooter: true,</span><br><span class="line">   columnDefs: [...]</span><br><span class="line">&#125;</span><br><span class="line">#html</span><br><span class="line"> &lt;div id=&quot;grid1&quot; ui-grid=&quot;$ctrl.gridOptions&quot; class=&quot;grid&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure></li><li>但是在通过angular upgradeComponent，针对ui-grid进行升级时，$digest不会被触发，界面ui不会更新</li></ul><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><ul><li>注入angularjs scope,手动调用$digest<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">@Directive(&#123;</span><br><span class="line">  selector: &#x27;hero-detail&#x27;,</span><br><span class="line">  providers:&#123;</span><br><span class="line">      provide: &#x27;$scope&#x27;, </span><br><span class="line">      useFactory: (injector:Injector) =&gt; &#123;</span><br><span class="line">       ....</span><br><span class="line">      &#125;, </span><br><span class="line">      deps: [&#x27;$injector&#x27;]&#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;)</span><br><span class="line">export class HeroDetailDirective extends UpgradeComponent &#123;</span><br><span class="line">  private _hero:Hero;</span><br><span class="line">  private subject = new Subject();</span><br><span class="line">  @Input() </span><br><span class="line">  get hero(): Hero&#123;</span><br><span class="line">    return _hero;</span><br><span class="line">  &#125;;</span><br><span class="line">  set hero(data):Hero&#123;</span><br><span class="line">    this._hero = data;</span><br><span class="line">    if(data)&#123;</span><br><span class="line">      this.subject.next(data);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  @Output() deleted: EventEmitter&lt;Hero&gt;;</span><br><span class="line"></span><br><span class="line">  constructor(elementRef: ElementRef, injector: Injector) &#123;</span><br><span class="line">    super(&#x27;heroDetail&#x27;, elementRef, injector);</span><br><span class="line">    const scope = injector.get(&#x27;$scope&#x27;);</span><br><span class="line">    this.subject.subscribe(res =&gt; &#123;</span><br><span class="line">      scope.$digest();</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="angularjs"><a href="#angularjs" class="headerlink" title="angularjs"></a>angularjs</h3><h4 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h4><ul><li>遍历dom，收集所有的指令</li><li>根据指令类型，附带的特定逻辑，操作dom，然后dom整合</li></ul><h4 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h4><p>  dom元素的拓展</p><ul><li>element names (E)  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;my-dir&gt;&lt;/my-dir&gt;</span><br></pre></td></tr></table></figure></li><li>attributes (A)  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;span my-dir=&quot;exp&quot;&gt;&lt;/span&gt;</span><br></pre></td></tr></table></figure></li><li>class names (C)  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;span class=&quot;my-dir: exp;&quot;&gt;&lt;/span&gt;</span><br></pre></td></tr></table></figure></li><li>comments (M)  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- directive: my-dir exp --&gt;</span><br></pre></td></tr></table></figure></li><li>通过restrict 属性，限制类型<ul><li>‘A’ - only matches attribute name</li><li>‘E’ - only matches element name</li><li>‘C’ - only matches class name</li><li>‘M’ - only matches comment</li></ul></li><li>自定义指令 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> angular.module(&#x27;app&#x27;).directive(&#x27;addOptions&#x27;, function($compile) &#123;</span><br><span class="line">  return &#123;</span><br><span class="line">    priority: 100, // ngModel has priority 1</span><br><span class="line">    terminal: true,</span><br><span class="line">    compile: function(templateElement, templateAttributes) &#123;</span><br><span class="line">      templateAttributes.$set(&#x27;ngModelOptions&#x27;, &#x27;&#123;debounce: 1000&#125;&#x27;);</span><br><span class="line"></span><br><span class="line">      // The third argument is the max priority. Only directives with priority &lt; 100 will be compiled,</span><br><span class="line">      // therefore we don&#x27;t need to remove the attribute</span><br><span class="line">      var compiled = $compile(templateElement, null, 100);</span><br><span class="line"></span><br><span class="line">      return function linkFn(scope) &#123;</span><br><span class="line">        compiled(scope) // Link compiled element to scope</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h4 id="指令处理过程"><a href="#指令处理过程" class="headerlink" title="指令处理过程"></a>指令处理过程</h4><ul><li>指令匹配；转化属性包含 :, -, or _为驼峰方式；dom元素，属性x-,data- 开头的，直接走读到后面的部分 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> &lt;div ng-controller=&quot;Controller&quot;&gt;</span><br><span class="line">  Hello &lt;input ng-model=&#x27;name&#x27;&gt; &lt;hr/&gt;</span><br><span class="line">  &lt;span ng-bind=&quot;name&quot;&gt;&lt;/span&gt; &lt;br/&gt;</span><br><span class="line">  &lt;span ng:bind=&quot;name&quot;&gt;&lt;/span&gt; &lt;br/&gt;</span><br><span class="line">  &lt;span ng_bind=&quot;name&quot;&gt;&lt;/span&gt; &lt;br/&gt;</span><br><span class="line">  &lt;span data-ng-bind=&quot;name&quot;&gt;&lt;/span&gt; &lt;br/&gt;</span><br><span class="line">  &lt;span x-ng-bind=&quot;name&quot;&gt;&lt;/span&gt; &lt;br/&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></li><li>根据优先级进行排序</li><li>编译指令,返回linkFn(scope)</li><li>调用linkFn，得到dom元素</li><li>dom元素渲染到界面ui<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">var $compile = ...; // injected into your code</span><br><span class="line">var scope = ...;</span><br><span class="line">var parent = ...; // DOM element where the compiled template can be appended</span><br><span class="line"></span><br><span class="line">var html = &#x27;&lt;div ng-bind=&quot;exp&quot;&gt;&lt;/div&gt;&#x27;;</span><br><span class="line"></span><br><span class="line">// Step 1: parse HTML into DOM element</span><br><span class="line">var template = angular.element(html);</span><br><span class="line"></span><br><span class="line">// Step 2: compile the template</span><br><span class="line">var linkFn = $compile(template);</span><br><span class="line"></span><br><span class="line">// Step 3: link the compiled template with the scope.</span><br><span class="line">var element = linkFn(scope);</span><br><span class="line"></span><br><span class="line">// Step 4: Append to DOM (optional)</span><br><span class="line">parent.appendChild(element);</span><br></pre></td></tr></table></figure></li></ul><h4 id="脏值检测"><a href="#脏值检测" class="headerlink" title="脏值检测"></a>脏值检测</h4><ul><li>apply <ul><li>调用digest </li><li>更新所有的scope</li><li>传递一个function，更新前调用</li></ul></li><li>digest <ul><li>遍历 watch list </li><li>只更新当前的scope和子scope</li><li>不需要传参数</li></ul></li><li>watch <ul><li>根据指令，产生watch</li></ul></li></ul><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://docs.angularjs.org/guide/directive">angularjs</a></li><li><a href="http://qingbob.com/angular-onpush-explain/">angular directive </a></li><li><a href="https://angular.io/api/upgrade/static/UpgradeModule">angular upgradeModule</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> angular </tag>
            
            <tag> directive </tag>
            
            <tag> UI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《vscode》- rollup 配置提示插件开发</title>
      <link href="/2020/04/25/dev_tool_skills/vscode/%E3%80%8Avscode%E3%80%8B-%20rollup%20%E9%85%8D%E7%BD%AE%E6%8F%90%E7%A4%BA%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
      <url>/2020/04/25/dev_tool_skills/vscode/%E3%80%8Avscode%E3%80%8B-%20rollup%20%E9%85%8D%E7%BD%AE%E6%8F%90%E7%A4%BA%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<h4 id="vscode-脚手架"><a href="#vscode-脚手架" class="headerlink" title="vscode 脚手架"></a>vscode 脚手架</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g yo generator-code</span><br></pre></td></tr></table></figure><h4 id=""><a href="#" class="headerlink" title=""></a></h4>]]></content>
      
      
      
        <tags>
            
            <tag> vscode </tag>
            
            <tag> rollup </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《自动部署》- 自动部署之静态站点托管</title>
      <link href="/2020/04/24/devops_skills/deploy/%E3%80%8A%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E3%80%8B-%20%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E4%B9%8B%E9%9D%99%E6%80%81%E7%AB%99%E7%82%B9%E6%89%98%E7%AE%A1/"/>
      <url>/2020/04/24/devops_skills/deploy/%E3%80%8A%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E3%80%8B-%20%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E4%B9%8B%E9%9D%99%E6%80%81%E7%AB%99%E7%82%B9%E6%89%98%E7%AE%A1/</url>
      
        <content type="html"><![CDATA[<h4 id="GitHub-Pages"><a href="#GitHub-Pages" class="headerlink" title="GitHub Pages"></a><a href="https://pages.github.com/">GitHub Pages</a></h4><ul><li>优点<ul><li>可配置自定义域名，且域名不用备案</li><li>可强制https访问，一键配置开启</li><li>Github Action 支持push 触发构建</li><li>每个账户，2000min&#x2F;month 构建资源，下月自动清零，重新计算</li></ul></li><li>缺点<ul><li>不能自定义ssl 证书，但是不影响使用</li></ul></li></ul><p> <img src="https://s1.ax1x.com/2020/04/26/J22bBd.png"></p><h4 id="GitLab-Pages"><a href="#GitLab-Pages" class="headerlink" title="GitLab Pages"></a><a href="https://docs.gitlab.com/ee/user/project/pages/index.html">GitLab Pages</a></h4><ul><li>相同的基本类GitHub pages</li><li>不同的是：</li><li>需上传证书，支持https</li></ul><h4 id="Netlify"><a href="#Netlify" class="headerlink" title="Netlify"></a><a href="https://www.netlify.com/">Netlify</a></h4><ul><li>可以使用 CLI 上传代码</li><li>支持自定义域名，域名不用备案。</li><li>支持一键免费开启https，不过需要先配置DNS,验证通过，才能开启。需要几小时的生效时间。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># dns 配置，域名服务商配置dns</span><br><span class="line">dns1.p08.nsone.net</span><br><span class="line">dns2.p08.nsone.net</span><br><span class="line">dns3.p08.nsone.net</span><br><span class="line">dns4.p08.nsone.net</span><br></pre></td></tr></table></figure></li><li>支持强制让用户通过 https 访问网站（开启后此功能后，http 的访问一律会 301 跳转到 https</li><li>通过授权github, push 触发自动构建；</li><li>不需要编写脚本，不过构建过程，相对耗时，免费300m&#x2F;month资源，相对紧张。</li><li>支持重定向（Redirects）和重写（Rewrites）功能</li><li>数据通过 HTTP2 协议传输</li><li>提供 webhooks 与 API</li></ul><p><img src="https://s1.ax1x.com/2020/04/26/J22Tje.md.png"></p><h4 id="now"><a href="#now" class="headerlink" title="now"></a><a href="https://vercel.com/home">now</a></h4><ul><li>可以使用 CLI 上传代码，或者链接一个 Git 仓库</li><li>不仅提供静态网站托管，同时也支持托管 Node.js 服务</li><li>支持自定义域名且自定义域名支持一键开启 https（证书来自 Let’s Encrype）</li><li>数据通过 HTTP2 协议传输</li><li>提供 API</li></ul><h4 id="腾讯静态站点托管"><a href="#腾讯静态站点托管" class="headerlink" title="腾讯静态站点托管"></a><a href="https://url.cn/5OKdSkS">腾讯静态站点托管</a></h4><ul><li>支持https</li><li>支持自定义域名</li><li>支持vuepress</li><li>支持Github Action push自动部署</li><li>可联合云开发的<a href="https://cloud.tencent.com/developer/special/cloudbase-webhosting">云函数</a>、数据库，调用node服务<br> <img src="https://s1.ax1x.com/2020/04/26/J2bMAU.md.png"></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 自动部署 </tag>
            
            <tag> 静态站点 </tag>
            
            <tag> 托管 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Linux》- shell脚本输入|输出|管道</title>
      <link href="/2020/04/24/devops_skills/linux/%E3%80%8ALinux%E3%80%8B-%20shell%E8%84%9A%E6%9C%AC%E8%BE%93%E5%85%A5%7C%E8%BE%93%E5%87%BA%7C%E7%AE%A1%E9%81%93/"/>
      <url>/2020/04/24/devops_skills/linux/%E3%80%8ALinux%E3%80%8B-%20shell%E8%84%9A%E6%9C%AC%E8%BE%93%E5%85%A5%7C%E8%BE%93%E5%87%BA%7C%E7%AE%A1%E9%81%93/</url>
      
        <content type="html"><![CDATA[<h3 id="shell-编写"><a href="#shell-编写" class="headerlink" title="shell 编写"></a>shell 编写</h3><h4 id="shell-开头"><a href="#shell-开头" class="headerlink" title="shell 开头"></a>shell 开头</h4><ul><li>以sh后缀</li><li>开头#注释，表明采用何种解释器 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash </span></span><br></pre></td></tr></table></figure></li><li>添加作者等说明 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">#/bin/bash</span></span><br><span class="line">&lt;&lt;<span class="string">ABC</span></span><br><span class="line"><span class="string">    author:cheonghu</span></span><br><span class="line"><span class="string">    date:2020-04-24</span></span><br><span class="line"><span class="string">    desc:shell demo</span></span><br><span class="line"><span class="string">ABC</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="文件权限"><a href="#文件权限" class="headerlink" title="文件权限"></a>文件权限</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ ll </span><br><span class="line">total 4</span><br><span class="line">-rw-r--r-- 1 root root 88 Apr 24 22:15 demo.sh</span><br></pre></td></tr></table></figure><ul><li>其中可以看到，demo.sh没有可执行权限;但是 bash demo.sh可以运行 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ ./demo.sh</span><br><span class="line">-bash: ./demo.sh: Permission denied</span><br><span class="line"></span><br><span class="line">$ bash ./demo.sh</span><br><span class="line">shell demo</span><br></pre></td></tr></table></figure></li><li>也可以通过chmod 修改权限 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ chmod 755 ./demo.sh </span><br><span class="line"># or</span><br><span class="line">$ chmod u+x ./demo.sh  # 给当前拥有者添加可执行权限</span><br><span class="line">$ ll </span><br><span class="line">-rwxr--r-- 1 root root 88 Apr 24 22:15 demo.sh</span><br></pre></td></tr></table></figure></li></ul><h4 id="shell-输出-echo"><a href="#shell-输出-echo" class="headerlink" title="shell 输出 - echo"></a>shell 输出 - echo</h4><ul><li>输出特殊字符 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ echo -e &quot;hello\tworld&quot;</span><br><span class="line">$ echo -e &quot;hello\nworld&quot;</span><br><span class="line">$ echo -e &quot;hello\fworld&quot;</span><br></pre></td></tr></table></figure></li><li>输出待颜色字符串 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># \e[35m开启，\e[0m关闭 </span><br><span class="line">$ echo -e &quot;\e[35mok\e[0m&quot;</span><br><span class="line">$ echo -e &quot;\e[32mOK\e[0m&quot;</span><br></pre></td></tr></table></figure></li></ul><h4 id="shell-输出-printf"><a href="#shell-输出-printf" class="headerlink" title="shell 输出 - printf"></a>shell 输出 - printf</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ printf &quot;%5d&quot; 12 # 十进制右对齐输出，但是默认不换行</span><br><span class="line">$ printf &quot;%-5d&quot; 12 # 十进制左对齐输出</span><br></pre></td></tr></table></figure><h4 id="shell-输入-read"><a href="#shell-输入-read" class="headerlink" title="shell 输入 - read"></a>shell 输入 - read</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ read name  #把输入的值，赋值给name</span><br><span class="line">$ echo $name </span><br><span class="line"></span><br><span class="line">$ read name age address # 读入3组</span><br><span class="line">$ echo $name $age $address</span><br><span class="line"></span><br><span class="line">$ read -p &quot;请输入用户名&quot; user</span><br><span class="line">$ echo $user</span><br><span class="line"></span><br><span class="line">$ read -t -10 -p &quot;请输入用户名&quot; user # 3s后自动退出等待输入状态</span><br><span class="line">$ echo $user</span><br><span class="line"></span><br><span class="line">$ read -s -p &quot;请输入密码&quot; pass # 不显示方式输入密码</span><br></pre></td></tr></table></figure><h4 id="shell-管道"><a href="#shell-管道" class="headerlink" title="shell - 管道 |"></a>shell - 管道 |</h4><ul><li>who查看最近登录用户</li><li>wc 统计输入数据的行数-l,单词数 -w, 字节-c,字符-m  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ who | wc -l</span><br></pre></td></tr></table></figure></li><li>ss 可查看系统服务监听的端口，grep 具备过滤功能 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ss -nutlp | grep sshd</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> shell </tag>
            
            <tag> 脚本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《angular8》- angular8 ui-grid升级方案</title>
      <link href="/2020/04/24/front_skills/angular/%E3%80%8Aangular8%E3%80%8B-%20%20angular%20ui-grid%E5%8D%87%E7%BA%A7%E6%96%B9%E6%A1%88/"/>
      <url>/2020/04/24/front_skills/angular/%E3%80%8Aangular8%E3%80%8B-%20%20angular%20ui-grid%E5%8D%87%E7%BA%A7%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<h3 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h3><ul><li>直接使用新的libary，改用ag-grid</li><li><a href="https://juejin.im/post/5def66ae6fb9a0162b7f2f07">ag-grid具体参考</a></li></ul><h3 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h3><h4 id="使用背景"><a href="#使用背景" class="headerlink" title="使用背景"></a>使用背景</h4><ul><li>技术需要升级angularjs → angular8 </li><li>没有可用的Ui组件 </li><li>或者有可用的Ui组件，但是由于某些限制，譬如公司级别技术要求，不给使用</li></ul><h4 id="只能使用angular-directive"><a href="#只能使用angular-directive" class="headerlink" title="只能使用angular directive"></a>只能使用angular directive</h4><ul><li><p>定义ui-grid所在angularjs组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">export const heroDetail = &#123;</span><br><span class="line">  bindings: &#123;</span><br><span class="line">    hero: &#x27;&lt;&#x27;,</span><br><span class="line">    deleted: &#x27;&amp;&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  template: `</span><br><span class="line">    &lt;h2&gt;&#123;&#123;$ctrl.hero.name&#125;&#125; details!&lt;/h2&gt;</span><br><span class="line">    &lt;div&gt;&lt;label&gt;id: &lt;/label&gt;&#123;&#123;$ctrl.hero.id&#125;&#125;&lt;/div&gt;</span><br><span class="line">    &lt;button ng-click=&quot;$ctrl.onDelete()&quot;&gt;Delete&lt;/button&gt;</span><br><span class="line">  `,</span><br><span class="line">  controller: function() &#123;</span><br><span class="line">    this.onDelete = () =&gt; &#123;</span><br><span class="line">      this.deleted(this.hero);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>定义angular8 directive</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Directive, ElementRef, Injector, Input, Output, EventEmitter &#125; from &#x27;@angular/core&#x27;;</span><br><span class="line">import &#123; UpgradeComponent &#125; from &#x27;@angular/upgrade/static&#x27;;</span><br><span class="line">import &#123; Hero &#125; from &#x27;../hero&#x27;;</span><br><span class="line"></span><br><span class="line">@Directive(&#123;</span><br><span class="line">  selector: &#x27;hero-detail&#x27;</span><br><span class="line">&#125;)</span><br><span class="line">export class HeroDetailDirective extends UpgradeComponent &#123;</span><br><span class="line">  @Input() hero: Hero;</span><br><span class="line">  @Output() deleted: EventEmitter&lt;Hero&gt;;</span><br><span class="line"></span><br><span class="line">  constructor(elementRef: ElementRef, injector: Injector) &#123;</span><br><span class="line">    super(&#x27;heroDetail&#x27;, elementRef, injector);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>需要扩展UpgradeComponent组件</li><li>需要调用super方法，传递参数给angularjs组件</li><li>上面例子，heroDetail，是angularjs中注册的组件的名称。</li></ul></li><li><p>ngModule中声明</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@NgModule(&#123;</span><br><span class="line">  imports: [</span><br><span class="line">    BrowserModule,</span><br><span class="line">    UpgradeModule</span><br><span class="line">  ],</span><br><span class="line">  declarations: [</span><br><span class="line">    HeroDetailDirective,</span><br><span class="line">/* . . . */</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line">export class AppModule &#123;</span><br><span class="line">  constructor(private upgrade: UpgradeModule) &#123; &#125;</span><br><span class="line">  ngDoBootstrap() &#123;</span><br><span class="line">    this.upgrade.bootstrap(document.body, [&#x27;heroApp&#x27;], &#123; strictDi: true &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>定义外层容器，使用directive</p></li><li><p>ContainerComponent 需要在appModule declaration中定义</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Component &#125; from &#x27;@angular/core&#x27;;</span><br><span class="line">import &#123; Hero &#125; from &#x27;../hero&#x27;;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">  selector: &#x27;my-container&#x27;,</span><br><span class="line">  template: `</span><br><span class="line">    &lt;h1&gt;Tour of Heroes&lt;/h1&gt;</span><br><span class="line">    &lt;hero-detail [hero]=&quot;hero&quot;</span><br><span class="line">                 (deleted)=&quot;heroDeleted($event)&quot;&gt;</span><br><span class="line">    &lt;/hero-detail&gt;</span><br><span class="line">  `</span><br><span class="line">&#125;)</span><br><span class="line">export class ContainerComponent &#123;</span><br><span class="line">  hero = new Hero(1, &#x27;Windstorm&#x27;);</span><br><span class="line">  heroDeleted(hero: Hero) &#123;</span><br><span class="line">    hero.name = &#x27;Ex-&#x27; + hero.name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="更多推荐"><a href="#更多推荐" class="headerlink" title="更多推荐"></a>更多推荐</h4><ul><li><a href="https://juejin.im/post/5e15a0c46fb9a047f83eda08">angular7&#x2F;8 read local json的2种方法</a></li><li><a href="https://juejin.im/post/5ddcd2b56fb9a07ad9676ca2">入门指南-Angular8状态管理框架NgRx8</a></li></ul><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://angular.io/guide/upgrade#using-angular-components-from-angularjs-code">angularjs ui-grid升级</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> angular </tag>
            
            <tag> ui-grid </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Linux》- 用shell向自动部署前进一步</title>
      <link href="/2020/04/21/devops_skills/linux/%E3%80%8ALinux%E3%80%8B-%20%E7%94%A8shell%E5%90%91%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E5%89%8D%E8%BF%9B%E4%B8%80%E6%AD%A5/"/>
      <url>/2020/04/21/devops_skills/linux/%E3%80%8ALinux%E3%80%8B-%20%E7%94%A8shell%E5%90%91%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E5%89%8D%E8%BF%9B%E4%B8%80%E6%AD%A5/</url>
      
        <content type="html"><![CDATA[<h4 id="上传tar包"><a href="#上传tar包" class="headerlink" title="上传tar包"></a>上传tar包</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ scp xxx.tar.gz &lt;user&gt;@xx.xx.xx.xx:/home/data</span><br></pre></td></tr></table></figure><h4 id="移动包路径"><a href="#移动包路径" class="headerlink" title="移动包路径"></a>移动包路径</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;1.mv tar.gz to data/www&quot;</span><br><span class="line">mv ./$tarDir /data/www</span><br><span class="line">echo -e &quot;mv tar.gz to data/www done \n&quot;</span><br></pre></td></tr></table></figure><h4 id="创建新文件夹"><a href="#创建新文件夹" class="headerlink" title="创建新文件夹"></a>创建新文件夹</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd /data/www</span><br><span class="line">pwd</span><br><span class="line">echo -e &quot;2.cd at dir data/www\n&quot;</span><br><span class="line"></span><br><span class="line">mkdir -p $newDir</span><br></pre></td></tr></table></figure><h4 id="移动tar包并解压"><a href="#移动tar包并解压" class="headerlink" title="移动tar包并解压"></a>移动tar包并解压</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;3.mv $&#123;tarDir&#125; to $&#123;newDir&#125;&quot;</span><br><span class="line">mv ./$tarDir ./$newDir</span><br><span class="line">echo -e &quot;mv into $&#123;newDir&#125; done\n&quot;</span><br><span class="line"></span><br><span class="line">cd ./$newDir</span><br><span class="line">echo -e &quot;4. cd to $&#123;newDir&#125;\n&quot;</span><br><span class="line"></span><br><span class="line">echo &quot;5. will tar -xf $&#123;tarDir&#125;&quot;</span><br><span class="line">tar -xf ./$tarDir</span><br><span class="line">echo -e &quot;tar $&#123;tarDir&#125; done \n&quot;</span><br><span class="line"></span><br><span class="line">mv ./$tarDir ../</span><br></pre></td></tr></table></figure><h4 id="copy-healthcheck"><a href="#copy-healthcheck" class="headerlink" title="copy healthcheck"></a>copy healthcheck</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;6.will copy healthcheck file&quot;</span><br><span class="line">cp ../$sourceDir/healthcheck.html ./</span><br><span class="line">echo -e &quot;will copy healthcheck file done...\n&quot;</span><br><span class="line">cd ../</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="修改文件夹权限"><a href="#修改文件夹权限" class="headerlink" title="修改文件夹权限"></a>修改文件夹权限</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;7.will chmod $&#123;newDir&#125;&quot;</span><br><span class="line">chmod 755 -R ./$newDir</span><br><span class="line">echo -e &quot;chmod 755 done\n&quot;</span><br></pre></td></tr></table></figure><h4 id="文件夹备份、替换"><a href="#文件夹备份、替换" class="headerlink" title="文件夹备份、替换"></a>文件夹备份、替换</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;8.mv $&#123;sourceDir&#125; to $&#123;bakDir&#125;&quot;</span><br><span class="line">mv $sourceDir $bakDir</span><br><span class="line">echo -e &quot;mv $&#123;sourceDir&#125; to $&#123;bakDir&#125; done \n&quot;</span><br><span class="line"></span><br><span class="line">echo &quot;9.mv $&#123;newDir&#125; to $&#123;sourceDir&#125;&quot;</span><br><span class="line">mv $newDir $sourceDir</span><br><span class="line">echo -e  &quot;mv $&#123;newDir&#125; to $&#123;sourceDir&#125; done \n&quot;</span><br></pre></td></tr></table></figure><h4 id="运行healthcheck"><a href="#运行healthcheck" class="headerlink" title="运行healthcheck"></a>运行healthcheck</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">url=&quot;http://$&#123;healthcheckIp&#125;/healthcheck.html&quot;</span><br><span class="line">echo -e $url</span><br><span class="line">echo -e &quot;\n&quot;</span><br><span class="line"></span><br><span class="line">result=$(curl -X GET $url)</span><br><span class="line">echo $result</span><br><span class="line"></span><br><span class="line">if [ $result  == $okStr ] ; then</span><br><span class="line">echo -e &quot;10.deploy $&#123;tarDir&#125; successfully at $&#123;date&#125;\n&quot;</span><br><span class="line">else</span><br><span class="line">echo -e &quot;deploy $&#123;tarDir&#125; fail at $&#123;date&#125;\n&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h4 id="最终部署脚本"><a href="#最终部署脚本" class="headerlink" title="最终部署脚本"></a>最终部署脚本</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">okStr=&quot;OKOKOK&quot;</span><br><span class="line">tarDir=$1</span><br><span class="line">echo $tarDir</span><br><span class="line">echo -e &quot;\n&quot;</span><br><span class="line"></span><br><span class="line">sourceDir=$&#123;2:-&quot;source&quot;&#125;</span><br><span class="line">echo $sourceDir</span><br><span class="line">echo -e &quot;\n&quot;</span><br><span class="line"></span><br><span class="line">HOST_IP=$(ip addr | grep &#x27;state UP&#x27; -A2 | tail -n1 | awk &#x27;&#123;print $2&#125;&#x27; | cut -f1 -d &#x27;/&#x27;)</span><br><span class="line"># if 3st argument pass to script null ,use default </span><br><span class="line">healthcheckIp=$&#123;3:-$HOST_IP&#125;</span><br><span class="line">echo $healthcheckIp</span><br><span class="line">echo -e &quot;\n&quot;</span><br><span class="line"></span><br><span class="line">date=$(date +%Y-%m-%d)</span><br><span class="line">newDir=$(date +%Y-%m-%d-%s)</span><br><span class="line">bakDir=&quot;source-build-bak-&quot;$(date +%Y-%m-%d-%s)</span><br><span class="line"></span><br><span class="line"># if the param null ; -n is not empty </span><br><span class="line">if [ -z &quot;$&#123;tarDir&#125;&quot; ] ; then</span><br><span class="line">echo &quot;tar name is empty will exit deploy &quot;</span><br><span class="line">exit 1</span><br><span class="line">else</span><br><span class="line">echo &quot;will deploy $&#123;tarDir&#125;&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ -z &quot;$&#123;sourceDir&#125;&quot; ] ; then</span><br><span class="line">echo &quot;sourceDir name is empty will exit deploy &quot;</span><br><span class="line">exit 1</span><br><span class="line">else</span><br><span class="line">echo &quot;will deploy to $&#123;sourceDir&#125;&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">echo &quot;1.mv tar.gz to data/www&quot;</span><br><span class="line">mv ./$tarDir /data/www</span><br><span class="line">echo -e &quot;mv tar.gz to data/www done \n&quot;</span><br><span class="line"></span><br><span class="line">cd /data/www</span><br><span class="line">pwd</span><br><span class="line">echo -e &quot;2.cd at dir data/www\n&quot;</span><br><span class="line"></span><br><span class="line">mkdir -p $newDir</span><br><span class="line"></span><br><span class="line">echo &quot;3.mv $&#123;tarDir&#125; to $&#123;newDir&#125;&quot;</span><br><span class="line">mv ./$tarDir ./$newDir</span><br><span class="line">echo -e &quot;mv into $&#123;newDir&#125; done\n&quot;</span><br><span class="line"></span><br><span class="line">cd ./$newDir</span><br><span class="line">echo -e &quot;4. cd to $&#123;newDir&#125;\n&quot;</span><br><span class="line"></span><br><span class="line">echo &quot;5. will tar -xf $&#123;tarDir&#125;&quot;</span><br><span class="line">tar -xf ./$tarDir</span><br><span class="line">echo -e &quot;tar $&#123;tarDir&#125; done \n&quot;</span><br><span class="line"></span><br><span class="line">mv ./$tarDir ../</span><br><span class="line"></span><br><span class="line">echo &quot;6.will copy healthcheck file&quot;</span><br><span class="line">cp ../$sourceDir/healthcheck.html ./</span><br><span class="line">echo -e &quot;will copy healthcheck file done...\n&quot;</span><br><span class="line">cd ../</span><br><span class="line"></span><br><span class="line">echo &quot;7.will chmod $&#123;newDir&#125;&quot;</span><br><span class="line">chmod 755 -R ./$newDir</span><br><span class="line">echo -e &quot;chmod 755 done\n&quot;</span><br><span class="line"></span><br><span class="line">echo &quot;8.mv $&#123;sourceDir&#125; to $&#123;bakDir&#125;&quot;</span><br><span class="line">mv $sourceDir $bakDir</span><br><span class="line">echo -e &quot;mv $&#123;sourceDir&#125; to $&#123;bakDir&#125; done \n&quot;</span><br><span class="line"></span><br><span class="line">echo &quot;9.mv $&#123;newDir&#125; to $&#123;sourceDir&#125;&quot;</span><br><span class="line">mv $newDir $sourceDir</span><br><span class="line">echo -e  &quot;mv $&#123;newDir&#125; to $&#123;sourceDir&#125; done \n&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">url=&quot;http://$&#123;healthcheckIp&#125;/healthcheck.html&quot;</span><br><span class="line">echo -e $url</span><br><span class="line">echo -e &quot;\n&quot;</span><br><span class="line"></span><br><span class="line">result=$(curl -X GET $url)</span><br><span class="line">echo $result</span><br><span class="line"></span><br><span class="line">if [ $result  == $okStr ] ; then</span><br><span class="line">echo -e &quot;10.deploy $&#123;tarDir&#125; successfully at $&#123;date&#125;\n&quot;</span><br><span class="line">else</span><br><span class="line">echo -e &quot;deploy $&#123;tarDir&#125; fail at $&#123;date&#125;\n&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> shell </tag>
            
            <tag> 脚本 </tag>
            
            <tag> tar </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《canvas》- canvas doc 学习笔记之路径和状态</title>
      <link href="/2020/04/20/front_skills/canvas/%E3%80%8Acanvas%E3%80%8B-%20canvas%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E8%B7%AF%E5%BE%84%E5%92%8C%E7%8A%B6%E6%80%81/"/>
      <url>/2020/04/20/front_skills/canvas/%E3%80%8Acanvas%E3%80%8B-%20canvas%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E8%B7%AF%E5%BE%84%E5%92%8C%E7%8A%B6%E6%80%81/</url>
      
        <content type="html"><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><h4 id="canvas-vs-svg"><a href="#canvas-vs-svg" class="headerlink" title="canvas vs svg"></a>canvas vs svg</h4><ul><li>canvas 适用于动态创建的位图，缩放失真。</li><li>svg 适用于静态描述的矢量图，缩放不失真。</li><li>canvas 基于”状态”绘制图形，譬如，strokeStyle、fillStyle、lineWidth等</li><li>svg基于dom，可以直接在html中展示</li></ul><h4 id="绘图四步骤"><a href="#绘图四步骤" class="headerlink" title="绘图四步骤"></a>绘图四步骤</h4><ul><li>定义canvas,设置width,height属性，设置变形等特效</li><li>获取canvas 2D context，绘制图形</li><li>添加动画</li><li>添加交互</li></ul><h4 id="canvas-w3c坐标系"><a href="#canvas-w3c坐标系" class="headerlink" title="canvas w3c坐标系"></a>canvas w3c坐标系</h4> <img src="https://s1.ax1x.com/2020/03/26/G9ZGr9.png" width="300" height="200"><h4 id="canvas-width-height设置"><a href="#canvas-width-height设置" class="headerlink" title="canvas width\height设置"></a>canvas width\height设置</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const dom = document.getElementById(&#x27;canvas&#x27;);</span><br><span class="line">dom.width = window.innerWidth;</span><br><span class="line">dom.height = window.innerHeight;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;canvas id=&quot;canvas&quot; width=&quot;600&quot; height=&quot;700&quot;&gt;&lt;/canvas&gt;</span><br></pre></td></tr></table></figure><h3 id="路径状态"><a href="#路径状态" class="headerlink" title="路径状态"></a>路径状态</h3><h4 id="路径beginPath"><a href="#路径beginPath" class="headerlink" title="路径beginPath"></a>路径beginPath</h4><ul><li><p>beginPath 开启新的路径</p></li><li><p>没有beginPath，后面出现的相同的配置值，重复叠加设置，但不会替换<br><img src="https://s1.ax1x.com/2020/04/20/J1WSr6.png" width="300" height="100"></img></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">ctx.moveTo(100,100);</span><br><span class="line">ctx.lineTo(250,100);</span><br><span class="line">ctx.strokeStyle= &#x27;rgba(255,0,0,.3)&#x27;;</span><br><span class="line">ctx.stroke();</span><br><span class="line"></span><br><span class="line">ctx.moveTo(200,150);</span><br><span class="line">ctx.lineTo(350,150);</span><br><span class="line">ctx.strokeStyle= &#x27;rgba(255,0,0,.3)&#x27;;</span><br><span class="line">ctx.stroke();</span><br><span class="line"></span><br><span class="line">ctx.moveTo(250,200);</span><br><span class="line">ctx.lineTo(350,200);</span><br><span class="line">ctx.strokeStyle= &#x27;rgba(255,0,0,.4)&#x27;;</span><br><span class="line">ctx.stroke();</span><br></pre></td></tr></table></figure></li><li><p>beginPath、closePath、isPointPath<br><img src="https://s1.ax1x.com/2020/04/20/J14gLq.png" width="300" height="100"></img></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">ctx.moveTo(100,100);</span><br><span class="line">ctx.lineTo(250,100);</span><br><span class="line">ctx.strokeStyle= &#x27;red&#x27;;</span><br><span class="line">ctx.stroke();</span><br><span class="line"></span><br><span class="line">ctx.beginPath();</span><br><span class="line">ctx.moveTo(200,150);</span><br><span class="line">ctx.lineTo(350,150);</span><br><span class="line">ctx.strokeStyle= &#x27;green&#x27;;</span><br><span class="line">ctx.stroke();</span><br><span class="line"></span><br><span class="line">ctx.beginPath();</span><br><span class="line">ctx.moveTo(250,200);</span><br><span class="line">ctx.lineTo(350,200);</span><br><span class="line">ctx.strokeStyle= &#x27;blue&#x27;;</span><br><span class="line">ctx.stroke();</span><br></pre></td></tr></table></figure></li><li><p>closePath()主要用于实现“封闭图形”，例如三角形、多边形、圆形、扇形等</p></li><li><p>clip裁剪 - 改变基础图形，具备裁剪能力<br>Canvas两个方法：strokeRect()、fillRect()绘制的图形，clip()不支持<br><img src="https://s1.ax1x.com/2020/04/20/J1qWPx.png" width="100" height="100"></img></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ctx.beginPath();</span><br><span class="line">ctx.strokeStyle= &#x27;red&#x27;;</span><br><span class="line">ctx.arc(50,50,40,0,360*Math.PI/180,false);</span><br><span class="line">ctx.stroke();</span><br><span class="line">ctx.clip();</span><br><span class="line"></span><br><span class="line">ctx.beginPath();</span><br><span class="line">ctx.fillStyle = &#x27;#66ccff&#x27;;</span><br><span class="line">ctx.rect(50,50,200,100);</span><br><span class="line">ctx.fill();</span><br></pre></td></tr></table></figure></li></ul><h4 id="状态save和restore"><a href="#状态save和restore" class="headerlink" title="状态save和restore"></a>状态save和restore</h4><ul><li>图形或图片裁切。</li><li>图形或图片变形。</li><li>以下属性改变的时候：fillStyle、font、globalAlpha、globalCompositeOperation、lineCap、lineJoin、lineWidth、miterLimit、shadowBlur、shadowColor、shadowOffsetX、shadowOffsetY、strokeStyle、textAlign、textBaseline。<ul><li>填充效果：fillStyle。</li><li>描边效果：strokeStyle。</li><li>线条效果：lineCap、lineJoin、lineWidth、miterLimit。</li><li>文本效果：font、textAlign、textBaseline。</li><li>阴影效果：shadowBlur、shadowColor、shadowOffsetX、shadowOffsetY。</li><li>全局属性：globalAlpha、globalCompositeOperation。</li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> canvas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《canvas》- canvas doc 学习笔记</title>
      <link href="/2020/04/19/front_skills/canvas/%E3%80%8Acanvas%E3%80%8B-%20canvas%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2020/04/19/front_skills/canvas/%E3%80%8Acanvas%E3%80%8B-%20canvas%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><h4 id="canvas-vs-svg"><a href="#canvas-vs-svg" class="headerlink" title="canvas vs svg"></a>canvas vs svg</h4><ul><li>canvas 适用于动态创建的位图，缩放失真。</li><li>svg 适用于静态描述的矢量图，缩放不失真。</li><li>canvas 基于”状态”绘制图形，譬如，strokeStyle、fillStyle、lineWidth等</li><li>svg基于dom，可以直接在html中展示</li></ul><h4 id="绘图四步骤"><a href="#绘图四步骤" class="headerlink" title="绘图四步骤"></a>绘图四步骤</h4><ul><li>定义canvas,设置width,height属性，设置变形等特效</li><li>获取canvas 2D context，绘制图形</li><li>添加动画</li><li>添加交互</li></ul><h4 id="canvas-w3c坐标系"><a href="#canvas-w3c坐标系" class="headerlink" title="canvas w3c坐标系"></a>canvas w3c坐标系</h4> <img src="https://s1.ax1x.com/2020/03/26/G9ZGr9.png" width="400" height="300"><h4 id="canvas-width-height设置"><a href="#canvas-width-height设置" class="headerlink" title="canvas width\height设置"></a>canvas width\height设置</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const dom = document.getElementById(&#x27;canvas&#x27;);</span><br><span class="line">dom.width = window.innerWidth;</span><br><span class="line">dom.height = window.innerHeight;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;canvas id=&quot;canvas&quot; width=&quot;600&quot; height=&quot;700&quot;&gt;&lt;/canvas&gt;</span><br></pre></td></tr></table></figure><h3 id="canvas-绘线"><a href="#canvas-绘线" class="headerlink" title="canvas 绘线"></a>canvas 绘线</h3><ul><li>moveTo</li><li>lineTo</li><li>arc – 曲线</li><li>rect - 矩形 + store| fill </li><li>strokeRect</li><li>fillRect</li></ul><h3 id="canvas-绘图片"><a href="#canvas-绘图片" class="headerlink" title="canvas 绘图片"></a>canvas 绘图片</h3><ul><li>createImageData</li><li>getImageData</li><li>putImageData</li></ul><h3 id="canvas-绘文字"><a href="#canvas-绘文字" class="headerlink" title="canvas 绘文字"></a>canvas 绘文字</h3><ul><li>fillText</li><li>strokeText</li><li>measureText</li></ul><h3 id="canvas-路径、状态"><a href="#canvas-路径、状态" class="headerlink" title="canvas 路径、状态"></a>canvas 路径、状态</h3><ul><li>beginPath</li><li>closePath</li></ul><h3 id="canvas-位移、阴影等特效"><a href="#canvas-位移、阴影等特效" class="headerlink" title="canvas 位移、阴影等特效"></a>canvas 位移、阴影等特效</h3><ul><li>createLinearGradient – 创建线性渐变对象<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">createLinearGradient(x1,y1,x2,y2) </span><br><span class="line"> -- x1,x2 相同，纵向渐变</span><br><span class="line"> -- y1,y2 相同，横向渐变</span><br></pre></td></tr></table></figure></li><li>addColorStop – 给线性渐变对象依次颜色，形成渐变<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gnt.addColorStop(position,color) -- position 0 ~ 1  相当于百分比</span><br></pre></td></tr></table></figure></li><li>径向渐变<br> createRadialGradient(x1,y1,r1,x2,y2,r2); – 从(x1,y1),半径r1 开始到点(x2,y2),半径r2 颜色渐变</li><li>阴影– 文字阴影和图形阴影</li><li>shadowOffsetX – 水平偏移，正向右，负数向左偏移；</li><li>shadowOffsetY - 正向下偏移；负数，向上偏移；同时为0，实现两端都有阴影；</li><li>shadowColor  - 阴影颜色，默认黑色</li><li>shadowBlur – 模糊值</li><li>需要在fillText,fillRect等绘制之前，设置</li></ul><h3 id="canvas-图片像素美化"><a href="#canvas-图片像素美化" class="headerlink" title="canvas 图片像素美化"></a>canvas 图片像素美化</h3><ul><li>getImageData</li><li>putImageData</li><li>createImageData</li></ul><h3 id="canvas-事件、边界检测"><a href="#canvas-事件、边界检测" class="headerlink" title="canvas 事件、边界检测"></a>canvas 事件、边界检测</h3><ul><li>鼠标事件</li><li>mousedown</li><li>mouseup</li><li>mousemove</li><li>键盘事件</li><li>keydown</li><li>keyup </li><li>循环事件</li><li>setInterval - 一定性能问题</li><li>requestAnimationFrame ，不用设置间隔，自动设置</li></ul><h3 id="canvas-动画、碰撞检测"><a href="#canvas-动画、碰撞检测" class="headerlink" title="canvas 动画、碰撞检测"></a>canvas 动画、碰撞检测</h3><ul><li>（1）三角函数<ul><li>sin(Q)</li><li>cos()</li><li>tan()</li><li>atan2(y,x) 根据值准确求角度; 注意顺序，y,x；而且都是带符号的；</li></ul></li><li>（2）匀速运动 </li><li>（3）加速运动</li><li>（4）重力</li><li>（5）摩擦力</li></ul><h3 id="canvas-交互、高级动画、粒子效果"><a href="#canvas-交互、高级动画、粒子效果" class="headerlink" title="canvas 交互、高级动画、粒子效果"></a>canvas 交互、高级动画、粒子效果</h3><ul><li>碰撞检测</li><li>碰撞边界</li><li>碰撞环绕</li></ul><h3 id="canvas游戏开发、性能优化s"><a href="#canvas游戏开发、性能优化s" class="headerlink" title="canvas游戏开发、性能优化ß"></a>canvas游戏开发、性能优化ß</h3>]]></content>
      
      
      
        <tags>
            
            <tag> canvas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《canvas》- canvas doc 学习笔记之绘线</title>
      <link href="/2020/04/19/front_skills/canvas/%E3%80%8Acanvas%E3%80%8B-%20canvas%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E7%BB%98%E7%BA%BF/"/>
      <url>/2020/04/19/front_skills/canvas/%E3%80%8Acanvas%E3%80%8B-%20canvas%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E7%BB%98%E7%BA%BF/</url>
      
        <content type="html"><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><h4 id="canvas-vs-svg"><a href="#canvas-vs-svg" class="headerlink" title="canvas vs svg"></a>canvas vs svg</h4><ul><li>canvas 适用于动态创建的位图，缩放失真。</li><li>svg 适用于静态描述的矢量图，缩放不失真。</li><li>canvas 基于”状态”绘制图形，譬如，strokeStyle、fillStyle、lineWidth等</li><li>svg基于dom，可以直接在html中展示</li></ul><h4 id="绘图四步骤"><a href="#绘图四步骤" class="headerlink" title="绘图四步骤"></a>绘图四步骤</h4><ul><li>定义canvas,设置width,height属性，设置变形等特效</li><li>获取canvas 2D context，绘制图形</li><li>添加动画</li><li>添加交互</li></ul><h4 id="canvas-w3c坐标系"><a href="#canvas-w3c坐标系" class="headerlink" title="canvas w3c坐标系"></a>canvas w3c坐标系</h4> <img src="https://s1.ax1x.com/2020/03/26/G9ZGr9.png" width="300" height="200"><h4 id="canvas-width-height设置"><a href="#canvas-width-height设置" class="headerlink" title="canvas width\height设置"></a>canvas width\height设置</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const dom = document.getElementById(&#x27;canvas&#x27;);</span><br><span class="line">dom.width = window.innerWidth;</span><br><span class="line">dom.height = window.innerHeight;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;canvas id=&quot;canvas&quot; width=&quot;600&quot; height=&quot;700&quot;&gt;&lt;/canvas&gt;</span><br></pre></td></tr></table></figure><h3 id="canvas-绘直线"><a href="#canvas-绘直线" class="headerlink" title="canvas 绘直线"></a>canvas 绘直线</h3><h4 id="线段-只能用stroke"><a href="#线段-只能用stroke" class="headerlink" title="线段,只能用stroke"></a>线段,只能用stroke</h4><ul><li>单条描边  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ctx.moveTo(30,40);</span><br><span class="line">ctx.lineTo(130,140);</span><br><span class="line"># 线条宽度，默认1px</span><br><span class="line">ctx.lineWidth = 10;</span><br><span class="line">ctx.lineHeight = &#x27;10&#x27;</span><br><span class="line">#绘制边</span><br><span class="line">ctx.stroke();</span><br></pre></td></tr></table></figure></li><li>多条  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ctx.moveTo(0,0);</span><br><span class="line">ctx.lineCap = &quot;round&quot;</span><br><span class="line">ctx.lineTo(300,100);</span><br><span class="line">ctx.lineTo(400,50);</span><br><span class="line">ctx.lineWidth = 12;</span><br><span class="line">ctx.lineJoin = &#x27;round&#x27; //mitter 默认，round圆角，bevel 斜角</span><br><span class="line">ctx.stroke();</span><br></pre></td></tr></table></figure></li></ul><h4 id="矩形"><a href="#矩形" class="headerlink" title="矩形"></a>矩形</h4><ul><li>利用绘制多条边特点   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ctx.moveTo(100,100);</span><br><span class="line">ctx.lineTo(300,100);</span><br><span class="line">ctx.lineTo(300,200);</span><br><span class="line">ctx.lineTo(100,200);</span><br><span class="line">ctx.lineTo(100,100);</span><br><span class="line">ctx.strokeStyle= &#x27;blue&#x27;;</span><br><span class="line">ctx.setLineDash([10,30]); //10px实线,30px 虚线</span><br><span class="line">ctx.stroke();</span><br></pre></td></tr></table></figure></li><li>绘制描边矩形  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ctx.strokeStyle= &#x27;blue&#x27;;</span><br><span class="line">ctx.strokeRect(100,210,200,100);</span><br><span class="line"></span><br><span class="line"># or</span><br><span class="line">ctx.strokeStyle= &#x27;blue&#x27;;</span><br><span class="line">ctx.rect(100,320,200,100);</span><br><span class="line">ctx.stroke();</span><br></pre></td></tr></table></figure></li><li>绘制填充矩形  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ctx.fillStyle = &#x27;red&#x27;;</span><br><span class="line">ctx.fillRect(100,430,200,100);</span><br><span class="line"></span><br><span class="line">ctx.fillStyle = &#x27;green&#x27;</span><br><span class="line">ctx.rect(100,540,200,100);</span><br><span class="line">ctx.fill();</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>清空矩形  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ctx.fillStyle = &#x27;red&#x27;;</span><br><span class="line">ctx.fillRect(100,430,200,100);</span><br><span class="line">ctx.clearRect(120,450,100,50);</span><br></pre></td></tr></table></figure></li></ul><h4 id="圆"><a href="#圆" class="headerlink" title="圆"></a>圆</h4><p><img src="https://s1.ax1x.com/2020/04/21/J3tKun.png" height="100" width="300"></img></p><ul><li>定义如何绘制<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctx.arc(50,50,40,0,135*Math.PI/180,true);</span><br></pre></td></tr></table></figure></li><li>绘制描边圆<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ctx.arc(50,50,40,0,135*Math.PI/180,true);</span><br><span class="line">ctx.strokeStyle = &#x27;red&#x27;</span><br><span class="line">ctx.stroke();</span><br></pre></td></tr></table></figure></li><li>绘制填充圆<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ctx.beginPath();</span><br><span class="line">ctx.arc(250,50,40,0,135*Math.PI/180,true);</span><br><span class="line">ctx.closePath();</span><br><span class="line">ctx.fillStyle = &#x27;blue&#x27;;</span><br><span class="line">ctx.fill();</span><br></pre></td></tr></table></figure></li><li>路径闭合<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ctx.beginPath();</span><br><span class="line">ctx.arc(50,50,40,0,135*Math.PI/180,true);</span><br><span class="line">ctx.closePath();</span><br><span class="line">#先定义闭合，在绘制</span><br><span class="line">ctx.strokeStyle = &#x27;red&#x27;</span><br><span class="line">ctx.stroke();</span><br></pre></td></tr></table></figure></li></ul><h4 id="弧线"><a href="#弧线" class="headerlink" title="弧线"></a>弧线</h4><ul><li>arc 描边<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ctx.arc(50,50,40,0,40*Math.PI/180,true);</span><br><span class="line">ctx.strokeStyle = &#x27;red&#x27;</span><br><span class="line">ctx.stroke();</span><br></pre></td></tr></table></figure></li><li>arcTo<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 150，50 为结束点，120，180为终点，20为半径，绘制圆弧</span><br><span class="line">ctx.arcTo(150,50,120,180,20);</span><br><span class="line">ctx.stroke();</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> anvas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Linux》-定时shell发起http请求</title>
      <link href="/2020/04/19/devops_skills/linux/%E3%80%8ALinux%E3%80%8B-%E5%AE%9A%E6%97%B6shell%E5%8F%91%E8%B5%B7http%E8%AF%B7%E6%B1%82/"/>
      <url>/2020/04/19/devops_skills/linux/%E3%80%8ALinux%E3%80%8B-%E5%AE%9A%E6%97%B6shell%E5%8F%91%E8%B5%B7http%E8%AF%B7%E6%B1%82/</url>
      
        <content type="html"><![CDATA[<h4 id="发起http请求"><a href="#发起http请求" class="headerlink" title="发起http请求"></a>发起http请求</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line">file=log.txt</span><br><span class="line">echo &#x27;start refresh crontab ....&#x27; &gt;&gt; $file</span><br><span class="line">echo  $(date &quot;+%Y-%m-%d %H:%M:%S&quot;) &gt;&gt; $file  //输出每次执行时间</span><br><span class="line">pm2 start spider    //启动node 进程管理器</span><br><span class="line">sleep 30</span><br><span class="line">echo &#x27;--------------------------------&#x27; &gt;&gt; $file</span><br><span class="line">i=1</span><br><span class="line">time=10</span><br><span class="line">prefix=&#x27;http://xxx.&#x27;</span><br><span class="line">while(($i&lt;=6))</span><br><span class="line">do</span><br><span class="line">  url=$prefix$i;</span><br><span class="line">  echo $url &gt;&gt; $file</span><br><span class="line">  curl -X GET $url   //curl 发起http请求</span><br><span class="line">  sleep $time</span><br><span class="line">  echo &#x27;sleep 30s done&#x27; &gt;&gt; $file</span><br><span class="line">  i=$(($i+1));  //自增</span><br><span class="line">  echo &#x27;-----------------------------&#x27; &gt;&gt; $file</span><br><span class="line">  echo $i</span><br><span class="line">done</span><br><span class="line"> echo &#x27;----------------------&#x27;</span><br><span class="line"> echo &#x27;stop pm2 spider....&#x27; &gt;&gt; $file</span><br><span class="line"> pm2 stop spider    //停止node 进程管理器 </span><br><span class="line"> echo &#x27;stoped pm2 spider...&#x27;</span><br><span class="line"> echo &#x27;-----------------------&#x27; &gt;&gt; $file</span><br></pre></td></tr></table></figure><h4 id="定时配置"><a href="#定时配置" class="headerlink" title="定时配置"></a>定时配置</h4><ul><li>编辑当前登录用户的定时任务 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ crontab -e </span><br></pre></td></tr></table></figure></li><li>添加当前登录用户定时任务 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">15 6 2 1 * /home/melissa/backup.sh</span><br></pre></td></tr></table></figure></li><li>查看当前用户的任务 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crontab -l</span><br></pre></td></tr></table></figure></li><li>移除当前登录用户定时任务 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crontab -r </span><br></pre></td></tr></table></figure></li><li>等待定时执行</li></ul><h4 id="crontab写法介绍"><a href="#crontab写法介绍" class="headerlink" title="crontab写法介绍"></a>crontab写法介绍</h4><ul><li>栗子<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> 15    6    2    1        *            /home/melissa/backup.sh</span><br><span class="line"> |     |    |    |        |  </span><br><span class="line">minute hour day  month   day of week </span><br></pre></td></tr></table></figure></li></ul><table><thead><tr><th>field</th><th align="right">allowed values</th></tr></thead><tbody><tr><td>minute</td><td align="right">0-59</td></tr><tr><td>hour</td><td align="right">0-23</td></tr><tr><td>day of month</td><td align="right">1-31</td></tr><tr><td>month</td><td align="right">1-12</td></tr><tr><td>day of week</td><td align="right">0-7 (0 or 7 is Sunday, or use names;)</td></tr></tbody></table><ul><li>空行、tab、空格会被忽略</li><li>#开头的也会被忽略</li><li>cron 进程，每分钟检查一次定时任务列表</li></ul><h4 id="crontab栗子说明"><a href="#crontab栗子说明" class="headerlink" title="crontab栗子说明"></a>crontab栗子说明</h4><ul><li>每个工作日 10:30 P.M 运行 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">30 22 * * Mon,Tue,Wed,Thu,Fri /usr/local/bin/backup</span><br></pre></td></tr></table></figure></li><li>每周一9点和18点运行<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 9,18 * * Mon /home/wendy/script.sh</span><br></pre></td></tr></table></figure></li><li>每天9-18这段时间里每20分钟运行<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*/20 09-18 * * * /home/carl/hourly-archive.sh</span><br></pre></td></tr></table></figure></li><li>每月1,15且是周五，那天的4:30运行<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">30 4 1,15 * 5 /home/carl/hourly-archive.sh</span><br></pre></td></tr></table></figure></li><li>每间隔1小时运行<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">* 0-23/2 * * * /home/carl/hourly-archive.sh</span><br></pre></td></tr></table></figure></li><li>每年1月的周一1点运行<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">01 00 * Jan Monday /home/melissa/backup.sh</span><br></pre></td></tr></table></figure></li></ul><h4 id="默认是当前用户，可以指定特定用户的定时任务"><a href="#默认是当前用户，可以指定特定用户的定时任务" class="headerlink" title="默认是当前用户，可以指定特定用户的定时任务"></a>默认是当前用户，可以指定特定用户的定时任务</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo crontab -u charles -e</span><br><span class="line"># 编辑特定用户charles的定时任务</span><br><span class="line"></span><br><span class="line">sudo crontab -l -u charles</span><br><span class="line"># 查看特定用户的定时任务</span><br><span class="line"></span><br><span class="line">sudo crontab -r -u charles</span><br><span class="line"># 删除特定用户的定时任务</span><br></pre></td></tr></table></figure><h4 id="那么在哪里可以定义这些限制呢"><a href="#那么在哪里可以定义这些限制呢" class="headerlink" title="那么在哪里可以定义这些限制呢"></a>那么在哪里可以定义这些限制呢</h4><ul><li>&#x2F;etc&#x2F;cron.allow  <ul><li>在这里的才被允许</li></ul></li><li>&#x2F;etc&#x2F;cron.deny<ul><li>不在这里的才被允许</li></ul></li><li>&#x2F;etc&#x2F;cron.d&#x2F;<ul><li>在这里的才被允许</li></ul></li><li>通常直接使用crontab -e 编辑</li></ul><h3 id="服务命令"><a href="#服务命令" class="headerlink" title="服务命令"></a>服务命令</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install crontabs</span><br></pre></td></tr></table></figure><h4 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">crontab -u //设定某个用户的cron服务</span><br><span class="line">crontab -l //列出某个用户cron服务的详细内容</span><br><span class="line">crontab -r //删除某个用户的cron服务</span><br><span class="line">crontab -e //编辑某个用户的cron服务</span><br><span class="line">crontab -i //打印提示，输入yes等确认信息</span><br></pre></td></tr></table></figure><h4 id="生效"><a href="#生效" class="headerlink" title="生效"></a>生效</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">/sbin/service crond start //启动服务</span><br><span class="line">#or</span><br><span class="line">/bin/systemctl start  crond.service</span><br><span class="line"> </span><br><span class="line">/sbin/service crond stop //关闭服务</span><br><span class="line"> </span><br><span class="line">/sbin/service crond restart //重启服务</span><br><span class="line">#or</span><br><span class="line">/bin/systemctl restart  crond.service</span><br><span class="line"> </span><br><span class="line">/sbin/service crond reload //重新载入配置</span><br><span class="line"></span><br><span class="line">service crond status //查看状态</span><br></pre></td></tr></table></figure><h4 id="随机启动"><a href="#随机启动" class="headerlink" title="随机启动"></a>随机启动</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">方法一： 界面启动      ntsysv </span><br><span class="line">方法二： 加入开机自动启动：   chkconfig --level 35 crond on // systemctl enable crond.service</span><br></pre></td></tr></table></figure><h4 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h4><ul><li><a href="https://www.computerhope.com/unix/ucrontab.htm">crontab</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> shell </tag>
            
            <tag> 脚本 </tag>
            
            <tag> 定时 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《rollup》- rollup实践总结</title>
      <link href="/2020/04/13/front_package_build_skills/rollup/%E3%80%8Arollup%E3%80%8B-%20rollup%E5%AE%9E%E8%B7%B5%E6%80%BB%E7%BB%93/"/>
      <url>/2020/04/13/front_package_build_skills/rollup/%E3%80%8Arollup%E3%80%8B-%20rollup%E5%AE%9E%E8%B7%B5%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h3 id="特色介绍"><a href="#特色介绍" class="headerlink" title="特色介绍"></a>特色介绍</h3><ul><li><a href="https://rollupjs.org/guide/zh/">Rollup</a> 是一个 JavaScript 模块打包器，可以将小块代码编译成大块复杂的代码</li><li>支持ES6</li><li>支持Tree Shaking</li><li>可打包js库，也可管理App code</li><li>代码拆分和运行时态的动态导入，存在不足，推荐<a href="https://webpack.js.org/">webpack</a></li><li>通过<a href="https://github.com/rollup/plugins">插件</a>CommonJS 和 node-resolve ，支持将Commonjs 转为 ES模块 </li><li>支持Typescript</li></ul><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><h4 id="前提node已安装"><a href="#前提node已安装" class="headerlink" title="前提node已安装"></a>前提node已安装</h4><p> <a href="https://huchengzhang.com/2020/01/16/%E3%80%8ANode%E3%80%8B-node%E5%AE%89%E8%A3%85%E4%B8%8E%E5%8D%B8%E8%BD%BD/">node安装与卸载</a></p><h4 id="rollup安装"><a href="#rollup安装" class="headerlink" title="rollup安装"></a>rollup安装</h4><ul><li>全局安装 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --global rollup # npm i rollup -g</span><br></pre></td></tr></table></figure></li><li>本地安装 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install rollup --save-dev # yarn -D add rollup</span><br></pre></td></tr></table></figure> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># npx 在npm中携带的</span><br><span class="line">npx rollup -c</span><br></pre></td></tr></table></figure> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 使用scripts配置</span><br><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">   &quot;build:dev&quot; :&quot; rollup -c&quot;</span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure></li></ul><h4 id="调用方式"><a href="#调用方式" class="headerlink" title="调用方式"></a>调用方式</h4><ul><li>CI</li><li>本节重点</li><li>js api</li><li><a href="https://github.com/rollup/rollup-starter-lib">rollup-starter-lib</a></li><li>App 集成</li><li><a href="rollup-starter-app">rollup-starter-app</a></li></ul><h4 id="打包方式"><a href="#打包方式" class="headerlink" title="打包方式"></a>打包方式</h4><ul><li>运行于浏览器<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># compile to a &lt;script&gt; containing a self-executing function (&#x27;iife&#x27;)</span><br><span class="line">$ rollup main.js --file bundle.js --format iife</span><br></pre></td></tr></table></figure></li><li>node上运行<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># compile to a CommonJS module (&#x27;cjs&#x27;)</span><br><span class="line">$ rollup main.js --file bundle.js --format cjs</span><br></pre></td></tr></table></figure></li><li>都支持 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> # UMD format requires a bundle name</span><br><span class="line">$ rollup main.js --file bundle.js --format umd --name &quot;myBundle&quot;</span><br></pre></td></tr></table></figure></li></ul><h3 id="CI"><a href="#CI" class="headerlink" title="CI"></a>CI</h3><h4 id="输出到文件bundle-js"><a href="#输出到文件bundle-js" class="headerlink" title="输出到文件bundle.js"></a>输出到文件bundle.js</h4><ul><li><p>js 文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> #main.j</span><br><span class="line">import foo from &#x27;./foo&#x27;</span><br><span class="line">export default function()&#123;</span><br><span class="line">    console.log(foo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># foo.js</span><br><span class="line">export default &#x27;hello rollup&#x27;</span><br></pre></td></tr></table></figure></li><li><p>ci 打包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rollup main.js -o bundle.js -f cjs</span><br></pre></td></tr></table></figure><p> <img src="https://s1.ax1x.com/2020/04/14/GxVtGq.md.png"></p></li></ul><h4 id="添加配置文件控制打包"><a href="#添加配置文件控制打包" class="headerlink" title="添加配置文件控制打包"></a>添加配置文件控制打包</h4><ul><li>rollup.config.js<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">export default &#123;</span><br><span class="line">  input: &#x27;main.js&#x27;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    file: &#x27;bundle.js&#x27;,</span><br><span class="line">    format: &#x27;cjs&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li>打包<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># --config 简写-c</span><br><span class="line">rollup -c</span><br><span class="line"></span><br><span class="line"># 指定不同配置</span><br><span class="line">rollup -c rollup.config.dev.js</span><br><span class="line">rollup -c rollup.config.prod.js</span><br><span class="line"></span><br><span class="line"># 覆盖配置</span><br><span class="line">rollup -c -o bundle-2.js -f iife</span><br></pre></td></tr></table></figure></li><li>打包后bundle，是一个commonjs模块<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x27;use strict&#x27;;</span><br><span class="line"></span><br><span class="line">var foo = &#x27;hello rollup&#x27;;</span><br><span class="line"></span><br><span class="line">function main()&#123;</span><br><span class="line">    console.log(foo);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module.exports = main;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h4 id="使用插件修改打包"><a href="#使用插件修改打包" class="headerlink" title="使用插件修改打包"></a>使用<a href="https://rollupjs.org/guide/en/#plugins">插件</a>修改打包</h4><ul><li><p>安装插件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --save-dev rollup-plugin-json</span><br></pre></td></tr></table></figure></li><li><p>引入插件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// rollup.config.js</span><br><span class="line">import json from &#x27;rollup-plugin-json&#x27;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">    input: &#x27;src/main.js&#x27;,</span><br><span class="line">    output: &#123;</span><br><span class="line">    file: &#x27;bundle.js&#x27;,</span><br><span class="line">    format: &#x27;cjs&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [ json() ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>修改代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// src/main.js</span><br><span class="line">import &#123; version &#125; from &#x27;../package.json&#x27;;</span><br><span class="line">import foo from &#x27;./foo&#x27;</span><br><span class="line">export default function () &#123;</span><br><span class="line">    console.log(&#x27;version &#x27; + version);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>运行结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#x27;use strict&#x27;;</span><br><span class="line"></span><br><span class="line">var version = &quot;1.0.0&quot;;</span><br><span class="line"></span><br><span class="line">function main()&#123;</span><br><span class="line">    console.log(&#x27;version &#x27; + version);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module.exports = main;</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2020/04/15/J9PIJI.md.png"></p></li><li><p>通过两次运行结果，可发现，只有使用到的代码，被打包–Tree Shaking</p></li></ul><h3 id="rollup-config-js配置"><a href="#rollup-config-js配置" class="headerlink" title="rollup.config.js配置"></a>rollup.config.js配置</h3><h4 id="配置项列表"><a href="#配置项列表" class="headerlink" title="配置项列表"></a>配置项列表</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">// rollup.config.js</span><br><span class="line"></span><br><span class="line">export default &#123; // can be an array (for multiple inputs)</span><br><span class="line">  // core input options</span><br><span class="line">  external,</span><br><span class="line">  input, // required</span><br><span class="line">  plugins,</span><br><span class="line"></span><br><span class="line">  // advanced input options</span><br><span class="line">  cache,</span><br><span class="line">  inlineDynamicImports,</span><br><span class="line">  manualChunks,</span><br><span class="line">  onwarn,</span><br><span class="line">  preserveModules,</span><br><span class="line">  strictDeprecations,</span><br><span class="line"></span><br><span class="line">  // danger zone</span><br><span class="line">  acorn,</span><br><span class="line">  acornInjectPlugins,</span><br><span class="line">  context,</span><br><span class="line">  moduleContext,</span><br><span class="line">  preserveSymlinks,</span><br><span class="line">  shimMissingExports,</span><br><span class="line">  treeshake,</span><br><span class="line"></span><br><span class="line">  // experimental</span><br><span class="line">  experimentalCacheExpiry,</span><br><span class="line">  perf,</span><br><span class="line"></span><br><span class="line">  output: &#123; // required (can be an array, for multiple outputs)</span><br><span class="line">    // core output options</span><br><span class="line">    dir,</span><br><span class="line">    file,</span><br><span class="line">    format, // required</span><br><span class="line">    globals,</span><br><span class="line">    name,</span><br><span class="line">    plugins,</span><br><span class="line"></span><br><span class="line">    // advanced output options</span><br><span class="line">    assetFileNames,</span><br><span class="line">    banner,</span><br><span class="line">    chunkFileNames,</span><br><span class="line">    compact,</span><br><span class="line">    entryFileNames,</span><br><span class="line">    extend,</span><br><span class="line">    footer,</span><br><span class="line">    hoistTransitiveImports,</span><br><span class="line">    interop,</span><br><span class="line">    intro,</span><br><span class="line">    outro,</span><br><span class="line">    paths,</span><br><span class="line">    sourcemap,</span><br><span class="line">    sourcemapExcludeSources,</span><br><span class="line">    sourcemapFile,</span><br><span class="line">    sourcemapPathTransform,</span><br><span class="line"></span><br><span class="line">    // danger zone</span><br><span class="line">    amd,</span><br><span class="line">    esModule,</span><br><span class="line">    exports,</span><br><span class="line">    externalLiveBindings,</span><br><span class="line">    freeze,</span><br><span class="line">    indent,</span><br><span class="line">    namespaceToStringTag,</span><br><span class="line">    noConflict,</span><br><span class="line">    preferConst,</span><br><span class="line">    strict</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  watch: &#123;</span><br><span class="line">    chokidar,</span><br><span class="line">    clearScreen,</span><br><span class="line">    skipWrite,</span><br><span class="line">    exclude,</span><br><span class="line">    include</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="默认配置文件读取"><a href="#默认配置文件读取" class="headerlink" title="默认配置文件读取"></a>默认配置文件读取</h3><ul><li><p>文件形式(如下顺序依次读取)</p></li><li><p>rollup.config.mjs – <strong>要求Node 13+</strong></p></li><li><p>rollup.config.cjs – commonjs ,module.exports形式的</p></li><li><p>rollup.config.js – 编译为commonjs</p></li><li><p>node_modules packages形式</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rollup --config <span class="attr">node</span>:my-special-config</span><br></pre></td></tr></table></figure></li><li><p>优先读取rollup-config-my-special-config</p></li><li><p>my-special-config</p></li></ul><h3 id="rollup-命令行传参"><a href="#rollup-命令行传参" class="headerlink" title="rollup 命令行传参"></a>rollup 命令行传参</h3><h4 id="使用不同配置-rollup-–config-–configDebug"><a href="#使用不同配置-rollup-–config-–configDebug" class="headerlink" title="使用不同配置 - rollup –config –configDebug"></a>使用不同配置 - rollup –config –configDebug</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// rollup.config.js</span></span><br><span class="line"><span class="keyword">import</span> defaultConfig <span class="keyword">from</span> <span class="string">&#x27;./rollup.default.config.js&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> debugConfig <span class="keyword">from</span> <span class="string">&#x27;./rollup.debug.config.js&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> commandLineArgs =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (commandLineArgs.<span class="property">configDebug</span> === <span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> debugConfig;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> defaultConfig;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="修改默认配置参数"><a href="#修改默认配置参数" class="headerlink" title="修改默认配置参数"></a>修改默认配置参数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// rollup.config.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> commandLineArgs =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> inputBase = commandLineArgs.<span class="property">input</span> || <span class="string">&#x27;main.js&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// this will make Rollup ignore the CLI argument</span></span><br><span class="line">  <span class="keyword">delete</span> commandLineArgs.<span class="property">input</span>;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">input</span>: <span class="string">&#x27;src/entries/&#x27;</span> + inputBase,</span><br><span class="line">    <span class="attr">output</span>: &#123;...&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p> <a href="https://rollupjs.org/guide/en/">rollupjs</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> rollup </tag>
            
            <tag> 工程化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Node》- 话说process.env的那些事儿.md</title>
      <link href="/2020/04/13/front_skills/node/%E3%80%8ANode%E3%80%8B-%20%E8%AF%9D%E8%AF%B4process.env%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/"/>
      <url>/2020/04/13/front_skills/node/%E3%80%8ANode%E3%80%8B-%20%E8%AF%9D%E8%AF%B4process.env%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/</url>
      
        <content type="html"><![CDATA[<h3 id="node环境变量"><a href="#node环境变量" class="headerlink" title="node环境变量"></a>node环境变量</h3><ul><li>process 是node的全局变量，类似浏览器的window</li><li>env 是process的一个属性</li></ul><h3 id="process-env的用法"><a href="#process-env的用法" class="headerlink" title="process.env的用法"></a>process.env的用法</h3><h4 id="修改启动端口"><a href="#修改启动端口" class="headerlink" title="修改启动端口"></a>修改启动端口</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const http = require(&#x27;http&#x27;);</span><br><span class="line">const port = process.env.PORT || 3000;</span><br><span class="line">const server = http.createServer((req, res) =&gt; res.send(&#x27;Ahoy!&#x27;));</span><br><span class="line">server.listen(port,() =&gt; &#123;</span><br><span class="line">    console.log(`server start at $&#123;port&#125;`);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><img src="https://s1.ax1x.com/2020/04/13/GvWQxJ.md.png" width="600" height="300"><h4 id="dotenv"><a href="#dotenv" class="headerlink" title="dotenv"></a><a href="https://www.npmjs.com/package/dotenv">dotenv</a></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install dotenv --save</span><br></pre></td></tr></table></figure><ul><li><p>项目根路径添加，.env 文件</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PORT=3009</span><br></pre></td></tr></table></figure></li><li><p>解析.env文件，存放到process.env中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">console.log(&#x27;No value for PORT yet:&#x27;, process.env.PORT);</span><br><span class="line">if (process.env.NODE_ENV !== &#x27;production&#x27;) &#123;</span><br><span class="line">    require(&#x27;dotenv&#x27;).config(); # 这一步不可以省略</span><br><span class="line">&#125;</span><br><span class="line">const http = require(&#x27;http&#x27;);</span><br><span class="line">console.log(&#x27;Now the value for PORT is:&#x27;, process.env.PORT);</span><br><span class="line">const port = process.env.PORT || 3000;</span><br><span class="line">const server = http.createServer((req, res) =&gt; res.send(&#x27;HELLO!&#x27;));</span><br><span class="line">server.listen(port,() =&gt; &#123;</span><br><span class="line">    console.log(`server start at $&#123;port&#125;`);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2020/04/13/Gv4BM4.md.png"></p></li><li><p>如果env不放在根路径下，怎么办？<br><img src="https://s1.ax1x.com/2020/04/13/Gv5Zy4.md.png"></p></li><li><p>很明显，配置没有生效</p></li><li><p>怎么才能生效？<br>  config配置path，指定到具体路径即可<br>  <img src="https://s1.ax1x.com/2020/04/13/GvIWKe.md.png"></p></li></ul><h4 id="dotenv预加载"><a href="#dotenv预加载" class="headerlink" title="dotenv预加载"></a>dotenv预加载</h4><ul><li>不需要再开始引入 require(‘dotenv’).config()<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node -r dotenv/config example.js dotenv_config_path=&lt;yourpath&gt;/config/.env</span><br></pre></td></tr></table></figure><img src="https://s1.ax1x.com/2020/04/13/GvTpeH.md.png"></li></ul><h4 id="不同环境如何创建文件"><a href="#不同环境如何创建文件" class="headerlink" title="不同环境如何创建文件"></a>不同环境如何创建文件</h4><ul><li>推荐写法 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.env</span><br><span class="line">.env.dev</span><br><span class="line">.env.test</span><br><span class="line">.env.prod</span><br></pre></td></tr></table></figure></li><li>不同环境的，fs读取覆盖生效 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const fs = require(&#x27;fs&#x27;)</span><br><span class="line">const dotenv = require(&#x27;dotenv&#x27;)</span><br><span class="line">const envConfig = dotenv.parse(fs.readFileSync(&#x27;.env.test&#x27;))</span><br><span class="line">for (const k in envConfig) &#123;</span><br><span class="line">    process.env[k] = envConfig[k]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="更多推荐"><a href="#更多推荐" class="headerlink" title="更多推荐"></a>更多推荐</h3><ul><li><a href="https://huchengzhang.com/2020/01/16/%E3%80%8ANode%E3%80%8B-node%E5%AE%89%E8%A3%85%E4%B8%8E%E5%8D%B8%E8%BD%BD/">node安装与卸载</a></li><li><a href="https://huchengzhang.com/2020/03/19/%E3%80%8ANode%E3%80%8B-%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97RabbitMQ%E5%AE%9E%E6%88%98%E7%AC%94%E8%AE%B0/">docker消息队列RabbitMQ 入门</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> node </tag>
            
            <tag> process.env </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《微信小程序》- 从自建后端迁移到云函数、云数据库实践总结</title>
      <link href="/2020/04/12/front_skills/minapp/%E3%80%8A%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E3%80%8B-%E4%BB%8E%E8%87%AA%E5%BB%BA%E5%90%8E%E7%AB%AF%E8%BF%81%E7%A7%BB%E5%88%B0%E4%BA%91%E5%87%BD%E6%95%B0%E3%80%81%E4%BA%91%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E8%B7%B5%E6%80%BB%E7%BB%93/"/>
      <url>/2020/04/12/front_skills/minapp/%E3%80%8A%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E3%80%8B-%E4%BB%8E%E8%87%AA%E5%BB%BA%E5%90%8E%E7%AB%AF%E8%BF%81%E7%A7%BB%E5%88%B0%E4%BA%91%E5%87%BD%E6%95%B0%E3%80%81%E4%BA%91%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E8%B7%B5%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h4 id="小程序代码修改"><a href="#小程序代码修改" class="headerlink" title="小程序代码修改"></a>小程序代码修改</h4><ul><li>之前调用服务端代码，修改为调用云函数</li><li>新建云函数，并upload部署</li><li>云函数，不要求域名配置</li></ul><h4 id="添加云函数"><a href="#添加云函数" class="headerlink" title="添加云函数"></a>添加云函数</h4><ul><li>之前后端请求的js逻辑，迁移到云函数，</li><li>难点就是云函数如何发出get,post请求</li><li>get请求方案如下：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># package.json</span><br><span class="line">&quot;dependencies&quot;: &#123;</span><br><span class="line">    &quot;wx-server-sdk&quot;: &quot;latest&quot;,</span><br><span class="line">    &quot;request-promise&quot;: &quot;^4.2.5&quot;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># index.js</span><br><span class="line">// 云函数入口文件</span><br><span class="line">const cloud = require(&#x27;wx-server-sdk&#x27;)</span><br><span class="line">const req = require(&quot;request-promise&quot;);</span><br><span class="line">const prefix = &quot;http://xxxx&quot;</span><br><span class="line"></span><br><span class="line">cloud.init()</span><br><span class="line"></span><br><span class="line">// 云函数入口函数</span><br><span class="line">exports.main = async (event, context) =&gt; &#123;</span><br><span class="line">  let url = `$&#123;prefix&#125;`;</span><br><span class="line">  const res = await req(url);</span><br><span class="line">  return &#123;</span><br><span class="line">    res,</span><br><span class="line">    event,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="云数据库"><a href="#云数据库" class="headerlink" title="云数据库"></a>云数据库</h4><ul><li>mysql数据库，如何转换为nosql数据库<br>  方案一：<br>云函数数据库增量，先调用云函数，发现没有，请求后端服务，然后增量添加到数据库中。<br>  方案二：<br> 利用云数据库，导入&#x2F;导出功能，先转换已有数据，批量导入</li><li>为应对快速上线更新，采用方案一</li></ul><h4 id="storage封装"><a href="#storage封装" class="headerlink" title="storage封装"></a>storage封装</h4> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"> module.exports = &#123;</span><br><span class="line">  /**</span><br><span class="line">   * 异步存储，支持promise</span><br><span class="line">   */</span><br><span class="line">  setLocalStorage: function (key, data) &#123;</span><br><span class="line">    if (!data) &#123; return; &#125;</span><br><span class="line">    wx.setStorage(&#123;</span><br><span class="line">      key: key,</span><br><span class="line">      data: data,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  /**</span><br><span class="line">   * 同步存储</span><br><span class="line">   */</span><br><span class="line">  setLocalStorageSync: function (key, data) &#123;</span><br><span class="line">    return wx.setStorageSync(key, data);</span><br><span class="line">  &#125;,</span><br><span class="line">  /**</span><br><span class="line">   * 异步获取存储，支持promise</span><br><span class="line">   */</span><br><span class="line">  getLocalStorage: function (key) &#123;</span><br><span class="line">    return wx.getStorage(&#123;</span><br><span class="line">      key: key</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  /**</span><br><span class="line">   * 同步获取</span><br><span class="line">   */</span><br><span class="line">  getLocalStorageSync: function (key) &#123;</span><br><span class="line">    const res = wx.getStorageSync(key);</span><br><span class="line">    console.log(`[本地] storage sync get $&#123;key&#125; 成功`, res);</span><br><span class="line">    return res;</span><br><span class="line">  &#125;,</span><br><span class="line">  /**</span><br><span class="line">   * 同步删除，会等待</span><br><span class="line">   */</span><br><span class="line">  removeStorageSync: function (key) &#123;</span><br><span class="line">    return wx.removeStorageSync(key);</span><br><span class="line">  &#125;,</span><br><span class="line">  /**</span><br><span class="line">   * 异步删除，返回promise</span><br><span class="line">   */</span><br><span class="line">  removeLocalStorage: function (key) &#123;</span><br><span class="line">    wx.removeStorage(&#123;</span><br><span class="line">      key: key</span><br><span class="line">    &#125;).then(res =&gt; &#123;</span><br><span class="line">      console.log(`[本地] storage 删除 $&#123;key&#125; 成功`);</span><br><span class="line">    &#125;).catch(err =&gt; &#123;</span><br><span class="line">      console.error(`[本地] storage 删除 $&#123;key&#125; 失败`);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="云端数据库db工具封装"><a href="#云端数据库db工具封装" class="headerlink" title="云端数据库db工具封装"></a>云端数据库db工具封装</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  /**</span><br><span class="line">   * params:&#123;</span><br><span class="line">   *  data:xxxx</span><br><span class="line">   * &#125;</span><br><span class="line">   */</span><br><span class="line">  addItem: function (dbName, params)&#123;</span><br><span class="line">    if (!params)&#123;</span><br><span class="line">      console.error(`[数据库]$&#123;dbName&#125; [新增记录],参数空`);</span><br><span class="line">    &#125;</span><br><span class="line">    const data = &#123;</span><br><span class="line">      data: params</span><br><span class="line">    &#125;</span><br><span class="line">    const db = wx.cloud.database();</span><br><span class="line">    return db.collection(dbName).add(data).then((res) =&gt; &#123;</span><br><span class="line">      console.log(`[数据库]$&#123;dbName&#125; [新增记录] 成功，记录 _id:`, params, res._id)</span><br><span class="line">    &#125;).catch(err =&gt; &#123;</span><br><span class="line">      console.error(`[数据库]$&#123;dbName&#125; [新增记录] 失败：`, params, err)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  /**</span><br><span class="line">   * where:&#123;</span><br><span class="line">   *    _openid:openid</span><br><span class="line">   * &#125;</span><br><span class="line">   */</span><br><span class="line">  queryItem:function(dbName,where)&#123;</span><br><span class="line">    const db = wx.cloud.database();</span><br><span class="line">    return new Promise((resolve,reject) =&gt; &#123;</span><br><span class="line">      db.collection(dbName).where(where).get().then(res =&gt; &#123;</span><br><span class="line">        const data = res.data;</span><br><span class="line">        console.log(`[数据库]$&#123;dbName&#125; [查询记录] 成功：`, where, data);</span><br><span class="line">        resolve(data)</span><br><span class="line">      &#125;).catch(err =&gt; &#123;</span><br><span class="line">        console.log(`[数据库]$&#123;dbName&#125; [查询记录] 失败：`, where, err);</span><br><span class="line">        reject(err);</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  /**</span><br><span class="line">   * where:&#123;</span><br><span class="line">   *    _openid:openid</span><br><span class="line">   * &#125;</span><br><span class="line">   */</span><br><span class="line">  queryLimitItem: function (dbName, where, &#123; skip, limit &#125;) &#123;</span><br><span class="line">    const db = wx.cloud.database();</span><br><span class="line">    return new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">      db.collection(dbName).where(where).skip(skip).orderBy(&#x27;subIndex&#x27;,&#x27;asc&#x27;).limit(limit).get().then(res =&gt; &#123;</span><br><span class="line">        const data = res.data;</span><br><span class="line">        console.log(`[数据库]$&#123;dbName&#125; [查询记录] 成功：`, where, data);</span><br><span class="line">        resolve(data)</span><br><span class="line">      &#125;).catch(err =&gt; &#123;</span><br><span class="line">        console.log(`[数据库]$&#123;dbName&#125; [查询记录] 失败：`, where, err);</span><br><span class="line">        reject(err);</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  /**</span><br><span class="line">   * where:&#123;</span><br><span class="line">   *    _openid:openid</span><br><span class="line">   * &#125;</span><br><span class="line">   * params:&#123;</span><br><span class="line">   *  data:xxx</span><br><span class="line">   * &#125;</span><br><span class="line">   */</span><br><span class="line">  updateItem:function(dbName,where,params)&#123;</span><br><span class="line">    if (!params) &#123;</span><br><span class="line">      console.error(`[数据库]$&#123;dbName&#125; [更新记录],参数空`);</span><br><span class="line">    &#125;</span><br><span class="line">    const data = &#123;</span><br><span class="line">      data: params</span><br><span class="line">    &#125;</span><br><span class="line">    const db = wx.cloud.database();</span><br><span class="line">    return db.collection(dbName).where(where).update(data).then(res =&gt; &#123;</span><br><span class="line">        console.log(`[数据库]$&#123;dbName&#125; [更新记录] 成功：`, where, params ,res);</span><br><span class="line">      &#125;).catch(err =&gt; &#123;</span><br><span class="line">        console.error(`[数据库]$&#123;dbName&#125; [更新记录] 失败：`, where, params, err);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  /**</span><br><span class="line">   * where:&#123;</span><br><span class="line">   *    _openid:openid</span><br><span class="line">   * &#125;</span><br><span class="line">   */</span><br><span class="line">  deleteItem: function(dbName, where) &#123;</span><br><span class="line">    const db = wx.cloud.database();</span><br><span class="line">    return db.collection(dbName).where(where).then(res =&gt; &#123;</span><br><span class="line">      console.log(`[数据库]$&#123;dbName&#125; [删除记录]$&#123;uniqueId&#125; 成功：`, params, res);</span><br><span class="line">    &#125;).catch(err =&gt; &#123;</span><br><span class="line">      onsole.error(`[数据库]$&#123;dbName&#125; [删除记录] $&#123;uniqueId&#125; 失败：`, params, err);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 微信小程序 </tag>
            
            <tag> 云函数 </tag>
            
            <tag> 云数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《微信小程序》- 谈一谈定位api的使用</title>
      <link href="/2020/04/02/front_skills/minapp/%E3%80%8A%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E3%80%8B-%20%E8%B0%88%E4%B8%80%E8%B0%88%E5%AE%9A%E4%BD%8Dapi%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2020/04/02/front_skills/minapp/%E3%80%8A%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E3%80%8B-%20%E8%B0%88%E4%B8%80%E8%B0%88%E5%AE%9A%E4%BD%8Dapi%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h4 id="定位api需求"><a href="#定位api需求" class="headerlink" title="定位api需求"></a>定位api需求</h4><ul><li>根据attitude,lottitde，获取地理位置</li><li>或者能直接调用api，返回地理位置</li></ul><h4 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h4><ul><li>根据<a href="https://developers.weixin.qq.com/miniprogram/dev/api/location/wx.getLocation.html">微信小程序官网</a>，如下代码，得到attitude,lottitde。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">wx.getLocation(&#123;</span><br><span class="line">    type: &#x27;wgs84&#x27;,</span><br><span class="line">    success (res) &#123;</span><br><span class="line">        const latitude = res.latitude</span><br><span class="line">        const longitude = res.longitude</span><br><span class="line">        const speed = res.speed</span><br><span class="line">        const accuracy = res.accuracy</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>根据attitude,lottitde，计算得到位置。<br>还需要知道很多地理位置数据，然后计算，理论可以，但不可行。</li></ul><h4 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h4><ul><li>直接使用百度地图api  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">var BMap = new bmap.BMapWX(&#123; </span><br><span class="line">         ak: &#x27;您的ak&#x27; </span><br><span class="line">     &#125;); </span><br><span class="line">     var fail = function(data) &#123; </span><br><span class="line">         console.log(data) </span><br><span class="line">     &#125;; </span><br><span class="line">     var success = function(data) &#123; </span><br><span class="line">         wxMarkerData = data.wxMarkerData; </span><br><span class="line">         that.setData(&#123; </span><br><span class="line">             markers: wxMarkerData </span><br><span class="line">         &#125;); </span><br><span class="line">         that.setData(&#123; </span><br><span class="line">             latitude: wxMarkerData[0].latitude </span><br><span class="line">         &#125;); </span><br><span class="line">         that.setData(&#123; </span><br><span class="line">             longitude: wxMarkerData[0].longitude </span><br><span class="line">         &#125;); </span><br><span class="line">     &#125; </span><br><span class="line">     // 发起regeocoding检索请求 </span><br><span class="line">     BMap.regeocoding(&#123; </span><br><span class="line">         fail: fail, </span><br><span class="line">         success: success, </span><br><span class="line">         iconPath: &#x27;../../img/marker_red.png&#x27;, </span><br><span class="line">         iconTapPath: &#x27;../../img/marker_red.png&#x27; </span><br><span class="line">     &#125;);</span><br></pre></td></tr></table></figure></li><li>能满足条件，但是有个限制，就是需要引入map组件，<br>map组件，对于不需要的来说，就有点鸡肋了。</li></ul><h4 id="方案三"><a href="#方案三" class="headerlink" title="方案三"></a>方案三</h4><ul><li><p>使用高德地图</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var myAmapFun = new amapFile.AMapWX(&#123;key:&#x27;高德Key&#x27;&#125;);</span><br><span class="line">myAmapFun.getRegeo(&#123;</span><br><span class="line">  success: function(data)&#123;</span><br><span class="line">    //成功回调</span><br><span class="line">  &#125;,</span><br><span class="line">  fail: function(info)&#123;</span><br><span class="line">    //失败回调</span><br><span class="line">    console.log(info)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;view class=&quot;map_container&quot;&gt;</span><br><span class="line">  &lt;!--定义页面结构，可以使用地图组件也能使用其他组件 --&gt;</span><br><span class="line">&lt;/view&gt;</span><br></pre></td></tr></table></figure></li><li><p>直接调用api，就行，无额外的引入，简单<br><img src="https://s1.ax1x.com/2020/04/12/GqWU0S.png" height="615" width="375"></img></p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 微信小程序 </tag>
            
            <tag> 定位 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《微信小程序》- 谈一谈异步Rxjs使用</title>
      <link href="/2020/03/30/front_skills/minapp/%E3%80%8A%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E3%80%8B-%20%E8%B0%88%E4%B8%80%E8%B0%88%E5%BC%82%E6%AD%A5Rxjs%E4%BD%BF%E7%94%A8/"/>
      <url>/2020/03/30/front_skills/minapp/%E3%80%8A%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E3%80%8B-%20%E8%B0%88%E4%B8%80%E8%B0%88%E5%BC%82%E6%AD%A5Rxjs%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h4 id="Rxjs"><a href="#Rxjs" class="headerlink" title="Rxjs"></a><a href="https://rxjs-dev.firebaseapp.com/">Rxjs</a></h4><ul><li>js lib库</li><li>实时响应编程</li><li>类似node Event机制，或者说观察者模式 <img src="https://s1.ax1x.com/2020/04/12/GqfPnf.md.png" height="300" width="600"></li></ul><h4 id="为何使用rxjs"><a href="#为何使用rxjs" class="headerlink" title="为何使用rxjs"></a>为何使用rxjs</h4><ul><li>技术诉求<br>根本原因，在于异步</li><li>数据依赖关系 → 异步 → 必须等待数据OK，才能操作下一步</li><li>为了迁移小程序后端到云端，把请求前缀，配置到云端；但是小程序index界面，就请求banner数据，只进行一次，而且要求url 正确</li></ul><h4 id="直接上代码"><a href="#直接上代码" class="headerlink" title="直接上代码"></a>直接上代码</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># app</span><br><span class="line">if (prefix &amp;&amp; prefix !== defaultPrefix)&#123;</span><br><span class="line">    this.globalData.prefix = prefix;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    this.globalData.prefix = defaultPrefix;</span><br><span class="line">&#125;</span><br><span class="line">publish(&#123;prefix&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#index.js</span><br><span class="line">onLoad: function () &#123;</span><br><span class="line">    const sub = getSubject();</span><br><span class="line">    const self = this;</span><br><span class="line">    self.getPageMenus();</span><br><span class="line">    sub.subscribe((res) =&gt; &#123;</span><br><span class="line">      if(res &amp;&amp; res.prefix)&#123;</span><br><span class="line">        this.getPageBanner();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h4 id="更多推荐"><a href="#更多推荐" class="headerlink" title="更多推荐"></a>更多推荐</h4><ul><li><a href="https://juejin.im/post/5dca49d35188255700056e44">前端Rollup+RxJs响应式编程实践</a></li><li><a href="https://juejin.im/post/5dcdf35a5188254a1060b90f">前端RxJs响应式编程之操作符实践</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> rxjs </tag>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Dart》- 入门整理</title>
      <link href="/2020/03/25/app_develop_skills/%E3%80%8ADart%E3%80%8B-%20%E5%85%A5%E9%97%A8%E6%95%B4%E7%90%86/"/>
      <url>/2020/03/25/app_develop_skills/%E3%80%8ADart%E3%80%8B-%20%E5%85%A5%E9%97%A8%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h3 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a><a href="https://dart.dev/get-dart">安装</a></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ brew tap dart-lang/dart</span><br><span class="line">$ brew install dart</span><br></pre></td></tr></table></figure><h4 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ dart --version</span><br></pre></td></tr></table></figure><h4 id="版本命名"><a href="#版本命名" class="headerlink" title="版本命名"></a>版本命名</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 升级</span><br><span class="line">$ brew upgrade dart</span><br><span class="line"></span><br><span class="line"># 版本切换</span><br><span class="line">$ brew switch dart 1.24.3</span><br><span class="line">$ brew switch dart 2.1.0</span><br><span class="line"></span><br><span class="line"># 查看版本</span><br><span class="line">$ brew info dart</span><br></pre></td></tr></table></figure><h4 id="stagehand"><a href="#stagehand" class="headerlink" title="stagehand"></a>stagehand</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 自动创建dart工程</span><br><span class="line">$ pub global activate stagehand</span><br><span class="line">$ export PATH=&quot;$PATH&quot;:&quot;$HOME/.pub-cache/bin&quot; </span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># 会在当前目录，快速生成代码</span><br><span class="line">$ cd dart-demo </span><br><span class="line">$ stagehand </span><br><span class="line">Stagehand will generate the given application type into the current directory.</span><br><span class="line"></span><br><span class="line">usage: stagehand &lt;generator-name&gt;</span><br><span class="line">    --[no-]analytics    Opt out of anonymous usage and crash reporting.</span><br><span class="line">-h, --help              Help!</span><br><span class="line">    --version           Display the version for stagehand.</span><br><span class="line">    --author            The author name to use for file headers.</span><br><span class="line">                        (defaults to &quot;&lt;your name&gt;&quot;)</span><br><span class="line"></span><br><span class="line">console-full   - A command-line application sample.</span><br><span class="line">console-simple - A simple command-line application.</span><br><span class="line">package-simple - A starting point for Dart libraries or applications.</span><br><span class="line">server-shelf   - A web server built using the shelf package.</span><br><span class="line">web-angular    - A web app with material design components.</span><br><span class="line">web-simple     - A web app that uses only core Dart libraries.</span><br><span class="line">web-stagexl    - A starting point for 2D animation and games.</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2020/03/25/8xkLhd.png" width="300" height="400"></img></p><h4 id="zip-sdk包"><a href="#zip-sdk包" class="headerlink" title="zip sdk包"></a>zip sdk包</h4><p><a href="https://dart.dev/tools/sdk/archive">sdk下载</a></p><h3 id="语法-–-学习时候，请类比js-or-ts"><a href="#语法-–-学习时候，请类比js-or-ts" class="headerlink" title="语法 – 学习时候，请类比js or ts"></a>语法 – 学习时候，请类比js or ts</h3><h4 id="coding注意事项"><a href="#coding注意事项" class="headerlink" title="coding注意事项"></a>coding注意事项</h4><ul><li>main函数不可缺</li><li>需要；结尾</li></ul><h4 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h4><ul><li>7种内置类型：strings,booleans,maps,lists,numbers,runes(字符)，symbols（符号类型）</li></ul><table><thead><tr><th>dart</th><th>js</th><th>ts</th></tr></thead><tbody><tr><td>strings</td><td>string</td><td>string</td></tr><tr><td>booleans</td><td>boolean</td><td>boolean</td></tr><tr><td>maps</td><td>map or set</td><td>map or set</td></tr><tr><td>lists</td><td>array or []</td><td>array or []</td></tr><tr><td>symbols</td><td>symbol</td><td>symbol</td></tr><tr><td>runes</td><td>string</td><td>string</td></tr><tr><td>numbers</td><td>Number</td><td>number</td></tr><tr><td>无对象</td><td>object</td><td>object</td></tr><tr><td>自定义</td><td>function</td><td>function</td></tr><tr><td>无</td><td>无</td><td>void</td></tr><tr><td>null</td><td>null</td><td>null</td></tr><tr><td>无</td><td>undefined</td><td>undefined</td></tr><tr><td>&#x3D;&gt;</td><td>&#x3D;&gt;</td><td>&#x3D;&gt; 支持箭头函数</td></tr></tbody></table><ul><li><p>var 变量自动推断，支持显示声明7种类型。</p></li><li><p>var 变量，不赋值，则为null。<strong>非js种的undefined</strong></p></li><li><p>numbers分，int,double类型。</p></li><li><p>变量可以直接操作方法。类似js。</p>  <img src="https://s1.ax1x.com/2020/03/25/8xZF4e.png" width="200" height="300" /></li><li><p>参数、返回值是定义不同于ts</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//dart ,类似java\c</span><br><span class="line"> int fibonacci(int n) &#123;</span><br><span class="line">     if (n == 0 || n == 1) return n;</span><br><span class="line">     return fibonacci(n - 1) + fibonacci(n - 2);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> //ts </span><br><span class="line"> function getLength(something: string | number): number &#123;</span><br><span class="line">     return something.length;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li><p>引用包，只能使用import。js| ts，可以使用module.exports| require.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// Importing core libraries</span><br><span class="line">import &#x27;dart:math&#x27;;</span><br><span class="line"></span><br><span class="line">// Importing libraries from external packages</span><br><span class="line">import &#x27;package:test/test.dart&#x27;;</span><br><span class="line"></span><br><span class="line">// Importing files</span><br><span class="line">import &#x27;path/to/my_other_file.dart&#x27;;</span><br></pre></td></tr></table></figure></li></ul><h4 id="number"><a href="#number" class="headerlink" title="number"></a>number</h4><ul><li><p>int </p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var num = 1;</span><br><span class="line">print(num.runtimeType);</span><br><span class="line">print(num.isEven);</span><br><span class="line">print(num.bitLength);</span><br></pre></td></tr></table></figure></li><li><p>strings</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 类似python ，原始字符串</span><br><span class="line">var ss = r&#x27;hello \n world&#x27;;</span><br><span class="line">print(ss);</span><br><span class="line">print(ss * 2); //copy </span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> App </tag>
            
            <tag> dart </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Node》- 消息队列RabbitMQ实战笔记</title>
      <link href="/2020/03/19/front_skills/node/%E3%80%8ANode%E3%80%8B-%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97RabbitMQ%E5%AE%9E%E6%88%98%E7%AC%94%E8%AE%B0/"/>
      <url>/2020/03/19/front_skills/node/%E3%80%8ANode%E3%80%8B-%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97RabbitMQ%E5%AE%9E%E6%88%98%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="server环境搭建"><a href="#server环境搭建" class="headerlink" title="server环境搭建"></a>server环境搭建</h3><h4 id="node安装"><a href="#node安装" class="headerlink" title="node安装"></a>node安装</h4><p> 参考<a href="https://huchengzhang.com/2020/01/16/%E3%80%8ANode%E3%80%8B-node%E5%AE%89%E8%A3%85%E4%B8%8E%E5%8D%B8%E8%BD%BD/">另一篇文章</a></p><h4 id="rabbitMQ-安装"><a href="#rabbitMQ-安装" class="headerlink" title="rabbitMQ 安装"></a>rabbitMQ 安装</h4><ul><li><p>brew安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#mac </span><br><span class="line">brew install rabbitmq</span><br></pre></td></tr></table></figure></li><li><p>docker <a href="https://hub.docker.com/_/rabbitmq">rabbitmq</a>安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker pull rabbitmq</span><br></pre></td></tr></table></figure></li></ul><h4 id="启动rabbitmq"><a href="#启动rabbitmq" class="headerlink" title="启动rabbitmq"></a>启动rabbitmq</h4><ul><li>brew 启动<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew services start rabbitmq </span><br></pre></td></tr></table></figure></li><li>docker 启动<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -d --hostname rabbit  --name myrabbit -p 15672:15672 -p 5672:5672 --rm rabbitmq:3-management</span><br></pre></td></tr></table></figure></li><li>端口介绍<br>  5672：通信默认端口号<br>  15672：管理控制台默认端口号<br>  25672：集群通信端口号</li></ul><h4 id="访问-guest-guest"><a href="#访问-guest-guest" class="headerlink" title="访问- guest&#x2F;guest"></a>访问- guest&#x2F;guest</h4><p> <a href="http://localhost:15672/">http://localhost:15672</a><br> <img src="https://s1.ax1x.com/2020/03/19/8yuCan.png"></p><h3 id="coding"><a href="#coding" class="headerlink" title="coding"></a>coding</h3><h4 id="node"><a href="#node" class="headerlink" title="node"></a>node</h4><h4 id="amqplib安装"><a href="#amqplib安装" class="headerlink" title="amqplib安装"></a><a href="https://www.npmjs.com/package/amqplib">amqplib</a>安装</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ npm install amqplib </span><br><span class="line"># or</span><br><span class="line">$ yarn add amqplib </span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="callback-方式"><a href="#callback-方式" class="headerlink" title="callback 方式"></a>callback 方式</h4><ul><li><p>require package</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">const amqplib = require(&quot;amqplib/callback_api&quot;);</span><br><span class="line">amqplib.connect(&#x27;amqp://localhost:5672&#x27;,(err,conn) =&gt; &#123;</span><br><span class="line">    if(err)&#123;</span><br><span class="line">        console.error(err);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    sendMsg(conn);</span><br><span class="line">    receiveMsg(conn);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>publisher</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">const topic = &#x27;message&#x27;;</span><br><span class="line"></span><br><span class="line">function sendMsg(conn)&#123;</span><br><span class="line">    conn.createChannel((err,ch) =&gt; &#123;</span><br><span class="line">        if(err)&#123;return;&#125;</span><br><span class="line">        ch.assertQueue(topic);</span><br><span class="line">        ch.sendToQueue(topic,Buffer.from(&#x27;hello world ,this is from rabbitmq&#x27;));</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>consumer</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">function receiveMsg(conn)&#123;</span><br><span class="line">    conn.createChannel((err,ch) =&gt; &#123;</span><br><span class="line">        if(err)&#123;</span><br><span class="line">            console.error(&quot;receive msg error&quot;,err);</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        ch.assertQueue(topic);</span><br><span class="line">        ch.consume(topic,(msg) =&gt; &#123;</span><br><span class="line">            if(!msg)&#123;</span><br><span class="line">                console.log(&#x27;receive nothing....&#x27;);</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line">            console.log(&#x27;receive msg....&#x27;,msg.content.toString());</span><br><span class="line">            // ch.ack(msg);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>消息展示</p></li></ul><p><img src="https://s1.ax1x.com/2020/03/19/8y16Ve.md.png"></p><h4 id="promise-方式"><a href="#promise-方式" class="headerlink" title="promise 方式"></a>promise 方式</h4><ul><li>publish <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> //1.建立连接</span><br><span class="line">const conn = await amqplib.connect(&quot;amqp://localhost:5672&quot;);</span><br><span class="line"></span><br><span class="line">//2. 建立通道</span><br><span class="line">const ch = await conn.createChannel();</span><br><span class="line"></span><br><span class="line">//3.不指定exchange，走默认的exchange</span><br><span class="line">//4.声明队列，</span><br><span class="line">await ch.assertQueue(queue);</span><br><span class="line"></span><br><span class="line">//5.发送信息到queue</span><br><span class="line">for(let i = 0;i &lt; 1000;i++)&#123;</span><br><span class="line">    const msg = `message:$&#123;i&#125; from publish `;</span><br><span class="line">    console.log(msg);</span><br><span class="line">    await ch.sendToQueue(queue,Buffer.from(msg));</span><br><span class="line">    // await ch.publish(&#x27;&#x27;,queue,Buffer.from(msg));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://s1.ax1x.com/2020/03/20/8cA5bn.png"></p><ul><li>consume<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">    //1.建立连接</span><br><span class="line">const conn = await amqplib.connect(&#x27;amqp://localhost:5672&#x27;);</span><br><span class="line"></span><br><span class="line">//2.创建通道</span><br><span class="line">const ch = await conn.createChannel();</span><br><span class="line"></span><br><span class="line">//3.声明channel</span><br><span class="line">await ch.assertQueue(queue);</span><br><span class="line"></span><br><span class="line">await ch.consume(queue,(msg) =&gt; &#123;</span><br><span class="line">    if(!msg)&#123;</span><br><span class="line">        console.error(&#x27;consumer msg err...&#x27;)</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    console.log(msg.content.toString());</span><br><span class="line">    //确认消费应答，queue删除消息</span><br><span class="line">    ch.ack(msg);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://s1.ax1x.com/2020/03/20/8cA75V.png"></p><h4 id="github-code"><a href="#github-code" class="headerlink" title="github code"></a>github code</h4><p>   代码<a href="https://github.com/chengzhangHu/node-rabbitMQ-demo.git">已上传</a>，欢迎star</p><h3 id="好文推荐"><a href="#好文推荐" class="headerlink" title="好文推荐"></a>好文推荐</h3><p> <a href="https://juejin.im/post/5dd8cd7ae51d4523501f7331">RabbitMQ</a> </p>]]></content>
      
      
      
        <tags>
            
            <tag> node </tag>
            
            <tag> rabbitmq </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Mysql8》-  mysql8 docs实战笔记</title>
      <link href="/2020/03/19/bigdata_for_analyze/%E3%80%8AMysql8%E3%80%8B-mysql8-docs%E5%AE%9E%E6%88%98%E7%AC%94%E8%AE%B0/"/>
      <url>/2020/03/19/bigdata_for_analyze/%E3%80%8AMysql8%E3%80%8B-mysql8-docs%E5%AE%9E%E6%88%98%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Kafaka》-  kafaka docs实战笔记</title>
      <link href="/2020/03/19/bigdata_for_analyze/%E3%80%8AKafaka%E3%80%8B-kafaka-docs%E5%AE%9E%E6%88%98%E7%AC%94%E8%AE%B0/"/>
      <url>/2020/03/19/bigdata_for_analyze/%E3%80%8AKafaka%E3%80%8B-kafaka-docs%E5%AE%9E%E6%88%98%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> kafaka </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Nginx》- nginx docs实战笔记</title>
      <link href="/2020/03/19/front_skills/nginx/%E3%80%8ANginx%E3%80%8B-nginx-docs%E5%AE%9E%E6%88%98%E7%AC%94%E8%AE%B0/"/>
      <url>/2020/03/19/front_skills/nginx/%E3%80%8ANginx%E3%80%8B-nginx-docs%E5%AE%9E%E6%88%98%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Redis》- redis精读笔记</title>
      <link href="/2020/03/19/bigdata_for_analyze/%E3%80%8ARedis%E3%80%8B-redis%E7%B2%BE%E8%AF%BB%E7%AC%94%E8%AE%B0/"/>
      <url>/2020/03/19/bigdata_for_analyze/%E3%80%8ARedis%E3%80%8B-redis%E7%B2%BE%E8%AF%BB%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《D3》- svg展示html元素方案</title>
      <link href="/2020/03/18/front_skills/d3/%E3%80%8AD3%E3%80%8B-%20svg%E5%B1%95%E7%A4%BAhtml%E5%85%83%E7%B4%A0%E6%96%B9%E6%A1%88/"/>
      <url>/2020/03/18/front_skills/d3/%E3%80%8AD3%E3%80%8B-%20svg%E5%B1%95%E7%A4%BAhtml%E5%85%83%E7%B4%A0%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<h3 id="svg预定义标签"><a href="#svg预定义标签" class="headerlink" title="svg预定义标签"></a>svg预定义标签</h3><h4 id="矩形"><a href="#矩形" class="headerlink" title="矩形 "></a>矩形 <rect></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot;&gt;</span><br><span class="line">  &lt;rect x=&quot;50&quot; y=&quot;20&quot; rx=&quot;20&quot; ry=&quot;20&quot; width=&quot;100&quot; height=&quot;100&quot; style=&quot;fill:red;stroke:black;stroke-width:5;opacity:0.5&quot; /&gt;</span><br><span class="line">&lt;/svg&gt;</span><br></pre></td></tr></table></figure><svg xmlns="http://www.w3.org/2000/svg" version="1.1">  <rect x="50" y="20" rx="20" ry="20" width="100" height="100" style="fill:red;stroke:black;stroke-width:5;opacity:0.5" /></svg><h4 id="圆形"><a href="#圆形" class="headerlink" title="圆形 "></a>圆形 <circle></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot;&gt;</span><br><span class="line">   &lt;circle cx=&quot;100&quot; cy=&quot;50&quot; r=&quot;40&quot; stroke=&quot;black&quot; stroke-width=&quot;2&quot; fill=&quot;red&quot; /&gt;</span><br><span class="line">&lt;/svg&gt; </span><br></pre></td></tr></table></figure><svg xmlns="http://www.w3.org/2000/svg" version="1.1">   <circle cx="100" cy="50" r="40" stroke="black" stroke-width="2" fill="red" /></svg> <h4 id="椭圆"><a href="#椭圆" class="headerlink" title="椭圆 "></a>椭圆 <ellipse></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot;&gt;</span><br><span class="line">  &lt;ellipse cx=&quot;240&quot; cy=&quot;100&quot; rx=&quot;220&quot; ry=&quot;30&quot; style=&quot;fill:purple&quot; /&gt;</span><br><span class="line">  &lt;ellipse cx=&quot;220&quot; cy=&quot;70&quot; rx=&quot;190&quot; ry=&quot;20&quot; style=&quot;fill:lime&quot; /&gt;</span><br><span class="line">  &lt;ellipse cx=&quot;210&quot; cy=&quot;45&quot; rx=&quot;170&quot; ry=&quot;15&quot; style=&quot;fill:yellow&quot; /&gt;</span><br><span class="line">&lt;/svg&gt;</span><br></pre></td></tr></table></figure><svg xmlns="http://www.w3.org/2000/svg" version="1.1">  <ellipse cx="240" cy="100" rx="220" ry="30" style="fill:purple" />  <ellipse cx="220" cy="70" rx="190" ry="20" style="fill:lime" />  <ellipse cx="210" cy="45" rx="170" ry="15" style="fill:yellow" /></svg><h4 id="线"><a href="#线" class="headerlink" title="线 "></a>线 <line></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot;&gt;</span><br><span class="line">  &lt;line x1=&quot;50&quot; y1=&quot;0&quot; x2=&quot;150&quot; y2=&quot;60&quot; style=&quot;stroke:rgb(255,0,0);stroke-width:2&quot; /&gt;</span><br><span class="line">&lt;/svg&gt;</span><br></pre></td></tr></table></figure><svg xmlns="http://www.w3.org/2000/svg" version="1.1">  <line x1="50" y1="0" x2="150" y2="60" style="stroke:rgb(255,0,0);stroke-width:2" /></svg><h4 id="折线"><a href="#折线" class="headerlink" title="折线 "></a>折线 <polyline></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot;&gt;</span><br><span class="line">  &lt;polyline points=&quot;0,40 40,40 40,80 80,80 80,120 120,120 120,160&quot; style=&quot;fill:white;stroke:red;stroke-width:4&quot; /&gt;</span><br><span class="line">&lt;/svg&gt;</span><br></pre></td></tr></table></figure><svg xmlns="http://www.w3.org/2000/svg" version="1.1">  <polyline points="0,40 40,40 40,80 80,80 80,120 120,120 120,160" style="fill:white;stroke:red;stroke-width:4" /></svg><h4 id="多边形"><a href="#多边形" class="headerlink" title="多边形 "></a>多边形 <polygon></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg  height=&quot;210&quot; width=&quot;500&quot;&gt;</span><br><span class="line">  &lt;polygon points=&quot;200,10 250,190 160,210&quot;</span><br><span class="line">  style=&quot;fill:lime;stroke:purple;stroke-width:1&quot;/&gt;</span><br><span class="line">&lt;/svg&gt;</span><br></pre></td></tr></table></figure><svg  height="210" width="500">  <polygon points="200,10 250,190 160,210"  style="fill:lime;stroke:purple;stroke-width:1"/></svg><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg height=&quot;250&quot; width=&quot;500&quot;&gt;</span><br><span class="line">  &lt;polygon points=&quot;220,10 300,210 170,250 123,234&quot; style=&quot;fill:lime;stroke:purple;stroke-width:1&quot; /&gt;</span><br><span class="line">&lt;/svg&gt;</span><br></pre></td></tr></table></figure><svg height="250" width="500">  <polygon points="220,10 300,210 170,250 123,234" style="fill:lime;stroke:purple;stroke-width:1" /></svg><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg height=&quot;210&quot; width=&quot;500&quot;&gt;</span><br><span class="line">  &lt;polygon points=&quot;100,10 40,198 190,78 10,78 160,198&quot;</span><br><span class="line">  style=&quot;fill:lime;stroke:purple;stroke-width:5;fill-rule:evenodd;&quot; /&gt;</span><br><span class="line">&lt;/svg&gt;</span><br></pre></td></tr></table></figure><svg height="210" width="500">  <polygon points="100,10 40,198 190,78 10,78 160,198"  style="fill:lime;stroke:purple;stroke-width:5;fill-rule:evenodd;" /></svg><h4 id="路径"><a href="#路径" class="headerlink" title="路径 "></a>路径 <path></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot;&gt;</span><br><span class="line">    &lt;path d=&quot;M150 0 L75 200 L225 200 Z&quot; /&gt;</span><br><span class="line">&lt;/svg&gt;</span><br></pre></td></tr></table></figure><svg xmlns="http://www.w3.org/2000/svg" version="1.1">    <path d="M150 0 L75 200 L225 200 Z" /></svg><h3 id="d3-如何展示icon标签"><a href="#d3-如何展示icon标签" class="headerlink" title="d3 如何展示icon标签"></a>d3 如何展示icon标签</h3><h4 id="svg-foreignObject"><a href="#svg-foreignObject" class="headerlink" title="svg foreignObject"></a>svg foreignObject</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">his.chart = d3.select(&quot;#app-div&quot;);//container in html file </span><br><span class="line">this.chart.selectAll(&quot;.font-icon&quot;)</span><br><span class="line">      .data(this.dataset)// data for graph plotting</span><br><span class="line">.enter().append(&#x27;foreignObject&#x27;)</span><br><span class="line">.append(&#x27;xhtml:span&#x27;) </span><br><span class="line">.attr(&#x27;class&#x27;, &#x27;font-icon)</span><br><span class="line">.style(&quot;background-color&quot;, &quot;#EA700D&quot;)</span><br><span class="line">.style(&quot;border-radius&quot;, &quot;5px&quot;)</span><br><span class="line">.style(&quot;padding&quot;, &quot;2px&quot;)</span><br><span class="line">.style(&quot;color&quot;, &quot;#ffffff&quot;)</span><br><span class="line">.style(&quot;font-size&quot;, &quot;20px&quot;)</span><br><span class="line">.style(&quot;width&quot;, &quot;20px&quot;)</span><br><span class="line">.style(&quot;height&quot;, &quot;21px&quot;)</span><br><span class="line">.style(&quot;display&quot;, &quot;block&quot;)</span><br><span class="line">.attr(&quot;width&quot;, 30)</span><br><span class="line">.attr(&quot;height&quot;, 30)  </span><br></pre></td></tr></table></figure><ul><li>foreignObject 不可缺</li><li>xhtml:<tag> 不可缺，不然显示不出来</li><li>style - width| height ,调整显示的</li><li>存在兼容问题，firefox,chrome 显示OK，safari显示异常<br><img src="https://s1.ax1x.com/2020/03/18/8wFYCt.md.png"></li></ul><h4 id="path形式-–-不存在兼容问题"><a href="#path形式-–-不存在兼容问题" class="headerlink" title="path形式 – 不存在兼容问题"></a>path形式 – 不存在兼容问题</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">this.chart.selectAll(&quot;.icon&quot;)</span><br><span class="line">  .data(this.dataset)// data for graph plotting</span><br><span class="line">.enter().append(&quot;svg:path&quot;).attr(&quot;d&quot;, &quot;M150 0 L75 200 L225 200 Z&quot;)</span><br><span class="line">.attr(&quot;width&quot;, 16)</span><br><span class="line">.attr(&quot;height&quot;, 16)</span><br><span class="line">.attr(&quot;class&quot;, &quot;dot&quot;)</span><br><span class="line">.style(&quot;stroke&quot;, &quot;red&quot;)</span><br></pre></td></tr></table></figure><h4 id="url形式"><a href="#url形式" class="headerlink" title="url形式"></a>url形式</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">this.chart.selectAll(&quot;.icon&quot;)</span><br><span class="line">  .data(this.dataset)// data for graph plotting</span><br><span class="line">.enter().append(&quot;image&quot;).attr(&quot;xlink:href&quot;, &quot;https://github.com/favicon.ico&quot;)</span><br><span class="line">.attr(&quot;width&quot;, 16)</span><br><span class="line">.attr(&quot;height&quot;, 16)</span><br><span class="line">.attr(&quot;class&quot;, &quot;dot&quot;)</span><br><span class="line">.style(&quot;stroke&quot;, &quot;red&quot;)</span><br></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p> <a href="https://www.runoob.com/svg/svg-ellipse.html">svg菜鸟教程</a><br> <a href="https://www.netwoven.com/2018/01/16/different-ways-adding-custom-svg-images-d3-line-charts-angular-4/">d3 svg</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> svg </tag>
            
            <tag> html </tag>
            
            <tag> d3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Docker》- 容器dns修改</title>
      <link href="/2020/03/17/devops_skills/docker/%E3%80%8ADocker%E3%80%8B-%E5%AE%B9%E5%99%A8dns%E4%BF%AE%E6%94%B9/"/>
      <url>/2020/03/17/devops_skills/docker/%E3%80%8ADocker%E3%80%8B-%E5%AE%B9%E5%99%A8dns%E4%BF%AE%E6%94%B9/</url>
      
        <content type="html"><![CDATA[<h3 id="vi-支持"><a href="#vi-支持" class="headerlink" title="vi 支持"></a>vi 支持</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ apt-get update</span><br><span class="line">$ apt-get install vim</span><br></pre></td></tr></table></figure><h3 id="mysql容器dns配置"><a href="#mysql容器dns配置" class="headerlink" title="mysql容器dns配置"></a>mysql容器dns配置</h3><h4 id="shell-hosts修改"><a href="#shell-hosts修改" class="headerlink" title="shell hosts修改"></a>shell hosts修改</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vi /etc/hosts</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2020/03/17/8tLHS0.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;172.17.0.2 mysqldb&quot;  &gt;&gt; /etc/hosts</span><br></pre></td></tr></table></figure><h4 id="h方式"><a href="#h方式" class="headerlink" title="-h方式"></a>-h方式</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># -h HOSTNAME或--hostname = HOSTNAME：设置容器的主机名，它会被写到容器内部的/ etc / hostname和/ etc / hosts。</span><br><span class="line">  docker run -it -p 3306:3306 --name mysqldb -h=mysqldb  mysql</span><br></pre></td></tr></table></figure><h3 id="web容器-启动时候修改"><a href="#web容器-启动时候修改" class="headerlink" title="web容器 启动时候修改"></a>web容器 启动时候修改</h3><h4 id="dockerfile"><a href="#dockerfile" class="headerlink" title="dockerfile"></a>dockerfile</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># node:10-alpine体积，但是不支持bin/bash功能</span><br><span class="line">#ROM node:10-alpine</span><br><span class="line">FROM node:10-slim # bash</span><br><span class="line">RUN mkdir -p /home/node/app/node_modules &amp;&amp; chown -R node:node /home/node/app</span><br><span class="line">WORKDIR /home/node/app</span><br><span class="line">COPY package*.json ./</span><br><span class="line">USER node</span><br><span class="line">RUN yarn </span><br><span class="line">COPY --chown=node:node . .</span><br><span class="line">EXPOSE 3009</span><br><span class="line"></span><br><span class="line">CMD [ &quot;npm&quot;,&quot;run&quot;, &quot;start&quot; ]</span><br></pre></td></tr></table></figure><h4 id="–add-host"><a href="#–add-host" class="headerlink" title="–add-host"></a>–add-host</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --name shenm -p 3009:3009 --add-host=mysqldb:172.17.0.2 cheonghu/shenm </span><br></pre></td></tr></table></figure><h4 id="dns查找"><a href="#dns查找" class="headerlink" title="dns查找"></a>dns查找</h4><ul><li>修改启动容器的dns查询<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">  # --dns = IP_ADDRESS：添加DNS服务器到容器的/etc/resolv.conf中，让容器使用该服务器来解析所有不在/etc/hosts中的主机名。</span><br><span class="line">docker run -d --dns=172.17.0.2 --name=shenm -p 3009:3009 --rm cheonghu/shenm</span><br></pre></td></tr></table></figure></li></ul><h4 id="构造镜像时候写入"><a href="#构造镜像时候写入" class="headerlink" title="构造镜像时候写入"></a>构造镜像时候写入</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">FROM docker.io/alpine</span><br><span class="line"></span><br><span class="line">RUN echo &quot;#aliyun&quot; &gt; /etc/apk/repositories</span><br><span class="line">RUN echo &quot;https://mirrors.aliyun.com/alpine/v3.6/main/&quot; &gt;&gt; /etc/apk/repositories</span><br><span class="line">RUN echo &quot;https://mirrors.aliyun.com/alpine/v3.6/community/&quot; &gt;&gt; /etc/apk/repositories</span><br><span class="line">RUN apk update</span><br><span class="line">#自己安装的软件,不需要可以注视掉</span><br><span class="line">RUN apk add openssh-client rsync</span><br><span class="line"></span><br><span class="line">RUN mkdir /data</span><br><span class="line">COPY run.sh /data/</span><br><span class="line">RUN chmod +x /data/run.sh</span><br><span class="line"> </span><br><span class="line">ENTRYPOINT /bin/sh -c /data/run.sh</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 向hosts文件追加内容</span><br><span class="line">#cat /data/myhosts &gt;&gt; /etc/hosts</span><br><span class="line">echo &quot;172.17.0.2 mysqldb&quot;  &gt;&gt; /etc/hosts</span><br><span class="line"> </span><br><span class="line"># 其他命令</span><br><span class="line"> </span><br><span class="line"># 保留终端，防止容器自动退出</span><br><span class="line">/bin/sh</span><br></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>  <a href="https://cloud.tencent.com/developer/article/1175087">Docker修改hosts</a><br> <a href="https://www.cnblogs.com/woshimrf/p/node-docker-image.html">node镜像选择</a><br> <a href="https://nodejs.org/zh-cn/docs/guides/nodejs-docker-webapp/">node镜像构建</a><br> <a href="https://www.digitalocean.com/community/tutorials/how-to-build-a-node-js-application-with-docker">node用户下node镜像</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> koa </tag>
            
            <tag> 前端 </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Docker》-koa web应用升级为docker</title>
      <link href="/2020/03/17/devops_skills/docker/%E3%80%8ADocker%E3%80%8B-koa-web%E5%BA%94%E7%94%A8%E5%8D%87%E7%BA%A7%E4%B8%BAdocker/"/>
      <url>/2020/03/17/devops_skills/docker/%E3%80%8ADocker%E3%80%8B-koa-web%E5%BA%94%E7%94%A8%E5%8D%87%E7%BA%A7%E4%B8%BAdocker/</url>
      
        <content type="html"><![CDATA[<h3 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h3><h4 id="mysql-ip获取"><a href="#mysql-ip获取" class="headerlink" title="mysql ip获取"></a>mysql ip获取</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect mysqldb</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2020/03/17/8tyk59.png"></p><h3 id="koa"><a href="#koa" class="headerlink" title="koa"></a>koa</h3><h4 id="修改db-配置"><a href="#修改db-配置" class="headerlink" title="修改db 配置"></a>修改db 配置</h4><p><img src="https://s1.ax1x.com/2020/03/17/8t6Olq.png"></p><h4 id="DockerFile"><a href="#DockerFile" class="headerlink" title="DockerFile"></a>DockerFile</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">FROM node:10-alpine</span><br><span class="line">RUN mkdir -p /home/node/app/node_modules &amp;&amp; chown -R node:node /home/node/app</span><br><span class="line">WORKDIR /home/node/app</span><br><span class="line">COPY package*.json ./</span><br><span class="line">USER node</span><br><span class="line">RUN yarn </span><br><span class="line">COPY --chown=node:node . .</span><br><span class="line">EXPOSE 3009</span><br><span class="line"></span><br><span class="line">CMD [ &quot;npm&quot;, &quot;start&quot; ]</span><br></pre></td></tr></table></figure><ul><li>需要注意点的是，这里不能使用pm2,后台管理，</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;start&quot;: &quot;./node_modules/.bin/nodemon bin/www&quot;,</span><br><span class="line">    &quot;dev&quot;: &quot;./node_modules/.bin/nodemon bin/www&quot;,</span><br><span class="line">    &quot;prd&quot;: &quot;pm2 start bin/www&quot;,</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><h4 id="dockerignore"><a href="#dockerignore" class="headerlink" title=".dockerignore"></a>.dockerignore</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">node_modules</span><br><span class="line">npm-debug.log</span><br><span class="line">Dockerfile</span><br><span class="line">.dockerignore</span><br><span class="line">yarn-error.log</span><br><span class="line">package-lock.json</span><br><span class="line">yarn.lock</span><br></pre></td></tr></table></figure><h4 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t cheonghu/demo .</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2020/03/17/8t63eU.png"></p><h4 id="启动镜像"><a href="#启动镜像" class="headerlink" title="启动镜像"></a>启动镜像</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 3009:3009 --name demo cheonghu/demo</span><br></pre></td></tr></table></figure><h3 id="dns坑"><a href="#dns坑" class="headerlink" title="dns坑"></a>dns坑</h3><h4 id="使用dns"><a href="#使用dns" class="headerlink" title="使用dns"></a>使用dns</h4><ul><li><p>修改db</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 尤其要注意镜像是否支持shell</span><br><span class="line">    database: &#123;</span><br><span class="line">       DATABASE: &#x27;demo&#x27;,</span><br><span class="line">       USERNAME: &#x27;root&#x27;,</span><br><span class="line">       PASSWORD: &#x27;123456&#x27;,</span><br><span class="line">       PORT: &#x27;3306&#x27;,</span><br><span class="line">       HOST: &#x27;mysqldb&#x27;</span><br><span class="line">   &#125;,</span><br></pre></td></tr></table></figure></li><li><p>修改启动容器的dns查询</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">  # --dns = IP_ADDRESS：添加DNS服务器到容器的/etc/resolv.conf中，让容器使用该服务器来解析所有不在/etc/hosts中的主机名。</span><br><span class="line">docker run -d -p 3009:3009 --add-host=mysqldb:172.17.0.2 --name demo cheonghu/demo </span><br></pre></td></tr></table></figure></li><li><p>容器启动时候指定host</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># -h HOSTNAME或--hostname = HOSTNAME：设置容器的主机名，它会被写到容器内部的/ etc / hostname和/ etc / hosts。</span><br><span class="line">  docker run -it -p 3306:3306 --name mysqldb -h=mysqldb  mysql</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> koa </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Docker》- docker 学习笔记</title>
      <link href="/2020/03/16/devops_skills/docker/%E3%80%8ADocker%E3%80%8B-docker%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2020/03/16/devops_skills/docker/%E3%80%8ADocker%E3%80%8B-docker%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="docker-network"><a href="#docker-network" class="headerlink" title="docker network"></a>docker network</h3><h4 id="bridge"><a href="#bridge" class="headerlink" title="bridge"></a>bridge</h4> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 默认的启动方式，走bridge模式network</span><br><span class="line">docker run nginx </span><br></pre></td></tr></table></figure><h4 id="none"><a href="#none" class="headerlink" title="none"></a>none</h4> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dockr run nginx --net=none</span><br></pre></td></tr></table></figure><h4 id="host"><a href="#host" class="headerlink" title="host"></a>host</h4> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run nginx --net=host</span><br></pre></td></tr></table></figure><h4 id="network查看"><a href="#network查看" class="headerlink" title="network查看"></a>network查看</h4> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@VM_0_5_centos ~]<span class="comment"># docker network ls </span></span><br><span class="line">   NETWORK ID          NAME                DRIVER              SCOPE</span><br><span class="line">   f979073f4a74        bridge              bridge              <span class="built_in">local</span></span><br><span class="line">   46f8b93b684e        host                host                <span class="built_in">local</span></span><br><span class="line">   2a496028cdb1        none                null                <span class="built_in">local</span></span><br></pre></td></tr></table></figure><p> <img src="https://s1.ax1x.com/2020/03/17/8tyFUJ.png"></p><h4 id="查看mysql-container-ip"><a href="#查看mysql-container-ip" class="headerlink" title="查看mysql container ip"></a>查看mysql container ip</h4><p>  <img src="https://s1.ax1x.com/2020/03/17/8tyk59.png"><br>  <img src="https://s1.ax1x.com/2020/03/17/8tyha4.png"></p><ul><li>此时，我们配置mysql地址，就不能写localhost。在bridge模式下，需要修改  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">172.17.0.2</span><br></pre></td></tr></table></figure></li></ul><h3 id="volum"><a href="#volum" class="headerlink" title="volum"></a>volum</h3><h4 id="docker-create"><a href="#docker-create" class="headerlink" title="docker create"></a>docker create</h4> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker volume create data_volume</span><br><span class="line">$ docker run -v data_volume:/var/lib/mysql -P --name mysqldb mysql</span><br></pre></td></tr></table></figure><h4 id="自定义路径"><a href="#自定义路径" class="headerlink" title="自定义路径"></a>自定义路径</h4> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -v /data/mysql:/var/lib/mysql -P --name mysqldb mysql </span><br></pre></td></tr></table></figure><h4 id="命令参数"><a href="#命令参数" class="headerlink" title="命令参数"></a>命令参数</h4> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run --mount type=bind,souce=/data/mysql,target=/var/lib/mysql --name mysqldb mysql </span><br></pre></td></tr></table></figure><h3 id="compose"><a href="#compose" class="headerlink" title="compose"></a>compose</h3><h4 id="解决什么问题"><a href="#解决什么问题" class="headerlink" title="解决什么问题"></a>解决什么问题</h4><p> 解决大规模容器启动、服务依赖问题</p><h4 id="如何编写"><a href="#如何编写" class="headerlink" title="如何编写"></a>如何编写</h4> <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Docker》- docker v19版本配置镜像加速</title>
      <link href="/2020/03/11/devops_skills/docker/%E3%80%8ADocker%E3%80%8B-docker%20v19%E7%89%88%E6%9C%AC%E9%85%8D%E7%BD%AE%E9%95%9C%E5%83%8F%E5%8A%A0%E9%80%9F/"/>
      <url>/2020/03/11/devops_skills/docker/%E3%80%8ADocker%E3%80%8B-docker%20v19%E7%89%88%E6%9C%AC%E9%85%8D%E7%BD%AE%E9%95%9C%E5%83%8F%E5%8A%A0%E9%80%9F/</url>
      
        <content type="html"><![CDATA[<h3 id="docker-v19配置镜像加速"><a href="#docker-v19配置镜像加速" class="headerlink" title="docker v19配置镜像加速"></a>docker v19配置镜像加速</h3><p><img src="https://s1.ax1x.com/2020/03/11/8Ezqpt.md.png"></p><h4 id="dameon-josn"><a href="#dameon-josn" class="headerlink" title="dameon.josn"></a>dameon.josn</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># ~/.docker/daemon.json</span><br><span class="line">&#123;</span><br><span class="line">  &quot;experimental&quot; : true,</span><br><span class="line">  &quot;registry-mirrors&quot; : [</span><br><span class="line">    &quot;https://f62945bb.mirror.aliyuncs.com&quot;,</span><br><span class="line">    &quot;https://docker.mirrors.ustc.edu.cn&quot;,</span><br><span class="line">    &quot;http://f1361db2.m.daocloud.io&quot;,</span><br><span class="line">    &quot;https://registry.docker-cn.com&quot;,</span><br><span class="line">    &quot;http://hub-mirror.c.163.com&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;debug&quot; : true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="docker-info-验证"><a href="#docker-info-验证" class="headerlink" title="docker info 验证"></a>docker info 验证</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker info </span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2020/03/11/8EzKQf.png"></p><h4 id="config-json"><a href="#config-json" class="headerlink" title="config.json"></a>config.json</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># ~/.docker/config.json:</span><br><span class="line">&#123;</span><br><span class="line">  &quot;auths&quot; : &#123;</span><br><span class="line">    &quot;https://index.docker.io/v1/&quot; : &#123;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;stackOrchestrator&quot; : &quot;swarm&quot;,</span><br><span class="line">  &quot;experimental&quot; : &quot;enabled&quot;,</span><br><span class="line">  &quot;credsStore&quot; : &quot;desktop&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2020/03/11/8EzuSP.md.png"></p><h4 id="拉取镜像效果"><a href="#拉取镜像效果" class="headerlink" title="拉取镜像效果"></a>拉取镜像效果</h4><p><img src="https://s1.ax1x.com/2020/03/11/8VS3jK.md.png"></p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p> <a href="https://github.com/docker/for-mac/issues/2146">docker register</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Docker》- docker-compose升级express+mysql</title>
      <link href="/2020/03/11/devops_skills/docker/%E3%80%8ADocker%E3%80%8B-docker-compose%E5%8D%87%E7%BA%A7express-mysql/"/>
      <url>/2020/03/11/devops_skills/docker/%E3%80%8ADocker%E3%80%8B-docker-compose%E5%8D%87%E7%BA%A7express-mysql/</url>
      
        <content type="html"><![CDATA[<h4 id="docker-compose"><a href="#docker-compose" class="headerlink" title="docker compose"></a>docker compose</h4>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> docker compose </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Docker》- redis、nginx升级为docker</title>
      <link href="/2020/03/10/devops_skills/docker/%E3%80%8ADocker%E3%80%8B-redis%E3%80%81nginx%E5%8D%87%E7%BA%A7%E4%B8%BAdocker/"/>
      <url>/2020/03/10/devops_skills/docker/%E3%80%8ADocker%E3%80%8B-redis%E3%80%81nginx%E5%8D%87%E7%BA%A7%E4%B8%BAdocker/</url>
      
        <content type="html"><![CDATA[<h3 id="redis-升级"><a href="#redis-升级" class="headerlink" title="redis 升级"></a>redis 升级</h3><h4 id="redis-镜像"><a href="#redis-镜像" class="headerlink" title="redis 镜像"></a>redis 镜像</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker pull redis</span><br></pre></td></tr></table></figure><h4 id="带验证密码"><a href="#带验证密码" class="headerlink" title="带验证密码"></a>带验证密码</h4> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name myredis -p 6379:6379 redis --requirepass &quot;mypassword&quot;</span><br></pre></td></tr></table></figure><h3 id="nginx升级"><a href="#nginx升级" class="headerlink" title="nginx升级"></a>nginx升级</h3><h4 id="nginx镜像"><a href="#nginx镜像" class="headerlink" title="nginx镜像"></a>nginx镜像</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker pull nginx </span><br></pre></td></tr></table></figure><h4 id="nginx-指定静态资源"><a href="#nginx-指定静态资源" class="headerlink" title="nginx 指定静态资源"></a>nginx 指定静态资源</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run --name mynginx -v /data/html:/usr/share/nginx/html:ro -d nginx</span><br></pre></td></tr></table></figure><h4 id="指定端口"><a href="#指定端口" class="headerlink" title="指定端口"></a>指定端口</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run --name mynginx -d -p 8080:80 nginx </span><br></pre></td></tr></table></figure><h4 id="nginx-指定配置文件"><a href="#nginx-指定配置文件" class="headerlink" title="nginx 指定配置文件"></a>nginx 指定配置文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run --name mynginx -v /data/nginx/nginx.conf:/etc/nginx/nginx.conf:ro  -v /data/resource:/handy/static/:ro -d nginx</span><br></pre></td></tr></table></figure><h4 id="最终的code"><a href="#最终的code" class="headerlink" title="最终的code"></a>最终的code</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -p 8080:80 --name mynginx -v /data/html:/handy/html:ro -v /data/nginx:/etc/nginx:ro  -v /data/resource:/handy/static/:ro -d nginx</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> redis </tag>
            
            <tag> docker </tag>
            
            <tag> nginx </tag>
            
            <tag> 安装 </tag>
            
            <tag> 配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Docker》- 从mysqlServer升级到docker mysql</title>
      <link href="/2020/03/09/devops_skills/docker/%E3%80%8ADocker%E3%80%8B-%E4%BB%8EmysqlServer%E5%8D%87%E7%BA%A7%E5%88%B0docker%20mysql/"/>
      <url>/2020/03/09/devops_skills/docker/%E3%80%8ADocker%E3%80%8B-%E4%BB%8EmysqlServer%E5%8D%87%E7%BA%A7%E5%88%B0docker%20mysql/</url>
      
        <content type="html"><![CDATA[<h4 id="查看mysql-数据库数据文件"><a href="#查看mysql-数据库数据文件" class="headerlink" title="查看mysql 数据库数据文件"></a>查看mysql 数据库数据文件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># mysql </span><br><span class="line"> &gt; show variables like &#x27;%dir%&#x27;</span><br></pre></td></tr></table></figure><p>   <img src="https://s2.ax1x.com/2020/03/09/8ppHTf.png" width="400" height="300"></img></p><h4 id="切换目录，配置文件上传git"><a href="#切换目录，配置文件上传git" class="headerlink" title="切换目录，配置文件上传git"></a>切换目录，配置文件上传git</h4><ul><li>git ssh生成   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -b 4096 -C &quot;your_email@example.com&quot;</span><br></pre></td></tr></table></figure></li><li>ssh key   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cat /root/.ssh/id_rsa.pub </span><br></pre></td></tr></table></figure></li></ul><h4 id="docker-mysql-镜像"><a href="#docker-mysql-镜像" class="headerlink" title="docker mysql 镜像"></a>docker mysql 镜像</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker pull mysql</span><br></pre></td></tr></table></figure><h4 id="docker-启动"><a href="#docker-启动" class="headerlink" title="docker 启动"></a>docker 启动</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ systemctl start docker</span><br></pre></td></tr></table></figure><h4 id="docker-mysql-启动"><a href="#docker-mysql-启动" class="headerlink" title="docker mysql 启动"></a>docker mysql 启动</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -p 3306:3306 --name dbmysql -e MYSQL_ROOT_PASSWORD=&lt;my-secret-pw&gt; -d mysql</span><br><span class="line"># 譬如</span><br><span class="line">$ docker run -p 3306:3306  -v /var/lib/mysql:/var/lib/mysql --name dbmysql -e MYSQL_ROOT_PASSWORD=123456 -d mysql</span><br><span class="line"> --default-authentication-plugin=mysql_native_password</span><br></pre></td></tr></table></figure><h4 id="指定配置文件"><a href="#指定配置文件" class="headerlink" title="指定配置文件"></a>指定配置文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -p 3306:3306 -v &lt;/my/custom&gt;:/etc/mysql/conf.d --name \</span><br><span class="line">   dbmysql -e MYSQL_ROOT_PASSWORD=&lt;my-secret-pw&gt; -d mysql</span><br></pre></td></tr></table></figure><h4 id="指定数据文件"><a href="#指定数据文件" class="headerlink" title="指定数据文件"></a>指定数据文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -p 3306:3306  -v /my/own/datadir:/var/lib/mysql --name dbmysql \</span><br><span class="line">   -e MYSQL_ROOT_PASSWORD=&lt;my-secret-pw&gt; -d mysql</span><br></pre></td></tr></table></figure><h4 id="shell"><a href="#shell" class="headerlink" title="shell"></a>shell</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker <span class="built_in">exec</span> -it dbmysql bash</span><br></pre></td></tr></table></figure><h4 id="shell-问题"><a href="#shell-问题" class="headerlink" title="shell - 问题"></a>shell - 问题</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Can<span class="string">&#x27;t connect to local MySQL server through socket &#x27;</span>/var/run/mysqld/mysqld.sock<span class="string">&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="navicat-连接mysql-v8"><a href="#navicat-连接mysql-v8" class="headerlink" title="navicat 连接mysql v8"></a>navicat 连接mysql v8</h4><p><img src="https://s2.ax1x.com/2020/03/09/89B8Ve.md.png"></p><ul><li>修改访问host<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -d -p 3307:3306  --name dbmysql -e MYSQL_ROOT_PASSWORD=123456  mysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># mysql </span></span><br><span class="line">&gt; alter user <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> identified with mysql_native_password by <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>刷新<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># mysql </span><br><span class="line"> &gt; flush privileges；</span><br></pre></td></tr></table></figure></li><li>查看 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># mysql</span><br><span class="line">&gt; select Host,User from mysql.user;</span><br></pre></td></tr></table></figure><img src="https://s2.ax1x.com/2020/03/09/89BQKK.md.png"><br><img src="https://s2.ax1x.com/2020/03/09/8CPVwn.md.png"></li><li>连接 - ssh通道<br> <img src="https://s2.ax1x.com/2020/03/09/8CPZoq.png" width="400" height="300"></img></li></ul><h4 id="mysql升级"><a href="#mysql升级" class="headerlink" title="mysql升级"></a>mysql升级</h4><ul><li><p>mysqlserver数据内容导出</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mysqldump  --databases &lt;dbname1&gt; &lt;dbname2&gt;  -uroot -p123456 &gt; /var/lib/dbmysql/dump.sql</span><br></pre></td></tr></table></figure></li><li><p>进入容器</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker <span class="built_in">exec</span> -it dbmysql bash </span><br><span class="line">$ mysql -uroot -p </span><br></pre></td></tr></table></figure></li><li><p>导入sql dump文件</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker exec -i dbmysql sh -c &#x27;exec mysql -uroot -p&quot;$MYSQL_ROOT_PASSWORD&quot;&#x27; &lt; /var/lib/dbmysql/dump.sql</span><br><span class="line">#  此处会给出警告，</span><br><span class="line"># mysqldump: [Warning] Using a password on the command line interface can be insecure</span><br></pre></td></tr></table></figure><p> <img src="https://s2.ax1x.com/2020/03/10/8CBJYj.png"></p></li><li><p>查看数据库<br>此处各不相同，自行测试</p></li><li><p>基于上述端口为3307，修改端口为3306</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /var/lib/docker/container</span><br></pre></td></tr></table></figure><p> <img src="https://s2.ax1x.com/2020/03/10/8CBlm8.png"></p></li><li><p>修改对应的文件</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ vi hostconfig.json</span><br><span class="line">$ vi config.v2.json</span><br></pre></td></tr></table></figure><p>  <img src="https://s2.ax1x.com/2020/03/10/8CBK6P.png"></p></li><li><p>重新启动docker</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 切记修改端口前，一定要stop docker，否则修改无效。</span><br><span class="line"># systemctl stop docker </span><br><span class="line">$ systemctl start docker</span><br></pre></td></tr></table></figure></li></ul><h4 id="卸载之前的mysql"><a href="#卸载之前的mysql" class="headerlink" title="卸载之前的mysql"></a>卸载之前的mysql</h4><ul><li><p>搜索已有mysql包</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ rpm -qa|grep -i mysql</span><br><span class="line"> mysql-community-server-5.7.20-1.el7.x86_64</span><br><span class="line"> mysql-community-libs-5.7.20-1.el7.x86_64</span><br><span class="line"> mysql-community-libs-compat-5.7.20-1.el7.x86_64</span><br><span class="line"> mysql57-community-release-el7-7.noarch</span><br><span class="line"> mysql-community-client-5.7.20-1.el7.x86_64</span><br></pre></td></tr></table></figure></li><li><p>删除包</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rpm -ev mysql-community-common-5.7.20-1.el7.x86_64</span><br></pre></td></tr></table></figure></li><li><p>搜索配置</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@VM_0_5_centos dbmysql]# find / -name mysql</span><br><span class="line"> /usr/share/mysql</span><br><span class="line"> /etc/selinux/targeted/active/modules/100/mysql</span><br><span class="line"> /etc/selinux/targeted/tmp/modules/100/mysql</span><br><span class="line"> /etc/mysql</span><br></pre></td></tr></table></figure></li><li><p>删除配置文件</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf /etc/my.cnf</span><br></pre></td></tr></table></figure></li></ul><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p> <a href="https://hub.docker.com/_/mysql">docker-mysql</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《自动部署》- 记一次blog自动部署失败</title>
      <link href="/2020/03/08/devops_skills/deploy/%E3%80%8A%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E3%80%8B-%E8%AE%B0%E4%B8%80%E6%AC%A1blog%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E5%A4%B1%E8%B4%A5/"/>
      <url>/2020/03/08/devops_skills/deploy/%E3%80%8A%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E3%80%8B-%E8%AE%B0%E4%B8%80%E6%AC%A1blog%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E5%A4%B1%E8%B4%A5/</url>
      
        <content type="html"><![CDATA[<h3 id="自动部署方案"><a href="#自动部署方案" class="headerlink" title="自动部署方案"></a>自动部署方案</h3><h4 id="GitHub-action"><a href="#GitHub-action" class="headerlink" title="GitHub action"></a>GitHub action</h4><ul><li><p>action 拉取失败<br><img src="https://s2.ax1x.com/2020/03/08/3xFjcd.png"></p></li><li><p>原因：<br>利用github action构建，构建的public发布到xxx.github.io路径。拉取部署action失败，导致自动部署失败！</p></li><li><p>解决方案<br>fork action到自己repository下，自己修改构建sh脚本。</p><h4 id="webhook"><a href="#webhook" class="headerlink" title="webhook"></a>webhook</h4><p>  待添加~</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> GitHub Action </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Docker》- linux下docker环境mongo安装和配置</title>
      <link href="/2020/03/04/devops_skills/docker/%E3%80%8ADocker%E3%80%8B-linux%E4%B8%8Bdocker%E7%8E%AF%E5%A2%83mongo%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/"/>
      <url>/2020/03/04/devops_skills/docker/%E3%80%8ADocker%E3%80%8B-linux%E4%B8%8Bdocker%E7%8E%AF%E5%A2%83mongo%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h3 id="mongo-安装"><a href="#mongo-安装" class="headerlink" title="mongo 安装"></a>mongo 安装</h3><h4 id="docker-mongo镜像"><a href="#docker-mongo镜像" class="headerlink" title="docker mongo镜像"></a>docker mongo镜像</h4> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker pull mongo</span><br></pre></td></tr></table></figure><p>  <img src="https://s2.ax1x.com/2020/03/08/3x8nbT.md.png"></p><h4 id="mongo运行"><a href="#mongo运行" class="headerlink" title="mongo运行"></a>mongo运行</h4> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> # 停留在当前进程</span><br><span class="line"> docker run -p 27017:27017 --name mdb mongo  </span><br><span class="line"></span><br><span class="line"># 守护进程形式后端运行</span><br><span class="line">docker run -p 27017:27017 --name mdb -d mongo</span><br></pre></td></tr></table></figure><p> <img src="https://s2.ax1x.com/2020/03/08/3x8XoF.md.png"></p><h4 id="exec-mongo-shell"><a href="#exec-mongo-shell" class="headerlink" title="exec mongo shell"></a>exec mongo shell</h4><ul><li><p>docker exec -it mdb bash<br>  <img src="https://s2.ax1x.com/2020/03/08/3xGYWj.md.png"></p></li><li><p>docker exec -it mdb mongo</p></li></ul><h3 id="mongodb-命令"><a href="#mongodb-命令" class="headerlink" title="mongodb 命令"></a>mongodb 命令</h3><h4 id="查看dbs"><a href="#查看dbs" class="headerlink" title="查看dbs"></a>查看dbs</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; show dbs</span><br><span class="line">admin   0.000GB</span><br><span class="line">config  0.000GB</span><br><span class="line"><span class="built_in">local</span>   0.000GB</span><br><span class="line">&gt; show databases</span><br><span class="line">admin   0.000GB</span><br><span class="line">config  0.000GB</span><br><span class="line"><span class="built_in">local</span>   0.000GB</span><br></pre></td></tr></table></figure><h4 id="切换数据库、保存数据"><a href="#切换数据库、保存数据" class="headerlink" title="切换数据库、保存数据"></a>切换数据库、保存数据</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&gt; show dbs</span><br><span class="line">admin   0.000GB</span><br><span class="line">config  0.000GB</span><br><span class="line"><span class="built_in">local</span>   0.000GB</span><br><span class="line">// 不代表创建db</span><br><span class="line">&gt; use mall </span><br><span class="line">switched to db mall</span><br><span class="line">&gt; show dbs</span><br><span class="line">admin   0.000GB</span><br><span class="line">config  0.000GB</span><br><span class="line"><span class="built_in">local</span>   0.000GB</span><br><span class="line">&gt; mall.user.save(&#123;name:<span class="string">&#x27;zhangsan&#x27;</span>,age:<span class="string">&#x27;&#x27;</span>,telno:<span class="string">&#x27;12832233233&#x27;</span>&#125;) </span><br><span class="line">2020-03-08T07:27:07.940+0000 E  QUERY    [js] uncaught exception: ReferenceError: mall is not defined :</span><br><span class="line">@(shell):1:1</span><br><span class="line">&gt; db.user.save(&#123;name:<span class="string">&#x27;zhangsan&#x27;</span>,age:<span class="string">&#x27;&#x27;</span>,telno:<span class="string">&#x27;12832233233&#x27;</span>&#125;)</span><br><span class="line">WriteResult(&#123; <span class="string">&quot;nInserted&quot;</span> : 1 &#125;)</span><br><span class="line">// 保存数据成功，数据库肯定创建</span><br><span class="line">&gt; show dbs </span><br><span class="line">admin   0.000GB</span><br><span class="line">config  0.000GB</span><br><span class="line"><span class="built_in">local</span>   0.000GB</span><br><span class="line">mall    0.000GB</span><br><span class="line">&gt; db</span><br><span class="line">mall</span><br><span class="line">&gt; db.user.find();</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5e649e8e27c905567615607d&quot;</span>), <span class="string">&quot;name&quot;</span> : <span class="string">&quot;zhangsan&quot;</span>, <span class="string">&quot;age&quot;</span> : <span class="string">&quot;&quot;</span>, <span class="string">&quot;telno&quot;</span> : <span class="string">&quot;12832233233&quot;</span> &#125;</span><br><span class="line">&gt; db.user.find(&#123;name:<span class="string">&#x27;zhangsan&#x27;</span>&#125;);</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5e649e8e27c905567615607d&quot;</span>), <span class="string">&quot;name&quot;</span> : <span class="string">&quot;zhangsan&quot;</span>, <span class="string">&quot;age&quot;</span> : <span class="string">&quot;&quot;</span>, <span class="string">&quot;telno&quot;</span> : <span class="string">&quot;12832233233&quot;</span> &#125;</span><br><span class="line">&gt; </span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2020/03/08/3xtKyR.md.png"></p><h3 id="mongo-client-web-ui"><a href="#mongo-client-web-ui" class="headerlink" title="mongo client - web ui"></a>mongo client - web ui</h3><h4 id="mongoclient镜像"><a href="#mongoclient镜像" class="headerlink" title="mongoclient镜像"></a>mongoclient镜像</h4> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull mongoclient/mongoclient</span><br></pre></td></tr></table></figure><h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 3000:3000 mongoclient/mongoclient</span><br><span class="line"></span><br><span class="line"># 配置持久化</span><br><span class="line">docker run -d -p 3000:3000 -v &lt;your_path&gt;:/data/db mongoclient/mongoclient</span><br></pre></td></tr></table></figure><h4 id="访问mongo"><a href="#访问mongo" class="headerlink" title="访问mongo"></a>访问mongo</h4><p><img src="https://s2.ax1x.com/2020/03/09/8SQqCd.md.png"><br><img src="https://s2.ax1x.com/2020/03/09/8SQL8A.md.png"></p><pre><code>* 存在数据库内容不同步，待解决</code></pre><h3 id="mongo-client-mongoose"><a href="#mongo-client-mongoose" class="headerlink" title="mongo client - mongoose"></a>mongo client - mongoose</h3><h4 id="连接mongo"><a href="#连接mongo" class="headerlink" title="连接mongo"></a>连接mongo</h4> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongodb://mongo:27017/mdb</span><br></pre></td></tr></table></figure><h4 id="mongoose"><a href="#mongoose" class="headerlink" title="mongoose"></a>mongoose</h4> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const schema = mongoose.Schema</span><br></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p> <a href="https://docs.docker.com/install/linux/docker-ce/centos/">docker</a><br> <a href="https://hub.docker.com/r/mongoclient/mongoclient/">mongoclient</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> mongo </tag>
            
            <tag> 安装 </tag>
            
            <tag> 配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Node》-PM2-操作命令整理</title>
      <link href="/2020/03/04/front_skills/node/%E3%80%8ANode%E3%80%8B-PM2-%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4%E6%95%B4%E7%90%86/"/>
      <url>/2020/03/04/front_skills/node/%E3%80%8ANode%E3%80%8B-PM2-%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h4 id="pm2-介绍"><a href="#pm2-介绍" class="headerlink" title="pm2 介绍"></a>pm2 介绍</h4><p>  用于进程守护，自动拉起进程。这里介绍都是nodejs进程管理。当然不限定与node。sh,py等都可以管理。<a href="http://huchengzhang.com/2020/01/16/%E3%80%8ANode%E3%80%8B-node%E5%AE%89%E8%A3%85%E4%B8%8E%E5%8D%B8%E8%BD%BD/">node安装请移步</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ pm2 start bashscript.sh</span><br><span class="line">$ pm2 start python-app.py --watch</span><br><span class="line">$ pm2 start binary-file -- --port 1520</span><br></pre></td></tr></table></figure><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ npm install pm2@latest -g</span><br><span class="line"># or</span><br><span class="line">$ yarn global add pm2</span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2020/03/08/3xeilD.md.png"></p><h4 id="pm2-验证"><a href="#pm2-验证" class="headerlink" title="pm2 验证"></a>pm2 验证</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pm2</span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2020/03/08/3xentP.md.png"></p><h4 id="启动nodejs应用"><a href="#启动nodejs应用" class="headerlink" title="启动nodejs应用"></a>启动nodejs应用</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 应用启动端口定义所在文件</span><br><span class="line">pm2 start app.js </span><br></pre></td></tr></table></figure><h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ pm2 restart app_name</span><br><span class="line">$ pm2 reload app_name</span><br><span class="line">$ pm2 stop app_name</span><br><span class="line">$ pm2 delete app_name</span><br><span class="line">$ pm2 monit</span><br><span class="line">$ pm2 list</span><br></pre></td></tr></table></figure><h4 id="查看已启动的应用"><a href="#查看已启动的应用" class="headerlink" title="查看已启动的应用"></a>查看已启动的应用</h4><p><img src="https://s2.ax1x.com/2020/03/08/3xmmDJ.md.png"></p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p> <a href="https://pm2.keymetrics.io/docs/usage/quick-start/">pm2</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> node </tag>
            
            <tag> PM2 </tag>
            
            <tag> Forever </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Docker》- linux下docker安装</title>
      <link href="/2020/03/04/devops_skills/docker/%E3%80%8ADocker%E3%80%8B-linux%E4%B8%8Bdocker%E5%AE%89%E8%A3%85/"/>
      <url>/2020/03/04/devops_skills/docker/%E3%80%8ADocker%E3%80%8B-linux%E4%B8%8Bdocker%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h3 id="docker-安装"><a href="#docker-安装" class="headerlink" title="docker 安装"></a>docker 安装</h3><h4 id="推荐方式"><a href="#推荐方式" class="headerlink" title="推荐方式"></a>推荐方式</h4><ul><li><p>1.安装基础包</p>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y yum-utils \</span><br><span class="line"> device-mapper-persistent-data \</span><br><span class="line"> lvm2</span><br></pre></td></tr></table></figure><p>   <img src="https://s2.ax1x.com/2020/03/04/3Ii8CF.png"></p></li><li><p>2.修改原</p>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo yum-config-manager \</span><br><span class="line">--add-repo \</span><br><span class="line">https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><p>   <img src="https://s2.ax1x.com/2020/03/04/3IilNT.md.png"></p></li><li><p>3.安装latest docker</p>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure></li><li><p>3.安装特定版本的docker</p>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//列出可用列表</span><br><span class="line">yum list docker-ce --showduplicates | sort -r</span><br><span class="line"></span><br><span class="line">//安装特定版本</span><br><span class="line">sudo yum install docker-ce-&lt;VERSION_STRING&gt; docker-ce-cli-&lt;VERSION_STRING&gt; containerd.io</span><br></pre></td></tr></table></figure></li><li><p>4.验证安装</p>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//启动docker</span><br><span class="line">sudo systemctl start docker</span><br><span class="line"></span><br><span class="line">//运行hello-world</span><br><span class="line">sudo docker run hello-world</span><br></pre></td></tr></table></figure><p>   <img src="https://s2.ax1x.com/2020/03/04/3IiG34.md.png"></p></li></ul><h4 id="rpm安装方式"><a href="#rpm安装方式" class="headerlink" title="rpm安装方式"></a>rpm安装方式</h4><ul><li><p>1.下载<a href="https://download.docker.com/linux/centos/7/x86_64/stable/Packages/">rpm包</a><br> <img src="https://s2.ax1x.com/2020/03/04/3IEYi6.md.png"></p></li><li><p>2.安装下载的rpm</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install /path/to/package.rpm</span><br></pre></td></tr></table></figure></li><li><p>3.验证安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//启动docker</span><br><span class="line">sudo systemctl start docker</span><br><span class="line"></span><br><span class="line">//运行hello-world</span><br><span class="line">sudo docker run hello-world</span><br></pre></td></tr></table></figure></li></ul><h4 id="script脚本安装"><a href="#script脚本安装" class="headerlink" title="script脚本安装"></a>script脚本安装</h4><ul><li>下载脚本 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ curl -fsSL https://get.docker.com -o get-docker.sh</span><br><span class="line">$ sudo sh get-docker.sh</span><br></pre></td></tr></table></figure></li><li>修改用户名 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo usermod -aG docker &lt;your-user&gt;</span><br></pre></td></tr></table></figure></li></ul><h4 id="docker-ce卸载"><a href="#docker-ce卸载" class="headerlink" title="docker-ce卸载"></a>docker-ce卸载</h4><ul><li>删除docker <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo yum remove docker-ce</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>删除docker image&#x2F;container<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rm -rf /var/lib/docker</span><br></pre></td></tr></table></figure></li></ul><h4 id="docker-镜像加速"><a href="#docker-镜像加速" class="headerlink" title="docker 镜像加速"></a>docker 镜像加速</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class="line">&#123;</span><br><span class="line">    &quot;registry-mirrors&quot;: [</span><br><span class="line">        &quot;https://d0gka8v0.mirror.aliyuncs.com&quot;,</span><br><span class="line">        &quot;https://docker.mirrors.ustc.edu.cn&quot;,</span><br><span class="line">        &quot;http://f1361db2.m.daocloud.io&quot;,</span><br><span class="line">        &quot;https://registry.docker-cn.com&quot;,</span><br><span class="line">        &quot;http://hub-mirror.c.163.com&quot;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><h4 id="docker-info-查看配置生效"><a href="#docker-info-查看配置生效" class="headerlink" title="docker info 查看配置生效"></a>docker info 查看配置生效</h4><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p> <a href="https://docs.docker.com/install/linux/docker-ce/centos/">docker</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> 安装 </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《RN》- RN 入门整理</title>
      <link href="/2020/03/02/app_develop_skills/%E3%80%8ARN%E3%80%8B-RN-%E5%85%A5%E9%97%A8%E6%95%B4%E7%90%86/"/>
      <url>/2020/03/02/app_develop_skills/%E3%80%8ARN%E3%80%8B-RN-%E5%85%A5%E9%97%A8%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><h4 id="node"><a href="#node" class="headerlink" title="node"></a>node</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//其版本是否在 v10 以上</span><br><span class="line">brew install node</span><br><span class="line"></span><br><span class="line"># 使用nrm工具切换淘宝源</span><br><span class="line">npx nrm use taobao</span><br><span class="line"></span><br><span class="line"># 如果之后需要切换回官方源可使用 </span><br><span class="line">npx nrm use npm</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="yarn"><a href="#yarn" class="headerlink" title="yarn"></a>yarn</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//Facebook 提供的替代 npm 的工具，可以加速 node 模块的下载</span><br><span class="line">npm install -g yarn</span><br></pre></td></tr></table></figure><h4 id="watchman"><a href="#watchman" class="headerlink" title="watchman"></a>watchman</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//Facebook 提供的监视文件系统变更的工具。安装此工具可以提高开发时的性能</span><br><span class="line">brew install watchman </span><br></pre></td></tr></table></figure><ul><li>安装过程出现的异常<br><img src="https://s2.ax1x.com/2020/03/02/32zIHA.png" width="450" height="300"></img></li><li>解决方法<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo chown -R $(whoami) /usr/local/share/man/man5 /usr/local/share/man/man7</span><br><span class="line"></span><br><span class="line">chmod u+w /usr/local/share/man/man5 /usr/local/share/man/man7</span><br></pre></td></tr></table></figure><img src="https://s2.ax1x.com/2020/03/02/3RSpEn.png" width="450" height="300"></img></li><li>安装路径提示<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">==&gt; readline</span><br><span class="line">readline is keg-only, which means it was not symlinked into /usr/local,</span><br><span class="line">because macOS provides the BSD libedit library, which shadows libreadline.</span><br><span class="line">In order to prevent conflicts when programs look for libreadline we are</span><br><span class="line">defaulting this GNU Readline installation to keg-only.</span><br><span class="line"></span><br><span class="line">For compilers to find readline you may need to set:</span><br><span class="line">export LDFLAGS=&quot;-L/usr/local/opt/readline/lib&quot;</span><br><span class="line">export CPPFLAGS=&quot;-I/usr/local/opt/readline/include&quot;</span><br><span class="line"></span><br><span class="line">==&gt; sqlite</span><br><span class="line">sqlite is keg-only, which means it was not symlinked into /usr/local,</span><br><span class="line">because macOS provides an older sqlite3.</span><br><span class="line"></span><br><span class="line">If you need to have sqlite first in your PATH run:</span><br><span class="line">echo &#x27;export PATH=&quot;/usr/local/opt/sqlite/bin:$PATH&quot;&#x27; &gt;&gt; ~/.bash_profile</span><br><span class="line"></span><br><span class="line">For compilers to find sqlite you may need to set:</span><br><span class="line">export LDFLAGS=&quot;-L/usr/local/opt/sqlite/lib&quot;</span><br><span class="line">export CPPFLAGS=&quot;-I/usr/local/opt/sqlite/include&quot;</span><br><span class="line"></span><br><span class="line">==&gt; python</span><br><span class="line">Python has been installed as</span><br><span class="line">/usr/local/bin/python3</span><br><span class="line"></span><br><span class="line">Unversioned symlinks `python`, `python-config`, `pip` etc. pointing to</span><br><span class="line">`python3`, `python3-config`, `pip3` etc., respectively, have been installed into</span><br><span class="line">/usr/local/opt/python/libexec/bin</span><br><span class="line"></span><br><span class="line">You can install Python packages with</span><br><span class="line">pip3 install &lt;package&gt;</span><br><span class="line">They will install into the site-package directory</span><br><span class="line">/usr/local/lib/python3.7/site-packages</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h4 id="Xcode"><a href="#Xcode" class="headerlink" title="Xcode"></a>Xcode</h4>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// version 10+</span><br><span class="line">brew cask install xcode  //同时安装 Xcode IDE、Xcode 的命令行工具和 iOS 模拟器。</span><br></pre></td></tr></table></figure><pre><code>* 如果你之前全局安装过旧的react-native-cli命令行工具，请卸载掉它以避免一些冲突。npx命令来使用即可。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall -g react-native-cli</span><br></pre></td></tr></table></figure></code></pre><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><pre><code>* 一：0.45 及以上版本需要依赖 boost 等几个很难下载成功的第三方库编译。这里有中文网提供的国内下载链接(http://bbs.reactnative.cn/topic/4301/)。* 二：0.60 及以上版本依赖CocoaPods安装。CocoaPods的仓库在国内也很难访问。如果在CocoaPods的安装步骤卡很久，可以试一下这个国内镜像(https://mirror.tuna.tsinghua.edu.cn/help/CocoaPods/* 三：请不要单独使用常见的关键字作为项目名（如class, native, new, package等等）。请不要使用与核心模块同名的项目名（如react, react-native等）。请不要在目录、文件名中使用中文、空格等特殊符号。</code></pre><h3 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello-World"></a>Hello-World</h3><h4 id="工程初始化"><a href="#工程初始化" class="headerlink" title="工程初始化"></a>工程初始化</h4> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx react-native init AwesomeProject </span><br></pre></td></tr></table></figure><ul><li><p>提示：你可以使用–version参数（注意是两个杠）创建指定版本的项目。例如npx react-native init MyApp –version 0.44.3。注意版本号必须精确到两个小数点。<br> <img src="https://s2.ax1x.com/2020/03/02/3R9XjO.md.png" width="450" height="300"></img></p></li><li><p>安装CocoaPods失败<br> <img src="https://s2.ax1x.com/2020/03/02/3Riets.png"> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//对于旧版的 CocoaPods 可以使用如下方法使用 tuna 的镜像：</span><br><span class="line"></span><br><span class="line">$ pod repo remove master</span><br><span class="line">$ pod repo add master https://mirrors.tuna.tsinghua.edu.cn/git/CocoaPods/Specs.git</span><br><span class="line">$ pod repo update</span><br><span class="line">//新版的 CocoaPods 不允许用pod repo add直接添加master库了，但是依然可以：</span><br><span class="line"></span><br><span class="line">$ cd ~/.cocoapods/repos </span><br><span class="line">$ pod repo remove master</span><br><span class="line">$ git clone https://mirrors.tuna.tsinghua.edu.cn/git/CocoaPods/Specs.git master</span><br><span class="line">//最后进入自己的工程，在自己工程的podFile第一行加上：</span><br><span class="line"></span><br><span class="line">source &#x27;https://mirrors.tuna.tsinghua.edu.cn/git/CocoaPods/Specs.git&#x27;</span><br></pre></td></tr></table></figure></li><li><p>xcode问题 – 不是根本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ xcrun -k --sdk iphoneos --show-sdk-path</span><br><span class="line">xcrun: error: SDK &quot;iphoneos&quot; cannot be located</span><br><span class="line">xcrun: error: SDK &quot;iphoneos&quot; cannot be located</span><br><span class="line">xcrun: error: unable to lookup item &#x27;Path&#x27; in SDK &#x27;iphoneos&#x27;</span><br><span class="line"></span><br><span class="line">$ xcode-select --print-path</span><br><span class="line">/Library/Developer/CommandLineTools</span><br><span class="line"> </span><br><span class="line">$ xcode-select --switch /Library/Developer/CommandLineTools</span><br><span class="line">xcode-select: error: --switch must be run as root (e.g. `sudo xcode-select --switch &lt;xcode_folder_path&gt;`).</span><br><span class="line"></span><br><span class="line">$ sudo xcode-select --switch /Library/Developer/CommandLineTools</span><br></pre></td></tr></table></figure></li><li><p>最终问题在于xcode location ci 配置<br><img src="https://s2.ax1x.com/2020/03/02/3WLtpD.png" width="450" height="300"></img></p></li></ul><h4 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h4> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd AwesomeProject</span><br><span class="line">yarn ios</span><br><span class="line"># 或者</span><br><span class="line">yarn react-native run-ios</span><br></pre></td></tr></table></figure><p>  <img src="https://s2.ax1x.com/2020/03/02/3WL9yj.md.png" width="450" height="300"></img></p><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><h4 id="RN"><a href="#RN" class="headerlink" title="RN"></a><a href="https://reactnative.cn/docs/getting-started.html">RN</a></h4>]]></content>
      
      
      
        <tags>
            
            <tag> App </tag>
            
            <tag> RN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《小程序》-多端构建Taro概念整理</title>
      <link href="/2020/03/01/front_skills/minapp/%E3%80%8A%E5%B0%8F%E7%A8%8B%E5%BA%8F%E3%80%8B-%E5%A4%9A%E7%AB%AF%E6%9E%84%E5%BB%BATaro%E6%A6%82%E5%BF%B5%E6%95%B4%E7%90%86/"/>
      <url>/2020/03/01/front_skills/minapp/%E3%80%8A%E5%B0%8F%E7%A8%8B%E5%BA%8F%E3%80%8B-%E5%A4%9A%E7%AB%AF%E6%9E%84%E5%BB%BATaro%E6%A6%82%E5%BF%B5%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h3 id="学习背景："><a href="#学习背景：" class="headerlink" title="学习背景："></a>学习背景：</h3><ul><li>多端构建，可以只书写一套代码，再通过 Taro 的编译工具，将源代码分别编译出可以在不同端（微信&#x2F;百度&#x2F;支付宝&#x2F;字节跳动&#x2F;QQ&#x2F;京东小程序、快应用、H5、React-Native 等）运行的代码</li><li>支持微信小程序转Taro</li><li>支持编译为RN，则是看中点</li></ul><h3 id="概念整理"><a href="#概念整理" class="headerlink" title="概念整理"></a>概念整理</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 使用 npm 安装 CLI</span><br><span class="line">$ npm install -g @tarojs/cli</span><br><span class="line"></span><br><span class="line"># 使用 yarn 安装 CLI</span><br><span class="line">$ yarn global add @tarojs/cli</span><br><span class="line"></span><br><span class="line"># 安装了 cnpm，使用 cnpm 安装 CLI</span><br><span class="line">$ cnpm install -g @tarojs/cli</span><br></pre></td></tr></table></figure><h4 id="工程建立"><a href="#工程建立" class="headerlink" title="工程建立"></a>工程建立</h4> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ taro init &lt;name&gt;</span><br><span class="line"></span><br><span class="line">$ yarn </span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="工程运行"><a href="#工程运行" class="headerlink" title="工程运行"></a>工程运行</h4> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ yarn dev:weapp </span><br><span class="line">$ yarn build:weapp </span><br><span class="line"></span><br><span class="line"># npm script</span><br><span class="line">$ npm run dev:weapp</span><br><span class="line">$ npm run build:weapp</span><br><span class="line"></span><br><span class="line"># 仅限全局安装</span><br><span class="line">$ taro build --type weapp --watch</span><br><span class="line">$ taro build --type weapp</span><br><span class="line"></span><br><span class="line"># npx 用户也可以使用</span><br><span class="line">$ npx taro build --type weapp --watch</span><br><span class="line">$ npx taro build --type weapp</span><br></pre></td></tr></table></figure><h4 id="目录规范"><a href="#目录规范" class="headerlink" title="目录规范"></a>目录规范</h4> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">├── config                 配置目录</span><br><span class="line">|   ├── dev.js             开发时配置</span><br><span class="line">|   ├── index.js           默认配置</span><br><span class="line">|   └── prod.js            打包时配置</span><br><span class="line">├── src                    源码目录</span><br><span class="line">|   ├── components         公共组件目录</span><br><span class="line">|   ├── pages              页面文件目录</span><br><span class="line">|   |   ├── index          index 页面目录</span><br><span class="line">|   |   |   ├── banner     页面 index 私有组件</span><br><span class="line">|   |   |   ├── index.js   index 页面逻辑</span><br><span class="line">|   |   |   └── index.css  index 页面样式</span><br><span class="line">|   ├── utils              公共方法库</span><br><span class="line">|   ├── app.css            项目总通用样式</span><br><span class="line">|   └── app.js             项目入口文件</span><br><span class="line">└── package.json</span><br></pre></td></tr></table></figure><h4 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h4><ul><li>普通 JS&#x2F;TS 文件以 .js 或者 .ts 作为文件后缀</li><li>组件，以 .jsx 或者 .tsx 作为文件后缀</li></ul><h4 id="代码书写-编译的局限性，需要慎重入坑避免耗费时间在无非的语法上，"><a href="#代码书写-编译的局限性，需要慎重入坑避免耗费时间在无非的语法上，" class="headerlink" title="代码书写,编译的局限性，需要慎重入坑避免耗费时间在无非的语法上，"></a>代码书写,编译的局限性，需要慎重入坑避免耗费时间在无非的语法上，</h4><ul><li>不能在句末使用分号    <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const a = &#x27;a&#x27;   // ✓ 正确</span><br><span class="line">const a = &#x27;a&#x27;;  // ✗ 错误</span><br></pre></td></tr></table></figure></li><li>字符串统一使用单引号   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">console.log(&#x27;hello there&#x27;)</span><br><span class="line"> // 如果遇到需要转义的情况，请按如下三种写法书写</span><br><span class="line"> const x = &#x27;hello &quot;world&quot;&#x27;</span><br><span class="line"> const y = &#x27;hello \&#x27;world\&#x27;&#x27;</span><br><span class="line"> const z = `hello &#x27;world&#x27;`</span><br></pre></td></tr></table></figure></li><li>关键字后面加空格   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if (condition) &#123; ... &#125;   // ✓ 正确</span><br><span class="line">if(condition) &#123; ... &#125;    // ✗ 错误</span><br></pre></td></tr></table></figure></li><li>函数声明时括号与函数名间加空格   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function name (arg) &#123; ... &#125;   // ✓ 正确</span><br><span class="line">function name(arg) &#123; ... &#125;    // ✗ 错误</span><br><span class="line"></span><br><span class="line">run(function () &#123; ... &#125;)      // ✓ 正确</span><br><span class="line">run(function() &#123; ... &#125;)       // ✗ 错误</span><br></pre></td></tr></table></figure></li><li>逗号后面加空格    <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// ✓ 正确</span><br><span class="line">const list = [1, 2, 3, 4]</span><br><span class="line">function greet (name, options) &#123; ... &#125;</span><br><span class="line">// ✗ 错误</span><br><span class="line">const list = [1,2,3,4]</span><br><span class="line">function greet (name,options) &#123; ... &#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><h4 id="Taro"><a href="#Taro" class="headerlink" title="Taro"></a><a href="http://taro-docs.jd.com/taro/docs/GETTING-STARTED.html">Taro</a></h4>]]></content>
      
      
      
        <tags>
            
            <tag> 构建 </tag>
            
            <tag> 小程序 </tag>
            
            <tag> 多端 </tag>
            
            <tag> Taro </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《微信小程序》- 云函数开发实践之BMI体重管理</title>
      <link href="/2020/03/01/front_skills/minapp/%E3%80%8A%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E3%80%8B-%E4%BA%91%E5%87%BD%E6%95%B0%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E4%B9%8BBMI%E4%BD%93%E9%87%8D%E7%AE%A1%E7%90%86/"/>
      <url>/2020/03/01/front_skills/minapp/%E3%80%8A%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E3%80%8B-%E4%BA%91%E5%87%BD%E6%95%B0%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E4%B9%8BBMI%E4%BD%93%E9%87%8D%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><img src="https://s2.ax1x.com/2020/03/01/3c3OHI.jpg" width="320" height="568" alt="BMI体重管理" ><img src="https://s2.ax1x.com/2020/03/01/3c3jEt.md.jpg" width="320" height="568" alt="BMI体重管理" ><h3 id="界面设计"><a href="#界面设计" class="headerlink" title="界面设计"></a>界面设计</h3><h4 id="设计目的：BMI数据管理"><a href="#设计目的：BMI数据管理" class="headerlink" title="设计目的：BMI数据管理"></a>设计目的：BMI数据管理</h4><h4 id="首页-如何实现："><a href="#首页-如何实现：" class="headerlink" title="首页 - 如何实现："></a>首页 - 如何实现：</h4><pre><code>* BMI,是什么？-- 需要简单解释下* 必须有录入入口 -- 记录一下* 可视化展示录入的数据 -- 身高固定、体重可变* 可视化数据对不对  -- 历史记录进行比对展示</code></pre><h4 id="录入页-如何实现："><a href="#录入页-如何实现：" class="headerlink" title="录入页 - 如何实现："></a>录入页 - 如何实现：</h4><pre><code>* 录入输入框 * 录入的指标计算展示 * 指标好不好，有个参考 * 指标对不对，给个计算公式 * 按钮名称，凸显主人公</code></pre><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><h4 id="图表实现"><a href="#图表实现" class="headerlink" title="图表实现"></a>图表实现</h4>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">const chart = new F2.Chart(config);</span><br><span class="line">   chart.legend(false);</span><br><span class="line">   chart.point()</span><br><span class="line">     .position(&#x27;date*weight&#x27;)</span><br><span class="line">     .size(&#x27;tag&#x27;, function (val) &#123;</span><br><span class="line">       return val ? 3 : 0;</span><br><span class="line">     &#125;)</span><br><span class="line">     .style(&#x27;tag&#x27;, &#123;</span><br><span class="line">       fill: function fill(val) &#123;</span><br><span class="line">         return &#x27;#0ac7d9&#x27;</span><br><span class="line">       &#125;,</span><br><span class="line">       stroke: &#x27;#fff&#x27;,</span><br><span class="line">       lineWidth: 1</span><br><span class="line">     &#125;);</span><br><span class="line">   chart.source(chartData, &#123;</span><br><span class="line">     date: &#123;</span><br><span class="line">       range: [0, 1],</span><br><span class="line">       type: &#x27;timeCat&#x27;,</span><br><span class="line">       mask: &#x27;MM-DD&#x27;</span><br><span class="line">     &#125;,</span><br><span class="line">     weight: &#123;</span><br><span class="line">       max: 120,</span><br><span class="line">       tickCount: 5,</span><br><span class="line">       alias: &#x27;体重(kg)&#x27;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;);</span><br><span class="line">   chart.tooltip(&#123;</span><br><span class="line">     showCrosshairs: true,</span><br><span class="line">     showTitle: false,</span><br><span class="line">     showItemMarker: false,</span><br><span class="line">     snap: true,</span><br><span class="line">     crosshairsType: &#x27;xy&#x27;,</span><br><span class="line">     onShow: function onShow(ev) &#123;</span><br><span class="line">       return (ev.items = ev.items.splice(1));</span><br><span class="line">     &#125;,</span><br><span class="line">   &#125;);</span><br><span class="line">   chart.area().position(&#x27;date*weight&#x27;).color(&#x27;#0ac7d9&#x27;).shape(&#x27;smooth&#x27;).adjust(&#x27;stack&#x27;);</span><br><span class="line">   chart.line().position(&#x27;date*weight&#x27;).color(&#x27;#0ac7d9&#x27;).shape(&#x27;smooth&#x27;).adjust(&#x27;stack&#x27;);</span><br><span class="line">   chart.render();</span><br><span class="line">   f2Chart = chart;</span><br><span class="line">   return chart;</span><br></pre></td></tr></table></figure><h4 id="指标参考"><a href="#指标参考" class="headerlink" title="指标参考"></a>指标参考</h4>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;view class=&quot;bmi-item&quot; wx:for=&quot;&#123;&#123;bmiArray&#125;&#125;&quot; wx:for-item=&quot;item&quot; wx:for-index=&quot;index&quot; wx:key=&quot;index&quot;&gt;</span><br><span class="line">    &lt;view class=&quot;bmi-start&quot; wx:if=&quot;&#123;&#123;item.start !== &#x27;&#x27;&#125;&#125;&quot;&gt;&#123;&#123;item.start&#125;&#125;&lt;/view&gt;</span><br><span class="line">    &lt;view class=&quot;bmi-middle&quot;&gt;&#123;&#123;item.desc&#125;&#125;&lt;/view&gt;</span><br><span class="line">    &lt;view class=&quot;bmi-end&quot; wx:if=&quot;&#123;&#123;item.end !== &#x27;&#x27;&#125;&#125;&quot;&gt;&#123;&#123;item.end&#125;&#125;&lt;/view&gt;</span><br><span class="line">&lt;/view&gt;</span><br></pre></td></tr></table></figure>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[&#123;</span><br><span class="line">   start:0,</span><br><span class="line">   desc:&#x27;偏瘦&#x27;,</span><br><span class="line">   end:&#x27;&#x27;</span><br><span class="line"> &#125;,&#123;</span><br><span class="line">   start: 18.5,</span><br><span class="line">   desc: &#x27;正常&#x27;,</span><br><span class="line">   end:&#x27;&#x27;</span><br><span class="line"> &#125;,&#123;</span><br><span class="line">   start: 24,</span><br><span class="line">   desc: &#x27;偏胖&#x27;,</span><br><span class="line">   end: &#x27;&#x27;</span><br><span class="line"> &#125;,&#123;</span><br><span class="line">   start:27,</span><br><span class="line">   desc:&#x27;肥胖&#x27;,</span><br><span class="line">   end:40,</span><br><span class="line"> &#125;</span><br><span class="line"> ]</span><br></pre></td></tr></table></figure><h4 id="微信云端请求http"><a href="#微信云端请求http" class="headerlink" title="微信云端请求http"></a>微信云端请求http</h4>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">  // 云函数入口文件</span><br><span class="line">const cloud = require(&#x27;wx-server-sdk&#x27;)</span><br><span class="line">const rq = require(&#x27;request-promise&#x27;);</span><br><span class="line"></span><br><span class="line">cloud.init()</span><br><span class="line"></span><br><span class="line">// 云函数入口函数</span><br><span class="line">exports.main = async (event, context) =&gt; &#123;</span><br><span class="line">  const wxContext = cloud.getWXContext()</span><br><span class="line">  const url = `xxxx`</span><br><span class="line">  const res = await rq(url);</span><br><span class="line">  return res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="云端数据库请求"><a href="#云端数据库请求" class="headerlink" title="云端数据库请求"></a>云端数据库请求</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">if (!params)&#123;</span><br><span class="line">    console.error(`[数据库]$&#123;dbName&#125; [新增记录],参数空`);</span><br><span class="line">&#125;</span><br><span class="line">const data = &#123;</span><br><span class="line">    data: params  //切记，这里params，需要时&#123;&#125;,形式</span><br><span class="line">&#125;</span><br><span class="line">const db = wx.cloud.database();</span><br><span class="line">return db.collection(dbName).add(data).then((res) =&gt; &#123;</span><br><span class="line">    console.log(`[数据库]$&#123;dbName&#125; [新增记录] 成功，记录 _id:`, params, res._id)</span><br><span class="line">&#125;).catch(err =&gt; &#123;</span><br><span class="line">    console.error(`[数据库]$&#123;dbName&#125; [新增记录] 失败：`, params, err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="测试总结"><a href="#测试总结" class="headerlink" title="测试总结"></a>测试总结</h3><h4 id="图表数据加载问题"><a href="#图表数据加载问题" class="headerlink" title="图表数据加载问题 -"></a>图表数据加载问题 -</h4><ul><li><p>value不可为字符串，否则数值图表绘制失败</p></li><li><p>自定义图表颜色 – 参考上一篇【《微信小程序》-F2图表组件实践遇到的那些卡壳》】</p></li><li><p>数据请求云端获取，界面加载早，怎么解决数据加载延迟问题？<br>  数据没有准备好，就不展示界面。<br>  等数据准备好，才绘制。</p></li></ul><h4 id="图表再次刷新问题"><a href="#图表再次刷新问题" class="headerlink" title="图表再次刷新问题"></a>图表再次刷新问题</h4><ul><li><p>记录下后，数据要刷新 ？<br>   把图表实例chart，全局下，然后触发changeData()</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f2Chart.changeData(bmiLocalData);</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 微信小程序 </tag>
            
            <tag> 云函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《微信小程序》-F2图表组件实践遇到的那些卡壳</title>
      <link href="/2020/02/27/front_skills/minapp/%E3%80%8A%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E3%80%8B-F2%E5%9B%BE%E8%A1%A8%E7%BB%84%E4%BB%B6%E5%AE%9E%E8%B7%B5%E9%81%87%E5%88%B0%E7%9A%84%E9%82%A3%E4%BA%9B%E5%8D%A1%E5%A3%B3/"/>
      <url>/2020/02/27/front_skills/minapp/%E3%80%8A%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E3%80%8B-F2%E5%9B%BE%E8%A1%A8%E7%BB%84%E4%BB%B6%E5%AE%9E%E8%B7%B5%E9%81%87%E5%88%B0%E7%9A%84%E9%82%A3%E4%BA%9B%E5%8D%A1%E5%A3%B3/</url>
      
        <content type="html"><![CDATA[<h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><p> <img src="https://s2.ax1x.com/2020/02/27/3wbxBR.md.png"></p><h3 id="卡壳一-自定义颜色，必定tooltip显示重复"><a href="#卡壳一-自定义颜色，必定tooltip显示重复" class="headerlink" title="卡壳一-自定义颜色，必定tooltip显示重复"></a>卡壳一-自定义颜色，必定tooltip显示重复</h3><p> <img src="https://s2.ax1x.com/2020/02/27/30psMV.md.png"><br> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">chart.tooltip(&#123;</span><br><span class="line">    showCrosshairs: true,</span><br><span class="line">    showTitle: false,</span><br><span class="line">    showItemMarker: false,</span><br><span class="line">    snap: true,</span><br><span class="line">    crosshairsType: &#x27;xy&#x27;,</span><br><span class="line">&#125;);</span><br><span class="line">chart.area().position(&#x27;date*weight&#x27;).color(&#x27;#0ac7d9&#x27;).shape(&#x27;smooth&#x27;).adjust(&#x27;stack&#x27;);</span><br><span class="line">chart.line().position(&#x27;date*weight&#x27;).color(&#x27;#0ac7d9&#x27;).shape(&#x27;smooth&#x27;).adjust(&#x27;stack&#x27;);</span><br></pre></td></tr></table></figure></p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">chart.tooltip(&#123;</span><br><span class="line">    showCrosshairs: true,</span><br><span class="line">    showTitle: false,</span><br><span class="line">    showItemMarker: false,</span><br><span class="line">    snap: true,</span><br><span class="line">    crosshairsType: &#x27;xy&#x27;,</span><br><span class="line">    onShow: function onShow(ev) &#123; //添加如下</span><br><span class="line">        return (ev.items = ev.items.splice(1));</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="卡壳二-字符串线性展示不支持"><a href="#卡壳二-字符串线性展示不支持" class="headerlink" title="卡壳二-字符串线性展示不支持"></a>卡壳二-字符串线性展示不支持</h3><p><img src="https://s2.ax1x.com/2020/02/27/3wbzH1.md.png"><br><img src="https://s2.ax1x.com/2020/02/27/3wq9N6.png"></p><h3 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h3><ul><li>定义类型，让库自己解决 – 错的离谱，行不通<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 参数</span><br><span class="line"> [&#123;</span><br><span class="line">    date: &quot;2/27&quot;</span><br><span class="line">    height: &quot;170&quot;</span><br><span class="line">    weight: &quot;70&quot;</span><br><span class="line"> &#125;]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">chart.source(chartData, &#123;</span><br><span class="line">    date: &#123;</span><br><span class="line">      range: [0, 1],</span><br><span class="line">      type: &#x27;timeCat&#x27;,</span><br><span class="line">      mask: &#x27;MM-DD&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    weight: &#123;</span><br><span class="line">      type:&#x27;linear&#x27;, //添加</span><br><span class="line">      min:0,</span><br><span class="line">      max: 120,</span><br><span class="line">      tickCount: 5,</span><br><span class="line">      alias: &#x27;体重(kg)&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><img src="https://s2.ax1x.com/2020/02/27/3wLGRO.md.png"></li><li>把数据转换为数值类型 – 只能自己每次转换为数值，理论上行的通，就是繁琐</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 微信小程序 </tag>
            
            <tag> F2 </tag>
            
            <tag> 图表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《微信小程序》-图表组件方案调研</title>
      <link href="/2020/02/13/front_skills/minapp/%E3%80%8A%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E3%80%8B-%E5%9B%BE%E8%A1%A8%E7%BB%84%E4%BB%B6%E6%96%B9%E6%A1%88%E8%B0%83%E7%A0%94/"/>
      <url>/2020/02/13/front_skills/minapp/%E3%80%8A%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E3%80%8B-%E5%9B%BE%E8%A1%A8%E7%BB%84%E4%BB%B6%E6%96%B9%E6%A1%88%E8%B0%83%E7%A0%94/</url>
      
        <content type="html"><![CDATA[<h4 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h4><pre><code>* 目前不支持svg* 主要以canvas为主 </code></pre><h4 id="echarts"><a href="#echarts" class="headerlink" title="echarts"></a><a href="https://github.com/ecomfe/echarts-for-weixin">echarts</a></h4><ul><li><p>依赖包下载本地<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/ecomfe/echarts-for-weixin.git</span><br></pre></td></tr></table></figure></p></li><li><p>复制ec-canvas,到小程序项目根路径下<br>   <img src="https://s2.ax1x.com/2020/02/23/3lMoCt.png"></p></li><li><p>引入组件</p>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;usingComponents&quot;: &#123;</span><br><span class="line">        &quot;ec-canvas&quot;: &quot;../../ec-canvas/ec-canvas&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>配置option、wxml等</p>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;view class=&quot;container&quot;&gt;</span><br><span class="line">    &lt;ec-canvas id=&quot;mychart-dom-bar&quot; style=&quot;width:100%;height:300px;&quot; canvas-id=&quot;mychart-bar&quot; ec=&quot;&#123;&#123; ec &#125;&#125;&quot;&gt;&lt;/ec-canvas&gt;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line"></span><br><span class="line">//option</span><br><span class="line">var option = &#123;</span><br><span class="line">    title: &#123;</span><br><span class="line">    text: &#x27;ECharts 入门示例- Bar&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    tooltip: &#123;&#125;,</span><br><span class="line">    legend: &#123;</span><br><span class="line">    top:30,</span><br><span class="line">    data: [&#x27;销量&#x27;]</span><br><span class="line">    &#125;,</span><br><span class="line">    xAxis: &#123;</span><br><span class="line">    data: [&quot;衬衫&quot;, &quot;羊毛衫&quot;, &quot;雪纺衫&quot;, &quot;裤子&quot;, &quot;高跟鞋&quot;, &quot;袜子&quot;]</span><br><span class="line">    &#125;,</span><br><span class="line">    yAxis: &#123;&#125;,</span><br><span class="line">    series: [&#123;</span><br><span class="line">    name: &#x27;销量&#x27;,</span><br><span class="line">    type: &#x27;bar&#x27;,</span><br><span class="line">    data: [5, 20, 36, 10, 10, 20]</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>展示结果<br>   <img src="https://s2.ax1x.com/2020/02/23/3lQZ5R.md.png"></p></li><li><p>注意点</p><ul><li>wxml忘了width、height，会白板哦</li></ul></li></ul><h4 id="F2"><a href="#F2" class="headerlink" title="F2"></a><a href="https://github.com/antvis/wx-f2">F2</a></h4><ul><li><p>项目跟路径，添加package.json</p>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init -y </span><br></pre></td></tr></table></figure></li><li><p>配置npm构建<br>   <img src="https://s2.ax1x.com/2020/02/23/3llkSP.md.png"><br>   <img src="https://s2.ax1x.com/2020/02/23/3llAQf.png"></p></li><li><p>尝试构建是否成功<br>   <img src="https://s2.ax1x.com/2020/02/23/3lM54I.md.png"></p></li><li><p>移除es6语法糖-runtime模块<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install @antv/wx-f2 --save</span><br></pre></td></tr></table></figure></p></li><li><p>再次构建<br><img src="https://s2.ax1x.com/2020/02/23/3lMT8P.png"></p></li><li><p>编写wxml、js</p>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;view class=&quot;container&quot;&gt;</span><br><span class="line"> &lt;f2 class=&quot;f2-chart&quot; onInit=&quot;&#123;&#123;onInitChart&#125;&#125;&quot; /&gt;</span><br><span class="line">&lt;/view&gt;</span><br></pre></td></tr></table></figure></li><li><p>引入组件</p>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;usingComponents&quot;: &#123;</span><br><span class="line">      &quot;f2&quot;: &quot;@antv/wx-f2&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>展示结果<br>   <img src="https://s2.ax1x.com/2020/02/23/3lMHv8.png"></p></li></ul><h4 id="个人使用总结"><a href="#个人使用总结" class="headerlink" title="个人使用总结"></a>个人使用总结</h4><ul><li><p>echarts </p><ul><li>api 文档完善，技术成熟</li><li>封装的程度高些，入手门槛高点</li></ul></li><li><p>F2</p><ul><li>后起之秀，样式美观</li><li>api 未知问题，可能未发现，高度定制的需要谨慎</li><li>入手门槛不高，容易理解</li></ul></li></ul><h4 id="Demo代码已上传GitHub"><a href="#Demo代码已上传GitHub" class="headerlink" title="Demo代码已上传GitHub"></a>Demo代码已上传GitHub</h4><ul><li><a href="https://github.com/chengzhangHu/chart-demo">传送门</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 微信小程序 </tag>
            
            <tag> F2 </tag>
            
            <tag> 图表 </tag>
            
            <tag> wechat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《GitHub》-xxx.github.io自定义域名配置</title>
      <link href="/2020/02/12/dev_tool_skills/git/%E3%80%8AGitHub%E3%80%8B-xxx-github-io%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D%E9%85%8D%E7%BD%AE/"/>
      <url>/2020/02/12/dev_tool_skills/git/%E3%80%8AGitHub%E3%80%8B-xxx-github-io%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h4 id="GitHub-pages产品支持"><a href="#GitHub-pages产品支持" class="headerlink" title="GitHub pages产品支持"></a>GitHub pages产品支持</h4><ul><li>public 分支</li><li>Pro </li><li>Team</li><li>Enterprise Cloud</li><li>Enterprise Server</li></ul><h4 id="创建Public分支"><a href="#创建Public分支" class="headerlink" title="创建Public分支"></a>创建Public分支</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chengzhangHu.github.io</span><br></pre></td></tr></table></figure><p> <img src="https://s2.ax1x.com/2020/02/22/3KWZxf.md.png"></p><h4 id="自定义域名分类"><a href="#自定义域名分类" class="headerlink" title="自定义域名分类"></a>自定义域名分类</h4><ul><li>直接使用顶级域名，example.com</li><li>使用子域名，<a href="http://www.example.com,blog.example.com/">www.example.com,blog.example.com</a></li></ul><h4 id="共同配置"><a href="#共同配置" class="headerlink" title="共同配置"></a>共同配置</h4><ul><li>CNAME </li><li>DNS</li></ul><h4 id="DNS配置"><a href="#DNS配置" class="headerlink" title="DNS配置"></a>DNS配置</h4><ul><li><p>顶级域名 </p></li><li><p>子域名</p></li><li><p>直接使用A记录 — 固定ip </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">185.199.108.153</span><br><span class="line">185.199.109.153</span><br><span class="line">185.199.110.153</span><br><span class="line">185.199.111.153</span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2020/02/22/3Kf7N9.png"></p></li><li><p>使用CNAME – 指向固定域名，由另一个域名提供ip<br><img src="https://s2.ax1x.com/2020/02/22/3Khv2q.png"><br><img src="https://s2.ax1x.com/2020/02/22/3K4prT.md.png"></p></li></ul><h4 id="CNAME"><a href="#CNAME" class="headerlink" title="CNAME"></a>CNAME</h4><ul><li><p>可以界面配置<br> <img src="https://s2.ax1x.com/2020/02/22/3KWnsS.md.png"></p></li><li><p>也可以使用CNAME文件</p><ul><li><p>顶级域名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">huchengzhang.com</span><br></pre></td></tr></table></figure></li><li><p>子域名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">www.huchengzhang.com</span><br></pre></td></tr></table></figure></li></ul></li><li><p>CNAME配置注意点：</p><ul><li>CNAME只能配置一个域名</li><li>CNAME必须全部大写</li><li>配置多个域名，需要DNS配置跳转</li><li>CNAME中内容，在GitHub中要唯一</li></ul></li><li><p>CNAME原理简单猜测：</p><ul><li>浏览器访问 xxx.github.io</li><li>域名查找DNS,找到 185.199.108.153</li><li>服务器上存在CNAME,进行重定向 </li><li>浏览器访问域名 example.com</li><li>域名查找DNS,找到 185.199.109.153</li><li>读取资源，返回界面，加载显示</li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> GitHub </tag>
            
            <tag> 自定义域名 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Lodash源码阅读笔记》- 需要了解的js类型判定方法</title>
      <link href="/2020/02/08/front_skills/lodash/%E3%80%8ALodash%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E3%80%8B-%E9%9C%80%E8%A6%81%E4%BA%86%E8%A7%A3%E7%9A%84js%E7%B1%BB%E5%9E%8B%E5%88%A4%E5%AE%9A%E6%96%B9%E6%B3%95/"/>
      <url>/2020/02/08/front_skills/lodash/%E3%80%8ALodash%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E3%80%8B-%E9%9C%80%E8%A6%81%E4%BA%86%E8%A7%A3%E7%9A%84js%E7%B1%BB%E5%9E%8B%E5%88%A4%E5%AE%9A%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>前端开发，js是一个避开不了的一门技术。js的诞生为了美化交互。</p><h4 id="js类型"><a href="#js类型" class="headerlink" title="js类型"></a>js类型</h4><ul><li>null</li><li>undefined</li><li>boolean</li><li>string</li><li>number</li><li>Object</li><li>引用类型(object、array、function) </li><li>symbol</li></ul><h3 id="js类型判定"><a href="#js类型判定" class="headerlink" title="js类型判定"></a>js类型判定</h3><h4 id="null"><a href="#null" class="headerlink" title="null"></a>null</h4><ul><li>值确定，直接比较<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function isNull()&#123;</span><br><span class="line">   return  value === null ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>typeof不能作为唯一判断<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">typeof null === &#x27;object&#x27;   //true ,由于最初的设计缺陷导致</span><br><span class="line">typeof &#123;&#125; === &#x27;object&#x27; //true </span><br></pre></td></tr></table></figure></li><li>toString <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">toString.call(null) === &#x27;[object Null]&#x27; //true</span><br></pre></td></tr></table></figure></li></ul><h4 id="undefined"><a href="#undefined" class="headerlink" title="undefined"></a>undefined</h4><ul><li>值确定，直接比较<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> function isUndefined(value) &#123;</span><br><span class="line">  return value === undefined</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>typeof 不能作为唯一标准<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">typeof undefined === &#x27;undefined&#x27; //true </span><br><span class="line">typeof void 0  === &#x27;undefined&#x27; //true</span><br></pre></td></tr></table></figure></li><li>toString <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">toString.call(undefined) === &#x27;[object Undefined]&#x27; //true</span><br></pre></td></tr></table></figure></li></ul><h4 id="boolean"><a href="#boolean" class="headerlink" title="boolean"></a>boolean</h4><ul><li>值确定直接比较</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function isBoolean(value)&#123;</span><br><span class="line">  return value === true || value === false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>typeof 写法 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">typeof true  === &#x27;boolean&#x27;  //true</span><br><span class="line">typeof false === &#x27;boolean&#x27;   //true</span><br></pre></td></tr></table></figure></li><li><p>toString </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">toString.call(true) === &#x27;[object Boolean]&#x27; //true</span><br></pre></td></tr></table></figure></li><li><p>lodash写法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Checks if `value` is classified as a boolean primitive or object.</span><br><span class="line"> *</span><br><span class="line"> * @since 0.1.0</span><br><span class="line"> * @category Lang</span><br><span class="line"> * @param &#123;*&#125; value The value to check.</span><br><span class="line"> * @returns &#123;boolean&#125; Returns `true` if `value` is a boolean, else `false`.</span><br><span class="line"> * @example</span><br><span class="line"> *</span><br><span class="line"> * isBoolean(false)</span><br><span class="line"> * // =&gt; true</span><br><span class="line"> *</span><br><span class="line"> * isBoolean(null)</span><br><span class="line"> * // =&gt; false</span><br><span class="line"> */</span><br><span class="line">function isBoolean(value) &#123;</span><br><span class="line">  return value === true || value === false ||</span><br><span class="line">    (isObjectLike(value) &amp;&amp; getTag(value) == &#x27;[object Boolean]&#x27;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="string"><a href="#string" class="headerlink" title="string"></a>string</h4><ul><li><p>typeof</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function isString(value)&#123;</span><br><span class="line">    return typeof value === &#x27;string&#x27;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>toString </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function isString(value)&#123;</span><br><span class="line">    return  toString.call(value) === &#x27;[object String]&#x27;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>lodash写法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Checks if `value` is classified as a `String` primitive or object.</span><br><span class="line"> *</span><br><span class="line"> * @since 0.1.0</span><br><span class="line"> * @category Lang</span><br><span class="line"> * @param &#123;*&#125; value The value to check.</span><br><span class="line"> * @returns &#123;boolean&#125; Returns `true` if `value` is a string, else `false`.</span><br><span class="line"> * @example</span><br><span class="line"> *</span><br><span class="line"> * isString(&#x27;abc&#x27;)</span><br><span class="line"> * // =&gt; true</span><br><span class="line"> *</span><br><span class="line"> * isString(1)</span><br><span class="line"> * // =&gt; false</span><br><span class="line"> */</span><br><span class="line">function isString(value) &#123;</span><br><span class="line">  const type = typeof value</span><br><span class="line">  return type === &#x27;string&#x27; || (type === &#x27;object&#x27; &amp;&amp; value != null &amp;&amp; !Array.isArray(value) &amp;&amp; getTag(value) == &#x27;[object String]&#x27;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h4 id="number"><a href="#number" class="headerlink" title="number"></a>number</h4><ul><li><p>typeof</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function isNumber(value)&#123;</span><br><span class="line">    return typeof value === &#x27;number&#x27;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>toString </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function isNumber(value)&#123;</span><br><span class="line">    return  toString.call(value) === &#x27;[object Number]&#x27;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>lodash</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Checks if `value` is classified as a `Number` primitive or object.</span><br><span class="line"> *</span><br><span class="line"> * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are</span><br><span class="line"> * classified as numbers, use the `Number.isFinite` method.</span><br><span class="line"> *</span><br><span class="line"> * @since 0.1.0</span><br><span class="line"> * @category Lang</span><br><span class="line"> * @param &#123;*&#125; value The value to check.</span><br><span class="line"> * @returns &#123;boolean&#125; Returns `true` if `value` is a number, else `false`.</span><br><span class="line"> * @see isInteger, toInteger, toNumber</span><br><span class="line"> * @example</span><br><span class="line"> *</span><br><span class="line"> * isNumber(3)</span><br><span class="line"> * // =&gt; true</span><br><span class="line"> *</span><br><span class="line"> * isNumber(Number.MIN_VALUE)</span><br><span class="line"> * // =&gt; true</span><br><span class="line"> *</span><br><span class="line"> * isNumber(Infinity)</span><br><span class="line"> * // =&gt; true</span><br><span class="line"> *</span><br><span class="line"> * isNumber(&#x27;3&#x27;)</span><br><span class="line"> * // =&gt; false</span><br><span class="line"> */</span><br><span class="line">function isNumber(value) &#123;</span><br><span class="line">  return typeof value === &#x27;number&#x27; ||</span><br><span class="line">    (isObjectLike(value) &amp;&amp; getTag(value) == &#x27;[object Number]&#x27;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h4><ul><li><p>typeof</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function isObject(value)&#123;</span><br><span class="line">    return value !== null &amp;&amp; typeof value === &#x27;object&#x27;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>toString </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function isObject(value)&#123;</span><br><span class="line">    return  value !== null &amp;&amp; toString.call(value) === &#x27;[object Object]&#x27;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>lodash </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Checks if `value` is object-like. A value is object-like if it&#x27;s not `null`</span><br><span class="line"> * and has a `typeof` result of &quot;object&quot;.</span><br><span class="line"> *</span><br><span class="line"> * @since 4.0.0</span><br><span class="line"> * @category Lang</span><br><span class="line"> * @param &#123;*&#125; value The value to check.</span><br><span class="line"> * @returns &#123;boolean&#125; Returns `true` if `value` is object-like, else `false`.</span><br><span class="line"> * @example</span><br><span class="line"> *</span><br><span class="line"> * isObjectLike(&#123;&#125;)</span><br><span class="line"> * // =&gt; true</span><br><span class="line"> *</span><br><span class="line"> * isObjectLike([1, 2, 3])</span><br><span class="line"> * // =&gt; true</span><br><span class="line"> *</span><br><span class="line"> * isObjectLike(Function)</span><br><span class="line"> * // =&gt; false</span><br><span class="line"> *</span><br><span class="line"> * isObjectLike(null)</span><br><span class="line"> * // =&gt; false</span><br><span class="line"> */</span><br><span class="line">function isObjectLike(value) &#123;</span><br><span class="line">  return typeof value === &#x27;object&#x27; &amp;&amp; value !== null</span><br><span class="line">&#125;</span><br><span class="line">function isObject(value) &#123;</span><br><span class="line">  const type = typeof value</span><br><span class="line">  return value != null &amp;&amp; (type === &#x27;object&#x27; || type === &#x27;function&#x27;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h4><ul><li>typeof 不能用<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">typeof [] === &#x27;object&#x27; //true</span><br></pre></td></tr></table></figure></li><li>toString<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">toString.call([]) === &#x27;[object Array]&#x27; //true</span><br></pre></td></tr></table></figure></li><li>Constructor<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[].constructor === Array //true </span><br></pre></td></tr></table></figure></li><li>lodash<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Checks if `value` is array-like. A value is considered array-like if it&#x27;s</span><br><span class="line"> * not a function and has a `value.length` that&#x27;s an integer greater than or</span><br><span class="line"> * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.</span><br><span class="line"> *</span><br><span class="line"> * @since 4.0.0</span><br><span class="line"> * @category Lang</span><br><span class="line"> * @param &#123;*&#125; value The value to check.</span><br><span class="line"> * @returns &#123;boolean&#125; Returns `true` if `value` is array-like, else `false`.</span><br><span class="line"> * @example</span><br><span class="line"> *</span><br><span class="line"> * isArrayLike([1, 2, 3])</span><br><span class="line"> * // =&gt; true</span><br><span class="line"> *</span><br><span class="line"> * isArrayLike(document.body.children)</span><br><span class="line"> * // =&gt; true</span><br><span class="line"> *</span><br><span class="line"> * isArrayLike(&#x27;abc&#x27;)</span><br><span class="line"> * // =&gt; true</span><br><span class="line"> *</span><br><span class="line"> * isArrayLike(Function)</span><br><span class="line"> * // =&gt; false</span><br><span class="line"> */</span><br><span class="line">function isArrayLike(value) &#123;</span><br><span class="line">  return value != null &amp;&amp; typeof value !== &#x27;function&#x27; &amp;&amp; isLength(value.length)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h4><ul><li>typeof<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">typeof function()&#123;&#125; === &#x27;function&#x27; //true</span><br></pre></td></tr></table></figure></li><li>toString<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">toString.call(function()&#123;&#125;) === &#x27;[object Function]&#x27; //true </span><br></pre></td></tr></table></figure></li><li>lodash <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function isFunction(value) &#123;</span><br><span class="line">  return typeof value === &#x27;function&#x27;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="Symbol"><a href="#Symbol" class="headerlink" title="Symbol"></a>Symbol</h4><ul><li>typeof <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">typeof Symbol === &#x27;symbol&#x27; //true </span><br></pre></td></tr></table></figure></li><li>toString<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">toString.call(Symbol) === &#x27;[object Symbol]&#x27; //true</span><br></pre></td></tr></table></figure></li><li>lodash<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Checks if `value` is classified as a `Symbol` primitive or object.</span><br><span class="line"> *</span><br><span class="line"> * @since 4.0.0</span><br><span class="line"> * @category Lang</span><br><span class="line"> * @param &#123;*&#125; value The value to check.</span><br><span class="line"> * @returns &#123;boolean&#125; Returns `true` if `value` is a symbol, else `false`.</span><br><span class="line"> * @example</span><br><span class="line"> *</span><br><span class="line"> * isSymbol(Symbol.iterator)</span><br><span class="line"> * // =&gt; true</span><br><span class="line"> *</span><br><span class="line"> * isSymbol(&#x27;abc&#x27;)</span><br><span class="line"> * // =&gt; false</span><br><span class="line"> */</span><br><span class="line">function isSymbol(value) &#123;</span><br><span class="line">  const type = typeof value</span><br><span class="line">  return type == &#x27;symbol&#x27; || (type === &#x27;object&#x27; &amp;&amp; value != null &amp;&amp; getTag(value) == &#x27;[object Symbol]&#x27;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> Lodash </tag>
            
            <tag> 源码 </tag>
            
            <tag> 阅读笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《软技能》- 我的域名备案的那些事儿</title>
      <link href="/2020/02/05/do_at_workspace/%E3%80%8A%E8%BD%AF%E6%8A%80%E8%83%BD%E3%80%8B-%20%E6%88%91%E7%9A%84%E5%9F%9F%E5%90%8D%E5%A4%87%E6%A1%88%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/"/>
      <url>/2020/02/05/do_at_workspace/%E3%80%8A%E8%BD%AF%E6%8A%80%E8%83%BD%E3%80%8B-%20%E6%88%91%E7%9A%84%E5%9F%9F%E5%90%8D%E5%A4%87%E6%A1%88%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/</url>
      
        <content type="html"><![CDATA[<h4 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h4><ul><li>备案大体分成两种：一是经营性备案，二是非经营性备案，通过互联网向用户无偿提供具有公开性、共享性信息服务活动的网站。</li><li>针对有网站的域名；没有网站的域名不需要备案。</li><li>为了防止在网上从事非法的网站经营活动，打击不良互联网信息的传播，如果网站不备案的话，很有可能被查处以后关停。</li><li>其中最关键点，经营网站的服务器是否在dl。dl地区的服务器，都需要进行备案的。</li></ul><h4 id="2018"><a href="#2018" class="headerlink" title="2018"></a>2018</h4><ul><li>1.先购买域名。我个人比较偏向于<a href="https://dnspod.cloud.tencent.com/">腾讯</a>。价格更实惠。<ul><li>腾讯控制台，域名管理界面，点击<a href="https://cloud.tencent.com/product/ba">域名备案</a>。</li><li>申请幕布，可以线下去指定地点或者腾讯这边邮寄幕布，自己拍照上传。</li></ul></li><li>2.填写备案信息。等收到幕布，拍照上传；填写域名备案相关信息；</li><li>3 腾讯云审核。此时备案要求不是很严格</li><li>4 管局审核 </li><li>5 备案完成</li><li>6.获得备案号后，您需在网站开通后30日内进行<a href="http://www.beian.gov.cn/portal/index">公安备案</a>。如果您的网站涉及经营性行为还需要申请经营性网站备案.</li><li>7.公安备案成功，30个工作日之内“复制备案编号HTML代码”，粘贴到您网页源代码中的底部位置；“下载备案编号图标”，放在备案编号之前。</li></ul><h4 id="2019"><a href="#2019" class="headerlink" title="2019"></a>2019</h4><ul><li>跟上一年基本相同，依旧需要使用幕布进行拍照</li><li>不同的就是审核变的严格了些。</li></ul><h4 id="2020"><a href="#2020" class="headerlink" title="2020"></a>2020</h4><ul><li>相较于上一年，目前是在小程序上支持备案</li><li>不需要使用幕布，使用视频录制，进行人脸识别，动态的合成到对应的幕布背景上。</li><li>服务器逐年的优惠力度加大</li><li>打个小广告，欢迎新用户，优惠多多</li><li><a href="https://www.aliyun.com/minisite/goods?userCode=jsz8kxpk">传送阿里</a><br><img src="https://s2.ax1x.com/2020/02/23/3lJRzR.md.png"></li><li><a href="https://url.cn/5NNmQAP">传送腾讯</a><br><img src="https://s2.ax1x.com/2020/02/23/3lGObT.jpg"></li><li><a href="https://xbsj9895.xyz/i/iv200302/N7VLBhw">西部世界</a><br>给大家安利个超靠谱的梯子，注册免费送三天，不限流不限速！<br>速度超快，秒开YouTube、Ins，还能看奈飞&#x2F;Netflix、Hulu、HBO、动画疯、TVB、Apple TV…<br>地区很丰富，香港、台湾、美国原生、日本原生全都有，可以在手机、电脑、路由器上一起使用。<br>海外企业无惧封锁，Trojan、V2Ray协议超强抗封锁，也支持SSR的哦。</li></ul><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul><li>唯一不变的就是一切都是在变化的</li><li>技术的发展，必然带来效率的更迭。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 软技能 </tag>
            
            <tag> 域名备案 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Lodash源码阅读笔记》- isEmpty</title>
      <link href="/2020/01/20/front_skills/lodash/%E3%80%8ALodash%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E3%80%8B-isEmpty/"/>
      <url>/2020/01/20/front_skills/lodash/%E3%80%8ALodash%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E3%80%8B-isEmpty/</url>
      
        <content type="html"><![CDATA[<p>isEmpty，用于判断传入值，是否为空对象、空集合([],map,set).<br>判断依据的标准为：</p><ul><li>没有可迭代的字符串键</li><li>array,str 等参数的 length &lt; 1 </li><li>map,set 类 ，size &lt; 1.</li><li>其余的一律认为空，譬如true</li></ul><h4 id="源码如下："><a href="#源码如下：" class="headerlink" title="源码如下："></a>源码如下：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Checks if `value` is an empty object, collection, map, or set.</span><br><span class="line"> *</span><br><span class="line"> * Objects are considered empty if they have no own enumerable string keyed</span><br><span class="line"> * properties.</span><br><span class="line"> *</span><br><span class="line"> * Array-like values such as `arguments` objects, arrays, buffers, strings, or</span><br><span class="line"> * jQuery-like collections are considered empty if they have a `length` of `0`.</span><br><span class="line"> * Similarly, maps and sets are considered empty if they have a `size` of `0`.</span><br><span class="line"> *</span><br><span class="line"> * @since 0.1.0</span><br><span class="line"> * @category Lang</span><br><span class="line"> * @param &#123;*&#125; value The value to check.</span><br><span class="line"> * @returns &#123;boolean&#125; Returns `true` if `value` is empty, else `false`.</span><br><span class="line"> * @example</span><br><span class="line"> *</span><br><span class="line"> * isEmpty(null)</span><br><span class="line"> * // =&gt; true</span><br><span class="line"> *</span><br><span class="line"> * isEmpty(true)</span><br><span class="line"> * // =&gt; true</span><br><span class="line"> *</span><br><span class="line"> * isEmpty(1)</span><br><span class="line"> * // =&gt; true</span><br><span class="line"> *</span><br><span class="line"> * isEmpty([1, 2, 3])</span><br><span class="line"> * // =&gt; false</span><br><span class="line"> *</span><br><span class="line"> * isEmpty(&#x27;abc&#x27;)</span><br><span class="line"> * // =&gt; false</span><br><span class="line"> *</span><br><span class="line"> * isEmpty(&#123; &#x27;a&#x27;: 1 &#125;)</span><br><span class="line"> * // =&gt; false</span><br><span class="line"> */</span><br><span class="line">function isEmpty(value) &#123;</span><br><span class="line">  if (value == null) &#123;</span><br><span class="line">    return true</span><br><span class="line">  &#125;</span><br><span class="line">  //类数组、str、buffer、arguments</span><br><span class="line">  if (isArrayLike(value) &amp;&amp;</span><br><span class="line">      (Array.isArray(value) || typeof value === &#x27;string&#x27; || typeof value.splice === &#x27;function&#x27; ||</span><br><span class="line">        isBuffer(value) || isTypedArray(value) || isArguments(value))) &#123;</span><br><span class="line">    return !value.length</span><br><span class="line">  &#125;</span><br><span class="line">  //set,map </span><br><span class="line">  const tag = getTag(value)</span><br><span class="line">  if (tag == &#x27;[object Map]&#x27; || tag == &#x27;[object Set]&#x27;) &#123;</span><br><span class="line">    return !value.size</span><br><span class="line">  &#125;</span><br><span class="line">  //对象</span><br><span class="line">  if (isPrototype(value)) &#123;</span><br><span class="line">    return !Object.keys(value).length</span><br><span class="line">  &#125;</span><br><span class="line">  for (const key in value) &#123;</span><br><span class="line">    if (hasOwnProperty.call(value, key)) &#123;</span><br><span class="line">      return false</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return true</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default isEmpty</span><br></pre></td></tr></table></figure><h4 id="getTag源码"><a href="#getTag源码" class="headerlink" title="getTag源码"></a>getTag源码</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">const toString = Object.prototype.toString</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Gets the `toStringTag` of `value`.</span><br><span class="line"> *</span><br><span class="line"> * @private</span><br><span class="line"> * @param &#123;*&#125; value The value to query.</span><br><span class="line"> * @returns &#123;string&#125; Returns the `toStringTag`.</span><br><span class="line"> */</span><br><span class="line">function getTag(value) &#123;</span><br><span class="line">  if (value == null) &#123;</span><br><span class="line">    return value === undefined ? &#x27;[object Undefined]&#x27; : &#x27;[object Null]&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">  return toString.call(value) //这个写法，值得学习</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default getTag</span><br></pre></td></tr></table></figure><h4 id="isPrototype-源码"><a href="#isPrototype-源码" class="headerlink" title="isPrototype 源码"></a>isPrototype 源码</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">/** Used for built-in method references. */</span><br><span class="line">const objectProto = Object.prototype</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Checks if `value` is likely a prototype object.</span><br><span class="line"> *</span><br><span class="line"> * @private</span><br><span class="line"> * @param &#123;*&#125; value The value to check.</span><br><span class="line"> * @returns &#123;boolean&#125; Returns `true` if `value` is a prototype, else `false`.</span><br><span class="line"> */</span><br><span class="line">function isPrototype(value) &#123;</span><br><span class="line">  const Ctor = value &amp;&amp; value.constructor</span><br><span class="line">  const proto = (typeof Ctor === &#x27;function&#x27; &amp;&amp; Ctor.prototype) || objectProto</span><br><span class="line"></span><br><span class="line">  return value === proto</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default isPrototype</span><br></pre></td></tr></table></figure><h4 id="isArguments源码"><a href="#isArguments源码" class="headerlink" title="isArguments源码"></a>isArguments源码</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function isArguments(value) &#123;</span><br><span class="line">  return isObjectLike(value) &amp;&amp; getTag(value) == &#x27;[object Arguments]&#x27;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default isArguments</span><br></pre></td></tr></table></figure><h4 id="分析其中写法缘由"><a href="#分析其中写法缘由" class="headerlink" title="分析其中写法缘由"></a>分析其中写法缘由</h4>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> Lodash </tag>
            
            <tag> 源码 </tag>
            
            <tag> 阅读笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Lodash源码阅读笔记》- delay</title>
      <link href="/2020/01/19/front_skills/lodash/%E3%80%8ALodash%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E3%80%8B-delay/"/>
      <url>/2020/01/19/front_skills/lodash/%E3%80%8ALodash%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E3%80%8B-delay/</url>
      
        <content type="html"><![CDATA[<h4 id="需求背景"><a href="#需求背景" class="headerlink" title="需求背景"></a>需求背景</h4><p>D3 tooltip内容过多，需要展示滚动条。鼠标离开定位后，立刻触发mouseout,此时tooltip会隐藏。<br>但是，需求是不能隐藏。那么久从离开到隐藏之间，存在一定时间的隐藏。</p><h4 id="用delay实现"><a href="#用delay实现" class="headerlink" title="用delay实现"></a>用delay实现</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 全局变量控制</span><br><span class="line"> cancelDealHandler()&#123;</span><br><span class="line">     if(something)&#123; //取消</span><br><span class="line">         cancle = true;</span><br><span class="line">     &#125;else &#123;</span><br><span class="line">         cancle = false;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">line.on(&#x27;mouseover&#x27;,() =&gt; &#123;</span><br><span class="line">    //触发tooltip显示</span><br><span class="line">    showTip();</span><br><span class="line">&#125;).on(&#x27;mouseout&#x27;,() =&gt; &#123; </span><br><span class="line">   _.delay(() =&gt; &#123;</span><br><span class="line">       if(cancle)&#123; //取消隐藏,全局变量控制</span><br><span class="line">         return;</span><br><span class="line">       &#125;</span><br><span class="line">       hideTip();</span><br><span class="line">   &#125;,3000);</span><br><span class="line">&#125;)</span><br><span class="line">;</span><br></pre></td></tr></table></figure><h4 id="上述方法实现总结"><a href="#上述方法实现总结" class="headerlink" title="上述方法实现总结"></a>上述方法实现总结</h4><ul><li>确实能做到tip显示控制</li><li>不过，存在严重缺陷，小伙伴你知道吗？</li></ul><h4 id="我们查看下delay源码"><a href="#我们查看下delay源码" class="headerlink" title="我们查看下delay源码"></a>我们查看下delay源码</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Invokes `func` after `wait` milliseconds. Any additional arguments are</span><br><span class="line"> * provided to `func` when it&#x27;s invoked.</span><br><span class="line"> *</span><br><span class="line"> * @since 0.1.0</span><br><span class="line"> * @category Function</span><br><span class="line"> * @param &#123;Function&#125; func The function to delay.</span><br><span class="line"> * @param &#123;number&#125; wait The number of milliseconds to delay invocation.</span><br><span class="line"> * @param &#123;...*&#125; [args] The arguments to invoke `func` with.</span><br><span class="line"> * @returns &#123;number&#125; Returns the timer id.</span><br><span class="line"> * @example</span><br><span class="line"> *</span><br><span class="line"> * delay(text =&gt; console.log(text), 1000, &#x27;later&#x27;)</span><br><span class="line"> * // =&gt; Logs &#x27;later&#x27; after one second.</span><br><span class="line"> */</span><br><span class="line">function delay(func, wait, ...args) &#123;</span><br><span class="line">  if (typeof func !== &#x27;function&#x27;) &#123;</span><br><span class="line">    throw new TypeError(&#x27;Expected a function&#x27;)</span><br><span class="line">  &#125;</span><br><span class="line">  return setTimeout(func, +wait || 0, ...args)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default delay</span><br></pre></td></tr></table></figure><p>哦哦，原来，底层使用setTimeout!!!</p><h4 id="上述方法的问题："><a href="#上述方法的问题：" class="headerlink" title="上述方法的问题："></a>上述方法的问题：</h4><pre><code>* 没调用一次delay,触发一次setTimeout* 大量的mouseout,那么久会产生很多setTimout* 过多的setTimout,会进入排队等待执行，* 当某次代码执行到hideTip()前，cancel= true,但是此时依旧会隐藏tip.* 没有及时清空timer,虽然只会执行一次</code></pre><h4 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 全局变量控制</span><br><span class="line"> cancelDealHandler()&#123;</span><br><span class="line">     if(something)&#123; //取消</span><br><span class="line">         clearTimeout(delayTimer);</span><br><span class="line">     &#125;else &#123;</span><br><span class="line">         hideTip();</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">line.on(&#x27;mouseover&#x27;,() =&gt; &#123;</span><br><span class="line">     //触发tooltip显示</span><br><span class="line">     clearTimeout(delayTimer);</span><br><span class="line">     showTip();</span><br><span class="line"> &#125;).on(&#x27;mouseout&#x27;,() =&gt; &#123; </span><br><span class="line">    clearTimeout(delayTimer);</span><br><span class="line">    delayTimer = _.delay(() =&gt; &#123;</span><br><span class="line">        hideTip();</span><br><span class="line">    &#125;,3000);</span><br><span class="line"> &#125;)</span><br><span class="line"> ;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> Lodash </tag>
            
            <tag> 源码 </tag>
            
            <tag> 阅读笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《微信小程序》-云开发学习笔记</title>
      <link href="/2020/01/18/front_skills/minapp/%E3%80%8A%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E3%80%8B-%E4%BA%91%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2020/01/18/front_skills/minapp/%E3%80%8A%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E3%80%8B-%E4%BA%91%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>2019年，小程序云端开发上线，一直没有好好的去学习，如今serverless如火如荼。今天，重新学习下，并记录如下理解心得：<br>假定小程序云端开发，简称云端，便于下文使用，减少累赘。</p><h4 id="云端能力"><a href="#云端能力" class="headerlink" title="云端能力"></a>云端能力</h4><table><thead><tr><th>能力</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td>云函数</td><td>无需自建服务器</td><td>在云端运行的代码，微信私有协议天然鉴权，开发者只需编写自身业务逻辑代码</td></tr><tr><td>数据库</td><td>无需自建数据库</td><td>一个既可在小程序前端操作，也能在云函数中读写的 JSON 数据库</td></tr><tr><td>存储</td><td>无需自建存储和CDN</td><td>在小程序前端直接上传&#x2F;下载云端文件，在云开发控制台可视化管理</td></tr><tr><td>云调用</td><td>原生微信服务集成</td><td>基于云函数免鉴权使用小程序开放接口的能力，包括服务端调用、获取开放数据等能力</td></tr></tbody></table><h4 id="运行过程"><a href="#运行过程" class="headerlink" title="运行过程"></a>运行过程</h4><ul><li>小程序结构<br><img src="https://s2.ax1x.com/2020/01/18/1pRkid.jpg" alt="小程序结构"></li><li>云端运行过程<br><img src="https://s2.ax1x.com/2020/01/18/1pWdjP.png" alt="运行过程"></li></ul><h4 id="云端核心概念"><a href="#云端核心概念" class="headerlink" title="云端核心概念"></a>云端核心概念</h4><ul><li>同时免费支持两套基础独立的云开发资源，包括数据库、存储空间、云函数等资源。不满足业务需求，可付费升级。</li><li>资源配额可分为三类：资源均衡型、CDN 资源消耗型、云函数资源消耗型、数据库资源消耗型</li><li>云端数据库为JSON 数据库;每条记录均为json对象。</li></ul><table><thead><tr><th>关系型</th><th>文档型</th></tr></thead><tbody><tr><td>数据库 database</td><td>数据库 database</td></tr><tr><td>表 table</td><td>集合 collection</td></tr><tr><td>行 row</td><td>记录 record &#x2F; doc</td></tr><tr><td>列 column</td><td>字段</td></tr></tbody></table><ul><li>数据库 API 包含增删改查的能力，使用 API 操作数据库只需三步：获取数据库引用、构造查询&#x2F;更新条件、发出请求.</li><li>wx.cloud.uploadFile 和 wx.cloud.downloadFile 完成上传和下载云文件操作.</li><li>云开发控制台用于可视化管理云资源。</li><li>开发者工具，支持<a href="https://developers.weixin.qq.com/miniprogram/dev/wxcloud/guide/functions/local-debug.html">云函数本地调试</a>。其中本地调试，需要保证依赖已存在。</li><li>本地调试，偶尔会出现实例调用等待，此时关闭调试窗口，再试即可。<br>  <img src="https://s2.ax1x.com/2020/01/18/19Prh4.md.png" alt="偶尔出现"></li></ul><h4 id="云端限制"><a href="#云端限制" class="headerlink" title="云端限制"></a><a href="https://developers.weixin.qq.com/miniprogram/dev/wxcloud/billing/quota.html">云端限制</a></h4><ul><li>云函数（单次运行）运行内存：256M</li><li>云函数数量：50个</li><li>云函数并发数：1000</li><li>数据库流量：单次出包大小为16M</li><li>数据库单集合索引限制：20个</li><li>所有套餐云函数均改为无限调用次数</li></ul><h4 id="云端优点"><a href="#云端优点" class="headerlink" title="云端优点"></a>云端优点</h4><ul><li>无需维护复杂的鉴权机制，即可获取天然可信任的用户登录态（openid）、appi</li></ul><h3 id="云端语法"><a href="#云端语法" class="headerlink" title="云端语法"></a>云端语法</h3><h4 id="获取openid、userinfo、appid"><a href="#获取openid、userinfo、appid" class="headerlink" title="获取openid、userinfo、appid"></a>获取openid、userinfo、appid</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"># login 云函数</span><br><span class="line">// 云函数模板</span><br><span class="line">// 部署：在 cloud-functions/login 文件夹右击选择 “上传并部署”</span><br><span class="line"></span><br><span class="line">const cloud = require(&#x27;wx-server-sdk&#x27;)</span><br><span class="line"></span><br><span class="line">// 云端初始化</span><br><span class="line">cloud.init(&#123;</span><br><span class="line"> env: cloud.DYNAMIC_CURRENT_ENV</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">exports.main = (event, context) =&gt; &#123;</span><br><span class="line">  console.log(event)</span><br><span class="line">  console.log(context)</span><br><span class="line"></span><br><span class="line">  // 可执行其他自定义逻辑</span><br><span class="line">  // console.log 的内容可以在云开发云函数调用日志查看</span><br><span class="line">  let &#123; userInfo, a, b&#125; = event</span><br><span class="line">  // 获取 WX Context (微信调用上下文)，包括 OPENID、APPID、及 UNIONID（需满足 UNIONID 获取条件）</span><br><span class="line">  const wxContext = cloud.getWXContext()</span><br><span class="line">  return &#123;</span><br><span class="line">    event,</span><br><span class="line">    openid: wxContext.OPENID,</span><br><span class="line">    appid: wxContext.APPID,</span><br><span class="line">    unionid: wxContext.UNIONID,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 小程序调用</span><br><span class="line"> wx.cloud.callFunction(&#123;</span><br><span class="line">      name: &#x27;login&#x27;,</span><br><span class="line">      data: &#123;&#125;,</span><br><span class="line">      success: res =&gt; &#123;</span><br><span class="line">        console.log(&#x27;[云函数 applauch] [login] user res: &#x27;, res.result)</span><br><span class="line">        const openid = res.result.openid;</span><br><span class="line">        this.globalData.openid = openid;</span><br><span class="line">        wx.xst.setOpenId(openid);</span><br><span class="line">      &#125;,</span><br><span class="line">      fail: err =&gt; &#123;</span><br><span class="line">        console.error(&#x27;[云函数] [login] 调用失败&#x27;, err)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h4 id="数据库查询"><a href="#数据库查询" class="headerlink" title="数据库查询"></a>数据库查询</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// 1. 获取数据库引用</span><br><span class="line">const db = wx.cloud.database()</span><br><span class="line">// 2. 构造查询语句</span><br><span class="line">// collection 方法获取一个集合的引用</span><br><span class="line">// where 方法传入一个对象，数据库返回集合中字段等于指定值的 JSON 文档。</span><br><span class="line">// get 方法会触发网络请求，往数据库取数据</span><br><span class="line">db.collection(&#x27;books&#x27;).where(&#123;</span><br><span class="line">  publishInfo: &#123;</span><br><span class="line">    country: &#x27;United States&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;).get(&#123;</span><br><span class="line">  success: function(res) &#123;</span><br><span class="line">  // 输出 [&#123; &quot;title&quot;: &quot;The Catcher in the Rye&quot;, ... &#125;]</span><br><span class="line">  console.log(res)</span><br><span class="line"> &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="小程序端初始化"><a href="#小程序端初始化" class="headerlink" title="小程序端初始化"></a>小程序端初始化</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#app.js</span><br><span class="line">onLaunch: function () &#123;</span><br><span class="line">    let self = this;</span><br><span class="line">    if (!wx.cloud) &#123;</span><br><span class="line">      console.error(&#x27;请使用 2.2.3 或以上的基础库以使用云能力&#x27;)</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      wx.cloud.init(&#123;</span><br><span class="line">        traceUser: true,</span><br><span class="line">        env:&#x27;test&#x27;,</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    self.onGetOpenid();</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><h4 id="云函数端初始化"><a href="#云函数端初始化" class="headerlink" title="云函数端初始化"></a>云函数端初始化</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const cloud = require(&#x27;wx-server-sdk&#x27;)</span><br><span class="line">// 云端初始化</span><br><span class="line">cloud.init(&#123;</span><br><span class="line"> env: cloud.DYNAMIC_CURRENT_ENV</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="图片上传"><a href="#图片上传" class="headerlink" title="图片上传"></a>图片上传</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 让用户选择一张图片</span><br><span class="line">wx.chooseImage(&#123;</span><br><span class="line">  success: chooseResult =&gt; &#123;</span><br><span class="line">    // 将图片上传至云存储空间</span><br><span class="line">    wx.cloud.uploadFile(&#123;</span><br><span class="line">      // 指定上传到的云路径</span><br><span class="line">      cloudPath: &#x27;my-photo.png&#x27;,</span><br><span class="line">      // 指定要上传的文件的小程序临时文件路径</span><br><span class="line">      filePath: chooseResult.tempFilePaths[0],</span><br><span class="line">      // 成功回调</span><br><span class="line">      success: res =&gt; &#123;</span><br><span class="line">        console.log(&#x27;上传成功&#x27;, res)</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><!-- ### 云端实践案例 --><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://developers.weixin.qq.com/miniprogram/dev/wxcloud/basis/getting-started.html">云开发</a></li><li><a href="https://cloud.tencent.com/developer/article/1038403">小程序架构</a></li><li><a href="http://m.elecfans.com/article/674622.html">Faas</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Github Action》- 一键push-code，自动构建个人博客站点</title>
      <link href="/2020/01/18/dev_tool_skills/git/%E3%80%8AGithub%20Action%E3%80%8B-%20%E4%B8%80%E9%94%AEpush-code%EF%BC%8C%E8%87%AA%E5%8A%A8%E6%9E%84%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%AB%99%E7%82%B9/"/>
      <url>/2020/01/18/dev_tool_skills/git/%E3%80%8AGithub%20Action%E3%80%8B-%20%E4%B8%80%E9%94%AEpush-code%EF%BC%8C%E8%87%AA%E5%8A%A8%E6%9E%84%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%AB%99%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<p>个人博客站点，本人使用是hexo.常规的操作就是本地编辑好，然后手动部署。有了GitHub action，就解决了自动化部署问题。<br>更多关于手动部署，请查阅 <a href="https://hexo.io/">Hexo</a>。</p><h4 id="GitHub-新建个人博客分支my-blog"><a href="#GitHub-新建个人博客分支my-blog" class="headerlink" title="GitHub 新建个人博客分支my-blog"></a>GitHub 新建个人博客分支my-blog</h4><p> 假设读者已会，不做赘述。<br> 另外提一句，GitHub针对3人一下，支持新建private 分支哦~，这是我的最爱！！</p><h4 id="hexo-blog-theme上传"><a href="#hexo-blog-theme上传" class="headerlink" title="hexo-blog theme上传"></a>hexo-blog theme上传</h4><p>  之前theme主题，没有上传，构建失败</p><h4 id="配置workflow"><a href="#配置workflow" class="headerlink" title="配置workflow"></a>配置workflow</h4><p> 大致的意思就是，在代码push，触发构建，构建到xxx.github.io master分支上。</p><figure class="highlight plaintext"><figcaption><span>Build and Deploy</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">on: </span><br><span class="line">  push:</span><br><span class="line">    branches: </span><br><span class="line">      - master</span><br><span class="line">jobs:</span><br><span class="line">  build-and-deploy:</span><br><span class="line">    runs-on: ubuntu-latest</span><br><span class="line">    steps:</span><br><span class="line">    - name: Checkout blog code </span><br><span class="line">      uses: actions/checkout@v2.0.0</span><br><span class="line">        </span><br><span class="line">    - name: Build and Deploy</span><br><span class="line">      uses:  Forest10/hexo-deploy-action-with-cname@v1.0.0</span><br><span class="line">      env:</span><br><span class="line">        USER_NAME: your name # optional</span><br><span class="line">        EMAIL: your email # optional</span><br><span class="line">        PERSONAL_TOKEN: $&#123;&#123; secrets.ACCESS_TOKEN &#125;&#125;</span><br><span class="line">        PUBLISH_REPOSITORY: your.github.io # The repository the action should deploy to.</span><br><span class="line">        BRANCH: master  # The branch the action should deploy to.</span><br><span class="line">        PUBLISH_DIR: ./public # The folder the action should deploy.</span><br></pre></td></tr></table></figure><h4 id="等待构建"><a href="#等待构建" class="headerlink" title="等待构建"></a>等待构建</h4><p><img src="https://s2.ax1x.com/2020/01/18/1pDJtP.png"><br><img src="https://s2.ax1x.com/2020/01/18/1pDU1S.png"><br><img src="https://s2.ax1x.com/2020/01/18/1pDYff.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> GitHub Action </tag>
            
            <tag> 构建 </tag>
            
            <tag> 云 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Git》- 只输入一次密码操作配置</title>
      <link href="/2020/01/17/dev_tool_skills/git/%E3%80%8AGit%E3%80%8B-%20%E5%8F%AA%E8%BE%93%E5%85%A5%E4%B8%80%E6%AC%A1%E5%AF%86%E7%A0%81%E6%93%8D%E4%BD%9C%E9%85%8D%E7%BD%AE/"/>
      <url>/2020/01/17/dev_tool_skills/git/%E3%80%8AGit%E3%80%8B-%20%E5%8F%AA%E8%BE%93%E5%85%A5%E4%B8%80%E6%AC%A1%E5%AF%86%E7%A0%81%E6%93%8D%E4%BD%9C%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>直接进入主题，每次提交代码，都需要输入一次username、password，有点繁琐。那如何配置一次即可呢？<br>本文假设前提，你已有git账户密码、配置好了key。</p><h3 id="git安装"><a href="#git安装" class="headerlink" title="git安装"></a>git安装</h3><p>  直接一步步next</p><h3 id="查看git-system配置"><a href="#查看git-system配置" class="headerlink" title="查看git system配置"></a>查看git system配置</h3><h4 id="git-config-–systeml-l"><a href="#git-config-–systeml-l" class="headerlink" title="git config –systeml -l"></a>git config –systeml -l</h4> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> $ git config --system -l</span><br><span class="line">credential.helper=manager</span><br></pre></td></tr></table></figure> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#重置manager</span><br><span class="line">git config --system --unset credential.helper </span><br></pre></td></tr></table></figure><h3 id="git-账户、密码存储配置-gitconfig"><a href="#git-账户、密码存储配置-gitconfig" class="headerlink" title="git 账户、密码存储配置-.gitconfig"></a>git 账户、密码存储配置-.gitconfig</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[user]</span><br><span class="line">name = your username</span><br><span class="line">email = your email</span><br><span class="line">[credential]</span><br><span class="line">    helper = store</span><br></pre></td></tr></table></figure><h3 id="git-账户密码输入"><a href="#git-账户密码输入" class="headerlink" title="git 账户密码输入"></a>git 账户密码输入</h3>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git pull <span class="comment"># 项目路径下，触发账户密码输入；配置完毕再次git pull 就 不用输入密码了</span></span><br></pre></td></tr></table></figure><h3 id="查看git配置完毕后"><a href="#查看git配置完毕后" class="headerlink" title="查看git配置完毕后"></a>查看git配置完毕后</h3><h4 id="git-config-–global-l"><a href="#git-config-–global-l" class="headerlink" title="git config –global -l"></a>git config –global -l</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global -l</span><br><span class="line">user.name=your username </span><br><span class="line">user.email=&lt;your email&gt;</span><br><span class="line">credential.helper=store</span><br></pre></td></tr></table></figure><h4 id="git-config-–local-l"><a href="#git-config-–local-l" class="headerlink" title="git config –local -l"></a>git config –local -l</h4> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ git config --<span class="built_in">local</span> -l</span><br><span class="line">  core.repositoryformatversion=0</span><br><span class="line">  core.filemode=<span class="literal">false</span></span><br><span class="line">  core.bare=<span class="literal">false</span></span><br><span class="line">  core.logallrefupdates=<span class="literal">true</span></span><br><span class="line">  core.symlinks=<span class="literal">false</span></span><br><span class="line">  core.ignorecase=<span class="literal">true</span></span><br><span class="line">  branch.master.remote=origin</span><br><span class="line">  branch.master.merge=refs/heads/master</span><br><span class="line">  user.name=your username </span><br><span class="line">  user.email=&lt;your email&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Node》- node安装与卸载</title>
      <link href="/2020/01/16/front_skills/node/%E3%80%8ANode%E3%80%8B-node%E5%AE%89%E8%A3%85%E4%B8%8E%E5%8D%B8%E8%BD%BD/"/>
      <url>/2020/01/16/front_skills/node/%E3%80%8ANode%E3%80%8B-node%E5%AE%89%E8%A3%85%E4%B8%8E%E5%8D%B8%E8%BD%BD/</url>
      
        <content type="html"><![CDATA[<h3 id="mac环境下，pkg包安装"><a href="#mac环境下，pkg包安装" class="headerlink" title="mac环境下，pkg包安装"></a>mac环境下，pkg包安装</h3><h4 id="nodejs-官网下载"><a href="#nodejs-官网下载" class="headerlink" title="nodejs 官网下载"></a><a href="https://nodejs.org/en/">nodejs 官网下载</a></h4><h4 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; which node</span><br><span class="line">/User/&lt;your&#x27;s-user-name&gt;/.nvm/versions/node/&lt;latest-node-lts-version&gt;/bin/node</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; node -v</span><br><span class="line">v10.16.3</span><br></pre></td></tr></table></figure><h4 id="pkg卸载"><a href="#pkg卸载" class="headerlink" title="pkg卸载"></a>pkg卸载</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rm -rf /usr/local/&#123;bin/&#123;node,npm&#125;,lib/node_modules/npm,lib/node,share/man/*/node.*&#125;</span><br></pre></td></tr></table></figure><h3 id="brew-安装node"><a href="#brew-安装node" class="headerlink" title="brew 安装node"></a>brew 安装node</h3><h4 id="brew-search"><a href="#brew-search" class="headerlink" title="brew search"></a>brew search</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt; brew search node </span><br><span class="line"></span><br><span class="line">==&gt; Formulae</span><br><span class="line">leafnode            node-build          node@8              nodenv</span><br><span class="line">libbitcoin-node     node-sass           node_exporter</span><br><span class="line">llnode              node@10             nodebrew</span><br><span class="line">node                node@12             nodeenv</span><br><span class="line"></span><br><span class="line">==&gt; Casks</span><br><span class="line">nodebox                    nodeclipse                 soundnode</span><br></pre></td></tr></table></figure><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install node@12</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 建立软连接</span><br><span class="line">&gt; ln -s ~/.nvm/versions/node/ /usr/local/Cellar/</span><br></pre></td></tr></table></figure><h4 id="brew-卸载node"><a href="#brew-卸载node" class="headerlink" title="brew 卸载node"></a>brew 卸载node</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; brew uninstall node --ignore-dependencies </span><br><span class="line">Error: No such keg: /usr/local/Cellar/node</span><br></pre></td></tr></table></figure><p>解决方法：<br> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew uninstall node --force</span><br></pre></td></tr></table></figure></p><h3 id="mac-nvm-安装node"><a href="#mac-nvm-安装node" class="headerlink" title="mac nvm 安装node"></a>mac nvm 安装node</h3><h4 id="脚本安装"><a href="#脚本安装" class="headerlink" title="脚本安装"></a>脚本安装</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh | bash</span><br></pre></td></tr></table></figure><h4 id="brew-install-nvm"><a href="#brew-install-nvm" class="headerlink" title="brew install nvm"></a>brew install nvm</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install nvm </span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&gt; nvm ls-remote</span><br><span class="line">     ...</span><br><span class="line"> v10.16.2   (LTS: Dubnium)</span><br><span class="line">-&gt;   v10.16.3   (LTS: Dubnium)</span><br><span class="line"> v10.17.0   (LTS: Dubnium)</span><br><span class="line"> v10.18.0   (Latest LTS: Dubnium)</span><br><span class="line"> ...</span><br><span class="line"> v11.9.0</span><br><span class="line"> v11.10.0</span><br><span class="line"> ....</span><br><span class="line"> v12.0.0</span><br><span class="line"> v12.1.0</span><br><span class="line"> ...</span><br><span class="line"> v12.13.0   (LTS: Erbium)</span><br><span class="line"> v12.13.1   (LTS: Erbium)</span><br><span class="line"> v12.14.0   (Latest LTS: Erbium) </span><br><span class="line">     ...</span><br><span class="line">v13.4.0</span><br><span class="line">v13.5.0</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; nvm ls-remote --lts=Erbium</span><br><span class="line">       v12.13.0   (LTS: Erbium)</span><br><span class="line">       v12.13.1   (LTS: Erbium)</span><br><span class="line">       v12.14.0   (Latest LTS: Erbium)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm install v12.13.0</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; nvm current </span><br><span class="line">v10.16.3</span><br></pre></td></tr></table></figure><h4 id="常用nvm命令"><a href="#常用nvm命令" class="headerlink" title="常用nvm命令"></a>常用nvm命令</h4><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>nvm –help</td><td>展示帮助信息</td></tr><tr><td>nvm –version</td><td>查看nvm版本</td></tr><tr><td>nvm install [-s] [version]</td><td><strong>安装特定版本node</strong></td></tr><tr><td>nvm install     –reinstall-packages-from&#x3D;[version]</td><td>重新安装特定版本</td></tr><tr><td>nvm install  –lts</td><td>选择最新的LTS版本安装</td></tr><tr><td>nvm install      –lts&#x3D;[LTS name]</td><td><strong>选择特定的LTS版本安装</strong></td></tr><tr><td>nvm install   –skip-default-packages</td><td>跳过默认包安装</td></tr><tr><td>nvm install       –latest-npm</td><td>安装完毕，顺带更新npm</td></tr><tr><td>nvm install –no-progress</td><td>静默安装，不显示进度条</td></tr><tr><td>nvm uninstall [version]</td><td>** 卸载特定版本**</td></tr><tr><td>nvm uninstall –lts</td><td>卸载最新的LTS版本</td></tr><tr><td>nvm uninstall –lts&#x3D;[LTS name]</td><td>**  卸载特定的LTS版本**</td></tr><tr><td>nvm use [–silent] [version]</td><td><strong>切换node版本</strong></td></tr><tr><td>nvm use –lts</td><td>使用最新的LTS版本</td></tr><tr><td>nvm use –lts&#x3D;[LTS name]</td><td>使用特定的LTS版本</td></tr><tr><td>nvm exec [–silent] [version] [command]</td><td>使用特定node版本作为执行上下文</td></tr><tr><td>nvm exec  –lts</td><td>使用最新node LTS版本作为执行上下文</td></tr><tr><td>nvm exec  –lts&#x3D;[LTS name]</td><td>使用特定LTS node版本作为执行上下文</td></tr><tr><td>nvm run [–silent] [version] [args]</td><td>使用参数args代入版本node上下文执行命令</td></tr><tr><td>nvm run  –lts</td><td>使用最新LTS版本</td></tr><tr><td>nvm run  –lts&#x3D;[LTS name]</td><td>使用特定LTS版本</td></tr><tr><td>nvm current</td><td>** 展示当前使用的node版本**</td></tr><tr><td>nvm ls [version]</td><td><strong>展示已安装的node版本</strong></td></tr><tr><td>nvm ls  –no-colors</td><td>不使用颜色区分输出内容</td></tr><tr><td>nvm ls  –no-alias</td><td>仅仅输出版本号，不输出额外信息</td></tr><tr><td>nvm ls-remote [version]</td><td><strong>列出可供安装的node版本</strong></td></tr><tr><td>nvm ls-remote  –lts</td><td>列出最新的LTS版本</td></tr><tr><td>nvm ls-remote  –lts&#x3D;[LTS name&gt;]</td><td><strong>列出特定名称LTS版本</strong></td></tr><tr><td>nvm ls-remote  –no-colors</td><td>不颜色区分输出</td></tr><tr><td>nvm version [version]</td><td>查看nvm版本</td></tr><tr><td>nvm version-remote [version]</td><td>查看源特定版本信息</td></tr><tr><td>nvm version-remote  –lts</td><td>查看源最新LTS版本信息</td></tr><tr><td>nvm version-remote  –lts&#x3D;[LTS name&gt;]</td><td>查看源特定LTS版本信息</td></tr><tr><td>nvm deactivate</td><td>Undo effects of <code>nvm</code> on current shell</td></tr><tr><td>nvm alias [pattern]</td><td>正则查找别名</td></tr><tr><td>nvm alias  –no-colors</td><td>Suppress colored output</td></tr><tr><td>nvm alias [name] [version]</td><td><strong>特定版本设置别名name</strong></td></tr><tr><td>nvm unalias [name]</td><td><strong>移除之前的设置的版本别名</strong></td></tr><tr><td>nvm install-latest-npm</td><td>更新node下的npm包</td></tr><tr><td>nvm reinstall-packages [version]</td><td>重新更新node下npm包</td></tr><tr><td>nvm unload</td><td>shell下卸载nvm</td></tr><tr><td>nvm which [current  [version]]</td><td>展示node path路径</td></tr><tr><td>nvm cache dir</td><td>展示nvm的缓存路径</td></tr><tr><td>nvm cache clear</td><td>清空nvm缓存</td></tr></tbody></table><h4 id="软连接作用"><a href="#软连接作用" class="headerlink" title="软连接作用"></a>软连接作用</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; ln -s ~/.nvm/versions/node/&lt;latest-node-lts-version&gt;/ /usr/local/Cellar/node</span><br></pre></td></tr></table></figure><h4 id="nvm-卸载-node"><a href="#nvm-卸载-node" class="headerlink" title="nvm 卸载 node"></a>nvm 卸载 node</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; nvm uninstall v10.16.2</span><br><span class="line">Uninstalled node v10.16.2</span><br></pre></td></tr></table></figure><h4 id="yarn安装"><a href="#yarn安装" class="headerlink" title="yarn安装"></a>yarn安装</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># yarn 安装</span><br><span class="line">curl -o- -L https://yarnpkg.com/install.sh | bash  </span><br></pre></td></tr></table></figure><h4 id="卸载nvm"><a href="#卸载nvm" class="headerlink" title="卸载nvm"></a>卸载nvm</h4><p> 删除 ~&#x2F;.nvm 文件夹即可</p><h3 id="windows下nvm"><a href="#windows下nvm" class="headerlink" title="windows下nvm"></a>windows下nvm</h3><h4 id="nvm命令"><a href="#nvm命令" class="headerlink" title="nvm命令"></a>nvm命令</h4><p><img src="https://user-gold-cdn.xitu.io/2020/1/8/16f857c735d63cb4?w=680&h=292&f=png&s=105039" alt="nvm"></p><h4 id="nvm-安装node"><a href="#nvm-安装node" class="headerlink" title="nvm 安装node"></a>nvm 安装node</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm install 10.16.3</span><br></pre></td></tr></table></figure><h4 id="查看可用列表"><a href="#查看可用列表" class="headerlink" title="查看可用列表"></a>查看可用列表</h4><p><img src="https://user-gold-cdn.xitu.io/2020/1/8/16f857b7da16156a?w=680&h=403&f=png&s=81697" alt="nvm node list"></p><h3 id="linux-下安装nvm"><a href="#linux-下安装nvm" class="headerlink" title="linux 下安装nvm"></a>linux 下安装nvm</h3><h4 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install git -y</span><br></pre></td></tr></table></figure><h4 id="下载nvm"><a href="#下载nvm" class="headerlink" title="下载nvm"></a>下载nvm</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git://github.com/creationix/nvm.git ~/nvm</span><br></pre></td></tr></table></figure><p><img src="https://user-gold-cdn.xitu.io/2020/1/8/16f85b3f39be0a88?w=680&h=263&f=png&s=72222"></p><h4 id="编译安装nvm"><a href="#编译安装nvm" class="headerlink" title="编译安装nvm"></a>编译安装nvm</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#设置nvm 自动运行;</span><br><span class="line">echo &quot;source ~/nvm/nvm.sh&quot; &gt;&gt; ~/.bashrc</span><br><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure><h4 id="验证nvm"><a href="#验证nvm" class="headerlink" title="验证nvm"></a>验证nvm</h4><p><img src="https://user-gold-cdn.xitu.io/2020/1/8/16f85b54f72a0a03?w=680&h=387&f=png&s=143116" alt="nvm version"></p><h4 id="mac-rar"><a href="#mac-rar" class="headerlink" title="mac rar"></a>mac rar</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">brew cask install keka</span><br><span class="line">brew cask install rar </span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Hexo》- introduction</title>
      <link href="/2020/01/08/%E3%80%8AHexo%E3%80%8B-%20introduction/"/>
      <url>/2020/01/08/%E3%80%8AHexo%E3%80%8B-%20introduction/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h4 id="install-node"><a href="#install-node" class="headerlink" title="install node"></a>install node</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.34.0/install.sh | bash </span><br><span class="line"></span><br><span class="line">// or </span><br><span class="line">brew install nvm </span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="install-hexo"><a href="#install-hexo" class="headerlink" title="install hexo"></a>install hexo</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g </span><br></pre></td></tr></table></figure><h4 id="validate"><a href="#validate" class="headerlink" title="validate"></a>validate</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ hexo -v</span><br><span class="line">hexo: 4.2.0</span><br><span class="line">hexo-cli: 3.1.0</span><br><span class="line">os: Darwin 19.3.0 darwin x64</span><br><span class="line">http_parser: 2.9.3</span><br><span class="line">node: 10.19.0</span><br><span class="line">v8: 6.8.275.32-node.55</span><br><span class="line">uv: 1.28.0</span><br><span class="line">zlib: 1.2.11</span><br><span class="line">brotli: 1.0.7</span><br><span class="line">ares: 1.15.0</span><br><span class="line">modules: 64</span><br><span class="line">nghttp2: 1.39.2</span><br><span class="line">napi: 5</span><br><span class="line">openssl: 1.1.1d</span><br><span class="line">icu: 64.2</span><br><span class="line">unicode: 12.1</span><br><span class="line">cldr: 35.1</span><br><span class="line">tz: 2019c</span><br></pre></td></tr></table></figure><h3 id="show-hello-world"><a href="#show-hello-world" class="headerlink" title="show hello world"></a>show hello world</h3><h4 id="init-project"><a href="#init-project" class="headerlink" title="init project"></a>init project</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init hexo-demo</span><br></pre></td></tr></table></figure><h4 id="run-server"><a href="#run-server" class="headerlink" title="run server"></a>run server</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a><br>Visit url at <a href="http://localhost:4000/">http://localhost:4000</a></p><h3 id="Deploy-to-GitHub"><a href="#Deploy-to-GitHub" class="headerlink" title="Deploy to GitHub"></a>Deploy to GitHub</h3><h4 id="create-a-new-post"><a href="#create-a-new-post" class="headerlink" title="create a new post"></a>create a new post</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>Can we config the default post at _config.yml.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">default_layout: post</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h4 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>hexo generate can simple as hexo g </p><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h4 id="config-GitHub-yourname-github-io"><a href="#config-GitHub-yourname-github-io" class="headerlink" title="config GitHub yourname.github.io"></a>config GitHub yourname.github.io</h4><h4 id="config-deploy-repository"><a href="#config-deploy-repository" class="headerlink" title="config deploy repository"></a>config deploy repository</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: &#x27;&#x27;</span><br></pre></td></tr></table></figure><h4 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>hexo deploy can simple as hexo d </p><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Hex </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
